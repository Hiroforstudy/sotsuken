Ok, that was pretty stupid of me. I guess Cactus wasn't really ready for the public, which didn't stop Werner :-) Thanks for fixing this!
Whoops, didn't even notice there was already a pull request for this!  Closing...
This looks great! Thanks!
I can not find extras folder anywhere in latest trunk. How to add extra django templatetags?
Ah yeah, I _think_ you can just add a plugin file and do it from in there. Maybe put it in the preBuild function.
Can we reopen this issue please?

If I have to do it preBuild I will have to try to create a django app containing my templatetags, put it in path somewhere, and do a:

``` python
def preBuild(site):
    from django.conf import settings
    settings.INSTALLED_APPS.append("myapp")
```

Django has deprecated django.contrib.markup, and it is used by Site.setup() method. I believe that should be better implemented as a templatetag. 

Taking these two into consideration, we may be better off by shipping with a django app, that gets preconfigured by Site.setup(), and is stored in plugins may be. 

I can work on a pull request if this sounds reasonable. 

Also how do you build the skeleton.py data? I mean is there some build script for this? Just curious.
That sounds like a plan.

You can generate the skeleton data with `make skeleton`. I hate the way that works now, but the setuptools are such a mess with extra resources that this was the only way I could make it work reliably.

I can't seem to re-open this issue, so feel free to make a new one.
> I can't seem to re-open this issue, so feel free to make a new one.

[Created](https://github.com/koenbok/Cactus/issues/31).
Included invalid commits
This is great! Thanks! I saw this bug at a friends' machine sometime but I had no good idea what was going on. So good catch!
My pleasure. Thanks for building and maintaining this tool. Works great!

On Thu, Oct 25, 2012 at 11:10 AM, Koen Bok notifications@github.com wrote:

> This is great! Thanks! I saw this bug at a friends' machine sometime but I
> had no good idea what was going on. So good catch!
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/koenbok/Cactus/pull/13#issuecomment-9783612.

## 

-Ryan

Ryan Bagwell
5219 Shorecrest Drive
Middleton, WI 53562
(608) 466-6195 (v)
(443) 458-7202 (f)
Thanks!
Thanks!
By the way, the reason to move it to build is that I sometimes found myself and others editing the generated files and get pretty confused :-)
Thanks
Yeah this is pretty handy, we should add it to the blog example because it does not really apply to the standard template.

For the cname we can do a pretty good guess as todays requirement for s3 is that the bucket name needs to be the cname hostname. But then again maybe we should not build on that.

It would be great to have the fields filled with some sensible defaults (title something like "My Blog Feed" or something).
Cool. I've got some more stuff to play with, but I'll clone the Blog template and make a pull request into that.

Thanks for the kick in the pants I needed to get back into blogging (and python!)
Ha, thanks. And thanks for contributing.
seeing as this doesn't update your CactusBlog example, you may wish to consider adding that example blog to the cactus tree with links to the current plugin directory, or using a submodule to pull current plugins...
Thanks. I might add a small description to the file for people who don't know what this is and install instructions.
Hey this is cool thanks!

Two requests:
- Could you add some really simple instructions on how to install dependencies in a comment header?
- Could you clean up the formatting (empty lines around 16) a bit?

Thanks again!
No problem!
I cleaned  the code. 

### How to:
- Install HamlPy (https://github.com/jessemiller/HamlPy)  
- .haml files will compiled to .html files
Thanks!
Nice! I'm just wondering if the name "syntax" isn't too generic. Maybe "rest-syntax-highlight.py"?

I'm also wondering if I should include every possible plugin by default, maybe I should make a cactus plugin repo...
> I'm also wondering if I should include every possible plugin by default, maybe I should make a cactus plugin repo...

There is a good reason not to, which is if we started doing that then we ll have to do a much frequent release than necessary. I feel there would be lot more changes in plugins folder compared to rest of the code base. Since plugins are just python files may be we can create a wiki page where people can list gist/github url/blog urls where plugins can be downloaded from.
+1 for making a place for plugins to live outside the main codebase
+1 on a plugin repo
any reason this hasn't been merged? playing around with cactus and pulled this in. seems to be working well for me.
Not merged because I think it belongs in a separate cactus plugin/goodies repo. I'll try to setup one soon.
Thanks!
That should work much better.
Thanks!
Oops, I should have started using git flow stuff from beginning. I guess I ll have to wait till first pull request is accepted. Next pulls requests would be cleaner I promise :-)
My justification for not using config.json already there: it contains sensitive data, I expect to checkin config file along with rest in public places. As mentioned in another issue I feel entire s3 support should go in favor of s3cmd based solution, which means we should get rid of config.json, config.py and site.upload() method.
+1 for ability to set extra site configuration variables. For example, I want to be able to use [Markdown Extensions](http://packages.python.org/Markdown/extensions/index.html) and [Typogrify](https://github.com/mintchaos/typogrify). Currently getting by with [requiring typogrify in setup.py](https://github.com/hypertexthero/Cactus/commit/63b811f96f28f0f32ad872d406db3546ebb5280d) and [adding it to installed apps in site.py](https://github.com/hypertexthero/Cactus/commit/c10b1bbba83f9ae4b6453af6139676f16cd31114) to be able to write posts [like these](https://github.com/hypertexthero/CactusBlog/commit/58c00ccf3e4684eaaa1db1788a19b659b342a3f7).
I've left this here way too long without commenting, but I'm hesitant to add this because it adds a lot of complexity in my mind (an extra second config file, a new library, a new syntax to understand).
I just tried these changes on my old Win7/64-bit box and they work fantastic. I did have to modify a plugin I wrote to use backslashes (\) for Windows-style directories, but that was it. Thank you, ogsy! +1
Hmpf, sometimes I need to pay better attention to pull requests. I basically duplicated all this work because I didn't see it in time :-/
Ha, no worries.  You probably did a better job than me anyway. :)
I’m running into the same issue with a blog plugin I’m writing. I’d like to keep post-specific data (images, etc.) in the same directory as the blog post’s markdown file.
This appears to be a PR against v2. I apologize but will have to close it. 

Feel free to open an issue against v3 if it's an issue there as well for you.!

Cheers,
I see what you are trying to do. But maybe we can generalize this a bit more with something that just gives you a list of files in a given directory that you can optionally list by type. Let's say we call this `fileList(path, type=None, level=0)`.

Now you could do:

```
{% for imageName in fileList "static/blog-post-images/" + post.slug, ["jpg", "png"] %}
    <img src="{{ STATIC_URL }}/{{ imageName }}" alt="" />
{% endfor %}
```
Your more generalized approach would be a lot better! I'm afraid that I don't yet have the python skills to make this change, though.
No worries, it's cool to see that you could make a simple plugin for your specific goal anyway. I'm looking into setting up a repo for basically _every_ plugin, because while I want to keep the default set small someone might have the exact same problem as you or might be inspired by your solution.
I'm okay if people want to do this, but I don't want it by default for security reasons.
You have to be kidding me... :-)
Haha ok you are very right. This is definitely going in my top 5 of 2013 wtf moments...
Thanks for catching this and taking the time to report it!
> Haha ok you are very right. This is definitely going in my top 5 of 2013 wtf moments...

Don't worry, it's still quite early in the year. ;)
Thanks!
This is a great idea that I wanted to do for some time. Give me some time to look at the diff.
ok, i think i fixed those issues, and added some more sugar as well. I think I've tested each case (no arg, local dir, local zip, local tar, url zip, and url tar) but it wouldn't hurt for someone else to do it too...
FWIW, a friend pointed me to Middleman's method for handling diverse templates. There's a bit of an appeal to the shorter form of the argument and the idea that they are listable... might be a thought for a future iteration?

http://middlemanapp.com/getting-started/#toc_6
Yeah I wanted that too. I think just a hosted file with handle, description and github repo would be pretty ideal.
Thanks!
Okay, we'll take a look at alternative solutions, and create a new pull request if we come up with something.
Cheers, great work on this!
I think this is nice, but a little bit too opinionated to include as a default. For example, I like to just include an analytics.html file in my base template where I add all the js code for any analytics app I like that day.
I know a smart copy would have been preferable but a conditional one was easier.

BTW: I left in the code
            # If there is a folder, replace it with a symlink
            if os.path.lexists(staticBuildPath) and **not** os.path.exists(staticBuildPath):
                os.remove(staticBuildPath)

but think it should probably be
            # If there is a folder, replace it with a symlink
            if **not** os.path.lexists(staticBuildPath) and os.path.exists(staticBuildPath):
                os.remove(staticBuildPath)

I did not change it because I could not test it because I am on Windows.
I'm fine with that for now. Two more small requests. Sorry for nitpicking.
- I'd rather have you test wether we're on windows with the platform module: http://docs.python.org/2/library/platform.html
- Could you make sure you use camel casing and the rest of the coding styles? (For example os_symlink -> osSymlink). I'm not married to one but I'd like to keep it consistent, at least within files.
Hi Koen
Point 2: sure I will camel case it.
Point 1: would you reconsider? IMO it is more pythonic to branch on whether the Python library has a particular capability (creating a symlink in this case) and use it if present, otherwise fall back to something less optimal. This is platform independent and future-proof:should more platforms be added in future the code will not break if they do not support the capabilityshould Windows versions of the Python library have the capability added in future the code will automagically work the preferred way (will symlink rather than copy in this case)However, it's your decision, obviously.
BTW I am now up and running with Cactus so thank you very much for it. I am a small Django developer who works by himself. Cactus will help me with two scenarios: 
I have a customer who says they only want (or can only afford) a small static site but I know it will grow and they will want full Django later.I have a customer who is indecisive who I need to get prototype pages to quickly to firm up spec.
all the bestGary

Date: Fri, 3 May 2013 11:52:04 -0700
From: notifications@github.com
To: Cactus@noreply.github.com
CC: gary@aardweb.co.uk
Subject: Re: [Cactus] Fixed cactus build command not working on Windows (#52)

I'm fine with that for now. Two more small requests. Sorry for nitpicking.

I'd rather have you test wether we're on windows with the platform module: http://docs.python.org/2/library/platform.html
Could you make sure you use camel casing and the rest of the coding styles? (For example os_symlink -> osSymlink). I'm not married to one but I'd like to keep it consistent, at least within files.

—
Reply to this email directly or view it on GitHub.
You make a good point. Let's do it your way :-)
Thanks Koen :-)

I hope that last commit was OK. I should possibly have done an "amend last commit" instead but wasn't sure if that is possible after a push, or indeed whether that would be the right thing anyway. I'm a git newb so my mental model is a little shaky. Apologies if I got it wrong.
Ah cool sorry I did not figure that out :-)
Nice, quite a few people were asking for this. Let me look through the code a bit.
Sorry this is taking long. I think I'm going to wrap this in a 2.0 release.
@koenbok - just wondering if i18n support made it into 2.x per your previous comment?
Hey there,

i18n is fully supported in v3. I'll be closing this down since it targets v2.

Cheers,
Hey there,

This PR targets v2, so I'll have to close it (development is now done on v3). IIRC, there is sitemap support in v3, but let me know if otherwise.

Cheers,
This is nice, but to add it to the general distribution I would like to see a more flexible approach. For example a django template tag that you can just add to a page that loads a specific csv file in that pages' context and makes it available. It should also handle errors nicely.
Thanks Jason!
Hey Fran,

Just a note that we're working on a new release of Cactus, which will include pluggable deployment engines, which avoids massive if-branches.

Would you mind looking at how this could integrate with https://github.com/koenbok/Cactus/tree/v3 ?

Cheers,
I will try :D
:+1:
Matter of preference: I use [grunt](http://gruntjs.com/) with a few plugins (svgo, scss, closure-compiler, yui-compressor) to do this all before pre-deploy. It allows for a lot of flexibility around how files are minified and where they’re dumped.

This plugin would be super awesome if it added a css/js template tag that changed the file URL to the compressed URL on deploy a la [django-compressor](https://github.com/jezdez/django_compressor).
to be clear, this _does_ change the file urls on deploy. No template syntax though. Instead I opted for automatic packaging based on what gets included across _every_ page of the site.

I would almost prefer to use template directives to blacklist a region, rather that specifying which files I want to compress (I support blacklisting via the data-nopackage attribute, but it's not as cool).

Yeah, grunt is pretty sweet!
Wow this is pretty sweet Jason! I'll merge this.

We're currently working on Cactus 3 which changed quite a bit (although should be mostly compatible) and you might have to change some small things for this to work again. You can find the source here: https://github.com/koenbok/Cactus/tree/v3
Mike, in Cactus v3 we made a static directive that would allow us to do pre processing more easily. We already added fingerprinting to it too.
Note that pre-processing itself (including minification) is already in
Cactus v3 too ; )

We also have support for integration with tools that merge multiple files
(e.g. require.js)

Cheers,

On Fri, Oct 4, 2013 at 12:46 PM, Koen Bok notifications@github.com wrote:

> Mike, in Cactus v3 we made a static directive that would allow us to do
> pre processing more easily. We already added fingerprinting to it too.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/koenbok/Cactus/pull/60#issuecomment-25690497
> .
yeah, parts of this definitely become irrelevant if you use dependency management like require.js. But this does pretty well for basic cases, letting you include as many css/js files in your markup as you need to without having to worry about extra request overhead.

Looking forward to checking out v3!
@koenbok ah man, that sounds rad. I still need to take the v3 branch for a spin.
I was able to benefit from this not only on package.py but also on a couple of my personal plugins that produce autogen files within /static.
Hey there,

This PR targets v2, so I'll have to close it down (since v3 is where development is now being done).

It should be pretty easy to make the build path configurable in v3, though. You'll probably want to start here:

https://github.com/koenbok/Cactus/blob/a8a0f8d4f02846fdba9881462d4718715dd9a8d0/cactus/site.py#L125

Cheers,
:+1: This is a nicer approach

In the meantime, I've used the following IAM permissions:

``` json
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "s3:*",
      "Resource": "arn:aws:s3:::mybucketname/*"
    },
    {
      "Effect": "Allow",
      "Action": [
        "s3:GetBucketLocation",
        "s3:ListAllMyBuckets"
      ],
      "Resource": "arn:aws:s3:::*"
    }
  ]
}
```
Hey there,

Unfortunately, new development is being done in v3, not v2 (which this PR targets), so I'll have to close this.

It should actually be very easy to address this in v3, by rewriting this method:

https://github.com/koenbok/Cactus/blob/a8a0f8d4f02846fdba9881462d4718715dd9a8d0/cactus/deployment/s3/engine.py#L54-L61

Cheers,
Hey there,

Those two things should have been fixed in Cactus v3! Please do reopen if an issue if they're still a problem.

Cheers,
Thanks
@ahmedelgabri Any reason why you're not just upgrading to jQuery 2.x?
@commadelimited No reason to be honest, I just found that they were using 2 different versions of jQuery 1.x so I just upgraded it to latest & made both use the same version.
Thanks!
Thanks!
Thanks!
Any update on this? Does it requires further changes?
Tests pass using Cactus 3.0.2 with Django 1.6.11 after merging this change. I'll be using it in the FreeBSD Port for Cactus. Can someone please merge this and update requirements to allow Django >=1.5.5,<1.7

@Alir3z4 You could update this PR to include the above requirements changes too for completeness.
- 3.0.2/1.6.11 - Ran 123 tests in 22.212s OK
- 3.0.2/1.7.10 - Ran 123 tests in 11.487s - FAILED (errors=45)
  - ImportError: cannot import name add_to_builtins fixed by https://github.com/jezdez/django-hosts/issues/31
  - AppRegistryNotReady: Apps aren't loaded yet.
@Alir3z4 Please rebase your changes again master so we can get this merged :)
@koobs , @Alir3z4 , I'm doing those changes in #186. 

Updating to Django 1.7 would be more difficult, mainly because it'd involve dropping support for Python 2.6.

Cheers,
Hey @chaudum, thanks for the suggestion,

I'll be a bit wary here since this actually used to work this way, but had changed.

cc @koenbok — do you know how much faster this had made the build? https://github.com/koenbok/Cactus/commit/fa1a08aed5bc6659304097d5ad7e653c553c1b11

If the speed gain is significant, I guess graciously falling back might be preferable (or possibly using `md5sum`).

Cheers,
I changed it so that it uses `md5` if available, otherwise fallback to `md5sum`.
I'm still a bit concerned considering that we're now creating two subprocesses (`which`, then the actual `md5[sum]` one) every time we're computing a checksum. 

I feel we need to measure this to know what our speed gains are, otherwise we might end up wasting cycles trying to do the smart thing. I'll try to do  that over the weekend, unless you'd like to get to it first?

Cheers,
I actually did some tests with this for another project and it's less performant then something like this: http://stackoverflow.com/questions/7829499/using-hashlib-to-compute-md5-digest-of-a-file-in-python-3

So we should change it back. I initially did it because calculating md5s for big files took a ton of memory. Typical example of me trying to be smart and making it less good :-)
@koenbok Thanks! We should probably go with @chaudum's original commit then (https://github.com/chaudum/Cactus/commit/5de20d0cc2cb0f6164f1af10009a09ca9e42a72c)

@chaudum — mind updating the PR with just that one? : )

Thanks!
@krallin @koenbok ok, will update the PR then
made the change slightly more pythonic than the initial commit.
Guys,

Just a quick note on this. This change is probably not what we want. The following code:

```
    for buf in fp.read(65536):
        hasher.update(buf)
```

Doesn't do what we want for two reasons:
- It only reads `65536` chars at maximum.
- It iterates over every single character and adds it to the hasher.

What we want probably looks a lot more like this:

```
     while True:
         buf = fp.read(65536)
         if not buf:
             break
        hasher.update(buf)
```

I found this issue while working on Python 3 compatibility (where iterating over bytestring returns integers, not 1-char bytestrings). ' might add failing test, and will fix the bug.

Cheers,
OK, I think this has been brewing for a while, so let's merge Python 3 support in.
Oooh, that's pretty cool : )

Thanks for open-sourcing your site, guys. This should indeed be helpful for new users.

May I ask what version of Cactus you tested it against? This might be relevant to include.

Cheers,
we've been developing it against the beta version of v3.
version 3 became public just before we released the new site.
Excellent! Thanks again for open-sourcing it as an example.

Cheers,
bump
This would have been very helpful :). I ended up having to read the source to find this out.
![alt text](http://i0.kym-cdn.com/photos/images/original/000/419/124/515.jpg)
Hi there, and apologies for the delay in getting back to you.

My concern here is that adding more and more stuff to the README isn't tenable in the long run. 

There's a growing number of options, most of them are rather poorly documented (as you observed), and just dumping everything in the README isn't going to really help.

Now, your PR definitely makes things _better_ (albeit not _perfect_), so I'll merge it now. We can look at adding better organized docs afterwards. Thanks and — once again — apologies about the delay in getting back to you. 

Cheers,
This is a stupid idea, didn't see the filter markdown already implemented.
@koenbok can you please merge it?
I'd like to contribute a .gitignore file to the project skeleton.
Thanks, @kartoch!

Cheers,
Hi there,

This syntax won't work on Python 2.6, mind using `{0}` instead of `{}`?

Just logging the exception might not be extremely useful though. Can you share the type of output this produces for you? It might be better to just include the stacktrace in the error line with `exc_info=True`. 

Cheers,
Oh sure, `{0}` is better.

I had errors in my json-file (no outer braces, spurious comma, things like that) and got just a `Unable to load configuration at config.json`. At first I suspected some problem with file access, wrong working directory or similar problems. When I changed the code like this, I got `Extra data: line 1 column 14 - line 9 column 1 (char 13 - 77)` or `Expecting property name: line 9 column 1 (char 78)`. Then I could fix my config.json.

Maybe for others the stacktrace might be useful, but for me, I was happy with just the exception.
@jammon 

Can you try with `exc_info = True` in the earlier logging call and check whether the output is as useful? 

Alternatively, we might want to special case `ValueError` (and use your error message), and fall back to a stacktrace otherwise.

Thoughts?
Also, in practice we should probably update both these calls to not use string formatting as well and use:

```
logger.error("foo %s", bar)
```
Please change the code to your liking, I'm sure you know more of it than I do. I just wanted to fix a problem that bit me. 

Where do I have to put the `exc_info = True`?
(I will come back tomorrow, private duties.)
Obviously you are right about the `ValueError`. Are there any exceptions left that could possibly be raised? I don't think so.
When talking about the code, I read it more closely. Do you mind renaming `ConfigFile._dirty` to `ConfigFile._unsaved`? I think this conveys better the meaning of this property.
A few things:
- I'd rather we _don't_ rename `_dirty` to `_unsaved`. "Dirty" is very standard for something that was changed and not saved yet, but more importantly, we should avoid making changes that are purely cosmetic (someone might depend on that variable — obviously they shouldn't —, but let's not change it just for the sake of changing it). 
- Can you use `ValueError as e` instead of `ValueError, e`? `ValueError, e` won't work on Python 3, which we're working on supporting (https://github.com/koenbok/Cactus/pull/115)
- Can you try and add tests for this?
I understand your point about `_dirty`, although I don't consider it a purely cosmetic change. Clarity of names is a plus for somebody who is new to the project. But I don't want to be pedantic about that, so I changed it back.

Thanks for the hint on `ValueError as e`. I wrote tests, but I had to introduce a new dependency for the tests (testfixtures).
Hey there,

I pulled this in with some changes (d5e3877ccbf9ba5aab072a63d24a51d0bd5a50ed). Thanks for the work here!

Cheers,
Hi @jammon, and thanks for taking the time to contribute,

I commented on the times themselves, but here are more generic comments:
- It looks like there are two set of changes here: page context and the page list. Do the two need to be bundled in the same PR?
- Can you clarify what you mean by changing the page context to something closer to what you expected? What didn't work in the old system, why do you want to change it?

Note that we might not want to risk breaking compatibility with existing sites. 

Cheers,
- The changes on page_context build on having the page data as an attribute, and this means not reading it from the file whenever accessed, which was expected by the old behaviour of `Site.pages()`.
- I wrote a test case (`tests/data/colon-in-the-first-line.html`) that fails in the old system and fixed that behaviour. Now I even found a [specification for the metadata extension of Python Markdown](http://pythonhosted.org//Markdown/extensions/meta_data.html) that describes what I had in mind.
Thanks,

I'll look into those changes into more detail over the weekend (don't have more time right now unfortunately).

Regarding the behavior change to the context system. Unfortunately there may be users relying on the old system, and I'm not big on just breaking backwards compatibility like this. 

I understand your expectations might differ (and I'd personally share your POV here), and that the Python Markdown extension processes metadata differently, but that doesn't mean Cactus _has_ to do so as well (we don't really use Python Markdown for starters). 

I think the right approach here would be to break this system out of `Page` and into a plugin, and make it optional but enabled by default.

Thoughts?
The specs of [markdown2 metadata extra](https://github.com/trentm/python-markdown2/wiki/metadata) look even different.

Putting the metadata / page context into a plugin is probably the right way.
I'll close this PR since you're working on #141 instead. Thanks!
I'd rather you set `_data` to `None` (either in `__init__` or in the `class` definition) and check for `None`. Functionally equivalent an plays much better with with refactoring tools.
Why access `_data` when you have the wrapper `data()` method?
Same as above
This alters `_data`, so it seems like we rely implicitly on `parse_context` being called to have the right page body in `_data`. Can you confirm? If so, this probably isn't desirable. You should load both `_data` and `_page_context` once.
Can you explain why those changes are needed? 

I understand the changes in `page.py` (the whole `page_context` system is poorly engineered), but can you justify these as well, and why the two need to be in the same PR?
Does this _need_ to be a separate class?
You are right, this changes `_data`. Maybe I should distinguish `content`from `data`.
I think that you might as well parse the context when loading the page itself. There doesn't seem to be a use case for separating those two steps.

You could probably separate the whole page loading and parsing logic from the page object itself.
`tests.test_template_tags.TestMarkdown` changes files and builds an existing Site five times. So the page list has to be read for every built.
It doesn't _need_ to be a separate class. But I wanted to separate the more granular tests for `Page` from the tests for `Site`.
Would be ideal to break out the other tests for `Page` into that class itself then (or into a separate file altogether).
Thanks, @eillarra !

Do you know if any additional changes are required to migrate? (i.e. have you tested this?)

Cheers,
Trying to deploy using the original `v1beta2` returns this error in the command line:

> googleapiclient.errors.HttpError: &lt;HttpError 400 when requesting https://www.googleapis.com/storage/v1beta2/b/bucket?alt=json returned "Version v1beta2 of this API is no longer available. Please try again using JSON API v1. To request temporary reinstatement for your project, please visit https://docs.google.com/forms/d/1isIxBZg3rsQbDN_TOalZaz1WT_ebJchsrlv-Qr_r9mY/viewform"&gt;

Changing it to `v1` makes it work as expected. Deploys without problems.
Also note that Crate website points this same issue in their repo: https://github.com/crate/crate-web#deploying-to-google-cloud-storage
Tested; thanks (I just wanted to make sure the ACL format hadn't changed and that bucket creation was still working). 

This change is reasonably trivial and I'm assuming it was tested by the Crate folks so I'll merge it without adding tests. 

Cheers,
Thanks!
Hey there, and thanks for your contributions!

I had a few notes for you,
- First one is about the use of `filecmp`. According to the Python docs, it only looks at `os.stat`, which might not be the most reliable way to identify if two files are in fact identical. What do you think? 
- Second is about tests. Did you look into whether it was reasonable feasible to add some here? (intuitively, I think that's the case) I can also look into it at some point (but I've been badly backlogged as of late).
- Third is about the Knownly name. There seems to be little that is specific to Knownly here, am I missing something?

If my understanding is correct that there is nothing specific to Knownly, how about:
- Remove the Knownly name from the code and use something a bit more explicit (e.g. folder or file, etc.)
- Use knownly as the name of the deployment engine that people use in their config (and possibly also use a more generic name pointing to the same deployment engine).

This way, the internals use something explicit, and the user-visible parts use the Knownly name;.

Note: I do understand and respect the fact that you might want to promote Knownly as a first-party integration. I also think it's a fair ask considering you're providing something that has definitely been requested before by our user base, but I'm hoping we can find a compromise that'll work well! I'm definitely open to other ideas as well.

Cheers,

---

I have also started reviewing your PR a bit, but I'm kinda backlogged as of late so I might need a bit more time (apologies in advance).
Hi,

Thanks for the kind welcome and feedback.

Let me address your initial notes:
- I chose `filecmp` as I think it should be reliable in majority of cases. At a minimum it looks at file size and modification dates. I could be wrong but I doubt the other providers (S3, Rackspace) do full binary diffs so this seemed a fair trade-off for speed.
- I can attempt writing some unit tests for this new provider.
- You're correct there isn't anything truly Knownly specific here (+1 for Knownly over the other deployment destinations ;)

I'm fine to re-write and re-raise the PR with more generic naming in the source. I like your suggestion to use 'knownly' as the config label and perhaps we can reflect the contribution in the docs?

Is there any timeline for a next release that I should work toward?
Hey there,
- If I recall correctly, the S3 provider (I don't remember about the others off the top of my head) actually checks the checksum (which is provided by S3). Not sure about the others, but I could check.
- Thanks for looking into tests.

Feel free to make updates to this PR directly.  There is no specific timeline for the next release, but considering this is a new feature with little potential for breakage, we can ship it when it's ready (note that I'm speaking about the CLI tool here, not the Mac App). 

Thanks!
Hi @krallin I finally got around to re-writing the filesystem provider.

Removed references to my Knownly service, rebased the feature-branch on master, should be good to go.
Housekeeping close.
Note to self: don't we want to throw an exception itself.
Note to self: need to review whether this will need work with the Python 3 support migration.
This was fixed (as part of removing mixed tabs / spaces to support python 3)

Thanks for the report : )

Cheers,
Boto will give an error when tryng to create a bucket on region us-east-1 because this issue https://github.com/boto/boto3/issues/125

It seems that you need to use an empty string instead of the actual "us-east-1" to specify that location.

Im proposing to do this:

```
    def create_bucket(self):
        """
        :returns: The newly created bucket
        """
        # S3 does not accept "us-east-1" must use "" instead
        location = self._get_bucket_region()
        if location == "us-east-1":
            location = ""
        try:
            bucket = self.get_connection().create_bucket(self.bucket_name,
                policy='public-read', location=location
            )
        except S3CreateError:
            logger.info(
                'Bucket with name %s already is used by someone else, '
                'please try again with another name', self.bucket_name)
            return  #TODO: These should be exceptions

        # Configure S3 to use the index.html and error.html files for indexes and 404/500s.
        bucket.configure_website(self._index_page, self._error_page)

        return bucket

```

All test pass
Looks like this was fixed here: https://github.com/koenbok/Cactus/commit/55e49bb896826039553c68266fb1e2bdbf2a3581

Sorry about not getting to your PR earlier — I think you and @koenbok  might have run into the same issue separately.

Cheers
Thanks!
Hi there,

I understand where you're coming from, and appreciate you taking the time to submit this PR, but I don't think we should merge this in.

Style-only changes add a lot of noise, and I don't think the stylistic benefit offsets that noise. Furthermore, mixing semantic changes within a commit advertised as a style commit is a big no-no.

 I'll let @koenbok pitch in and reopen if he has strong feelings otherwise.

## 

As far as the semantic changes go, I'll have a look.

Generally speaking, I think optimization changes should be supported by evidence. For a `list`, `len` is a function call that basically does an attribute lookup; we don't typically cache all those in a local variable (unless there's a demonstrated performance benefit).

Cheers,
It is your choice. PEP8 allows people speak in one language. But no more words, anyone knows all benefits of style-guide. Thanks, anyway.

About `len` and `list` you misunderstood me. I think it is because of my bad english :)
Take a look at original file ;) You already did this optimisation, but it is missed somewhere - may be as a result of inaccurate merge, may be as a mistype.

At least you should remove this useless line if you don't want to optimise things: https://github.com/koenbok/Cactus/blob/master/cactus/utils/sync.py#L26
What semantic changes are you talking about?
@dreadatour,

Thanks for the correction about `len` vs `list` (I haven't worked on that specific part of the code, so I made the wrong assumption).

Regarding semantic changes, I'm referring to e.g. changing the name of a test so that it runs.
Thomas, thank you for explanation. The thing is I can't fix PEP8 violations without bring this semantic changes into code. I understand what you are talking about (mixing different types of changes), and agree with it.
Using `os.walk` is straightforward and probably something we should have done all along. I'd be happy to merge it separately. 

Caching the result of `site.pages()` is a bit of a problem, though. Currently the contract is that if you make some changes to your pages during the build process (e.g. in a plugin), they'll be picked up next time `pages()` is evaluated. 

I think this might break `cactus serve` (see the discussion here in #137). It might also break some plugins that depend on the current behavior, but I think it'd make sense to make a major release to address that.

Cheers,
Ok, that's a valid point I haven't thought about.
So I will make a separate PR for `os.walk` then and close this one.
@chaudum I noticed you'd added some tracking of how long it takes to build the site with this change. Do you have any numbers you can share? Just curious to know how much effort we should be putting into this by looking at other real projects.
@krallin 
In our website project (https://github.com/crate/crate-web) we have 207 pages which took ~15s to build before. After adding the cache it took around ~4.5s.
Thanks! This looks like a good idea and the implementation is sound.

Regarding the tests:
- I'm not a huge fan of refactoring things that are unrelated to the feature being implemented (e.g. the `run_cli` changes). Feel free to make a separate PR for those changes. Cleanups _are_ welcome, but I'd rather avoid noisy commits when possible (it took me a bit of time to understand why you were making those changes, and it looks like they are only cosmetic — did I miss something?)
- I don't think we need the `site_a` and `site_b` stuff. We can just put this in a separate test and reuse `self.test_dir` and `self.path`
- I think we should test that the config file is looked up in the right place. Currently thats easy to do since  there is no config file in the test skeleton, so I'll just test for a warning that the file is missing.

Rather than do a lot of back and forth I've made those changes and amended your commit directly. 

It's here: https://github.com/koenbok/Cactus/commit/a177332c98208ef79fcaa0af234671c862a43adf

I've also added `-d` as a short argument (for "dir"), since all of our other arguments have a shorthand.

Thanks again!
@krallin cool thanks!

you're right, the changes in the test setup were just cosmetics. I though they made it more clear how the tests work, since it also took me some time to distinguish between `self.test_dir` and `self.path`.
however I am totally fine with leaving it as it is, because - as you said - reduces the noise in the actual change.

christian
I guess we could rename `path` to `site_path` in tests. Would that make things clearer?
yeah think so.
Not sure we should even keep this file... Thoughts? Are you actually using it, or just found the issue while looking at the Cactus source?

Thanks!
I would prefer a local development setup using [buildout](https://pypi.python.org/pypi/zc.buildout). I can make a PR for that.
Not sure how I understood your point. Do you use this script in development?
We're currently using tox for development. I'm not sure I understand why adding another tool is desirable here.

As I mentioned in the other thread, I don't really see why this "replaces" the `run.py` script? The `run.py` script essentially just does whatever `cli.py` does. It's not really useful (and not very usable, since it strongly depends on how your your `PYTHONPATH` is setup and whether Cactus is installed).
@krallin ah ok. so `tox` is what I missed.
Eh that might be why! You should be able to run all tests by just installing tox and then running `tox` from the root of the project (where there is `tox.ini`).

As far as running cactus in development, what I usually do is install Cactus in development (`python setup.py develop`) in a virtual environment. If that's not usable I'm happy to hear suggestions / etc. : )

Cheers,
Thanks!
A few notes (sorry, I have a lot on the side, so not able to be as reactive as I wish to be):
- This might break for external URLs (which are returned absolute and would still get the prefix).
- There's a bit of duplicate logic here, would it make sense to move it to `_get_url`? This would also let you solve the problem of external URLs more easily.
- Can we get some tests added? Both in cases where `page-prefix` and `static-prefix` are set? 
- We might also want some docs. Historically we've been bad at this, but no one will find this feature unless it's at least somewhere in the README.
- Can you briefly explain the use case for this? Not that I don't believe it's useful, but I just want to make sure there aren't other changes we should be making.

Thanks!
> Can you briefly explain the use case for this? Not that I don't believe it's useful, but I just want to make sure there aren't other changes we should be making.

I want to drop my files in http://www.mysite.com/subdir/

There is still a problem: sitemap is generated based on `site-url`, but only uses the main domain name and does not include the prefix.

> This might break for external URLs (which are returned absolute and would still get the prefix).

Ya, that a problem. One (weak) solution is to use normal URL instead of static and url tags.

> There's a bit of duplicate logic here, would it make sense to move it to _get_url? This would also let you solve the problem of external URLs more easily.
> Can we get some tests added? Both in cases where page-prefix and static-prefix are set?
> We might also want some docs. Historically we've been bad at this, but no one will find this feature unless it's at least somewhere in the README.

The final submission will be factorized / optimized, I'm just want feedbacks first to see if mu proposal is interesting and correct.
Tests are working, your turn.
@afrigeri the '/static' pattern is used as-is in the Cactus source, see 'template_tags.py' . My proposal is just to add a prefix to it, hence having something like '/my-prefix/static'.
I opened a separate issue, but maybe it's better as a comment here. I used this patch because I had the same use-case. And it works fine. However, I can't do testing any more, because the files in .build all have the site-path encoded in whereas for local testing '/static/...' urls suffice. It's almost as if one needs a 'deploy' option like with S3, but for this purpose. Or have a way to only do the rewrite for the final build instead of testing?
largely outdated
+1
I can additionally confirm this issue with py34 on linux.
+1 with py34 on windows 8.1
Thanks! This is fixed in 3.3.3
I guess the problem I had is similar to the one described in #157. Therefore I guess merging this PR closes #157
This PR closes #233
Closes #234
`page.path` on [line 84](https://github.com/blattms/Cactus/blob/prettify-urls-in-post-context/cactus/skeleton/plugins/blog.disabled.py#L84) must be also replaced with `page.final_url`.
@antons Nice catch. Fixed it.

Just hoping that somebody, e.g. @krallin, will somewhen merge this to master.
Thanks for merging. Great to see some momentum!
The problem that I experienced looks similar to the one described in #212. Therefore I guess merging this PR will close #212
Hey blattms. I noticed you change the block name from "body to "postbody", any reason for this? Can I change it back to post to keep consistency with documentation?
Indeed, the change body->postbody is totally unrelated. I pushed a
commit that reverts this change.

If you prefer I can squash the two commit into one.
@blattms I noticed in this last commit that you are no longer using final_url and reverted to old behavior. Can you fix this up so I can merge it with your new behavior?
That change was never part of this PR but of #229. Both of them were
based on master as of February 13.

Anyway, I will rebase this PR onto the current master and squash the
two commits into one. Just wait a second.
Done with rebase and fixup.
Tests are working locally but travis is failing for some reason. Im gonna look into this first before merging the PR.
BTW this seems like a system problem (python path?)
Yes. I'm gonna merge anyways since tests pass.
I would love to get some comments/feedback on this.
I haven't really ever worked on the `serve` parts (that'd be mostly @koenbok), but is the `chdir` even needed here? 

I can't really see anything in `Listener` (or one of its subclasses) that relies on the current working directory (and all tests continue to pass without the `chdir`, though I'm not sure `serve` has great coverage).
Good point. Looking at the Listener class, it seems that it is passed the paths that matter and it's using them explicitly.

Let me take a look at the test-suite and see what I can do. BTW: nice job on adding tests for the 'serve' command.
Going to close and reopen to get automated tests running
Thanks @dwightgunning !
Bunch of tests fail. Try running them with tox or nosetests.
I ran the tests, all seemed OK. I pushed a sync so travis would check as well.
Hello, could you add those new vars to the README so other people know whats going on?
@ibarria0 Done. Perhaps `koenbok/CactusBlog` should also be transferred to `eudicots` and updated with the newer Cactus?
@antons Indeed. I will email Koenbok about that.
Thanks
any chance of merge to master soon?
## Deleted the PR Because of Incomplete Changes and need more changes
Oops, something happened, give me few minutes to find the problem
Done. I've tested `highlight` and it worked well for one block, but then after changing all of them, code disappeared :/
Why not?
Ah, sorry, I must have closed rather than merged! I've reopened but the docs have changed a lot since, so if you want to update it feel free, or I'll get to it eventually.
Aha, I see. I will update it
Closing for now, outdated.
Closing this. Will open another PR from another branch.
Thanks! Nice catch on the docs, too.
I hate to be a downer, but like Django I don't follow the 80-character lines part of PEP8, so I'm not going to accept this with all the line break changes - it makes the code a lot harder to read.

If you want to undo the line breaks but keep .format() etc, I'll happily merge those.
I'll undo the 80-character breaks (although I strongly disagree :P).

I'd love to see this project get to 1.0 as quickly as possible.  Please let me know if there is anything you'd like me to work on (functionally).  I've got a few months of free time and this project is now my number 1 priority.  :)  rico.cordova at gmail.com
I guess the code should follow the django coding style (https://docs.djangoproject.com/en/1.9/internals/contributing/writing-code/coding-style/)

I don't think replacing the format() stuff is necessary ( since under python3 the % operator for strings is twice as fast ) and it's not deprecated.
Closing for now, outdated - reopen if you get to a new version.
Thanks for the quick review, and sorry for the late response. I pushed a new commit, hopefully addressing your comments. Could you have another look?
Perfect, thanks!
I explicitly left off "sending emails" as people usually route this through a reliable system, and channels deliberately isn't. Perhaps modify to add `(with a retry mechanism)`?
HTTP2 server-side events do not actually allow arbitary notification of the client; they're more a way to push resources (images, css) to the browser before it requests them.
Perhaps just "guarantee" here?
I was wrong originally - the protocol here should be `wss`
I've changed my mind on UK vs US English - if this is going to be merged into Django, it needs to use US English, so probably need to keep the z. Sorry!
Whoops, I meant to write that. Thanks.
That makes sense. I'll remove it to avoid scope creep for the PR. `with a retry mechanism` is a bit too hand-wavey for me. 
I do think it would be helpful to have a list of common task, and mentioning how well they could be achieved with channels.
Ah of course, you're right. But I just moved the sentence around, because I found it easier to understand that way. Did both of us mean [HTML5 server-side events](http://www.w3schools.com/html/html5_serversentevents.asp) instead of HTTP2?
Fixed.
No worries.
Any reason the session key is stored as bytes [here](https://github.com/andrewgodwin/channels/blob/master/channels%2Fdecorators.py#L54)? It seems to crash `session.exists()` since it tries concatenating a string with the byte-type session key. Changed it to a string [here](https://github.com/ekmartin/channels/commit/80a75fce85b285b0e1b063c1d81e6a5a90fe672f) and it seems to work.
Couple of issues:
- You've wrapped several lines that would easily fit within 119 characters (the Django line length standard) - I'm not sure why flake8 did this, since it's been told to use 119. There's also closing brackets on the end of the line, rather than on the following line at the original indentation level.
- The test setup you've got here isn't great - the test suite is going to need a full host project and to run tests using the management commands inside that, which I've already committed some of to the repo.
- Merge conflicts.

You're right that the session key could be a string, though. It would be nice if these were separate pull requests; there are some things here I would happily accept but it's all mixed in with other stuff and whitespace/code style cleanup too, which I like to keep separate.
Thank you for the feedback!
- I've fixed the wrongly wrapped lines, so everything should be within 119 characters now. Also fixed the closing brackets on the end of the line issue.
- I'm probably missing something, but how would you run the tests without something similar to the `runtests.py` file I added [here](https://github.com/ekmartin/channels/blob/tests_and_py3/runtests.py#L10)? I thought that was generally how you did tests for reusable applications.
- I rebased in master, so there shouldn't be any conflicts now.

I'll submit a separate pull request for the string session key.
You run the tests by going into the test project and running "manage.py test channels" - the main problem is that the tests need consumers to be assigned etc. and the hooks for that right now are in the app loading path.

It's not super important since when it gets merged into Django they'll become project-level tests and thus have access to a bit more flexibility. Still not sure how best to do the integration tests (even the current set require a running redis server to complete fully), but I'm sure I can come up with something.
Ah, didn't know you wanted to use the testproject to run the tests, thought it was more of an example. Feel free to remove the tox and runtests files if you want to, but I thought it'd be useful to be able to run the tests with different Django/Python versions (`tox` now runs the tests with all combinations of Django 1.6 - 1.9 and Python 2.7/3.5).
I moved the definition of `key` up here, as it doesn't seem like it's defined when `index = self.consistent_hash(key)` is called here: https://github.com/andrewgodwin/channels/blob/master/channels/backends/redis_py.py#L71
Yup, good catch. I only added this code a few days ago, so I'm clearly missing a test here.
Yup, this looks good to me - feel free to push it up!
Ah, thanks! I'll merge but be warned, I'm rewriting that entire module anyway to be a single HTTP/WebSocket interface :)
No problem, sounds like a better solution!
Thanks - that's an impressive level of typos on my part!
I think I agree; and yes, you got it right!
Nope, it's not ready yet, so is deliberately not in the docs. I might even just remove that whole section for now until it's more stable.
Ok, I'll wait, then, thanks :)
It's not finished yet, and that bit is going to be changed around, so I'll close this and fix it separately.
Yes, there should probably be a separate section for different deployment methods - a uWSGI one would need to cover deploying a WebSocket server too, though, since while mules can run the workers, they can't run arbitary socket listeners.

Do you know of a way to get uWSGI to hand over raw incoming socket connections to something that can handle them? It's possible that would be enough to pass off the rest of the work to a WebSocket implementation we already have, though at that point you're using uWSGI as little more than a process manager.
I have never done this, but uwsgi can do websockets and it has a routing system to route a path to a different server.

http://uwsgi-docs.readthedocs.org/en/latest/WebSockets.html

Until now I've always redirected websockets directly in nginx
Here is described how you can route requests to an other uwsgi or webserver. (http://uwsgi-docs.readthedocs.org/en/latest/InternalRouting.html)

But I guess most uwsgi users use nginx so an example conf with redirecting in nginx would also be nice.
The uwsgi websockets module is unfortunately too high-level to easily plug into the existing code; someone would have to write code specifically from scratch to run on uwsgi's implementation. I'm sure someone will.
there is django-websocket-redis which use uWSGI webSocket in django project
exactly, maybe here there's something interesting:
https://github.com/jrief/django-websocket-redis/blob/master/ws4redis/uwsgi_runserver.py
+1
I'm building out a setup like this with Docker, but the configuration should be pretty similar.  I'm planning on asking for the whole thing to be added to the [channels-examples](https://github.com/andrewgodwin/channels-examples) repo when I'm done with it this week.  It goes from naked Django through a Dockerized deployment, step by step.
Closing for now till we can get a full separate example with daphne running too.
@ssteinerx Any luck with your example? Would be useful to have.
@eukreign I had to go with a more traditional setup and, unfortunately, the Docker project had to be put aside for the moment.
@andrewgodwin  Why would you close it? I really like the idea. It would avoid deploying one more component, especially for websites that are already running Django with uwsgi. Just leave it open until we find a way how to do it, it's kinda independent from daphne, isn't it?
@ZuSe: It's closed because as far as I could tell it couldn't be done, as uWSGI does not expose a low-level enough API to integrate with Daphne (it would instead need native ASGI support, and that is something for the uwsgi project to tackle if they wish)
Closing for now, outdated - reopen if you get to a new version.
I figured that server pushes should always soft-fail if unsupported - the HTTP/2 spec says the client can just drop them, anyway. Of course, it might be nice to communicate to the application that it's not wasting cycles and something is actually getting it; there's a reason I kind of want to have some sort of `supports_server_push` key, but it might get a bit verbose.

I do like the idea of just re-embedding the Request message, though. The reply channel thing is a little strange, though, not sure I like applications having to invent reply channels.

Maybe say that it should also contain a Response message embedded inside, and then have Server Push Chunks for larger bodies?
> I figured that server pushes should always soft-fail if unsupported

Yeah, but what I was unsure on is how this kind of soft-failure is communicated. This actually applies to ASGI more generally: for example, if a TCP connection falls over while the application is sending data, how does the application find that out? Does the channel just get closed? I don't have a strong preference or suggestion here, but whatever you want to do here should be consistent, and we can use that method to notify about the failure of server push.

> The reply channel thing is a little strange, though, not sure I like applications having to invent reply channels.

That's fair enough, but I think a new channel does need to get created by something here: that way we keep a convenient isomorphism between HTTP/2 stream and channel. However, you've given me a much better idea:

What if, instead of the application creating the channel, the server did it? Specifically, what if, on receipt of a `Server Push` message, the application unpackages the `Request` sent in it and then treats it like a new request just received from the wire: creates the appropriate channels, fills them into the request object, and then sends the now-populated Request message back on the `http.request` channel? That means an application has to know relatively little about the server push: it 'pushes' a request for the resource, and from then on the application sees that as though it is entirely a real request.

This approach seems kind of neat to me, but I did come up with it, so what do you think?
Well, ASGI in general doesn't have the concept of channel closure or message rejection; everything is sending data into the void with no idea about delivery, which is deliberate, since it keeps things simple and much easier to optimise and load balance. If a protocol server loses a connection, you get sent a message saying it's gone, but you can't just take a channel name and ask an ASGI layer if it's open or not, so it seems the only option is just to let applications send into the void.

Server push is limited to being part of an overall HTTP/2 request, anyway, so it's not like there's a long-running connection to be aware of. It's possible some kind of "channel is open" state could be built in, but that's more state that a channel layer would need to take care of, and I've been trying to avoid that as much as I can.

As for the idea of the protocol server re-injecting the request, that is quite a neat way to do it considering that a server push response should match whatever a server would usually send. My concern is ordering, though; you have to keep all messages tied to the same original request on the one reply channel, as if you spread them over multiple ones, relative ordering isn't guaranteed.

I think the approach you describe would make sense inside Django - if you want to use Server Push, you annotate the response from the view with URLs, and Django runs them through the view framework internally and gets responses - but having that as something ASGI protocol servers would have to implement seems like too much.

Maybe, give each Server Push message its own unique ID - kind of like the reply channel, but only unique within the overall response - and then have Responses and Response Chunks have that optional ID as a key, so the protocol server can tie them with the appropriate initial request (or, if it doesn't care about server push, just drop any messages with that key)
>  My concern is ordering, though; you have to keep all messages tied to the same original request on the one reply channel, as if you spread them over multiple ones, relative ordering isn't guaranteed.

I don't follow: what's the ordering concern? From a H2 protocol level, the only bit of ordering that matters is when the PUSH_PROMISE frame is emitted, which the proposal satisfies. What ordering are you worried about?
Oh, you're right, for some reason I thought the promise responses had to come before the main one, but the only ordering concern the HTTP2 spec says is promises-before-responses, which makes sense.

In that case, it's quite possible the protocol server could just re-inject requests on the exact same pathway.
@andrewgodwin Would you like to see a draft that proposes that mechanism?
Yes, if you have the time to write it up!
Ok, that's done: how do you feel about the new content?
Yes, I like that a lot. OK if I merge it in?
Fine by me!
Have you verified this works? There's a very nonstandard test setup for a lot of the tests in here.
OK, saw #66 now. I'm not going to merge this in until there is actually a test suite to speak of - there's still a mini re-architecting to go - but I'll leave it open to do it then.
Ah, yes, `message` in AsgiRequest is meant to just be the raw underlying message dict from ASGI - see here: https://github.com/andrewgodwin/channels/blob/master/channels/handler.py#L208 where it passes `Message.content` into the view system, which is the raw dict.
OK, maybe working now.
Running up against missing `BaseChannelBackend` now, so I think that's all I can do for the moment.
Ah, that shouldn't be needed anymore. Might be old broken test code - this is why I don't want to write more tests until the new architecture is stable :)
I don't think it has anything to do with the test code. Filed as #69.
I implemented _stream basically this exact way, so closing!
Ah yes, the victim of my iterations there. In fact, not only is it now a property, but the property is an actual Channel object rather than a string you need to pass to `Channel()`. I'll fix it up tomorrow unless you want to take a stab!
Even better. I've updated the PR.
I noticed another inconsistency while looking for other outdated examples: this example used `Request.decode` and `response.encode` whereas other examples used `Request.channel_decode`, and `response.channel_encode`.

Even after this change, I'm not completely sure it's correct. It looks like `channel_encode` and `channel_decode` mostly disappeared in b9464ca149a4f66ebeb8801254cdd6d1b12cd58d, although they still show up in `channels/adapters.py` and some examples.

I'm possibly worrying too much about the docs anyway, given how much everything's still in flux.
Yeah, I need to go through the docs again and rework them for how it's laid out now; I've been spending most of my time writing conformance test suites and examples to test the spec to make sure I don't need to change it again.
Yes, this is one of the things I was mentally going to go over and do at some point - thanks for the help!
Lovely, thanks!
Does this still work on Django 1.8? I'm not familiar with when the need to lazy-load it got removed.
It does work on 1.8. I'm not exactly sure when the need to lazy-load got removed either. I think it was during the 1.7 app loading refactor (certainly eager loading works on 1.7) but it might possibly have been earlier.
Good enough for me!
I have now done testing with the Redis backend, and it's the same result: Replying directly back to a message works, but `Group.send` does not.

@andrewgodwin - could you have a look at my code and try running it and tell me if it works for you? This could be a problem related to my system (Ubuntu 14.04).
Okay, although I don't understand the reasoning behind this behavior, nothing is sent when the message dict does not contain a `"text"` key. This has been the source of the problem all along.

Could we perhaps change to backends channel layers to fail loudly when this mandatory isn't present?
Updated description to match that everything works fine and it was a [PEBKAC](https://en.wikipedia.org/wiki/User_error). However, maybe the added test views/templates are still useful? Let me know, I'm willing to respond to additional requests :)
The test project is actually only for benchmarking really, and so it's set up in a specific way to match the benchmarker script; I don't want to make it a general test thing (and really should rename it!)
Could you explicitly decode() from utf8? I'm not a fan of leaving it without an argument.
> Passing a bytes object to str() without the encoding or errors arguments falls under the first case of returning the informal string representation... [0]

if `str()` to be used, then encoding argument should be passed, with `decode()` `utf-8` is default [1] so it looks to be working fine without any arguments.

[0] https://docs.python.org/3.5/library/stdtypes.html?highlight=decode#str
[1] https://docs.python.org/3.5/library/stdtypes.html?highlight=decode#bytes.decode
That's not true in 2.7 unfortunately, where the default encoding is variable and often `ascii`: https://docs.python.org/2/library/stdtypes.html#string-methods
`path` is unicode these days, closing.
Sure, best to have it clarified if people are unsure.
Yeah, this seems just like what I was thinking. Couple of things:
- Do we need to try consuming off of the wait channel _before_ the consumer runs, too? I'm trying to think if there's a situation where message #3 is in the wait queue and #4 comes in; this would just enqueue #4 and not try to run #3
- Maybe we should use a prefix `__wait__`, rather than just `wait`, to indicate the special-ness
- Renamed the wait channel to `__wait__`
- You are correct that in your scenario the decorator would just enqueue #4 on the wait channel and not try to run #3. But when currently running task #2 completes, it will dequeue #3 and #4 and put them back on the main channel, allowing a subsequent worker to pull them off. What you are suggesting in terms of having the worker directly run available items from the wait queue may be a potential optimization, but I was trying to stick with the rule that the decorator either executes the consumer for the specific message it was given or it puts it on the wait channel, but it never runs a consumer for another message it was not asked to run. Though you do end up having to wait for a subsequent worker to pick up the requeued message, it simplifies the implementation because you only easily have access to `func` (the consumer code) for the task you've been asked to run, not for anything on the wait queue (which could require a different consumer func). Otherwise I think I'd need to get the router logic in here somehow?
Yes, the only situation I can come up with where #3 ends up on the wait channel without #2 not being running is if #2 has died, at which point you arguably don't want any other packets processing anyway. You'll end up with a zombie socket that has no way of telling it's queueing everything into a void, but at least its messages will get cleaned up after the expiry delay.

Also, given the new backpressure stuff I added this week, you'll need to handle the possibility that `send()` might raise the `channel_layer.ChannelFull` exception, which means (unsurprisingly) that the channel is full. I suggest we just re-raise it as a more explicit error, and maybe if we can provide some way for people to hook it into closing the websocket, without hardcoding websocket channel names into   the decorator.
I added handling for the channel_layer.ChannelFull exception by re-raising the same exception with specific messaging on what in-fact happened.

I attempted to address your suggestion on enabling closing the websocket by adding an optional close_on_error parameter to the decorator that is default True which will send a "close": True message to the reply channel whenever the ChannelFull exception is raised.

I'm not sure why the CI integration is failing on these changes. The Travis CI error report seems to suggest channel_layer is None in message.channel_layer, but not sure how that could be?
Ah, some of the unit tests set channel_layer to None if they're just testing message parsing (it's one of the arguments to the Message constructor) - you likely need to just patch the offending test to take `channels.channel_layers[DEFAULT_CHANNEL_LAYER]` instead and make sure it uses `ChannelTestCase` so the channel layers are swapped out to temporary ones.
Got it. I updated all the @enforce_ordering unit tests to also make more relevant assertions against the wait channel since they no longer raise ConsumeLater.

We should be all set now.
Urgh, sorry to be nitpicky again, but your close_on_error implementation is currently specific to the WebSocket endpoint - other protocols are likely to turn up with an 'order' field but without the same close mechanism; can we pull it out for now and I'll merge it like that?
Oh good point, have only been using websockets myself. I pulled it.
Merged! Thank you so much for your work on this.
You only need "if channel" here (if channel is None content always will be)
Updated this
Is it better?  Also I added copying for routes at ChannelTestCase tests.
Yes, that's better - thanks for working on this!
You don't need to mock this; the ChannelTestCase base class provides a pre-made in-memory channel layer you can prep messages on and extract sent messages from in a much less fragile way. See https://github.com/andrewgodwin/channels/blob/master/channels/tests/test_request.py#L20
You seem to be using both mock.callcount and _consumer._called; is there a need for both? I'd recommend just combining call count into this inner part of the function and then you can drop the need to use mock and pass the consumer function in directly.
I don't think this would make sense, as generally python threading is a lot slower than using multiple processes, so we should be encouraging people to start N copies of runworker, not add threads (which might even make performance worse, based on some of my tests).

Going to have to reject this... sorry!
As an alternative @onegreyonewhite you could use [`circus`](https://circus.readthedocs.io/en/latest/) (or supervisor, etc.):

```
[watcher:interfaceserver]
cmd = daphne
arguments = ...

[watcher:workers]
cmd = python
arguments = manage.py runworker
num_processes = 3
```

This has the added benefit of restarting a worker (or whatever is watched) if it crashes for some reason.
It`s too hard, to fast deploy, @mrasband
I think about [pools](https://docs.python.org/2/library/multiprocessing.html#using-a-pool-of-workers). How do you like this idea?
@onegreyonewhite you could also implement a management command (e.g. `manage.py runworkers`) that uses Honcho to start processes like this:

```
from django.core.management.base import BaseCommand
from honcho.manager import Manager
import os
import sys

class Command(BaseCommand):
    help = 'Run N channels workers'

    def add_arguments(self, parser):
        super(Command, self).add_arguments(parser)
        parser.add_argument(
            '-n', '--num-workers', action='store', dest='num_workers', default=6,
            type=int,
            help='Number of worker processes')

    def handle(self, *args, **options):
        manager = Manager()

        for i in range(options['num_workers']):
            manager.add_process(
                'worker{}'.format(i),
                'python manage.py runworker',
                quiet=False,
                env=os.environ.copy())

        manager.loop()
        sys.exit(manager.returncode)
```
@oTree-org thank you for your solution.
I like this, though it looks to be specifically a WebSocket/HTTP test client (route override is great though) - can you split out the client into something like `tests/http.py`, or have a base class without the cookie/session/login stuff and a subclass with that baked in?
OMG... Flake8 .. :heart: . Yes, I have tried. Please review it.
Yes, Flake8 is really picky, haha! Looks good - there's a couple of things that might need to be changed in future, but those can happen in master. Merging.
Haha, I was going to dig in there later to see if I could trim it down!
So, I like everything in this patch apart from the addition of the `get_handler` method - what does it do separate from `dispatch`? I'd rather not add another function call and indirection in there without good reason, and `dispatch` was meant to be the nice overrideable thing people can use to change how lookups work.
I thought, that it helps to wrap "consumers" at different decorators in more clear way, just with calling super method with all args and kwargs. like this:

``` python
def get_handler(self, message, **kwargs):
    return decorator(super().get_handler(message, **kwargs)
```

But now if you want to add some decorator you need to **get** super, **wrap** it and **call** , like this: 

``` python
def dispatch(self, message, **kwargs):
    return decorator(super().dispatch)(message, **kwargs)
```

More familiar way - first of all **call** super method and than **wrap** it. So you did: 
`enforce_ordering(super(WebsocketConsumer, self).dispatch(message, **kwargs), slight=False)`
So it is wrong, but more familiar. `get_handler` is approach to solving problems.
Ah, your point about wrapping the existing fetch logic with more decorators is a sensible one; I'm still not super keen on having two places people can override the dispatch logic, but I guess we can point them to change `get_handler` and leave `dispatch` alone.
Surely using `window.location.hostname` would be better?
Ah, I think `window.location.host` might include the port?
sry. Typo. I meant `location.host` this contains the port. I always used `location` and never `window.location` I did not even know that `window.location` is the right object. I change it.
Actually the other argument is wrong as well - I'll fix both of them in one commit. Thanks for pointing it out!
Done in df0ae80.
I've also modified tox to run coverage and combine the results. If this is out of scope let me know and I'll remove it.

```
$ tox ; coverage combine ; coverage html
```
This all looks good to me - are you ready to merge it all in, or is there more you want to add here?
@andrewgodwin Great, it's ready on my end.
Are you sure? It can take websockets a while to handshake and open; there's no guarantee it's opened by that point. Do you have an API spec source?
Maybe it's just because I was typing it in manually and not copy/pasting it into my javascript console.  When I did that, using the onopen method generated no alert.
Right, as when you're typing there's enough delay between the two lines that it can negotiate; as a script it runs very fast, and doing what you suggest won't work.

Maybe change the PR to add a comment saying that if you're typing it in, not pasting, that you should do it a different way? Or can we find a way that works both with typing and straight execution?
You could do something like this:

```
    var func = function() {
        if (socket.readyState == 1) {
            socket.send('hello world');
        } else {
            setTimeout(func, 250);
        }
    };
    setTimeout(func, 250);
```

but I'm afraid that's detracting from the simplicity of the example.
Actually, the last line could just be  `func()`.
That does seem slightly complicated; I think it might be nicer to just have a short callout explaining what `onopen` means and how you might have to run the `send` by itself.
Agreed.
I made a documentation change regarding this, but it seems to have evaporated.
When you're following the documentation, testing the initial connection in the JS console, the onopen() never gets called so nothing happens.
Manually calling socket.send('msg') makes the echo happen.
Obviously, in a script, this is going to be different, but in the 'getting started' docs, this should definitely be changed as the naive user will be left scratching their head not knowing to call socket.send to start the process once stalled.
Closing this as I'm going to write a better solution that checks socket state.
Seems fine overall, but I'd like some more comments/docstrings overall describing what's happening, as mocking this much is somewhat impenetrable to others at a first glance.
I'm only mocking the `sys.stdout/err` to suppress logging from the test output filling the UnitTest output. But if that is not important I can remove it. But I will add more comments regardless.
@andrewgodwin Ok, added more comments and fleshed out the assertions more. Let me know what think.
Sorry for the delay here - it's been a hell of a week. Looks good, thanks!
No worries, thanks!
There's no assert here - what are you testing?
Oh wow I just saw your comment. Good catch, let me flesh this out, not sure what I was thinking.
This needs to be added, but:
- In the Websocket base class, not the overall base class
- With a separate class body variable rather than using channel_session_user

So I'm going to reject this PR as-is - sorry! I'm working on getting it added (see #221), but you're welcome to try too.
Thanks for the comment!
fixes #229
"to more than once" is not proper English, this is not an improvement.
Can you rebase this so I can pull it over?
did a new pull request (#257) for this
This isn't allowed under the Django import rules - you're not allowed to do things to models before ready() is called, and the register phase can take strings and resolve them to models, so I'm going to have to reject.

The fundamental problem is correct, but we should have documentation about where to put bindings (i.e. in a file that's imported from models.py, or in models.py itself)
Oh, ok. But for me it was actually the problem that ready got called before the `binding_classes`-list was populated.  Django also [advises agains](https://docs.djangoproject.com/en/1.9/topics/signals/)t signal registration in `models.py`. Maybe use a separate file like `bindings.py`?
(edited a typo)
Well, the signals aren't registered until the register_all action gets called, so they're not actually registered in models.py; they're registered in the ready() method, which is the best place for them.

`bindings.py` would also work, but it would still need to be imported at project load time, which means either an import from it in models or in an `__init__.py`.
Got your point. But models.py just does not feel right as a place for bindings. And a binding.py would probably be first included in the routing.py and that is already too late, as i understand, because ready was already run. How about a route_binding class/method that does the registration? Would have the benifit, that the bindings only will be registered, if they are routed to.
The best thing is probably to have the register_all method set a flag on the class that tells future registrations to happen immediately.
I've opened a new pull request #260 with a register_immediately flag.
This actually used to be in there, but it used the appname.modelname variant, which I think is still around as `self.model_label` - do you mind moving it to use that?
Shure, as long as there is a way to identify the models.
I've implemented it in a new pull request  #258
Perfect, thank you!
Might also be integrated in `Binding` or as a Mixin.
Wouldn't  the encoding step already raise a `TypeError: XYZ is not JSON serializable`?
Well the Django code specifically encodes a few extra types using known patterns, so I guess we could use that, but not required.

Also, absolute -1 to mixins. I will not merge with one :)
Hm, ok; then undo the change. Why do you dislike them?
They make it very hard to debug where things come from and are generally very unfriendly to newer Python programmers, so I tend to avoid them at all costs. I've had to maintain too many codebases that rely on mixins to work and it's impossible to work out where anything happens.
Now it's implemented as a normal class again.
Yup, nice.
I suggest using `if callable(member)` here instead?
Maybe consider catching/warning about types that won't serialize into JSON; for the fields, this is done automatically with the Django serializer.
Agreed - this change presumably errors if fields is not provided?
Now it does check for empty fields
Thanks - I'll fix up the docs to match!
The ability to pass kwargs is quite nice, but the implementation using `type()` is a little verbose. Do we really need to copy the dict like that or can the `kwargs` just be passed in as the class body?

Also, if there are no kwargs, maybe skip making the new class and just pass in `cls`?
@andrewgodwin I tried to fix it
Looks like something strange with flake8 and travis...
That was odd!

I'm still a little conflicted about the mixing of class body settings and route settings in the same kwarg list, and which one they apply to being implicit (not to mention you wouldn't be able to set the `path` routing key if there was anything called `path` on the class). Do you have any ideas to deconflict them?
I suggest to using `filters` key word argument for filters and `kwargs`  for class body. Will it be more clear?

``` python
routes = [
    ModelBaseConsumers.as_route(model=User, fields=['username', 'group'], filters={'path': '/users'}),
    ModelBaseConsumers.as_route(model=Message, fields=['user', 'text'], filters={'path': '/messags'}),
]
```
Isn't `filters` a bit problematic because of the `QuerySet#filter`, since we are dealing with the Model a thus the `fields` argument, this can be confusing. What about `match`?
I actually might be more a fan of keeping the routing filters as the things outside as normal kwargs - to match `route()` calls - and moving the class body overrides into a named variable, maybe `attrs` or something.
@andrewgodwin  Suitable naming.
Yes! I like that a lot. Sorry to ask for so many changes :)
No problems @andrewgodwin . Thanks you!
Given that it's not documented yet, I'll take it in, and bump the version by a major point on the next release.
It looks like Travis is choking on the new flake8 version - if you rebase on master and push again we should have the fixes to get it to pass.
Binding already has its own user code?
I had problems getting the right user in `has_permission`. After some searching around in the code and finding out, that i have to decorate the consumer-method, I thought it might be a good idea to go with the same approach as the consumers. Seems just easier for me.
Well, this still doesn't handle user porting on `websocket.connect`, so I'm wary about adding it in here, that's the thing. I'd rather it was handled in the Demultiplexer, really.
Then you would have to serialize and deserialize the user and session. Wouldn't that be a problem, if there is a custom user model?
Err, why? I'm saying we just have people set `http_user` on the Demultiplexer, which automatically will do the session porting and set `message.user`, and then the existing code will pick it up. I don't see how this proposed method is better.
But I would still need to decorate the `consumer`-method of the binding with `channel_session_user` or `channel_session`, since the Demultiplexer just sends the payload of the message. So the incomming message has no `message.user` (At least that's what i got). If the the consumer-method would always apply the `channel_session_user`-decorator, the user only has to set `http_user` on the Demultiplexer and would get the user and session in the Binding automatically.
The `Demultiplexer` should absolutely annotate `message.user` if it has `http_user` set, so there is no need to add the decorator again on the binding. If it's not getting message.user that's a bug, maybe related to #280.
`http_user` is set and I get a message without user and session in the bindings `consumer`/`trigger_inbound`-methods. I don't know if it's related to #280. Thought it is necessary to add the decorator to the bindings `consumer`-function, since it's also required for normal consumer-functions like in this example from the docs:

``` python
# Connected to websocket.connect
@channel_session_user_from_http
def ws_add(message):
    # Add them to the right group
    Group("chat-%s" % message.user.username[0]).add(message.reply_channel)

# Connected to websocket.receive
@channel_session_user
def ws_message(message):
    Group("chat-%s" % message.user.username[0]).send({
        "text": message['text'],
    })

# Connected to websocket.disconnect
@channel_session_user
def ws_disconnect(message):
    Group("chat-%s" % message.user.username[0]).discard(message.reply_channel)
```

Closing this for now.
Ah! Yes, the demultiplexer currently forwards the message to a channel rather than using local routing in order to serve it, so it loses `.user` and `.session` in that process. Hrm.
It's easy to use the routing directly instead and preserve the attributes, but it meant that workers wouldn't obey channel restrictions correctly (workers listening with a demultiplexer would service all handling channels too), but I think that's fine as it makes the whole thing more efficient anyway.
But, then again, the message generated by the demultiplexer has different content and I'd have to special case things like `.user` in order to preserve them, which I don't like.
OK, I'm going to pull this change in, I think I'm convinced it makes sense and is the cleanest solution.
I also don't think it's a good Idea to approach the relationship between `demultiplexer` and `binding` any different, than between function-based consumers like the one in the example above. Thanks again!
Hrm, I'd like at least a CHANNELS_ prefix on that setting name!
@andrewgodwin I've prefix the setting with `CHANNELS_`
Is the idea here to notify the user when an action has been completed? Surely this is done by receiving the relevant outgoing binding update - I don't really want to add something like this in.
That's right for update and delete, but if the user creates an object, there is no way of telling if the incomming create message is caused by the users action or by somebody else, since the pk is unknown.
True, but I still don't want to add something like this to the default bindings - this is the sort of think I would imagine being put in a third-party app as it's getting more and more opinionated.
Ok, then I'll close this. Thanks for your time, anyway :+1:
I'd rather see this as a new command-line option; I would like to introduce as few new settings as possible, and this is something that only affects a single command and so is fine as a command line flag. You could even re-use `--nothreading` to run in a single thread mode.
See #298
Thanks!
Urgh, I do hate mixins. Is there a reason you need a transaction-free channels test case? I hadn't included one initially as generally the only thing one tests with them is transactions themselves.
I'm using Django's `on_commit` feature to launch a channel message. The
tests have to be run in a TransactionTestCase to work.

May I ask, for my own edification, what is it about mixins that you don't
like? It seemed like the most effective pattern to achieve the desired
result in this case.

Cheers,
Luke

On Sun, 21 Aug 2016, 4:04 AM Andrew Godwin notifications@github.com wrote:

> Urgh, I do hate mixins. Is there a reason you need a transaction-free
> channels test case? I hadn't included one initially as generally the only
> thing one tests with them is transactions themselves.
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> https://github.com/andrewgodwin/channels/pull/305#issuecomment-241214643,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AAiSOnH3MMk1KjvWdQXo9ChMVo18lamLks5qh0GggaJpZM4JpA_9
> .
Fair. I don't like mixins because they make working out where code is coming from almost impossible, but that's more when they're exposed as a thing end-developers should use; here, the end result is still two classes, and they're in the same file as each other, so I think it's fine. I'll merge this in.
Ah yes, I understand. Thanks!

Cheers,
Luke

On Sun, 21 Aug 2016, 10:54 AM Andrew Godwin notifications@github.com
wrote:

> Merged #305 https://github.com/andrewgodwin/channels/pull/305.
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> https://github.com/andrewgodwin/channels/pull/305#event-762183742, or mute
> the thread
> https://github.com/notifications/unsubscribe-auth/AAiSOjhRj23t4JBdrAXCzXwPQVZMRHmiks5qh6GogaJpZM4JpA_9
> .
Lovely - let me know how it goes!
Sorry I missed this at the time - unfortunately you can't just run `redis-server` on some systems, and it's running by default on some others, so I'm not sure about adding it in like this. Maybe a more general mention that it should be running?
I think the idea has merit, actually - the sweet spot for threads for a python process is 2-3 in my experience before they become a degredation.

Not a fan of some of the code layout here, though, the termed global in particular. I'd rather see an object reference passed around.
> Not a fan of some of the code layout here, though, the termed global in particular. I'd rather see an object reference passed around.

Haha, yeah of course. This was proof of concept. I'll clean it up and make another commit when I get a chance. Thanks!
No problem - thanks for looking into this. I need to take a look at `cq`, too, to make sure you have all the things I would think you'd need for a reliable task queue on channels :)
Yeah by all means, please do; your input would be greatly appreciated. It's still early days, but it works as expected for the use-cases I have. I'm not sure about performance, I suspect it could benefit from some analysis. Plus I'm nervous about potential database deadlocks as a result of the subtasks/chained tasks infrastructure, I need to think some more about how to be sure they won't happen.

And it could really use some cleanup too. :)
Hi again Andrew,

I've cleaned up the code a bit. Now uses a `WorkerGroup` class to manage the threads. One thing to note is that I've split `worker_ready` signal into `worker_ready` and `worker_process_ready`. There are occasions where certain operations need to be performed only per-process, not per-thread.

Let me know what you think.

Cheers,
Luke
Hmmm, actually, I'm not sure about having moved the `worker_ready` signal into the `Worker` class. Could that be problematic?

Edit: Yeah, I think it could. I'm going to move it out of the constructor, at least.

Edit: Okay, moved into a method for flexibility.
This is really nicely done - like the class arrangement! Happy to merge this if you're ready?
Thanks! Yep, I think it should be okay.
Ta!
Odd, we tested this change at the time to make sure it carried over. The method you've chosen here isn't thread-safe, so I can't merge it in as-is.
Should be thread-save now. The failed test is a travis-ci issue.
It's still not threadsafe as two different threads could write in the pre-change handler before both trying to read from the post-change handler; threadlocals are needed in order to pull this off correctly, and I'd still rather try and see if we could store things on the instance instead, because otherwise we rely on the two handlers always being called in order.
Ok, after further investigation I found that the problem was in my code. So you can forget this.
Looks like you have the same content in the main dir and the subdir - is this intentional?
@andrewgodwin yep, it was intentional, as I thought that's what you asked for. Would you prefer the main dir make reference to the subdir thru a link instead?
Yes please, I'd rather have a sort of index with date links up there. Sorry for not making that clearer!
@andrewgodwin done
Thanks!
Yeah, this is roughly the approach I was thinking of, but it would be nice to:
- See if this works with both orderings of http_session/channel_session as decorators
- Consider making it an explicit argument to http_session if ordering silently makes it fail, and raise a loud error when it can't be done
- Add some docs
@andrewgodwin I followed your suggested and added a explicit `persist=True` (better name ideas?) option to the `http_session` decorator to handle the cases when the channel_session isn't available (missing decorator, wrong order).

I've also updated the docstrings of both functions. I considered adding a paragraph in the getting-started page section on sessions but it felt out of place in context of the tutorial. Might be worth to create an issue for a separate sessions docs page to explain further. 

If there's a better place in the docs where I could add more detail point me in the direct and I'd be happy to.
Hrm, I'd rather the `persist` option also actually controlled if it tried to persist rather than just giving a different error - it's a bit odd that right now it persists even if you pass `persist=False`. Also left a comment on one of the test cases about the doubling of decorators.

I'm starting to wonder, though, if there's a cleaner overall approach here - what you've done works fine, but my original slightly-botched API idea for this stuff is not working super great with it. Any ideas how you might change the whole session persistence API (given decorators as the application mechanism and backwards-compat concerns)?
I think the reason we're seeing it break down is because of the weird coordination between `http_session` and `channel_session` that needs to occur to make this work.  One idea for a cleaner API would be to have a separate decorator all together. It theory it would function similar to `channel_session_user_from_http`. I don't think it would conflict with any of the existing functionality either.

``` python
def persistant_http_session(func):
  @http_session
  @channel_session
  def inner(message):
     #if write the session
     #else hydrate the session
  return inner

@persistant_http_session
def ws_connect(message):
  pass

@persistant_http_session
def ws_receive(message):
  pass
```
Yeah, that might end up being cleaner. Perhaps `channel_and_http_session` to keep with the naming scheme?
This feels a lot cleaner. What are your thoughts?
Yes, I like that a lot more! I'll merge it in now - if you feel like putting in a PR for the docs too, that'd be great, else I'll get to it next week.
Why is this here twice?
I actually deliberately didn't put `groups` on the base class, as I'd rather have one place for people to put the group names.
Ok I  reverted changes around `group_names`.
Great, thanks!
Hrm, maybe we should have this as a `json` keyword argument rather than automatic? I'm worried that having it automatic might lead to people being confused if they pass something in that's valid JSON on a channel receive and it comes out as not a string (e.g. the string `12345` would turn into an int suddenly)
Should `json` default to `True`? That feels backwards incompatible.
Yes. At the previous version of  `receive` we decoded message text all the time at `HttpClient`. So using `json=True` doesn't feel backwards incompatible. Or I miss something?
Oh, yes, you are right. It's fine as is then.
Onopen works as expected for me in Chrome, and is part of the RFC spec for WebSockets, so I'm not going to remove this without proof that it's necessary.
Why would you do this? It will call `onopen` even if the connection is not established - I don't think this makes sense.
Thanks, this is probably left over from when they _were_ called response channels.
I actually had a fix for this locally I forgot to push up (I just did) that uses `socket.readyState` to make sure the code works correctly if it's typed or run from a page - sorry for the clash!
Awesome, thanks!
Needs fixing the corresponding test case:

```
  File "/home/travis/build/django/channels/channels/tests/test_request.py", line 66, in test_extended
    self.assertEqual(request.META["SERVER_PORT"], 80)
AssertionError: '80' != 80
```
I'd also like to be sure that `str` is the right thing to use here, rather than `six.text_type` or `six.binary_type`.
Can you combine this with the other PR please? I can't merge unless the tests are passing and either of these will pass if not combined.
Thanks - not sure how I missed that one.
Thanks!
Thanks - I had forgot you could do this.
We're now seeing a limitation of github issues: The issue describing this very change would not fit the template very well.
The template is just a suggestion and asks for the information common to issues related to the project.  It's not perfect, but should reduce the repeated "What version of channels..." that seem to have to be asked on almost every issue related to channels itself.
Don't get me wrong: I'm sure this template is an improvement to the project, and it's a Good Thing(TM) that you added it. The criticism wasn't against this patch, but against GitHub Issues.
Comments are also possible in templates. Syntax:
`<!--- This comment is only visible in the write mode. Not in the final issue. -->`
We could add a comment that says that this is just a suggestion if this makes the things more clearly.
I will modify the template to be a bit more generic regardless.
Wasn't meant to be final, more of a reminder...
I appreciate the reminder! Thanks for bringing this up.
Those tests failed because the test expected http_timeout to be passed in to the server as None instead of 60.

This seems bogus since the value was hard-coded to 60 before I made my change.
It's just mocking so it's very fragile - just fix the assertion in the pull request too so it passes.
Gotcha. Hopefully I will have a few minutes to get this done this evening.
Lovely, thanks!
Closing this as mentioned in #388.
Ah, nice catch, and before it's even in a stable release.
Thanks!
Err, this was for #394, not #398, I suspect. I will update that ticket.

(FYI, if you put "fixes #000" in the commit message, it'll auto close things once they're merged)
I think a Django model is probably the best way, given that Channels is a Django app. I'd be tempted to say maybe the delay server should even be its own separate Django app so the models can be limited to install if you add it to INSTALLED_APPS?

I think the channel name should not be configurable - the protocol specs so far all have fixed names (e.g. `http.request`) as that's part of what you code against. I do wonder if we should call it `__channels__.delay` or something more similar though, or if the `channels` namespace could just be kept as a reserve.
I think keeping the `channels.*` namespace reserved is reasonable. I might suggest to go as far as to enforce this in the router or `runworker` with an error so it's clear to users.

I actually think a separate django app is a great idea. Especially if this continues to evolve into #74

How do you feel about making the storage configurable? I think a django model is a fine default but maybe it's possible someone would prefer a local memory or redis backend option.
I would say no to configurable storage (my policy is to say no to generic abstractions unless there's a real need) - if someone wants different behaviour, I think they should write their own delay server against the specification we'll come up with, since that's the real abstraction (and they might be able to structure the storage interaction better, e.g. async calls to the datastore if possible)
Added some commits here. Created the channels.delay app and moved everything over. Messages are also now stored using a django model.

I added support for an `interval` parameter so messages can be dispatched periodically.

Any feedback is welcomed
I think it looks pretty good - some questions:
- Do you think it's worth refactoring the Worker code to share between this and `runworker`? I've been pondering having a basic worker loop in `asgiref` which might help this too.
- Could you add a spec for how delays work? There's sub-specs for ASGI in the docs already, which also makes me wonder if we should call it `asgi.delay` or something else without `channels` in it.
- Given that it would be nice to also have crontab-like periodic events emitted from the server without having to initiate them first (as per the "delay every X seconds" stuff you have), maybe it would be best to remove the delay-every-X and have a separate python/statically-configurable method for sending periodic events (the implementation doesn't have to make it in, just want to know what you think)
- I think this would be nice to have. Since there was a lot of crossover with `runworker`, I considered actually modifying it to handle the delay logic and exposing it as a  `--delay` option. With that said it feels like out of scope of this PR but definitely a quick refactor.
- Yes defintely! When you say sub-specs I'm assuming you mean something like this? (http://channels.readthedocs.io/en/stable/asgi/email.html)
- I like this idea a lot and it's something I thought about but didn't have a clear idea on how It would work. The current interface accepts a delay parameter as the number of seconds to delay. Do you see this as augmenting that interface to pass an importable string? `{'channel': 'test', 'delay': 'module.callable_that_returns_seconds', 'content': {'x': 1}}`. Or do you see this callable being executed on every worker run?
- Let's keep that out of this PR but consider it once it's merged, as I think it would be widely valuable.
- I do mean something exactly like that.
- I mean not having it configured via channels at all (as you can lose messages over channels), but having just a Django setting or similar that configures it. Just a list of channel, payload, and interval would work.
Ok put some more commits up.
- There's now an official ASGI spec. I changed the name of the channel from `channels.delay` to `asgi.delay` to make it less of a channels specific thing.
- interval functionality has been removed
- changed default unit from seconds to milliseconds. This is largely from feedback other developers I spoke to about the feature.

Let me know your thoughts.
Yup, this seems lovely now. Sorry about the delay in getting back to you - anything else you want to add or should I merge it?
No worries, appreciate your feedback on this. Merge away 👍
Thanks for your work on this!
Great work on this guys! Looking forward to giving it a try.

One question: after looking at the implementation, it seems like if I ever need to reschedule / remove some delayed tasks, I can directly manipulate the Django model to change the due_date or just delete the model object entirely correct? It looks like in the delay server run loop it makes a live db query each time, so looks like I shouldn't run into any caching issues or such, right?
Well, that's not an officially documented way, so I can't say it'll work forever, but yes, that would work for now.
@ssteinerx Thank you for review!
Looks good, thanks! I'll do a bit of copy-editing cleanup later this week but nothing major, just a few extra words here and there.
@Krukov Quite welcome!
This function takes
You can create consumers
Thanks!
and returns
and returns
argument.  Note that
Instead of making routes using `route_class` you may use the `as_route` shortcut.
Use the
with different
can use the `Client`
provides an easy way to test the full life cycle
This is not part of this PR. I can change it but only if @andrewgodwin will agree.
I prefer the hyphen personally - it's really a stylistic thing at some point.
Some thoughts:
- It's worth removing the old demultiplexer and docs with this patch, I don't want to have two!
- I quite like the design, but it still results in `self.send` doing the wrong thing and not raising an error in a multiplexed consumer. Do you have any ideas how we could at least make it error?
If the reply channel is set to None, I can't use it to send a reply back. It could be done by cloning the message, but it feels quite messy, and it might cause issues on lower stack layers.
On the other hand, if you send through the consumer without using the multiplexer, it's not incoherent to send a normal message. 

I started working on removing the old demultiplexer, but I will need some help to avoid breaking all the binding features depending on it.
Well, I just want to break anything that would silently work but do the wrong thing (like `self.send`). Part of me thinks sending should just be totally wrapped up so it can be intercepted somehow, but I'm not sure of the best approach there.

I'm happy to help remove the old stuff once this lands in a way where there's minimal breakage; I expect some, but the whole API is marked as alpha, so there's a bit of a pass.
Until it's possible to hook on `send` (I would like to avoid the scope of this PR becoming too big), would it be ok to throw an error `self.send` explaining that the demultiplexer should be used?
I didn't want to do that at first because `self.send` is used in the demultiplexer, but I could simply use the `reply_channel` in the multiplexer and have it work.
Yes, that's fine by me. As long as people can't shoot themselves in the foot without an explicit error happening.
Data binding tests are failing, if you see how to adapt them for the class demultiplexer it would be very helpful, since I don't know this part very much.
I'll take a look at some point in the next few weeks, my wrist is healing right now so it's hard to program!
I have manually merged this and fixed the interaction with databinding!
Awesome!
Do you have a unit test that can prove this was broken before? My reading of the creation portion is that it must save during creation to make sure it exists, thus there's no need to save it again.
Closing this in favour of the approach in #486, as that would also fix it but result in less saves if nothing changes.
And maybe it makes sense to remove the docs/cross-compat.rst file for the moment ?
I agree cross-compat should probably just go. Do you want to include that into this PR?
@andrewgodwin Yes. I've removed the file/reference to it and updated the PR.
Thanks!
I've got a question concerning this PR. I'm using channels==0.17.3 with daphne==0.15.0 on Django==1.10.3 and I'm closing the connection from a consumer. The connection is closed using code 1005 when `close=True` (verified from angular-websocket on Chrome 54.0.2840.99 m):

`message.reply_channel.send({"close": True})` 

Am I doing something wrong? Or is this not included in channels yet?
This has been merged in django/Daphne#58, which has been a while after the 0.15.0 release. You'll have to either use a non-released Daphne version from Daphne's master or wait for @andrewgodwin to release the next Daphne version.
Thanks! Will wait for it
Given that django-configurations is not a core part of Django, I'm not sure this belongs in the main docs. Is there a specific side-effect you could highlight instead that causes the problem?
Hi,

you are right that this notes on the documetation are more suited for django-configurations project; I wrote this PR because I was deploying a web app developed by my team and having seen django-channels for the first time I've headed to channels' deploy documentation, followed the instructions to create a asgi.py module, ran daphne and got a nice ImproperlyConfiguredError while the "django" project was running perfectly; after some tweaking I have found out the problem, fixed it and wanted to share.

So you are right that this has to be documented to the django-configurations side but it also true that a first timer with channels will go to read its deployment documentation and probably follow my very same path getting stuck like me :)

That said it is ok to reject my pull request but it would be nice to add some notes about configurations like DRF does in its documentation, mentioning useful third party apps integration.
Thanks for understanding. Is there a particular thing that you think would be good to include in the main docs, like how to generically avoid ImproperlyConfiguredError?
I'll manually bring this one down and run the tests against master daphne to merge it, so it might take a bit.
Got this merged in eventually now I'm in the 1.0 release process. Sorry it took so long!
That import is giving me problems when I try to run:

python manage.py runserver

I get the following error:

ImportError: cannot import name 'build_endpoint_description_strings'

Do you happen to know what could be the problem for this?
Yup, this seems like a smart move. Thanks!
I think a summary could be nice, as long as it was balanced and conservative in its conclusions.
With this serialize and serialize_data can react on `update_fields`.
I'm not sure I like the way this passes implementation details of Django signals all the way through to the databinding serializer, or how it only returns the updated fields rather than the whole object every time (I like consistency, and consistency is returning the whole object IMO).

What's the drive to add this? Is there an alternate way that doesn't pass down all the signal arguments and require changing the signature of `serialize`, maybe by special-casing updated fields and using `self` so people could opt into this if they wanted it?
You are probably right about passing the kwargs. My drive for that was, that I periodically updated only one field of a model and did not want to publish the outdated other fields. To ensure that they are always up to date I would have to fetch the instance every time. Are there even other use cases for `update_fields`?
I think that would be the only case; I would prefer to just populate `self.signal_kwargs` in the main repo, not change serialize at all, and let people do update logic like yours in their own subclass.
OK, I changed it accordingly.
Thanks!
I would put them in the same tests directory in a new file, just make a test that tests the utility. Do you want to do that before I pull this in?
Yep I'll add a test, it's pretty easy to prevent regressions here.
Added some tests, ready for review.
Looks like it's failing with certain Python versions, will look into a fix
Added some fixes, should be ready to merge (assuming it passes review).
Lovely, thanks!
Looks like you need to unindent the last line in your diff to get it to pass.
@andrewgodwin Thank you for the hint, have just fixed.
Looks like the import sorter is complaining now! It'll probably want you to move the try/except block below all other imports.
Finally no complains ) @andrewgodwin
Hooray! Thanks.
@andrewgodwin Are there any plans for 0.17.4 release? I could make respectively PR
No, I plan to do a 1.0 release as the next one, it's just been a very busy time.
Thanks!
Yup, good call.
Hmm, I avoided doing this so far as I didn't want another way to do it, but there are definitely advantages, not least allowing some of the decorators to close stuff properly.

My main concern is how it's websocket specific, but has to be written directly into the worker; it would be nice if we could have a slightly more generic way that allowed closing of other protocols like this without people having to have their own Worker class. I'm thinking something like a base ChannelSocketException where subclasses get `.run()` or something when they're caught by the worker, and so the WebsocketCloseException can have a `run()` that sends `close=code`
:+1:  I will correct it soon.
@andrewgodwin It is more suitable solution?
Yes! If you could fix the import sorting error I'll merge this.
Done!
Thanks!
I'm not sure I would want to include form usage with a standard way about errors - maybe just having a standard way and a hook to send them would be enough? Also, this includes the disconnection exception that is also in #468.
Ok. I'll make new PR.
`queue_depth` doesn't match the rest of the names. Maybe call it `messages_pending`?
@andrewgodwin fair point. How about `messages_count`? Should it stay as is, or be `messages_processes`? (`messages_processed_count` would be a tad to explicit)
Lovely, that seems a lot more consistent.
I instead made the send delay functionality only work inside consumers in 69c59ee8b4924cd346e0a2b1724979375ad9924c, but thanks for the PR!
Thanks! That is much better. I hope you make a release with this fix soon, because with the current stable of channels our tests are broken and we either have to patch each test or stay on channels < 1.0
Release should be coming tomorrow.
Wow. Great!
Released in `1.0.2`
Looks like flake8 has failed on a couple of things (https://travis-ci.org/django/channels/jobs/192609909) - if you can fix those the build should pass and I can merge it in.
Ah. fixed.
Still one trailing whitespace apparently. It's very picky!
... alright, I think I got it this time.
Perfect, thanks!
Thanks!
1: I don't think there's a need for multiple aliases for this one - in fact, raise an error if someone tries to set it.

2: I don't know what it's for either.

3: I believe Twisted will traceback during listen if you try to listen on a port that's already bound. Best to verify this by trying to make it listen on something deliberately already used and checking what happens.

4: If we can make sure Daphne lives in a separate thread but the worker lives in the test thread somehow (though I'm not sure that's possible), the overrides would work. Otherwise, yes, we will need to at least restart the worker for each test.

I also think the test case class should be in a new module, not `base`.
I can't comment on the implementation details related to Channels, because I haven't used it yet.

Some comments on the file organization:

- I agree, I'd move the test case classes into a module called `testcases` (just [like core Django](https://github.com/django/django/blob/master/django/test/testcases.py)).
- It's a bit irritating that we have the test infrastructure code _and_ the tests as such in one and the same directory. In core Django this seems more logical: the [tests are outside](https://github.com/django/django/tree/master/tests) of the `django` module, and the test infrastructure code lives in [django.test](https://github.com/django/django/tree/master/django/test) -- note the singular.
@bittner I absolutely agree with you. Its better to keep channel.test as primary package intended for users. We should provide `channels.tests` for backward compatibility which will show deprecation warning. Also channels own tests should live in the top tests directory and must be excluded from PyPI package. I'll do this change in separate PR if @andrewgodwin agree with this project layout.

@andrewgodwin This is my thoughts so far:

1. I agree we can make live server support for single channel layer only. If anyone needs multiple channel layers support for real, they will at least come up with some opinion about user api.

2. and 3. I'll research it at weekend.

4. Good point, I think it should solve this problem.

5. All django test cases lives in single module together with LiveServerThread class. This was my inspiration to put channels version into single base module. I don't mind to move it outside.

Thank for feed back guys!
@andrewgodwin Do you agree with @proofit404's [thoughts on the `channels/tests/` directory](https://github.com/django/channels/pull/497#issuecomment-274842298), i.e. moving the actual tests out of the module, and create the test infrastructure in `channels/test/`, [as I suggested](https://github.com/django/channels/pull/497#issuecomment-274746740)?

Is there anything I can do to help this PR move forward?
@bittner sorry for the huge delay. I can continue working on this PR when I comeback from my business trip on 13th of February.
I do think separating out tests and test infrastructure would be a good idea, yes.
Hello guys,

I stuck. Channels test cases use in memory layer implementation. Twisted reactor can be started and stopped only once during whole process live circle. If we use threads for live server, we can't write more than one test case at all. If we use multiprocessing for live server, we can't use in memory layer. `>_<`

Any suggestions?
Maybe running behave against real channels installation on developers machine is the best option here.
Yes, I think given that limitation it might have to use a cross-process channel backend so we can run the server properly?
Yes, for live server test case we can substitute project settings with `asgi_ipc` instead of `asgiref.inmemory`. If you think this is proper solution of course.
I don't want to encourage use of `asgi_ipc` to be honest, I'm considering deprecating it in favour of something else SQLite-based. I'd rather give people some way to feed in real channel layer settings.
It is possible to ignore channels test mixin. But that means we can't give certain guaranties about our environment. For example RabbitMQ layer doesn't provide flush extension. In this situation one test can influence into another through messages in the layer.

I can provide test mixin for RabbitMQ which must be used manually in each test case. But this wont be a general solution.
Yeah, the flush is kind of important for tests. Maybe the test case could look for the flush extension and then error if it's not present? Both IPC and Redis provide it, so at least there's options.
Current RabbitmqChannelLayer create new virtual host for each test. This make guaranties that we do not overlap test data even during parallel execution. I can move this in to test helper and make it part of asgi_rabbitmq package. So if user doesn't inherit from this mixin in test, test will fail due to the lack of flush extension. If user inherit from this mixin, test will be executed in the sandbox environment.

Does this sound like a proper solution?
I changed live server implementation to multiprocessing.

Test suite currently half time randomly fails and half time randomly hangs. I don't know what is the reason for this random behavior. Probably it happens due flaky process communication.
Not directly helpful to the code (sorry) but want to thank @proofit404 for continuing efforts on this.
Closed occasionally. Stupid buttons...
I can't merge this in if the test suite is randomly failing, of course. Do you know why it might be, and if it's solvable? I'd propose there's no live tests in the standard Channels suite anyway, and that the live test case is just left for those with the will and the infrastructure set up to run it.
For now I only have some guesses.

Speaking about integration test suite. I don't mind if we move it out of the channels tests. But I have no idea what will be the right place for it.
Well, I don't think that Channels needs integration tests built in right now; this ticket is just to provide the functionality for others to use, and that can live in `channels.test` without being used.
Ok, I'll try to test this manually. Maybe this weekend.
Hello guys,

The last `todo` in this PR relates to the port selection. If first port in the range is already bound, twisted reactor doesn't exit. As far as I understand `reactor.listenTCP` doesn't fail reactor in this case. This seems reasonable if we take into account that twisted reactor can be started and stopped only once.

Does `listenTCP` support errback passing? If not, we can check port availability manually before running reactor. Any suggestions?
Also I move `asgi_rabbitmq` test suite to this live server. This is how any one can use it with `asgi_rabbitmq` in their projects: https://github.com/proofit404/asgi_rabbitmq/blob/d0e5b388746999e2dccd51f87ac562f2aa190df0/tests/test_integration.py#L12
@andrewgodwin If you wish I can add same integration test to the `asgi_redis` so we will always sure that live server works for both official production layers.
@proofit404 I don't think listenTCP does support errback, though I'm not that knowledgeable about Twisted internals.

As for the asgi_redis tests, I don't really mind either way; we wouldn't be able to run integration tests in Travis, of course, but it's probably nice to have them around in case people want to check?
Why we can't run them on Travis? asgi_rabbitmq run live server tests without any problem.
I guess I had thought that wouldn't be possible, but if it is, the more the better.
The last know issue was resolved yesterday.

We don't need to check if port already bound. We simply bind zero port and relies on operation system to do proper thing. Exactly same change happens to Django master. I guess we can trust this technique.

This realization depends on https://github.com/django/daphne/pull/92 Please merge this PR after Daphne changes approve.

Can you guys give this live server additional testing? I already use it in the asgi_rabbitmq and asgi_redis integration test suite. But I don't want relies on my own testing only.
@andrewgodwin @bittner Any news? Did someone tries it?
@proofit404 Let me ask. (I'm not a channels user, I have no project to try it, sorry.)
It's good overall, I would like to see the conflict resolved and the multiple inheritance removed then I will merge.
I think this should read "in a separate process, so that" (singular; comma).
I think that should read "... test framework, such as Selenium, ..." (no -ing; no for example)

Just checking that we're PEP20 compliant! ("[Readability counts.](https://www.python.org/dev/peps/pep-0020/)")  :1st_place_medal: :smiley:
I know this may be seen as a stupid comment, but can you move lines 16-23 into a module docstring on top of the file? I think this gets read more often that way.

If it's really about the `from ..asgi import ChannelLayerManager` import a single line comment on line 12 above should suffice (in addition, when the comment block is available as a docstring).
This is too broad, it would catch TypeError from line 41 if you had unknown keyword arguments: (for example)
``` python
TypeError: setup() got an unexpected keyword argument 'set_prefix'
```
Is the broad nature of this try-block needed?
You could use a tuple for comparison, I think that reads more nicely:
``` python
django.VERSION >= (1, 10)
```
Also, how about catching TypeError explicitly instead?
``` python
try:
    django.setup(set_prefix=False)
except TypeError:
    # Django 1.9 and below don't have `set_prefix`
    django.setup()
```
Same [as above](https://github.com/django/channels/pull/497/files#r105505813): Tuple comparison or pythonic try-except would be nice
@andrewgodwin How would you phrase that?

"..., which allows running Selenium with JavaScript operating WebSockets", maybe?
More accurately, these are "browser automation libraries". If you want to mention the type of tests I'd rather recommend "acceptance tests". "Integration tests" test the inter-operation of units, hence they are not necessarily end-to-end tests.

- [Selenium](http://www.seleniumhq.org/): "Selenium automates browsers"
- [Splinter](https://pypi.python.org/pypi/splinter): "browser abstraction for web acceptance testing"
Should read "These processes run your project against the test database and the default channel layer you spacify in the settings.", I guess.

I think you should also use the article "the" before any channel, layer, extension, infrastructure, default web browser in the rest of the text.
I'm not sure about this change. This commend doesn't change module usage in any case. It is a reminder to the person who will change this module in the future.
It was inspired with Django own LiveServerThread run method. I think it's reasonable.
This doesn't need to be a mixin - both places it is used also inherit from `multiprocessing.Process`, so you can just make this inherit from that and have single inheritance.
This now needs removing from these release notes as we're further along; don't worry about adding release notes, I'll do that when I make the release!
There's a few grammar and presentation fixes here but I'll fix those post-merge.
Why was this changed? There's no need for `"""` unless you're doing multiple lines.
Is there a reason toxmatch needs to be in the top level directory? I'd rather have it somewhere else (I'm also surprised something like this doesn't already exist!)

You'll also have to fix up Jenkins, it looks like it's trying to run the Windows variant of all the tests (when it seemingly can't)
No reason and it can live anywhere. I wasn't sure where, so I figured I wait for you to ask that question and move it accordingly. Tox is implementing a wildcard approach, but I'm happy to pull this out into a separate tool (because I need it too), but that will take longer.

Its odd that the windows tests are being run - they shouldn't be and tox should be stopping that as platform dependent switching is built in. That may be because `travis-tox` does some odd monkey-patching to implement the `toxmatch`-like functionality ([their words, not mine](https://github.com/ryanhiebert/tox-travis/blob/master/src/tox_travis/after.py#L27))

As for Jenkins, I'll have a go. Did you mean travis, or is there more testing that I missed?
Urgh, I meant travis, not jenkins, my fault. Work leaking through.

I don't mind if it lives in the repo, but I do think it would be nicer if it worked as travis-tox does, rather than adding slightly irrelevant code to the repo (though if it was in a `ci/` subdirectory I wouldn't mind much)
Ah cool. Wasn't sure. I agree about having it work like travis-tox does is better long term, but `ci/` seems like an good immediate improvement.

I should have a fix for the travis stuff tomorrow.
Hooray! It finally works, everywhere. Congrats on your Windows support. https://ci.appveyor.com/project/LegoStormtroopr/channels/build/1.0.53
`psutils` just for determine minor value in one place for python2.7 at windows? Maybe we can catch `NotImplementedError` (or something like this without new dependency)? 
Also `psutil.cpu_count()` can return `None`
The easy alternative is to revert to multiprocessing and drop python 2 support on windows. If the code catches NotImplemented it will still need to determine (or fake) the cpu_count.
We can use multiple environment markers in the requirements.txt file used in tox. After that we can wrap import in the if statement with similar environment markers.
Worker.py has been cleaned up and psutils has been removed as a requirement.

https://ci.appveyor.com/project/LegoStormtroopr/channels/build/1.0.56
Is there a plan to pull this in? Happy to update the branch, but it went real quiet
Oh, I just forgot about it. Updating it would be nice? I just need to find the time to set up the rest of the Appveyor stuff I guess, I'm not super concerned about Windows testing at the moment.
Sorry, left this open for so long - going to just close it for now, hopefully I'll get a chance to look at appveyor support another time, but we've not had any Windows-specific issues so far so it's not high on my todo list.
I don't see what the error reporting mechanism here is - could you explain it a bit?
Uhhh you right. ) I think we don't need  reporting mechanism itself. I'll try to explain my vision. 
As I realize, Websocket protocol have not any specific way to notify clients about errors or something similar ( although we can initialize `close` message with status code and reason, but it is not suitable solution) (Am I right?). 
So we can send a message with some flag (like `{'status': 'error', ...`), but a client must understand this flag... We already have mechanism for sending messages (thank you captain obvious), but I don't think that we must dictate our standard for errors messages or implement a generic way to do this. 
`validate` method it is just a single entrypoint to determine behavior at valid/invalid data.  If you want to send errors to a client you can use your own `ChannelSocketException` and raise it at this method. 
Example for form validation mixin:

```python
class InvalidDataError(ChannelSocketException):

    def __init__(self, errors):
        self._message = json.dumps({'errors': errors})

    def run(self, message):
        message.reply_channel.send({'text': self._message})


class FormValidationMixin(object):
    form = None

    def validate(self, data, instance=None):
        data = super().validate(data, instance)
        form = self.get_form_class()(data=data, instance=instance)
        if not form.is_valid():
            raise InvalidDataError(form.errors)
        return form.cleaned_data

    def get_form_class(self):
        return self.form or modelform_factory(self.model, fields=self.fields, exclude=self.exclude)
```
Well, yes, the main thing I really want to address is having a standard error reporting mechanism - that's the hard part here. As I said before, I'd rather have form validation in a third party package and just put the hooks into Channels to allow validation to run and errors to be sent.
@andrewgodwin  Sorry for a long response. I close this PR. I'll try to remake it as soon as I can.
Much cleaner, thanks.
#515
Why move tests into a requirements file? The extras solution works fine and eliminates having to rely on yet another file.

The python 3.6 stuff I agree with.
IMHO it's like incapsulation of inner functionality from developers that use channels. I'm revert this change, if you didn't agree.
Yes, I'd rather keep it like it is, please.
@andrewgodwin done.
Hey @KhasanovBI, thanks for the PR. 

I agree that declaring test dependencies in `setup.py` doesn't feel ideal, but then I don't think any of the available options does - and in the end, it does not matter much, and it's more important that they're declared at all. FWIW, `sentry-raven` and `pip` itself do it this way, which swayed me to that solution.

Good catch on the envlist! Not sure how I didn't catch that, thanks.

Regarding Python 3.6: Personally I would wait until we support a Django version which supports Python 3.6, and generally would update dependencies in lock step with Django releases. I think having a clear message (such as "we support all popular Python versions that Django currently supports") is more important than supporting the (rare?) use case of users wanting to run channels with Django master. 

But I'm 0-, so it's no blocker. But if we declare 3.6 support here, we should update all other Channels projects as well.
I agree on not having 3.6 for now, it's nice to match Django. It's not hard to add when we need to (and I'm not aware of any big differences that would make code work on 3.5 but not 3.6)
@andrewgodwin done.
Nice, thanks!
The test on travis-ci are currently failing for python 3.5. Unfortunately I am not able to reproduce this problem locally, for me all tests pass.
I was able to reproduce the issue locally now and fix it with the latest commit 40f1a42
Interesting; I never saw a scheduler server as listening on a channel for jobs, but rather that it would have a config file (like cron), or just be controlled via the database and a GUI.

How do you envision people setting up jobs and being able to deploy them to different environments?
Sorry for the late reply.

I agree that providing a channels interface adds more complexity without providing much benefit. As the jobs are anyway already stored in the database, I think it would make more sense to provide manager methods for adding and removing jobs as well as an admin interface similar to [django_celery_beat](https://github.com/celery/django-celery-beat) for managing jobs.

Providing a configuration file could be an alternative approach for deploying scheduler configuration.
Yes, that seems like a sensible set of interfaces; it would be OK to merge with just a config file and manager methods, I think, an admin UI is nice but not super required.
Celery beat makes the assumption that there is always only one scheduler, as otherwise locking is required to prevent jobs from being executed multiple times. Implementing those locks would be tricky especially for a file-based configuration.
I would however argue that it is desirable to allow multiple schedulers to allow more reliable job scheduling.
Do you agree with this (allowing multiple schedulers)? The consequences are that apscheduler can't be used and a custom scheduler + locking needs to be implemented.
Allowing multiple schedulers is incredibly difficult; you can try it if you want, but it's a distributed systems problem that might take a long time to solve.
Closing this for now as I unfortunately don't have the time to continue working on it at the moment
cmon bro
What is the current status on this? 
I was looking for such a feature and am willing to dedicate time to make it happen.
It's currently not being worked on, though I might take a look at it as part of the big refactor for channels 2.
Is there anything I can help you with?
IMHO, you should only initial migrations file. so after finalizing the model, re generating new migrations would be good idea.
This seems good generally, just need to get Travis happy I think.
It was old pip on Travis.
Good, thanks for this!
Hmm, the reason I moved from the method this diff proposed to a wait channel in the first place now eludes me, but I know there was reasoning behind it. Let me take a bit and work through this to make sure it's alright.
Was the original change to use a wait queue to avoid workers spinning? If the current request took a long time to execute then all pending requests would continually resubmit themselves to the original channel.
Yes, I think that might have been it, the idea being they're shuffled off into the wait channel and not re-examined until the next message in order comes along, rather than spinning around on the queue.

I wonder if there is a way to solve both problems at the same time, potentially by double-consuming the wait channel somehow. In particular, if I understand correctly, the problematic sequence here is:

* Message 3 comes in and is considered out of order by some code
* Message 2 comes in and processes, wait queue is flushed
* Message 3 is added to the wait queue

It feels to me like re-checking the session to see if a message has become current after it's added to the wait list might do it?
Latest attempt re-queues the messages back onto the original channel in the event that the next_order has changed to the current message order while it was being processed.
Yes, I think I like this approach. Ready to merge it in?
yeah go ahead
Thanks!
Mostly fine, but can the default implementations please just be on the class directly and not new global variables in the module? Most of the cases where they're used directly can either be accessed using `cls` or just use `json.dumps` directly
👍 Will do. High five for quick feedback!
Thanks - sorry I forgot to merge it for a bit there!
This can be gotten from `cls`, surely, rather than being passed in?
I'd rather this was a None value, and it directly fell back to json.dumps rather than a global variable
Oops, totally overlooked that. Good call.
Had to keep this as a constructor arg/instance var, since there's no way to propagate the demuxer's class variable into the `WebsocketMultiplexer` _class_, and the demuxer directly instantiates this class so there's no existing way to inject a custom `WebsocketMultiplexer` class.

I suppose we could make a class var in `WebsocketDemultiplexer` to hold a custom multiplexer class, but then the developer would have to remember to define custom json encoders/decoders on custom `WebsocketDemultiplexer` _and_ `WebsocketMultiplexer` subclasses, _and_ remember to hook up the custom `WebsocketMultiplexer` subclass to the custom `WebsocketDemultiplexer` class. The code here plays a little hot potato with the `json_encoder`, but it feels like it would provide an easier API in practice.
Why not have these as functions that just implement `json.loads` and `json.dumps`, then you can drop the if statements below?
Yeah, I see the problem here about propagating it; this is the one thing on my first scan through that I sort of didn't like but understood why it had to be like this. Arguably it's the fault of the existing code architecture for not being so great.

The problem is that this way does end up making `group_send` take the extra argument and you'd have to pass it directly through from the calling code, which is not ideal. I might prefer the whole "specifying the multiplexer subclass on the demultiplexer" thing in that case.
FYI, this is almost entirely just a move of this class (since it's referenced inside `WebsocketDemultiplexer`)...
... except I changed `WebsocketMultiplexer.encode` to `cls.encode` here to keep things polymorphic.
Yes, I think I was probably relaying old info there. Thanks.
It's fine, I squashed it down into a single commit to merge. Thanks.
Thanks!
So, this looks very fully featured and I am particularly fond of the fact it comes with docs.

However (and this may be a stupid question, please humour me), it looks like the code is duplicated into two places; one copy in `static` and one in `node`. Is it duplicated, and if so, is there no way to share that resource?
I guess this is possible with custom setup.py command. For example Sentry ship it's frontend this way.
@andrewgodwin the code in 'static' is compiled from the code in the 'node/src'. Specifically, it is transpiled (via babel) _and_ (unlike the published module) exported into a global 'channels' object so that is available to the browser.

Could we remove the file in static, and automate runnning 'npm run browserify' as part of the release process somehow?
@proofit404 thanks for the pointer, I'll look into how sentry does it
I've looked into how Sentry handles it, and we could compile at installation time.

Considering that we don't want to make nodejs a requirement for channels, I'm thinking maybe this should be handled as an extra. Something like 'pip install channels[javascript]'
We can run babel before making sdist and wheels. This way node.js will be necessary for contributing to channels itself.
I didn't realize you could do that :) I'll work on something on Monday
Yes, having it be part of the release/build process is likely the best thing. I don't want to make people install node if they use a `git`-based install, though, so it needs to be optional in some fashion.

The alternative is keeping it as-is and putting a giant comment at the top of the file saying it's autogenerated, and how to regenerate it if you submit a PR or similar. We could probably then add a rule to the Makefile that just has releasing in it at the moment to let you build it easily.
>  I don't want to make people install node if they use a `git`-based install

I could simply check for the existence of `npm` and silently bail out (or raise a warning) if it's not found
I think a warning would be fine, provided it was obvious enough that people who were 1) installing from source and 2) wanted to use staticfiles noticed it (of course, some people wouldn't notice a warning if it was fullscreen, but eh.)

I'd also be fine with just capturing the build step into the Makefile, though, and having a comment on the file saying not to edit it directly. That way it comes ready to run from wherever.
wouldn't it be better to have this in his separate package? ( I meant his own repository). I will more easy to maintain and to contribute IMHO.
It's hard to say. On one hand, it's nice to have a single solution that we maintain and that comes packed in (and it's not JavaScript-framework specific, as far as I can tell). On the other hand, yes, maybe it would be easier to maintain and release separately?
> maybe it would be easier to maintain and release separately?

I don't believe using a separate repo makes it easier to maintain. If anything, switching often between repos can become cumbersome.

However, I do think we should consider how we want to release the JS wrapper.

I would expect most of the work on the JS wrapper to be due to changes (most likely, new features) to channels. So the question becomes: do we want to 'enforce' the JS to stay up to date, or do we want to allow it to be a little behind?

I think framework-specific wrappers should be external -- given how fast the JS ecosystem moves.

But I also believe (although I can't know for sure) that the vanilla wrapper would be much more stable and won't need much maintaining, and most of the times the maintainer won't have to run `make build_assets`
Right, as it's written right now I don't think much is ever going to change, and the `channels` package is specifically the "nice websocket bits" layer on top of Django, rather than all of the code (the hard stuff lives in the ASGI/Daphne packages).

I think I would want the `node` directory renaming though, as right now it's a bit mysterious and might imply we have node-backed server code or something. I'd prefer something like `js_client`.
@andrewgodwin I've renamed the directory to `js_client`
Alright, looks good - ready to merge?
@fcurella thank you for all efforts you're putting into this issue.

Maybe we can write this module in the ES5 syntax. This way we can avoid compile assets step. So we can just put this module into `static` directory.

I wander if it make things much simpler? What do you think?
There are 2 steps involved in compile assets for `static`:

1. Transpiling: This converts the ES6 syntax to an older syntax (which will convert the `class` syntactic sugar to prototype-based inheritance), so that most browsers can parse it
2. Bundling: This step basically concatenates all the `import ...`d (or `require()`d) files into the destination file (namely, it puts the code for `reconnecting-websocket` in).

Using prototype-based inheritance will spare us from transpiling, but we'll still have to bundle the module with its requirements.
The only dependency I see is reconnecting websocket.  We can check if it installed and fail the same way as we do in asgi_redis for cryptography of twisted imports.
I liked the idea of having a module on npm to act as 'baseline', upon which wrappers for specific js frameworks can be built. But I don't see how we could have both the module and the `static` script without bundling.

I also really liked the idea of providing users with a simple, ready-to-use javascript wrapper that they could just add to their pages. Unbundling `reconnecting-websocket` will mean more burden on the user side. We can make it as easy as copy and paste by writing documentation, but it will still mean one more step for users: 1. add `reconnecting-websocket` 2. Add `channels`
Yeh, maybe build simplicity don't worth it.
@fcurella I agree with you on the build stuff here - ready for me to merge this in? I'd like to get a 1.1 release out with this in it soonish.
@andrewgodwin it's good to go. I've also incremented version on the package.json so it's ready to be published.
Great, thanks. Here we go!
Any tests for this improvement?
@proofit404 Added tests
The one change I would probably make to this is only checking the first two arguments; I'm worried that this is a little bit too permissive about where the message is allowed to be in the argument list. Otherwise, I like it.
@andrewgodwin Done :)
Great, thanks!
Nice, thanks!
Ah right, we fixed this in `runserver` in https://github.com/django/channels/commit/b2842f1ef1d2365971268a351b39ed9741b539bd, but yes, `runworker` needs the patch too. I'll take it in once the build passes.
Build fixed. Was a strange issue to debug, since it didn't trigger once when I ran tox locally. It turned out that the bindings from test_binding.py stuck around, making the tests not isolated enough. I fixed it by forcefully unregistering all bindings for the runworker tests, but this issue might need some more investigating.
That seems correct to me, likely we should have had that in there before.
Seems like a good idea!
Do you mind pushing it to npm? Cheers,
It'll go up with the next release - our PyPI and NPM releases are in sync. That should be tomorrow or the day after.
Thanks, I've monkeypatched it in the meantime `ws.connect; ws.socket = ws._socket`
Looks good. Not sure why the build failed; I suspect it's a random failure as there were npm issues yesterday, so I'll pull it in and fix the master if it fails again.
I like the design of this, it's clean and looks good! Two things:

* Let's call it `channels/security/websocket.py`, which fits more with how we try to separate things a little.
* Are you able to include basic docs in the PR? Not everyone is happy writing docs, and if you can't, I can do it, it'll just take a bit longer :)
Thanks for your quick feedback!

* I've renamed the new module to `channels/security/websockets.py` (with a trailing s to match the existing modules)
* I've added some docs and extended the doc strings a bit.
Thanks so much! Looks great, and merged in.
This is good enough for now, I think - we can come back and make the requeue configurable if it proves to be a problem.
:+1:
Looks good! Just needs to be rebased against the other one I just merged, I think.
Done.
I don't think we can just remove it like this entirely - I'd rather make it capable of both (and it seems to be mostly there)?
Yes, maybe removing is wrong way, but I think that separation is necessary. Http client should have more http friendly methods, like get, post ..... I think they do not need to be mixed.
OK, let's do this for now then, I need to sit down and work out the testing stuff properly.
It would be great if this was in the docs; if I have time I might PR it.
That would be most welcome.
This needs rebasing now I merged in the `WSClient` rename PR.
Rebased :smile:
You can mock time in the whole class. Also I don't think that mocking should be considered as a reliable technique in the integration tests. Your tests will fail anyway if multiprocessing mechanism have changed from fork to spawn or spawnserver. Also this will not work at all on platform without fork.
The proper way of mocking in this case, if you **really** need this, override `run` method in the subprocess and pass it to the test [this](https://github.com/django/channels/blob/master/channels/test/liveserver.py#L158) way.
Yeah, I'm going to say that we can't support in-memory mucking around with stuff with the live test case and close this. It's not really feasible since they have to live in different processes; you should treat the test case more like a full acceptance test.
:+1:
`self.fields` can be a tuple for example. This way condition statement wont match, since you removed type cast.
Sorry, but I'm not agree. If the fields property is a tuple with the element `('__all__')`, python considers as a string `'__all__'`.

Execute: `type(('__all__'))`

Sorry my bad english.
I agree with Artem. In Python, `("__all__",)` is not equal to `"__all__"`.
And `"__all__"` is not equal to `"__all__",`. I don't like this part of python syntax for sure.
Ok, (`"__all__"`**,** ) is not equal to `"__all__"`, thats true. 
What I want to say, is that if you considers the fields property with the value` ('__all__', )` don't have any sence. 
You should specify in the documentation how to use this property adequately.
If I set fields property with value `'__all__'`, when I use the method update not change data in database.

Sorry my english!
I don't see why `("__all__",)` can be illegal use case.  Django forms behave the same way. So at least we should keep things convenient.
Ok, then:
`self.fields in ('__all__', ['__all__'], ('__all__',))` ¿?
Binding is now gone, so closing this, sorry we never got to merging it!
Thanks!
Cool, thanks. Looks like you'll also need to update the tests - they look at the runserver signature, so if you go in and find the three Travis shows as failing, there should be a relatively obvious place to update the function signature.
I updated the 3 failing tests, and also went back and fixed the line I added that was over 119 characters long. Once this is merged the travis build will pass, as I see you already fixed the import ordering that is currently failing the build.
I can't merge without the build passing - could you just merge in/rebase the changes I've already done on master to turn it green on here?
I rebased my changes from master. It seems there were a few other files on the master branch that were still causing that build to fail anyway, so I fixed those as well and now it's all green. Thanks for your patience reviewing this!
Merged! Thanks for doing this and your patience in updating it :)
Like I requested in https://github.com/django/daphne/pull/121, let's change this too.
"Daphne" is typo'd here as `daphane`.
Ah good catch, seems I copied and pasted it from the parameter above, so I fixed that one too.
Unfortunately I can't take this - group send can be for anything, not just WebSockets, though that is obviously the normal case for most Channels users. Is there somewhere else you think it might be better suited that isn't generic reference docs for the send API?
If not there, where? Imagine the following scenario:

1. A user (me in this case) is new to Channels and has no prior knowledge of the project.
2. The user reads the tutorial and gets a basic route set up. Setting up the JavaScript side is easy.
3. The user doesn't believe that he/she needs the `text` key that the examples use, believing it to just be part of the example, rather than part of the API, so he/she uses keys which are relevant to the project at hand.
4. `runserver` throws an error, complaining about unexpected keys.
5. The user goes to the logical place to learn how to use `send()`, the API docs.
6. The docs say that `send()` expects a `dict`. The logical conclusion is that this means _any `dict`_ and that that the docs are wrong. The docs don't provide any information to help the user learn how to use the API, which means in their current state they might as well not exist.
7. The user Googles the error message and comes up with nothing which appears relevant. A few unrelated bug reports.
8. The user wants to know what the expected keys mean, but there's no information to be had, and no way to find out.
9. After trial and error, the user figures out that the appropriate key is `text`, which expects a string, and that all the other keys are irrelevant. (Since other docs mentioned that the API would call JSON on supplied dictionaries, the fact that `text` expects a string and not a dictionary is not obvious.)

If what `send()` expects changes depending on something, then whatever that is should be explained in the API docs, and links should be given to make it possible for users to discover what it expects in their case. I can't submit such a patch because I haven't got a clue what the answer is. All I know is that, if you read the API docs and don't learn how to use the API, the docs aren't doing their job.

It seems like this project is only for those who are already familiar with it. For those who are unfamiliar with it, good luck. That, or being generic is emphasized so much that real-world usefulness is seen as of lesser importance.
Well, ideally, your list would end at:

2. The user reads the tutorial and it makes clear that `text` is a WebSocket-specific thing

Or.

3. The user reads the code examples repo where it's made clear how the encoding works

I'm not saying we don't need to improve the docs, I'm saying that the specific location you PR'd against is generic. I wouldn't be averse to putting a `note` admonition there that calls out that you need to consider the sending format and linking out to an explainer section elsewhere.
I'm not a fan of this, so I'm going to say no - I don't see how

```
from channels.shortcuts import JSON_Dict
Group('somegroup').send(JSON_Dict(**kwargs))
```

is much better than
```
import json
Group('somegroup').send({"text": json.dumps(kwargs)})
```
I don't believe in adding abstractions in a case like this when educating people about the underlying protocol is about as easy and better in the long run for designing good software.
Why should it be necessary to know the underlying protocol? To use Django with HTTP I don't need to know the HTTP protocol. If I have more advanced needs, sure, but normally I can just use Django's API. This is even more true when discovering the underlying protocol is extremely difficult (as #653 attempts to address).
Django is much more tied to HTTP than Channels is to WebSockets; in particular, I have IRC and Slack protocol servers that would use code that looks very similar apart from a different response format.

Channels already has wrapping around JSON handling and WebSockets, too, in the `JsonWebsocketConsumer`, which overrides its own `self.send` as you describe: http://channels.readthedocs.io/en/latest/generics.html#websockets - this is the high-level interface we intend for people to use if they are doing JSON-WebSocket.
Ordering is now gone in Channels 2.0 as it's all in process, so closing this. Sorry we never got back to you!
This seems fine to me given what it's replacing. Did you mean to close this?
Yes, tests failed. I found an error. 

Current status is: DEFAULT_LOGGING['formatters'] was added in 1.10, trying to figure out a way to keep compatibility with all versions
Hmm, failing to see how that build failure would be related to the changes in this PR.
Well, they're about the runserver command signature, so I'm relatively convinced they are related. Did you make sure you rebased against latest master (there's a new argument in there)?
@andrewgodwin, the commit was made using Github's online edit mode, so yes, it was made against the latest master.

Failure appears to have been a test failure, not a failure in the code itself. There were a few tests mocking out `Server` for testing `runserver`. Switching those to mocking the `server_cls` attribute instead made the tests run clean.
Yup, that would do it. Thanks for getting it green.
Andrew and Sergio: Thank you for loving and fixing docs.
Yup, that's better, thanks!
This has already been merged, but @ftxrc did ask for a thorough review.

While it removed the query string inconsistency, now the documentation doesn't explain where `room_name` is coming from, and the example code is wrong.

The `routing.py` example for the `Persisting Data` section does not extract the room name from the URL path, so the example code under `Persisting Data` is incomplete. This could be fixed by updating the `routing.py` example, but then it would be using a feature that isn't explained until later in the `Routing` section (not the end of the world). In order to match with the code it would also need to have the URL path in all three WS message types, unlike the later `Routing` section which only pulls `room_name` for `ws_add`.

My 2 cents.
@dsanders11 I'll definitely explain it a bit more in a bit. I did add it to the routing.py, just the main one however; that one seems to be called in the main rooms.py where the websocket calls are routed.

```
chat_routing = [
    route("websocket.connect", chat_connect, path=r"^/(?P<room_name>[a-zA-Z0-9_]+)/$"),
    route("websocket.disconnect", chat_disconnect),
]
```
However, reading it again, some things in it are slightly wrong; I'll fix them in about 30 mins.
> I did add it to the routing.py, just the main one however; that one seems to be called in the main rooms.py where the websocket calls are routed.

But you missed the one [in `Persisting Data`](http://channels.readthedocs.io/en/latest/getting-started.html#persisting-data) right after the example code. Right after the code you updated to add the `room_name` argument, it says "Update routing.py as well:" and that code does not include the URL path for `room_name`. Lines ~410-430.
@dsanders11 I'll see; I'll do this once I have lunch. Forgot about yesterday haha, will take a look and fix.

UPDATE: Taking a look, I see what you mean, and I'm fixing it to use sessions more appropriately. @dsanders11
Made one comment, otherwise LGTM.
The indentation is incorrect here, it has an extra space.
Sorry about that haha, forgot to adjust it. Will attach another commit.
UPDATE: Done.
Added a couple of comments, and you're missing the `_` after the links in RST (you can view the RST file directly on your branch in github to check things like that)
Fixed it up based on your comments, looks good to go?
Lovely, thanks!
Could you change "app" to "third-party apps"?
Could you add a paragraph about how to resolve the issue (either moving `channels` to the top of `INSTALLED_APPS`, or removing the offending app?)
If we include lock file, we will improve "reproducability". But I'm not sure if it worth it.
Yeah, let's leave the locking out for now.
Since this is a JS change, can you also run the rebuild process for the bundled code? I like to keep the main repo up to date.
Great! Thanks.
I just saw that the checks failed, I'll fix it.
hey @andrewgodwin is there anything I can do to help with this PR?
I'll review it during this week. Thanks for your contribution!
Thanks @proofit404 I'll do the changes this week and let you know
Since channels package isn't part of the Django code base, I don't think its good idea to use `django.channels.server` as the logger name.

Could you answer what behavior we expect, if someone run development server with `--use-asgi=false`?

Also, can you write documentation chapter on configuration logging with changes you've done?
Hey @proofit404, I changed from `django.channels.server` to `channels.server`.

Regarding `--use-asgi=false`, you mean `--noasgi`, right? I'm not sure which behavior I should expect on this. I tested against master and my branch and both worked the same way.

I'll start writing the docs for this, but English is not my mother tongue, so I'll probably need some help on this.
any updates?
I'll return to this PR at the weekend.
hey @proofit404 I started the session, but I'm not sure what should I add there.
I've tried this PR. Looks like it working. But I need more time to review it intently. Sorry for the delay.
Really looking forward to this merge. It's been very hard to debug without access to the log.
One side question: Why would you set propagate to False on the loggers? The old implementation breaks up my logging config: It sets propagate = True, even if I configure it on my own in the global LOGGING (dictConfig) config. I believe this change would respect the global configuration of the logging better, so if I set propagate = True on the channels logger, it will stay like that.

The reason why I am asking: From my understanding when you set propagate to False the log messages don't get forwarded to the root logger and so global handlers are not invoked. I have a SentryHandler on the root logger, which means every error or exception gets reported to Sentry (which is desired). So why would one set propagate = False as default?
This PR is now super mismatched to the current release so I'm going to close it, but I would still like to see logging improved somewhat (though I did some improvements in Channels 2 anyway)
This argument is redundant now.
This module doesn't exist.
Hi @proofit404 what should I use here? I used what was proposed on the github issue.

Thanks
I'll reread related issue and leave a more helpful comment.
Oh, that seems awful to track down. Good job!
Great! Thanks!
Thanks! `asgi_rabbitmq` is not official yet. Nevermind.
Ah okay! I just noticed it has been there for 3 months already but the number was never updated.
Genecir Implementation -> generic?
Yep, you're right. Thanks.
I won't be able to look into this properly until I get back from holiday, but my intention was to build this into asgiref - I already started with https://github.com/django/asgiref/blob/master/asgiref/worker.py
Also, given that channels 2's models would not require the worker class for the general case, I don't want to put too much work in before we know what's happening there :)
I think the best way we can implement it for Channels 1.0 is an installed app with separate management command.
Great. Thanks!
Oh is that so? Didn't know that! Thanks for the feeding.
@marcelodufe No problem. I have to stick up for our eccentric spelling. 🙂
This is just British vs American English. It's not a spelling mistake _per se_, and I can't see a locale setting that would settle it.
This code was already correct - hence the failing tests when you changed it. The problem is in the test client.
@andrewgodwin 
"The ASGI design decision is to transport both request and response headers as lists of 2-element [name, value] lists and preserve headers exactly as they were provided."
Ok, well the test that is failing isn't treading the headers like of list of 2 element lists. They are treating 
them as a dict.
@proofit404 I made the changes request and now all tests pass
Waiting for @proofit404 to approve and we can merge (I'm OK with this).
Hi, guys!

Sorry I wasn't responsive last weeks. I resolve all issues in my personal life and now fully available as channels maintainer.
No problem, I would have merged it anyway after a few days :)
Please correct all failed tests.
Why you call it `_tuple_headers`? It returns a list of lists.
Maybe `[[header, value] for header, value in self.headers.items()]` is more readable.
Ill make those changes, and make changes to the tests.
You need to edit tests as well ;-)
You are using freaky item access. Rewrite this expression in a readable way. Better to use `assertIn` method here.
Please provide me with content value and I'll try to improve this.
this is what i got.

{'headers': [['cookie', b' sessionid=chn75dd650d27ba86a8f0f0617567dd9']],
 'path': '/',
 'reply_channel': 'defaultqFyJJ'}
Thanks!
I think in this case it would be safer to just catch the error and squash it in case of race conditions?
Could a message be added between the last send and the attribute removal?
This class is now no longer in Channels, so closing. Sorry I didn't get back to you before.
Patch looks good, though I think the commandline argument should default to True (but leave it in case people really want to turn it off).

Also, just so you're aware, Channels 2 is just around the corner and doesn't have this worker code in it, so your patch will only live on in the 1.x branch once that change happens!
@andrewgodwin Agree, renamed & inverted the argument meaning.

> Channels 2 is just around the corner and doesn't have this worker code in it

Thanks for the note, as of now I'm totally fine about it.
@andrewgodwin Added a simple test, polished and squashed, ready for review.
Thanks a ton @proofit404 :+1:
I'll merge it and fix commented issues myself.
This route pollute global state an doesn't cleanup it properly.
Add doc string what this test is actually do.
Covered in https://github.com/django/channels/pull/792/commits/713e972bfecb6534c177169c498888ae8322bd0b.
Fair, but I was searching for smth like `.remove_route` and found nothing, so the only way is to drop a route from `router.root.routing` manually and update channels names like it's done [here](https://github.com/django/channels/blob/master/channels/routing.py#L33-L34), right?
Or you can create channel layer instance manually with class constructor and use it.
Adressed the issue with https://github.com/django/channels/pull/792/files#diff-3ba621217225120eff2c061666b8043cR103, let me know if you like it or not.
If this exception is always propagated, should we use `assertRaises` here?
Well, the thing is that it's [not always propagated](https://travis-ci.org/django/channels/jobs/308991215). The problem here is that *usually* sub-worker threads start earlier and pick a message, so main worker is idle when we call sigterm handler and almost always there's an exception to break its loop; but [*sometimes*](https://github.com/django/channels/pull/792/files#diff-28a43fbdfeeb97555c5e29e15383a927R184) main worker picks it by itself, and calling sigterm handler doesn't bring the exception - we're humbly waiting when message is processed and the exception is not needed.

 This looks a bit tricky, so I improved the tests to cover all possible cases, please take a look.
I moved setting the flag here because getting `(channel, content)` doesn't always means that the worker get a message and have something to process, I encountered it when covering a multiple-workers case with tests, let me know if you disagree and I'm missing something here.
Couple of quick comments:

- I agree trying to base the multiplexer on WebsocketConsumer is probably not worth it. It should probably be its own separate ASGI app, which means it will be able to absorb multiple accepts being sent etc.

- Django user/auth stuff is coming soon, that's on my rough plan for the next couple of weeks, along with a Channels test suite that actually works etc.
This fixes #795.
Just FYI, I might have to change all of the multiplexer code significantly soon. I'll try and keep this PR in mind but since it's not mergeable right now I can't guarantee.
No problem. This was more an exercise for me to try and understand what is happening in channels. I can try to keep this up-to-date with any changes you might make - assuming of course - any of this remains relevant.

Not sure what you mean by not mergeable. The tests fail, but I think that is because the tests were broken in the base version.
Yeah, I forgot the tests were still broken on Travis (they work locally these days). I'll try to get that fixed soonish.
OK, all the tests are good these days and the 2.0 release just went out, so things should be in a good place to get this updated and look towards landing it (I took multiplexers out entirely for the 2.0 release as they were broken, so you'll have to readd them)
Looks like this PR has been superseded by #825 :-). Will close.
As discussed in #795. Note that I did not change the messages.
Can you pick a response code in the `1xx` range that isn't 100? I'd rather not step on an existing HTTP code. Maybe `113` or something random?
@andrewgodwin I've changed it to 113.
Thanks! I'll get round to putting it in a release soon.
Hi, thanks for your contribution.

Correct me if I'm wrong but this PR change is a matter of taste and doesn't include any new functionality. Also, this change doesn't look backward compatible to me.

Why you can't use old-one format? `fields` were there for model binding meaning like "notify me about model change on this fields".

Closing for now. Feel free to reopen if you think it worth further discussion.

Regards, Artem.
Hey @proofit404,

It is all about what `django.core.serializers.serialize()` returns. Currently `channels.binding.websockets.WebsocketBinding.serialize()` is doing double work for something that is already done by `django.core.serializers.serialize()`, the only difference is that we call the "fields" key for "data". We're even adding `pk` and `model` which were already provided by `django.core.serializers.serialize()`.

My use case is that I'm writing a library for Elm for dealing with communicating with django channels via websockets. Elm is typed, so if I want to have frontend code that deals with both bindings and the initial data, the data sent has to have the same shape (including same keys in the JSON object) in both cases. For that to happen I can do one of three things:

0. Implement my `InitialDataConsumer` as follows (as you can see the iteration of `serialized_todos` just to rename `fields` to `data` seems a bit silly :)

```
class InitialDataConsumer(JsonWebsocketConsumer):
    def connect(self, message, multiplexer, **kwargs):
        todos = Todo.objects.all()
        serialized_todos = serializers.serialize(
            'python', 
            todos
        )
        # Change 'fields' to 'data' in the resulting output
        for todo in serialized_todos:
            todo['data'] = todo.pop('fields')
        multiplexer.send(serialized_todos)
```

1. Rely on that channels uses basic `django.core.serializers` functionality without any changes to the output (what this PR achieves).

2. Extend `channels.binding.websockets.WebsocketBinding` so it is possible to extend the consumer generated with data that should be sent upon connecting, this way it is possible to reuse `channels.binding.websockets.WebsocketBinding.serialize_data()` when serializing the initial data.

There is no surprise that I'm in favor of number 1 (and number 2 is also quite interesting, but I thought I'd try the path of "just use the output of `django.core.serializers.serialize()`" first :)

I'm up for discussing this further, since I think there is some value in having a sane API for dealing with initial data and subsequent "data binding actions" in the same way.

Does what I'm getting at make sense or does it still smell of "matter of taste"? :)
Hey @valberg - while I think matter of taste is the wrong word, the binding framework provided in the base Channels package is deliberately very simplistic especially in regards to serialisation, so that's one reason we may not consider changes. I would love a better solution that included initial data and updates, and maybe even proper state tracking on a backend, but that belongs in a third-party package (I may even move the binding we have now into a third-party package for channels 2 because I'm not sure it belongs in the core)

The main problem here, however, is that this isn't backwards-compatible, which would be a hard requirement. Channels 2 would potentially provide a way to jump this as it has breaking changes, but I am also keen to keep those changes minimal. Instead, I recommend building on top of the existing/new classes (depending on which version you want to target and when I manage to get it into beta) and maintain things as a third-party app that extends or replaces core classes.
Hey @andrewgodwin,

That makes sense. I'll look into writing a third-party app with bindings as you suggest.

Thanks both @proofit404 and @andrewgodwin for taking your time to read through my thoughts and ideas :) Your work is highly appreciated!
Thanks!
Yes, this is a much nicer way of handling it. Good to get this in before release.
Sorry, I did this patch on a bus and didn't realize that it created the commit in the channels repo itself; will do better next time :)
That's fine, you have commit after all :)
Great! Thanks!
Hi

I wonder if it is just a variable name change?
This patch doesn't seem to have any actual external effect - did you just want to rename it internally?

Also, if you're submitting a JavaScript PR, please recompile the built versions and include those in the diff as we don't have a build process for JS.
Hi,
- it is only a variable name change in the callback called when any websocket message is received (this callback passes the full message payload, and not "payload.action")
- I have updated the README to reflect these changes
- I have recompiled with "npm run compile"
- the tests pass (launched with "npm run test")
Thanks!
Thanks!
Great! Thanks!
😊
Thanks!
And here you can see the things that changed during development! Thanks :)
You're welcome! Awesome work btw! Looking forward to giving it a spin in the wild! 😄
Thanks!
Thanks!
Thanks!
Yup, good catch! Thanks.
I will happily take this once it has unit tests (I'll write the documentation part) - you may want to reuse the `channels_redis` unit tests for the most part.
I ported over the channel_redis tests to the inmemory layer.
Let me know if that is alright or if you want me to add additional tests.
Ah yes, I wasn't aware of the asyncio queue.
I am knew to asyncio just learned it over the weekend to write the memory channel layer :)

Do I understand you correctly that I should simply use the raw channel name for the queue key?
Should I also dismiss the assert self.valid_channel_name(channel, receive=True) check then?
You can leave the `valid` check in, but there's no need to do the part where it takes a name with a `!` in it and splits it into a non-local part, and puts the real channel name into the message dict.
Alright, can you look at it now.
I tested it today and it worked well that way.
Great, I will get on these cleanups later today.
Regarding the thread lock I do have a general question since I am not sure.
How is daphne handling new web requests in 2.0?
Is it spawning a thread for each request or is it entirely done with asyncio coroutines?
It's all coroutines. Some requests will end up using threads if they're based on `SyncConsumer`, but all the async stuff (calls to channel layers included) happens in a single main thread on a single event loop.
Thanks for the explanation.
Isn't that a problem though if some async requests run longer without await daphne will be blocked to answer new requests?
No, because they're async requests, as long as they `await` anything that's long running (as everything is, like receiving off the channel layer) the event loop frees up. You can have thousands of coroutines in the same event loop easily.
Ok I think I got it now
Looks good! I am ready to merge this if you are,
@svenauhagen @andrewgodwin 
https://github.com/django/channels/blob/d6643d96dd59e153cda13681a6d5a8963b9d577c/channels/layers.py#L268-L272

In python3, looping over a dict/set defaults to iterators, and _clean_expired() raises an exception, as changing the dict/set is not allowed during iteration.
`for channel in self.groups.get(group, set()):`
should be
`for channel in list(self.groups.get(group, set())):`

Error below:
```
Exception in thread Thread-5:
Traceback (most recent call last):
  File "/usr/lib/python3.5/threading.py", line 914, in _bootstrap_inner
    self.run()
  File "/usr/lib/python3.5/threading.py", line 862, in run
    self._target(*self._args, **self._kwargs)
  File "/home/xyz/venv3/lib/python3.5/site-packages/asgiref/sync.py", line 49, in __call__
    return call_result.result()
  File "/usr/lib/python3.5/concurrent/futures/_base.py", line 405, in result
    return self.__get_result()
  File "/usr/lib/python3.5/concurrent/futures/_base.py", line 357, in __get_result
    raise self._exception
  File "/home/xyz/venv3/lib/python3.5/site-packages/asgiref/sync.py", line 63, in main_wrap
    result = await self.awaitable(*args, **kwargs)
  File "/home/xyz/django/abc/consumers.py", line 47, in sender
    await self.channel_layer.group_send(self.MY_GROUP, message)
  File "/home/xyz/venv3/lib/python3.5/site-packages/channels/channels/layers.py", line 321, in group_send
    self._clean_expired()
  File "/home/xyz/venv3/lib/python3.5/site-packages/channels/channels/layers.py", line 268, in _clean_expired
    for channel in self.groups.get(group, set()):
RuntimeError: dictionary changed size during iteration
```
I just pushed up a commit to fix that.
I would like to point out some additional issues.
https://github.com/django/channels/blob/b58c213aaf507e555c88a667f722e3e0a24f4ff9/channels/layers.py#L261-L263
Previously (before asyncio), self.channels had been using a collections.deque, for which the following is valid to check if queue is empty:
```
if not queue:
     do_something()
```
However, the truth value of a queue.Queue or [asyncio.Queue](https://github.com/django/channels/blob/b58c213aaf507e555c88a667f722e3e0a24f4ff9/channels/layers.py#L223) cannot be used to check whether the queue is empty. It will always return _True_ and the channel is never deleted. The correct statement is as follows:
```
if queue.empty():
     do_something()
```
With the above corrected statement effectively purging channels from the self.channels dict, it also starts to delete non-expired (empty, but still active) channels. This breaks InMemoryChannelLayer again.
The corrected statement, which only purges expired channels, is as follows:
```
if remove and queue.empty():
    del self.channels[channel]
```
Even with the above fixes, the InMemoryChannelLayer keeps leaking channel objects in self.channels {}, when websocket connections are coming and going over time. The group_discard() method is called, which is correct, but channels with an empty queue keep hanging around.

I suggest the following fixes to _group_expire(), please comment if I missed something:
https://github.com/brubbel/channels/commit/ad6b135f9dd29036fbedc0004003941edaf480c2
Can you open a separate issue to track this? It's getting complex enough it needs one.

It's also worth noting that the in-memory channel layer is really only meant for testing, so fixes to its performance/longevity are going to be lower priority than some other bugs in the queue!
I am fully aware that the in-memory channel layer is for debug only, however -imho- for applications on a lightweight system such as raspberry pi, I think it is a reasonable alternative.
Right, just saying that fixing this is going to come below the 6 or so other bugs I have to look at at the moment!
Having looked over the code more, I'm not sure you need all the complexity that the Redis client has with receiving loops - you should be able to use asyncio Queue objects for most of the operations here and await on them natively (and there's no need to pack and unpack around things with `!` in them as that's purely a network efficiency thing).

Do you think you'd be able to reduce it down to have less of the `receive_loop` stuff? The version you're replacing was a lot simpler.
Looking good - just a few small cleanups, but this is getting close to merge! Thanks for your work so far.
Did you mean to change the docstring?
No that was left in there from testing I changed it to "In-memory channel layer implementation" since it can be used for more than testing now
I would add something here to clean up the queue entry in the `self.channels` dict if it's now empty.
Please change these back to `"""` - trying to keep everything consistent!
I'm not sure a `threading.Lock` makes sense here - you shouldn't need it since you're writing async code. Did you find a reason to add it?
This method should also clean expired group memberships separately.
What do you mean by that exactly?
Should I remove the channel from all groups if not queue?
You need to go through the group memberships and expire the entries if their expiry time is bigger than `group_expiry` (there should be a test for this too, but I'll add that later). The Redis one does it here: https://github.com/django/channels_redis/blob/master/channels_redis/core.py#L316
Maybe shortcut local variable will be better.
I added a timeout variable
The file you are trying to patch is gone in the master branch and replaced by https://github.com/django/channels/blob/master/channels/security/websocket.py which should not have this problem.
But in 2.0.0 release - file with this problem. 
I was think documentation is wrong -  it's code in 2.0.0 wrong ?
Yes, the 2.0.0 release has this file, but it's been fixed on the `master` branch already, and I'll be doing a new `2.0.1` release with the fix in it tonight.
Thanks, not sure how I missed it. I won't make you write a test as I should have done that.
Thanks!
Thanks!
Thanks!
Thanks!
Ah yes, thanks. We can probably change that example to use `AsyncWebsocketConsumer` now it's written as that'll accept by default.
This is not something I can merge into Channels, as you'd also need it in Daphne. I instead suggest that you add code to one of your apps' setup() methods, or have code from where you launch a child process that finds the main thread and calls this.
Thanks got it
Thanks for the idea, but I'm afraid I'm not going to accept these in - first of all, I don't think mixins make for good user-facing APIs, and I'd rather these were written as a simple `check_permissions` function that raised `AcceptConnction` or `DenyConnection`.

Secondly, this is the sort of code I don't think belongs in Channels itself as it's too specific to one way of implementation, but if you like, you should start a third-party app with pluggable features like this (as you would do for Django itself).
Got it thanks. I am missing a permission check for consumers to get a fine grain check per user for my projects. Would be great to see something like that in channels in the future.
We already give you a `connect()` method where you can easily do a permission check or whatever check you want to let a user in; I doubt we will go beyond that in the near future. Keeping the core code simple and maintainable requires not extending too far, sorry!
explicit inherit from object is not needed in python3
same goes here..
Thanks! And yes, that other section is weird, I'll update it now.
I'm fine with the lack of detection of the app being installed. If you fix the linting errors that's making Travis sad then I can merge it in!
Travis is happy now :)
Great - thanks!
Thanks!
My first reaction to this is that it definitely shouldn't be a mixin - please make it just a normal class! Just reimplement the few bits you need from other classes.
ok sure, so just the `AsyncJsonWebsocketDemultiplexer` class.
@andrewgodwin so with respect to `connect` and `disconnect` what i would suggest doing is a bit like v1:

a) the de-multiplexer accepts the connection all on its own. 
https://github.com/django/channels/blob/1.x/channels/generic/websockets.py#L273-L278

b) it calls `connect` to each child once those children accept they are added to the collection of children that can have messages routed to them.

c) if a disconnect comes through all that have responded `accept` will get the message.

c) if they trigger a disconnect they are removed from the set of child_applications and the `asyncio.Task` for them is cancelled.

d) when the last child disconnects (there are no more child applications left open) the de-multiplexer sends the disconnect onwards down.

in v1 the connection was accepted at the de-multiplexer, but if any child app sends a disconnect command it would disconnect the entire de-multiplexer not just disconnect that child from the de-multiplexer.

----

the issue here is with `websocket_disconnect` do we need to wait for all the child applications to prosses their respective `async def disconnect(self, code):` functions? before we kill using `StopConsumer()`
Hmm, that seems reasonable enough, and people can override and subclass the Multiplexer if they want to put access control/connection denial on that.

ASGI applications should exit their main routine (and thus complete their Future) once they close their connection, so you should wait for all the applications to exit, rather than trying to work out if they have run their `disconnect` function (remember, you only get to send to them, you can't see what they're doing). It's likely worth doing what Daphne does and giving them a 10 second grace period to exit when the socket itself disconnects and they've been sent a disconnect message before just calling `task.cancel()` on them and exiting messily (we should raise a warning if we have to do this). You can see the relevant Daphne code here: https://github.com/django/daphne/blob/f53eb0dda6161c9fca78c8a89a1d94c7b613b1d4/daphne/server.py#L210
ok, given that the de-Multiplexer is already subject to that 10-second timeout should it not be a little less than the Daphne timeout otherwise we will never get the warning from the de-Multiplexer since the de-Multiplexer routine will timeout (10 seconds) before its internal timeout for its children. 

in addition should the `disconnect(code)` method of the de-Multiplexer only run once all the children have died 'gracefully'.

Also if any child raises an exception at any point (that is not StopConsumer) we should kill them, all right?
Hm. You can't rely on daphne's timeout being 10 seconds (it's configurable), so you need to write a try/finally block that makes sure all the children are killed as the multiplexer's main coroutine shuts down, and maybe warn then (though daphne's warning might be enough to let the developer know it's not going well).

The multiplexer's `disconnect` can just run in parallel with the childrens' - there's no longer a socket there to talk to at that point, so it's not like they can do anything to the multiplexer.

If there is an exception, then yes, I think it is fair to drop the entire multiplexer and all children. The alternative is logging the traceback and continuing on, but I think hard failure here is correct.
> The multiplexer's disconnect can just run in parallel with the children's - there's no longer a socket there to talk to at that point, so it's not like they can do anything to the multiplexer.

it might still be nice to have that method be called after since it means all child applications are finished. Maybe you want to do some cleanup etc that needs to wait until all children are finished.
@andrewgodwin this is making `/generic/websocket.py` explode in size I'm going to break this out into a `/generic/multiplexer.py` file.
with the `streams` possibly removing themselves does it make sense to raise a `ValueError` when the `stream` is not listed? does raising a `ValueError` close the socket? Clients might not want to accidentally close the socket.

we could respond with an error frame, or just not respond and raise a warning.
@andrewgodwin I believe I have addressed your points with respect to connections and disconnections if you have time would you be able to give this solution a read over.

in the end it does feel rather convoluted so if you have an idea on how we can exit on Exception (when needed) and wait for the child to close (with a timeout for brute force killing) that does not require all of these extra features observing the child applications for errors.

also, what is the expected behaviour if an exception is raised. (in v1 this did not close the socket) but am i correct that in v2 this will result in the socket being closed? if so then maybe we should not reais exceptions when the `stream_name` cant be found but rather respond with an error frame?

in addition what about moving the `Multiplexing methods` out into another class, like in v1.
> This is still looking way too complicated in general 

I agree, it ran away from itself.

> I'd suggest rewriting it without basing it on a consumer class at all

ok, so what about having a `Demultiplex` class that takes a `multiplexer` class that would be a `JsonWebsocketMultiplexer` in this example (to do the needed web socket specifics). To split out that logic from the raw Demultiplex (handling of upstream applications etc)
@andrewgodwin I have made a lot of changes, I have tried to break out the logic a bit as well. 

however, I still think on `webseoct.disconect` we need to wait for the child applications to close not just block expecting the server to kill us otherwise we will always get a warning.

I moved all of the Queue observation (and dispatch) to a new parent class that is there to let one monitor both a collection of child application co-routines and the upstream/downstream queues and close them all in the correct manner regardless of who raises an exception.
I completely understand It had run away on itself if you can find a way to manage these child apps without all that complexity that is a much better solution. feel free to close this pull request.

I chose to split out into separate classes just to avoid having a supermassive 500 to 1000 line class to handle all the child task logic.

the big issues I had were:

- ensuring the tasks that wait for the upstream and downstream `Queues` are closed before the run loop is closed. (otherwise, there are loads and loads of warnings raised)
   - this is both the upstream and downstream message `Queues` on the de-multiplexer
   - and the upstream/layer message `Queues` for the child applications.
what would happen is if one child died (eg raised an exception) and I just let the bubble up then the full run-loop would be killed by the server (as it should) but some of the other tasks (as described above) would not be `cancelled` before this.

In addition, I believe it is good practice in this case not to close the downstream connection until all upstream tasks have closed. 

I'm rather new to the `async` `await` world in python so there may well be a much better simpler approach than those that I tried.
Im closing this for know
The changes in https://github.com/django/channels/commit/d6643d96dd59e153cda13681a6d5a8963b9d577c might well have solved the issues I had the resulted in such a complex solution....
I've left some comments, but there's other things to tackle here - the most important thing being that you're not forwarding `websocket.connect` and `websocket.disconnect` messages down to the child applications (and making sure not more than one `accept` message comes back, which will be fun - you probably want to say that child applications cannot reject connections, or that they cannot accept connections).

I'd also like to see the code organised slightly more nicely and keeping to existing code style for declaring multi-line function signatures especially.
This is still looking way too complicated in general - you seem to be both doing too much state handling and also trying to rely on the `JsonWebsocketConsumer` base class, which is not really sensible.

I'd suggest rewriting it without basing it on a consumer class at all - it doesn't need that - and stripping back all the `StopConsumer` catching (that should not be needed, and if it is, should be fixed in consumers, not here).
I'm afraid this still seems too complicated - I can't give any more detailed feedback than that right now as I don't really have the bandwidth.

It's hard to follow, it has a three-deep class hierarchy for some reason even though none of the classes are reused, and it still seems to be doing too much with the child tasks for my liking.

Given the revisions on this, I don't think it's going to be useful to keep saying what I'd like changed - I might have to go away and at least write the basic skeleton of this myself.
There's no need to make `init_child_applications` a separate method here really, it just makes it harder to read.
Why do you need to intercept it like this? This class is only for websockets, you only need to handle three types of message (accept, send, close).
Can we call `child_lookup` -> `stream_name` everywhere? That would make it clearer.
I see the use case where users might want to send from the child applications to the de-multiplexer. Since you need to subclass the de-multiplexer to use it having it like this will mean you just need to create the methods you want to call, like any other part of channels.
There's no need to wait for them to be killed. Just block forever and let the outside server kill your whole coroutine if things go bad.
StopConsumer should not bubble up out of other consumers (their coroutines will catch it), so I don't know why you have this method? Did you see it happen?
then we wont be able to raise any warnings at this level we will just get the warning from daphne?
don't we still need this method so that if just one child application dies (without an exception) we remove it from the set of upstream streams but keep the rest running?  

if we just gather/wait on the coroutines without some wrapper method we will not be able to remove them from the set of open upstream.
also will this not just result in there always being a warning being raised?
If this seems alright, I'm happy to add documentation for this feature too.
Yup, this looks good. I just merged that pull request so if you rebase the tests should then pass on Travis.

Documentation would be great to have too - just add to the `consumers.rst` page and that should be enough.

The one minor nitpick I might have is that right now if you specify groups but not a channel layer, there's no hard error - I think it's best to raise an error if you specified groups but there's not actually a channel layer to listen on (right now it will just silently continue)
Good point, I'll work on that and add some documentation tomorrow!
Just a heads-up - I don't actively look over individual PR commits as they happen, so let me know in a comment when you want a re-review and I'll take another look through!
@andrewgodwin Thanks, should be good to go now!
Do you have any other fixes/suggestions? If not, this is all set on my end!
My apologies, I forgot about this (a lot has been going on)!
Thanks, no worries :)
would it not be better to have groups as a `Set[str]`? we do not want to have repeats correct?
`group_add ` -> `group_discard`
Oops, good catch
We're not defining what type it is, the code just wants an iterable provided by the user. No point putting `set()` here rather than `[]`.
what about accessing `self.groups` through a method that can be easily overridden (for cases where these groups might be dynamic based on the scope or maybe Mixins that have been added)

eg here call `self._get_groups()`

with the default implementation of '_get_groups`
```python
def _get_groups(self):
    return self.groups
```

starting the method name with `_` ensures that it cant be called through a channel layer message.

@andrewgodwin what do you think?
That is what the `@property` decorator is for! It's still easy to override:

```
@property
def groups(self):
    ...
```
Thanks!
Thanks!
Thanks!
@andrewgodwin let me know if there are any other changes if not I will do a rebase to compress all the commits.
There's no need to rebase, github has squash merge built in. I'll take a look later.
Hmm, looking over this once more I have noticed the `async_login` and `async_logout` functions - I'd rather just let the user wrap the ones provided as appropriate, so remove them, but mention in the docs that they need to wrap them if calling them from an async context.
@andrewgodwin done but im wanding if I should add something like the DB wrapping to the call of `get_user` in the `AuthMiddleware` here: https://github.com/hishnash/channels/blob/7cf0ce8f38634b286c7ec863e6a49c50dc6832b4/channels/auth.py#L136

Since it depends on the user's Authentication Backend as it if this is needed. 

or is this `__call__` methods called by the server (just like the constructors of Applications) with the full DB context set up and cleaned up afterwards?
Hmm, you can't use lazy objects because you might traverse a `database_sync_to_async` call, so everything would have to be done in the function. I am almost tempted to say these should be async functions entirely, to continue with Channels being outwardly async (even if we switch to sync code inside).
so to be clear the AuthMidleware's `__call__` (the same as the __init__ of a Consumer) is called inside a `SyncToAsync` so it would be ok to have an `AsyncToSync`.
@andrewgodwin I switched to `async` methods so you can see how it feels (can revert back if you feel you prefer the sync in the end)
Hmm, I really don't know which one is better at this point. Give me the weekend to think about it.
@andrewgodwin let me know if there are any other changes?
@andrewgodwin ... should be good now 🤞
Great, thanks!
The content looks OK, but I'd want stylistic changes to match the rest of the codebase:

* Remove the type hints until we have them everywhere
* Fix your newlines and parenthesis indenting
* Fix docstrings to have newlines
* Use pytest, not unittest-style tests
* Don't have extra newlines inside function bodies

It also needs documentation. However, the implementation seems fine.
I think keeping them as async is good, so I have gone through with the tidy-up code review comments. Overall structure I am happy with, though.
Looks like you missed the "you an use" change, but apart from that I think it's ready to merge.
You can't do this here, as you'd be doing a blocking operation in the ASGI app's first callable (which can't block). I'm surprised this didn't raise an error during testing... still, you should keep the lambda for now (that means you can still accidentally call it during an async consumer, but I'd like to fix that separately)
call -> await
"to login a user" -> "to log a user in"
"object the best way" -> "object; the best way"
"function" -> "async function"
Remove extra newline
"you an use" -> "you can use"
Remove extra newline
elsewere -> elsewhere
"Use" -> "You can periodically use"
Move closing bracket to next line
Docstrings on each test please saying what it is testing as an English sentence
Docstring saying what this does please
I would put the version after "Channels" and before "development". You'll also need to fix the linting error for line length before Travis is happy!
Thanks!
One small niggle - the `query_string` has to be a non-url-decoded bytestring while the `path` has to be a url-decoded unicode string (see the spec here: https://github.com/django/asgiref/blob/master/specs/www.rst), so you need to get those aligned here.

I'd also love to see a test that verifies that!
Sorry for the long delay! Please review the changes, especially if you like the added test. I tried to create a suggestion for testing against the ASGI spec - the `test_connection_scope` is rather primitive, but could be extended to cover the whole spec for the websocket connection scope by adding more validators for each scope field. On the other hand, should you encounter some exotic paths you'd like to check the scope for, just add them to the `paths` list and they will be included in the spec tests.
Or maybe this is an overkill for the simple task of testing the `WebsocketCommunicator`?
Two things:

- I'd prefer to not auto-encode/decode things to `utf8`, but instead to straight up raise errors if the input does not match the required type.
- Just combine the three test communicators into one, IMO. No need to parameterise them like that.
Yeah, I don't like that idea either now. Please review the latest changes!
Looks great, thanks!
Looks like Travis failed, but it Travis isn't letting me look at the logs.
Give it time to load, it sometimes takes a few seconds. Looks like it's complaining about you using single quotes not double quotes (I have it on a very strict set of linters)
Ok, got it now. Initially, Travis was giving me an error when attempting to access the log. Hopefully, Travis will be happy now.
Addressed feedback.
One last code style nit - can you remove the extra newlines after function definitions? I don't mind having them in function bodies, but it's a bit odd having def, blank line, return compared to the rest of the codebase!
Done. What about the blank line in `_is_in_memory_db()`? Keep or remove it?
Yes, I'd love if that was gone as well, and the docstring was updated to have the text on a newline (all the docstrings in the source have text on a different line from the `"""`, even if it fits on one line)
Done.
Great, thanks!
I'd rather you assigned the value directly to `self.port` after `ready.wait()`
No need for the check, Channels is only for Django 1.11 and up.
Oh, I have a half-written multiplexer locally already, sorry, I thought I said I would work on it on the last PR - I'll put it up into a branch at some point so you can see, but it has different behaviour to your design (like no need for timeouts, different accept flow, keeping alive when a child application completes).
> Oh, I have a half-written multiplexer locally already, sorry,

no problem just wanted to share this version given the changes that were made to `await_many_dispatch` it is know a lot cleaner (compared to before)

> keeping alive when a child application completes

I'm really not sure what should be done with this. In v1 code if a child app closed then it would close the entire de-multiplexer this is simpler for sure but might have some side effects for the other sibling applications. 
But then again it does remove some strangeness for the client in that the set of `steam` names that are available is stable so the connection is either open (and accepts on all steams) or closed and accepts on none rather than open but the set of acceptable steams is constantly changing.
Yeah, I don't want any of the child applications to affect any others - so if one exits or closes, it just stops being forwarded messages.
Pushed up the code I'm working on here, but it's not complete yet: https://github.com/django/channels/compare/multiplexing
Nice, I like the buffer idea :) and the Multiplexer so it can be used without subclassing inside the `application` stack.

at least as a read over it it does not look like if an exception is raised in say the second child application it will be captured? 

What do you think should happen if a child raises an exception? I assumed we would want to bubble that up and kill everything.
Yes, right now exceptions won't appear until the consumer shuts down and awaits all the child tasks. That's not ideal, but I also don't want to kill the whole server if a child dies given everything is trying to be isolated.

Given that, I will probably instead wrap the new coroutines in their own try/except loop that logs the traceback as an error, like Daphne does.
as a general question moving from ~v2~ v1 to ~v3~ v2 I am correct that in ~v2~ v1 if an exception was raised the connection was not always lost but in ~v3~ v2 it is? since before Daphne and the consumers were separate processes so a different worker would just pick up the next incoming message.

With this the case I think it would be nice to have a clean way to override the behaviour of the de-multiplexer when an upstream steam cant is found, maybe you don't want to crash the connection but instead.
I'm not sure what you mean by v3, but I also don't want to make it too customisable as that usually makes it harder to maintain and test.
> I'm not sure what you mean by v3

sorry mixed up version numbers.

in channels v1 if a consumer raised an exception it did not mean the connection was closed? but in v2 it does no?

> but I also don't want to make it too customisable as that usually makes it harder to maintain and test.

👍
I can't even remember what channels v1 did, and I'm not trying to match its disconnection behaviour, as multiplexing there was very limited and buggy.
ok so the key features your going for here are:
* the de/multiplexer accepts the connection without waiting for any child apps 🆗 

* frames are not sent upstream to child apps until they `websocket.accept` they are rather buffered 👍 

* when an upstream app sends  `websocket.accept` downstream any buffered frames are pushed up and new frames are permitted to flow freely 👍 

* if a child app dies make sure that exception is seen by the developer but do not kill/affect any of its sibling apps 👍 

* if an upstream child app sends `websocket.close` just stop sending it new frames (delete its queue and buffer reference) .. this means it will not get `websocket.disconnect` as it would normally if it were not behind a de-multiplexer. (maybe the de-multiplexer should emulate a client disconnection and send `websocket.disconnect` back up to the child app that sent `websocket.close` so that the normal `disconnect` method etc can be handled.)

* if a message is sent to a `stream_name` that is not mapped raise an exception and drop the entire WebSocket connection. 

so the de-multiplexer consumer (and all the children unless they raise exceptions) will run forever until the client closes the connection. even if all child apps send `websocket.close`?
Can I use this PR? As I understand demultiplexer is already working except some minor bugs and it will not change dramatically.
@pashinin The version I'll be working towards is https://github.com/django/channels/compare/multiplexing, not this PR - I'm going to close this for now to make that clearer.
Yup, that seems pretty reasonable. 

Things I think could be done:
* Accept both dicts and list of tuples for headers (don't see a reason why not here)
* Don't use AsgiRequest at all for now, sessions and auth should already be handled by the ASGI versions of their middleware anyway
* Docstrings everywhere

I don't think a sync version is needed, because if you want that, well, you have Django views!
I've added tests and docs and squashed the history into a single commit (no need for fixup commits fixing previous fixups). Some feedback would be awesome if you find the time. Thanks :-)
👍 Thanks! 

I was thrown off by other uses of `six` in Channels.
Alright, merged, thanks for this!

I didn't realise I had left some `six` in there, that's be missing them during the 1-to-2 conversion. I will go kill those now.
I found this in the docs https://channels.readthedocs.io/en/latest/topics/consumers.html#asynchttpconsumer, but it hasn't been included in a new release/made available on PyPI as of yet - how are new releases handled currently?
They happen when I have the time - this next release is a major one, and work has been very busy recently, so it might be another week or two. You can use the master branch if you want to play with it, though - like Django core, master is usually quite stable.
@andrewgodwin 
> I don't think a sync version is needed, because if you want that, well, you have Django views!

Why? How to implement Long polling with views? It needs a consumer. AsyncHttpConsumer is good until no need to call sync functions (orm, etc..).
I know about "database_sync_to_async". But there is the reason you created [Json]WebsocketConsumer, isn't it?
Looking pretty good, couple more cleanups and we should be ready to land.
No need to use `six` - Channels 3 is Python 3 only!
I'd prefer this as an inline link (I know, I'm weird, but the rest of the docs work like that and I like consistency)
By an unfortunate coincidence, I have just written [my own version](https://github.com/bluetech/channels/commits/fix-origin-validator) of this change. Since you already submitted, I'll tuck mine away, though you can take a look and see if there's something helpful there.

Thanks for working on the issue!
I updated my code. Now, ``OriginValidator`` does not require any options. In ``allowed_origins``, you can pass only domain or origin as scheme://domain[:port] (for exapmple,  ``.domain.com``, ``*``, ``http://.domain.com``.)
I updated the code in accordance with your recommendations. Yes, you were right, `` *.example.com`` is a backwards incompatible change, I added tests for this.
I updated the docs for websockets.
Thanks so much!
Looks like a good start, but I've left a couple of comments pointing to general code style changes I'd like, as well as simplifying the functions a little (no need for a separate `full` function, I think).

In addition, I'd like to see docstrings on all the new methods here saying what they do.
Looks much better overall, apart from some typos and the SSL stuff (see my comment).

It looks like this will no longer support the `*.example.com` format, making this a backwards incompatible change - am I correct? Would be nice to see a test that verifies it's broken.
Can we have a better name for this than `full`?
Can you rewrite this without using `or`? Two in a row makes it harder to skim over.
The current code indent style is one level and the trailing bracket on the next line - please try and match that!
I'd rather do this check inside a single `valid_origin` function.
Is port 8080 actually specified as a default HTTP port anywhere?
Yes
Can you suggest a better name than `` full``, maybe ``origin`` or ``scheme``. Is it necessary to leave the possibility of verifying the certificate or include it in the full check origin.
No spaces around the `*` here I think.
Space after the `.` needed
I would call this `match_allowed_origin` so it's obviously different from `validate_origin`
I do not think we should try to check the certificate in this code at all, and definitely not by default.
`check_cert` is no longer there
"only domain" -> "only a single domain"
"and full origin, than must be" -> "or a full origin, in the format" (and make the format code-style formatting)
"any domains, just add * as second argument" -> "any domain, then use the origin `*`"
Agreed - I have been trying to add these too as I notice they're missing. Thanks!
I added additional tests. Unfortunately, `path` cannot be used for the outer URLRouter easily because the ASGI app is callable, and therefore Django thinks that it is a view and appends a `$` to the regex.
Ooh, that `path` thing is annoying, I forgot that was how it distinguished between views and includes. Ideally I'd like to make it work, though I accept that might be messy.

Is there any way you see of making it work? Or would it be too hard to reach inside and undo the `is_endpoint=True` damage to the regex?
[Here](https://github.com/matthiask/channels/tree/nested-urlrouter-path)'s a branch with an additional commit on top which makes the tests pass using `path()` in the outer URLRouter:

https://github.com/matthiask/channels/commit/cdd335be2e7c5a1d1049cc5b6f2b8a976cff07e9#diff-1a24e8059b03907de2c85bc441155308R85

It feels like a really bad idea though. The outer URLRouter would have to know that somewhere inside there's another ASGI app which wants to do some routing with the remaining path. The code in the commit above works only when 1. the inner ASGI app is an URLRouter and 2. there is no intermediate turtle in the stack of turtles. Introducing a way so that outer turtles know about inner turtles sounds very unasgilike (if that was a word).

Here's an alternative idea: Adding a `path()` function to `channels/routing.py` with support for overriding `is_endpoint` (and `re_path()` for consistency) -- no docs, and does not work with Django 1.11 yet:

https://github.com/matthiask/channels/commit/6d9830c9ec9e663da8bc38b45e715e1fcf3f882d

This also feels a bit bad. The `_path` function uses too many Django internals for my taste and I fear breakage down the road. It might be better to contribute this change to Django, but even almost 10 years after the initial contribution I find the contributing process a bit daunting and also we'd have to wait a long time since 1.11 is an LTS release.
Yeah, both of those are too fragile for me, really - thanks for the investigative work though.

I'm just particularly uneasy about shipping this with `path` being a silent mysterious failure (obviously things are worse now, so we need this in some form, but I want to give it a decent level of thought).

What if, instead of trying to fix it, we just detect when it happens and raise an error? I suspect having an inner URLRouter detect that it is somewhere inside another URLRouter is quite easy (because of the presence of things in the `scope`), which means we just need to make sure that we can detect when there's no URL remaining to match on for the inner one and raise an error. This would also not work if someone deliberately made an inner URLRouter that just matched on `""` but... they should just not do that in that case.
Hmm. I'm not sure if I follow.

`URLRouter.__init__` does not have access to the `scope`, so we cannot signal to inner `URLRouter`s that they should check the outer routers' routes.

`URLRouter.__call__` of the inner router is never run when the outer `URLRouter` uses `path` because of the `$` in the regex, which seems only possible to circumvent with fragile hacks.

I don't see a way around either changing Django's `path()` function or documenting this as a gotcha. It's a pity. `re_path()` isn't even strictly more powerful because of the converters that `path()` supports.

--- 

Here's a third version. This one modifies the routes passed to `URLRouter` upon initialization. Probably not better, since it uses the same trick as version 1 above, but only runs once.

https://github.com/matthiask/channels/commit/84c5dea7b365cc3733a099fa082758d1c854693f
Oh, right, the inner one is never even called as it won't match. Hrmph.

That third version is not bad, it's only 3 lines of logic and it's not super-fragile. I would be alright with that.
I don't think it's a solution, because the third solution converts *all* routes to open-ended routes -- it applies `is_endpoint=False` everywhere, and does not look whether some inner ASGI app wants to do routing or not.

I'm still thinking about this issue, but haven't found a good solution yet. It's always too early (information isn't here yet) or too late (e.g. signaling to outer URLRouters that no inner ASGI app did any routing via `self.scope` -- but at this time, the event has already been processed in a possibly (probably) non-idempotent way)

--- 

Addendum: For now, I still think that documenting that `path()` should be avoided in outer URLRouters is the least bad solution. But I haven't given up completely yet :-)
Let's not rush and try to make it as safe as possible :) People won't read documentation, of that I can assure you.

I'm much happier with a slightly hackish way of detecting errors, too, rather than a hackish fix. That said, I don't have any better ideas right now either...
Here's another idea: Add an attribute to ASGI apps, `does_path_routing`, which if `True` signals to outer URLRouter instances that it should not treat the app as an endpoint.

The change in version 3 above made the `test_url_router_path` fail because the first `path("")` did match everything. The new idea does not have this problem. 

Change added to this PR, but not documented yet. Relevant commit here: https://github.com/django/channels/pull/946/commits/04f82e95e1db897adee74ebd670382c0151f559f
Maybe `app.extensions = {"path_routing"}` or something would be better. (Similar to the channel layer extensions attribute.)

---

I went ahead and implemented this; the diff is much smaller because now we can use `MagicMock` again as-is.
That has the same issue as the earlier attempt to see if it was a URLRouter, though - it won't work if you've got middleware or similar in the way.

I think this is still probably the best approach, but I'm not sure this is the right place to jump to an `extensions` concept - maybe just have an underscored attribute instead?
Yes, it's true that middleware between URLRouter requires additional work, but setting an attribute seems less work (and also more correct) than inheriting URLRouter just for the `isinstance` check. I added a middleware without additional functionality to the [test](https://github.com/django/channels/pull/946/commits/948f855d729aabde96f17d50e1f8f33ec6f57962#diff-06c0af743b62c3e720fe92d0ce2b7f7bR129) for this reason.

Also, converted `extensions` back to `_path_routing`, and amended the test to `is True` instead of checking for truish values so that MagicMock works.
Lovely, I think this will be the best we can get for now. Do you mind also adding a note to the routing documentation that mentions url nesting won't work properly with `path()` and urlrouters-inside-middleware?
I also reworded the kwargs/args discussion a bit (kwargs are mentioned first because they are preferred, and also mention that args and kwargs can't be mixed)
Great - merged! Thanks for your work on this; with this and a couple other big things landed in the last week I'll get round to doing a new 2.1 release soon.
One question - is the copying of the scope necessary here?

https://github.com/django/channels/blob/984e9dc9cece66f7520bc9c1fd0583e9c60b1022/channels/routing.py#L113

I have a custom middleware that modifies the scope and the scope changes are not propagated to the consumers anymore. Example:

```python
class MyMiddleware:

    def __init__(self, scope: Scope, middleware: Middleware) -> None:
        self.scope = scope
        self.middleware = middleware
        self.inner = self.middleware.inner(scope)
        self.receive_orig = None
        self.send_orig = None

    def __call__(self, receive: Receiver, send: Sender) -> Middleware:
        self.receive_orig = receive
        return self.inner(self.receive, send)

    async def receive(self):
        """Overridden receive that clears stored credentials once the token expires."""
        if self.scope['token'] is not valid:
            self.scope.pop('token', None)
        return await self.receive_orig()

class MyConsumer(AsyncWebsocketConsumer):
    async def receive(self, text_data=None, bytes_data=None):
        if 'token' not in self.scope:
            await self.close()
        else:
            await self.send(text_data='ping')
```

Removing `token` has no effect in `MyConsumer`. Not sure if this also affects `SessionMiddleware`, but possible.
I did give this particular behavior a lot of thought, but probably not enough. `scope` isn't copied anywhere else, so if possible it shouldn't be copied here either.

I thought that path_remaining should not be visible to other routers and middleware, and the easiest way to ensure this was to make a shallow copy of the scope. 

The current tests all pass without the shallow copy, but I'd like to add some additional tests to annoy the code some more. I should be able to submit another pull request until tomorrow evening (UTC)
@matthiask let's wait for what @andrewgodwin has to say :-) First you clearly had your reasons to implement things as they are, second I'm not even sure the middleware should be allowed to modify the scope - it's just something I assumed based on Django's middleware hooking patterns. If the scope shouldn't be shared on the way in the whole middleware chain, it's also fine, I'll just move the middleware's logic to the consumer itself, maybe introduce some consumer mixin for the reusable code.
It's almost too easy to construct a failing test with the current code:

```
# @pytest.mark.xfail
def test_path_remaining():
    inner_router = URLRouter([
        url(r'^no-match/$', MagicMock(return_value=1)),
    ])
    test_app = MagicMock(return_value=2)
    outer_router = URLRouter([
        url(r'^prefix/', inner_router),
        url(r'^prefix/stuff/$', test_app),
    ])

    assert outer_router({"type": "http", "path": "/prefix/stuff/"}) == 2
```

The two changes that are necessary for this test to pass are the following

- Restore `path_remaining` after calling `route.callback(scope)` 
- Raise a `Resolver404` instead of a `ValueError` if no route of the current router matches, since this exception is handled by an outer URLRouter.

Unfortunately the `Resolver404` exception is not known to Daphne, otherwise this might also help with solving https://github.com/django/daphne/issues/165 (Return 404 for invalid routes)

The WIP code is available here: https://github.com/django/channels/compare/master...matthiask:more-urlrouter-nesting?expand=1
I had always in my head assumed that scope was something that was immutable once it was handed down through the ASGI first-call, so I was for adding `copy` in though. You are right, however, that we should at least be consistent about it - either make all other middlewares we ship also copy, or remove the copy here.

The reason I would probably vote for everything copying is that modifying scope in a middleware like in the example above feels wrong - it's not meant to be something you check dynamically, but more like a Django HttpRequest where you can tack on attributes but you're not meant to change it in a major way. Thoughts?
I think copying makes more sense, yes. The `scope` comes from outside; if a middleware or a router wants to save additional data somewhere, it can just add attributes to `self`.

I force updated the branch referenced above; to me the code looks much better like this:
https://github.com/django/channels/compare/master...matthiask:more-urlrouter-nesting

Should I prepare a pull request implementing the scope copying change? It would involve changing a few places in the documentation too:

```
~/Projects/channels/channels$ git grep -E 'scope\[.* = '
channels/auth.py:    scope["user"] = user
channels/auth.py:        scope["user"] = AnonymousUser()
channels/auth.py:            scope["user"] = SimpleLazyObject(lambda: async_to_sync(get_user)(scope))
channels/http.py:            self.scope["headers"] = [
channels/sessions.py:                scope["cookies"] = parse_cookie(value.decode("ascii"))
channels/sessions.py:            scope["cookies"] = {}
channels/sessions.py:        self.scope["session"] = self.middleware.session_store(session_key)
channels/staticfiles.py:            scope["static_base_url"] = self.base_url
docs/topics/authentication.rst:            scope["user"] = User.objects.get(id=int(scope["query_string"]))
docs/topics/sessions.rst:            self.scope["session"]["seed"] = random.randint(1, 1000)
~/Projects/channels/channels$ 
```

(Idle thought: In some ways `scope` is a bit misleading to me, because it sounds like it would be the preferred place to put variables. It is more similar to an `environ`ment for inner ASGI apps. Modifying a scope is what we do all the time when programming, modifying the environment is a thing which requires more thought. I'm thinking about writing down some guidelines for writing ASGI middleware and apps after this discussion, whatever the final outcome)
Nice to see a decision here! I would also request some explaining note regarding it in the docs as it seems I'm not the only one being misled, see the PR review [here](https://github.com/django/channels/pull/973/files#r174378332).
This seems to introduce a regression for me:

```
2018-04-01 00:44:45,441 - ERROR - ws_protocol - Traceback (most recent call last):
  File "/home/ovek/django-xmpp-server/example/env/lib/python3.6/site-packages/daphne/ws_protocol.py", line 76, in onConnect
    "subprotocols": subprotocols,
  File "/home/ovek/django-xmpp-server/example/env/lib/python3.6/site-packages/daphne/server.py", line 184, in create_application
    application_instance = self.application(scope=scope)
  File "/home/ovek/django-xmpp-server/example/chatbox/channels/staticfiles.py", line 41, in __call__
    return self.application(scope)
  File "/home/ovek/django-xmpp-server/example/chatbox/channels/routing.py", line 51, in __call__
    return self.application_mapping[scope["type"]](scope)
  File "/home/ovek/django-xmpp-server/example/chatbox/channels/routing.py", line 119, in __call__
    "kwargs": {**outer.get("kwargs", {}), **kwargs},
TypeError: 'NoneType' object is not callable
```

I'm using includes in urls:

```
ws_urls = [
    url(r'^bind/$', WSConsumer, name='ws'),
]

application = ProtocolTypeRouter({
    'http': URLRouter([
        url(r'', AsgiHandler)
    ]),
    'websocket': URLRouter([
        url(r'^chat/', include(ws_urls))
    ])
})

```
@ovekaaven Indeed it does. There is no test in channels for `include()` inside `URLRouter()`, so this has not been detected earlier. 

Failing test here: https://github.com/matthiask/channels/commit/accf656a717e606f4043da26181b9a2ff1acf565  I'll see whether I can fix this.
I did not intend for includes to work, which is why there is no test for them.
If you don't want them to work, then you should at least update the documentation.
I'm not saying I don't want them to, just that I never got round to documenting and testing either way. It looks like support may be possible given #996, it's now a question of if it makes sense to offer two ways of nesting.
Looks good - I agree with the scope choices. Only thing I'd like to see is more tests to check that the `args` stack correctly as well as the `kwargs`, and one for Django 2.0 only that makes sure this works with `path()` too.
Thanks for spotting that.
Hmm, I actually just have these in a pre-commit hook locally, ideally I'd like something a bit simpler than having to install tox (I removed it for testing).
Oh, that works too. I replaced the code with a paragraph in `CONTRIBUTING.rst`
Thanks, that'll work for now. Ideally I'd like to include a prebuilt hook at some point, but at least this way people can lint locally if they want.
Oh, damn, I did this already after I saw it was in there but before I saw this PR. Sorry!
Good point - best to repeat these things where they're needed. Thanks!
GitHub renders ReST files as well perfectly fine - I have just fixed the code blocks to work correctly instead in https://github.com/django/channels/commit/db131ca93d93503147e00f51a94ea3d57ead09e3. Thanks for pointing that out.
I've integrated all of the above feedback. Ready for another round.
Final changes applied.

I can squish all the tutorial related changes together (perhaps separating out the DS_Store commit) if that makes it easier for you to merge. Let me know.
No need - GitHub has squash-and-merge built in and I don't mind about separating out the `gitignore` stuff, so it's merged!

Thanks so much for your work on this. If you have a Twitter account or website I can credit you with when I tweet about this let me know.
I'm glad the tutorial is a help. Hopefully more folks will find it easier to get into Channels and make cooler apps.

Probably my Twitter would be the best to credit. I'm here: https://twitter.com/davidfstr
Left some comments - looking pretty good though!
I think after these last two changes it will be ready to land. Let me know when you're done and I'll merge it in.
I would use fixed-width text (so ``` ``like this`` ```) rather than bold for this and other command-line things, like filenames and the like below.
Can we format this either as a nested list or just drop the numbers and use a comma to separate them?
I think in this and other code examples it might be best to follow the Channels/Django coding style, which is to put the closing bracket on the following line.
I don't think there's any need to use `_room_name` rather than just `room_name` here. I'd like to reinforce that it's just a normal attribute on `self`.
Maybe split testing into a part 4?
While not strictly required in this case, I'd recommend making this a `r""` string.
Nice catch!
Let's make this a bit more celebratory and link off to some other documentation they might want to read next
Could we instead title these like "Tutorial Part 1: Basic Setup"? Just thinking it would be nice to frame each part with what it's roughly about (and will make the index page more informative too)
Nice, thanks!
Thanks!
Yup, agreed. Thanks.
Thanks!
Thanks for catching that.
Thanks for your review. I've updated the code accordingly.
Alright, looks good so far. Can you also add documentation and tests?
Thanks for your review and your update in the session middleware! I've added another commit.

One thing I still don't like is the `login` and `logout` because it's not useful right now. (When you log a user out you can't log in again because `logout` removed that user from the scope. Furthermore it might or might not (with middleware) have an effect on the consumer's scope.) I have two suggestions:

1. Remove `logout` and make `login` a private API. (In this case I'd add a note to the docs that you should use `communicator.instance.scope` if you want to use `channels.auth.login`/`logout`.)
2. Provide `login` with a `user` parameter and let `login` and `logout` modify the `user` value in both scopes, in the communicator and in the consumer (`communicator.instance`).
I would go option 1 - let's just not have login/logout and confine this to just be "you can pass a user in the constructor".
This is the option I prefer, too. You can have a look how you like my last changes. (I didn't add the note about the different scopes because you might rarely need it and it might be more confusing than helpful.)
I also prefer to have it in the constructer. But we didn't want to make it a coroutine. See our discussion in https://github.com/django/channels/issues/903#issuecomment-368063488. Do you have a better idea?
I feel like I missed a comment - what's wrong with passing in a `User` object to the constructor that it needs to be a coroutine? You need to fetch it from the database, sure, but you can do that externally (plus this is testing code so it's much less important to get the non-blocking nature perfect)
I see. Maybe I should explain some of my changes:

The constructor of `AuthCommunicator` takes the user and adds it together with a new session object to the scope. (I had this part at some point in my development in another method, but not any more.)

The `login` method of `AuthCommunicator` does the coroutine stuff. That is *login* and *saving the scope*. Because of this we can't move this code into the constructor.

Concerning the tests I had some issues with the user object and thought it was good to mention it in the documentation:

1. When I didn't create the user in a coroutine I got some (database) errors.
2. When I used an in-memory database the database had to be available for all tests in that module. (Also for tests which don't touch it.) Therefore I switched to the file database.

Unfortunately I don't know the exact reasons for these two points and I'm afraid I can't figure out if this is the best solution.
I still don't understand what the login does that could not be achieved by editing the scope directly as it's created in the constructor, I'm sorry.
Hm. I think I'm missing here something. However, the reason for not doing everything in the constructor is that both, *login* and *saving the session* can (depending on the backends) use the ORM. Now, every test is a coroutine and using the ORM in this context may cause trouble if you don't use `database_sync_to_async` (which is a coroutine). – This is how I understand it.

I'm afraid I can't complete this PR unless I get some help here. If anyone wants to implement this feature just feel free to continue or open another PR.

@andrewgodwin Thanks for all your work developing and maintaining this great package.
Closing as stale at this point. (Not sure it's really needed. 🤔) Happy to look at a fresh PR.
I added tests and docs now. I still have some questions. See below.
Definitely prefer just having it in the constructor, but left some comments.
Im not sure we are supposed to modify the scope after it has been used to call the through all the middlewares etc. @andrewgodwin can you clarify on this?

what about instead injecting a session object into the scope (only if a user is passed in the init) when you add the user object in the init?
We're working on figuring this out over in #946. Let me work out what we're doing first, then we can actually request changes.
OK, we've decided that scopes are immutable from the outside, so this would need to change.
Should we let people import `AuthCommunicator` from `channels.testing`?
Should I mention that `HttpCommunicator` is also a subclass of `AuthCommunicator` here, too? (See lines below.)
I tried to figure out why some tests need the `django_db` mark when tested together with other tests but I couldn’t.
I think it might be better to change


https://github.com/django/channels/blob/36820df512a2430853d33c492958ef0934f10734/channels/sessions.py#L154

to something like

```python
self.scope["session"] = self.scope.get("session") or self.middleware.session_store(session_key)
```

to not have this limitation. But I'm not sure because it had to be changed just for testing and it might have unwanted side effects.
Do you think it was better to copy the scope before passing it to the application in order to be more consistent? (It's another scope when you use middleware as you can see below.)

I think I'll bring these two tests together into one when this is decided.
No - in fact, I would argue that we should not directly expose `AuthCommunicator` at all and just document how it affects the HTTP and websocket communicators.
I agree - I have made an effectively similar change in e4adb21 (AuthMiddleware already did this, so it's fine to be consistent)
As above, I think we don't mention AuthCommunicator.
You can remove this now.
You can also remove this
Can you add a comment for this please?
I'd prefer keeping the mark on the individual tests
I don't think you should be using an `is` comparison here, anyway, copying or not.
It will be a sequencing thing - it definitely doesn't belong here, so it may be that your cleanup code is bad. Try running the tests in different orders.
Leave this in the docstring if you could, it's part of the function contract.
Do we need this in the channels tests? There's no live tests in the actual channels test suite that also touch users.
Do you need to test `.login()` any more?
This is how I was able to run my new tests together with the existing tests without an error message that I had to use the `db` fixture or the `django_db` mark (see https://github.com/django/channels/pull/973/files/e7cb151df21c43ef44832d5944eb274035a7f045#r176199831). However, I don't know if there is another way to solve this.
I shortened the parameter explanations.
Thanks!
I'd rephrase this a bit. Something like `timeout: number of seconds to wait to ensure the queue is empty. Defaults to 0.1.`
Mention interval is in seconds as well, and drop commentary about how well the default works - just say the default is `0.01` and let people who need to tweak it do so. We don't want to have most people worrying about this value.
Great, thanks!
Thank **you**! It's a pleasure working on this project.
Thanks!
Nope, you are 100% right. Thanks!
Thanks!
Nice catch - thanks.
I think that's fine for now - this looks lovely as it is (the exception mechanism is not super publicised anyway)!
Thanks!
I actually didn't want to support includes, since this is not a full Django URL implementation, but if this works I'll take it. I would like to see an error handler with the if/elif clause though, in case the object matches neither.
I'm not sure whether it will work with all possible uses of `include()` -- but maybe we should just raise `ImproperlyConfigured` if the second argument to `path()` resp. `url()` isn't callable, and document this? 

It would still be possible for someone to provide an exhaustive test suite for `include()` and the corresponding implementation later.
I would be very much in favour of detecting include and raising a nice error message that says "hey you should nest routers instead"
I replaced the code in the pull request with the `ImproperlyConfigured proposal.
Great, thanks!
Thanks!
Thanks @andrewgodwin
I'm afraid Channels 1 is end of lifed, so I'm not accepting any contributions to it. Sorry.
Ah, forgot the tests, will fetch and fix them when I'm near my laptop again.
Sorry, this one somehow got stuck in a spam filter and I never saw it. Thanks!
No, it's correct as it is. The sentence says to open a *second* tab, type a message, but the message does not appear in the *first* tab. Changing the latter to "second" as well misses the point of the sentence.

That being said, maybe rewording the sentence would help.
Yup, this sentence is correct, this PR would actually make it incorrect, so closing it.
Sorry it took me a while to merge, but thanks so much!
Couple of things:

 - The Travis job looks like it's failing for a couple of reasons, one being a pytest dependency that I think is a problem with the master branch (I'll see if I can fix that) but there's also changes to import ordering and quotes it wants: https://travis-ci.org/django/channels/jobs/393835962

- The test you have written does not actually test the alternative channel layer - you would need to send something over the channel layer to make it a useful test.

- It would be nice to have a brief update to the consumer docs to mention this - I am happy to help out with that and clean it up after commit as long as something is there in the first place.
I'm going to close this due to inactivity.
Thanks!
Nice catch!
Thanks!
All the tests are passed local
You will need to fix the code formatting so the checks pass before I can take this pull request! And also see my comment on the associated ticket.
I have updated my code for the formatting check and add the test case about this pull request.But it seems that there is something wrong with other the test cases?
Yes, the tests break on master as well. I will get them fixed and then you can rebase and they should pass.
OK, I've fixed the test failures on master. If you rebase your pull request your tests should also pass.
thanks~
The tests are pass now.
Thanks! Merged it in, will be out in the next release.
@andrewgodwin Agreed, I've put your suggestion there instead.
Great, thanks for this!
Looks good for code, comment is confusing
This reads confusingly - I suggest `is either None, a schema-domain-port string, or just a domain string`
Thanks!
Can you put a space before the `(` and change the contents to `(Django's session framework needs the database)`?
Sure.
Looks good. If anything, I'm up for giving uvicorn more prominent placement and an equivalent section to Daphne further up if/when you want.
> If anything, I'm up for giving uvicorn more prominent placement and an equivalent section to Daphne further up if/when you want.

Okay. I'm happy for that to happen anytime really.
Whenever either of us gets around to PR'ing it.

Thanks!
Great, thanks!
I don't know why the job for Django 1.11 and Python 3.6 failed.  It worked before I opened the PR: https://travis-ci.org/michael-k/channels/jobs/419641603
Try running it again - sometimes there's weird segfaults
I can only restart the whole build by pushing.  But I wanted to add the combination Python 3.7 + Django 2.1 anyway.  All tests passed this time. :)
:+1:
Oops. Tests are failing for Django<2.0
This looks lovely! Did you confirm that it fixes the issue? It would be nice to have a test that confirms it, if you can get that working.
Dropped my response times from 5s to 87ms 😀 Will put together a test, though.
I have no doubt it works, but would like to stop it happening again by mistake :)
Test is written (and passing... phew!) 🎉
I think we're ready to go 😄
Thanks so much for your work on this! I'll try to get a release out this week.
Hi @andrewgodwin , has this been released yet? Just having issues with slow response times and would like to see if this will fix this issue. Thanks.
@KarlSayle No, this has not been released yet.  Click on `b0f8d36` in *andrewgodwin merged commit b0f8d36 into django:master* and the commit will tell you if it's part of any tag (= release).

You can also guess it by comparing the date of the merge (2018-09-04) with the date of the last [release](https://github.com/django/channels/releases) (2018-08-17).
Thanks @michael-k - Im getting response times around 5s and was just wondering if it was related to this fix. Thanks again.
Just to follow up - looks like the offender was 'django_heroku.settings(locals(), databases=False)' in settings.py left over from when it was running on Heroku. Response times look to be sub 1s now. Apologies for taking up your time, just thought Id post this in case it helps anyone else in the future (i know its a very specific case). I have also pushed the static files to S3 but I think django_heroku was to blame. Thanks again!
Is this really necessary?
I fear it is. 
Doing the following instead:
```python
    def load_middleware(self):
        """
        Loads the Django middleware chain and caches it on the class.
        """
        # Because we create an AsgiHandler on every HTTP request
        # we need to preserve the Django middleware chain once we load it.
        if (
            not hasattr(self.__class__, "_middleware_chain")
            or self.__class__._middleware_chain is None
        ):
            super(AsgiHandler, self).load_middleware()
            self.__class__._middleware_chain = self._middleware_chain
            self.__class__._view_middleware = self._view_middleware
            self.__class__._template_response_middleware = (
                self._template_response_middleware
            )
            self.__class__._exception_middleware = self._exception_middleware
```
yields this error:
```
ERROR    Exception inside application: inner() takes 1 positional argument but 2 were given
   File "/usr/local/lib/python3.6/site-packages/channels/http.py", line 195, in __call__
     await self.handle(body)
   File "/usr/local/lib/python3.6/site-packages/asgiref/sync.py", line 108, in __call__
     return await asyncio.wait_for(future, timeout=None)
   File "/usr/local/lib/python3.6/asyncio/tasks.py", line 339, in wait_for
     return (yield from fut)
   File "/usr/local/lib/python3.6/concurrent/futures/thread.py", line 56, in run
    result = self.fn(*self.args, **self.kwargs)
   File "/usr/local/lib/python3.6/site-packages/asgiref/sync.py", line 123, in thread_handler
     return self.func(*args, **kwargs)
   File "/usr/local/lib/python3.6/site-packages/channels/http.py", line 228, in handle
     response = self.get_response(request)
   File "/usr/local/lib/python3.6/site-packages/django/core/handlers/base.py", line 81, in get_response
     response = self._middleware_chain(request)
   inner() takes 1 positional argument but 2 were given
```
Ah, I see, at least `_middleware_chain` is a method.
Thanks!
Two small grammar fixes, but otherwise looks good
"is treated as a database in memory" -> "is run as an in-memory database"
"add test argument" -> "add the test argument"
Thanks again!
Whoops. Shows me up for putting stuff in without testing. Thanks :)
Lovely! Thanks.
Thanks!
Thank you, for your review
"create a supervisor", "which should look like"
Where do I replace them? Make it very clear.
Are you assuming systemd here?
I know this seems weird, but this has actually prompted me to finally remove the JS code from Channels entirely since it's unmaintained and untested these days.

Thanks for the pull request, but sorry I won't merge it, since I'm about to delete all those files!
Thanks for spotting and fixing this!
Thanks!
Thanks!
Please add these to your system-local gitignore/gitexclude rather than the project one.
You've lost the colour information - Django runserver still has it last time I checked, so we need to match that.
You mean just `.vscode/` folder or also `Pipfile` and `Pipfile.lock`? I definitely don't want my other `Pipfile` and `Pipfile.lock` files in `.gitignore` :) but I can workaround it if needed.
Yeah I missed that. Fixing in next commit
Just the vscode one - it's not part of the Python ecosystem directly, and if we had a folder for every editor it would get messy!
Yeah makes sense.
And what about leaving `Pipfile` and `Pipfile.lock` in the repo? It shouldn't affect anyone except for those using Pipenv and for those using it it would make things just easier, don't you think? I can add some section to the Contribution guide how to setup repo using PIpenv or I can move it to another PR.
Pipfiles only make sense on end projects, not on libraries, so they don't really belong in this repo.
Looks good, thanks for the speedy turnaround!
Thanks!
Thanks!
Good idea.
@matthiask Thank you for guiding me through. I believe everything should be in order now if you want to review it one last time.
Thanks!
Thank you for tackling this!
Nice! Tests pass, and the change looks good to me.
Looks pretty good, just needs one tweak
This variable will only be initialized once per Python process instead of once per request. 

Suggestion: You could move the initialization inside `def __init__` (`self.body = []`) and call the `super()` method too?
This is too early. You don't want to disconnect after the first body chunk already. Maybe only run `await self.disconnect()` if an exception happens? (Not sure about this.) Also, I suspect you should raise `StopConsumer` here as well, same as in `http_disconnect`
Keep it on one line, hopefully the lint stage will pass then and we'll be able to see the results of the test run on Travis CI :-)
... to clarify, the original code uses a while loop to receive one or more `http.request` messages. The code you're proposing will only accept one `http.request` message. If the `more_body` flag is set in the first `http.request` message, `handle()` will never be called. That's bad.
Yep, I forgot that `finally` would be executed regardless of success. Would this work instead?
```python
        try:
            self.body.append(message["body"])
            if not message.get("more_body"):
                await self.handle(b"".join(self.body))
                
                await self.disconnect()
                raise StopConsumer()
        except:
            await self.disconnect()
            raise StopConsumer()
```
Yes, I think that's closer to what works.

Two points: 

- The body is optional [according to the spec](https://asgi.readthedocs.io/en/latest/specs/www.html#request), so you should probably leave check in there whether the "body" is set at all.
- Bare `except:` statements are frowned upon. At least use `except Exception` to not catch SystemExit, KeyboardInterrupt etc. (https://docs.python.org/3/library/exceptions.html#exception-hierarchy)
Is it sufficient to do the following to check or are there any falsy values that "body" can have?
```python
body = message.get("body")
if body:
    self.body.append(body)
```
It's probably fine. The old check was
```
                    if "body" in message:
                        body.append(message["body"])
```
So, it didn't check whether the body was falsy, but just assumed that it should be appended if it's there. I can't see a relevant difference in behavior though.
```suggestion
```
```suggestion

```
```suggestion
        finally:
```
@seroy Won't this `finally` be still executed even if there is more body to receive from the request? We only want to disconnect in case there was an error or it has been completed, in the latter case, it could take several events to happen.
oh, yep! in this case:
```
async def http_request(self, message):
    """
    Async entrypoint - concatenates body fragments and hands off control
    to ``self.handle`` when the body has been completely received.
    """
    if "body" in message:
        self.body.append(message["body"])
    if not message.get("more_body"):
        try:
            await self.handle(b"".join(self.body))
        finally:
            await self.disconnect()
            raise StopConsumer()
```
Anyway catching Exception almost always is a bad Idea...
@seroy Sorry for making you write the code lol, but thanks!
Please remove this - it's specific to the way you run the code. I'd advise putting things like this in a global `.gitexclude` file.
Could you trigger travis rebuild, it's got Segmentation fault
Just rebase and push to re-trigger it,
Done
Great, thanks!
Thanks!
Thanks
Can you give a better example of where this fails? I'd ideally like to see a test added that shows what it fixes.
Sure, here's an example. I have an application that spawns a `daphne.server.Server` from a click command. (Keep in mind, any application that interfaces with `daphne.server` after calling `django.setup()` will run into this problem.)

```python
@cli.command()
@click.option('--port', default=8000, help='API server port.')
@click.option('--host', default='127.0.0.1', help='API server host.')
@click.pass_context
def apiserver(ctx, port, host):
    import django
    django.setup()

    # -- comment this block out to see the problem --
    # This is a hacky workaround for hitting AttributeError when importing daphne.server
    import sys
    [sys.modules.pop(k) for k in list(sys.modules) if k.startswith('daphne.') or k == 'daphne']

    import daphne.server

    #srv = daphne.server.Server()  # etc etc but not needed for this example

    try:
        #srv.run()  # etc etc but not needed for this example
        pass
    except KeyboardInterrupt:
        pass
    finally:
        log.info('Done')
```
Ah, right, of course. Thanks!
No prob. Thank you!
Thanks!
Makes sense!
Thanks :)
Lovely, that looks good - thanks! (and I see you had a fun run in with the auto linter!)
Lovely, thanks
Hi @carltongibson and @jpic,
Sorry for the delay and thanks for the review and suggestions.
I do plan to finish this PR by the end of tomorrow (eastern time)
This needs to be rebased after #1792
> This needs to be rebased after #1792

Thanks for the reminder, I've rebased the changes on top of the latest main. I've also noticed that the current error message is missing a `.format()` call, and would throw `TypeError: 'str' object is not callable`
Hi @ericls. 

Thanks for your input here. Are you up for finishing this PR off? (Please let us know. 🙂)

There's a few problems with the new `MAX_NAME_LENGTH` variable. 

* Nothing fails if I change it to say 200, or 50. (Or any other value.) 
* Surely it needs to be **doing something** in `match_type_and_length()`?
* It should probably be moved to an attribute of `BaseChannelLayer` so it can be overridden in a subclass. 
* Yes, it should be documented as @jpic notes. 

I'm not sure I mind the tests as you've written them. (Yes, testing `format()` seems unnecessary.) We can come back to that if you resolve the other issues though. 

No need to adjust the existing error handling in this PR. Raising the `TypeError` is fine.
Great. Thanks @ericls. 👍
Is it possible to refactor the two test functions please ? It really looks like copy/paste, when only 3 little variables changes from one test to the other.
Instead of

```

        with pytest.raises(TypeError) as e:
            layer.valid_group_name(group_name)
            assert e.value.message.startswith("Group")
            assert group_name in e.value.message
            assert "< {}".format(MAX_NAME_LENGTH) in e.value.message

        with pytest.raises(TypeError) as e:
            layer.valid_channel_name(channel_name)
            assert e.value.message.startswith("Channel")
            assert channel_name in e.value.message
            assert "< {}".format(MAX_NAME_LENGTH) in e.value.message

```

Try something like

```
def assert_valid_name(kind, cb, name):
        with pytest.raises(TypeError) as e:
            cb(name)

        assert e.value.message.startswith(kind.upper())
        assert name in e.value.message
        assert "< {}".format(MAX_NAME_LENGTH) in e.value.message

```

Note that this example also minimizes the code inside TypeError expect raise block.

Also do you think it would simplify a bit to separate valid/invalid tests ?
Shouldn't invalid test code be in test_invalid_channel_name ?
I wonder why it's a TypeError and not a ValueError, @andrewgodwin do you have a clue about that perhaps ?
Actually I'm not convinced by the whole approach to this test code.

Just test that:

- [ ] valid_channel_name passes on valid name
- [ ] valid_group_name passes on valid name
- [ ] valid_channel_name raises TypeError on invalid name (2 cases)
- [ ] valid_group_name raises TypeError on invalid name (2 cases)

You don't need to test that Python .format() works.

For inspiration only, you could take a look at the [similar exercise I have just put](https://github.com/betagouv/mrs/commit/a34a0960a31e13b72420a3eaa4830f448b9d8ccf#diff-2b98f910e4b44e95e9ee98dc9049bfc6) (beware that this code has no intention to be reused whatsoever and as such does not target the same quality level as channels).
Another approach is to define a custom exception, inheriting from a based, package-level exception class. This makes it easier to expect precisely in other calling code. But perhaps that would be for another day :p
I see this new limitation introduced, we also need documentation in the patch please.
Yes, out of scope for this one.
The point is it's testing the function `valid_channel_name()`, hence `test_valid_channel_name()`.
I agree it's not required to test format().

I'll use pytest's `parametrize` to generate test cases for both methods.
To reduce confusion and for merging tests for both methods, I'll change the test name regardless.
I like it a lot!
This is actually not newly introduced limitation.  see #1229
I actually got rid of `tox` from the repo a while ago, because nobody was using it. If you want to add this could we have some info about how to use it in the README or the docs too?
Done that and added an environment to test against master to reproduce #1226.

... but I only just pushed, probably did it wrong when I initially posted this comment.
Thanks. If that one is wrong, hopefully we can push a new one.
Hey @jpic. Thanks for this. Great. 

I wondered about tests but it's covered by `test_http.py` already checking for the cookie's `expires`. 
Beyond that, I think asserting _that_ we actually called the right function in Django here isn't necessary.
`url` of `django.conf.urls` corresponds to `re_path` of `django.urls`. Why do you prefer `path` to `re_path`?
@kuratowski it’s the modern convention. Generally preferred in new or updated docs.
@carltongibson thank you for review and suggestions, I updated everything according to your suggestion.
@carltongibson Please let me know if there is any other changes.
Hi @vaibhavkumar049. Thanks for making the update. You don't need to keep asking for a re-review. We get notifications. We see it. 🙂
This was resolved in #1273 but without the `path('chat'...)` change, so went with that. Thanks for the input @vaibhavkumar049!
Hi @vaibhavkumar049. Thanks for the effort here. 

I'm happy with the update to `path()` but please leave everything else as it was. 👍
It seems this url is swapped with [that one](https://github.com/django/channels/pull/1238/files#diff-52ab88a5732297f928e9c2f3d5698541R208), can you confirm please ?
Missing space avec comma
Is it normal to change the url here ?

Before: / -> views.index, room_name/ -> views.index
After: chat/ -> views.index, chat/room_name/ -> views.room
> Is it normal to change the url here ?
> 
> Before: / -> views.index, room_name/ -> views.index
> After: chat/ -> views.index, chat/room_name/ -> views.room

yes it is normal to change url here, for example, if we enter http://127.0.0.1:8000/chat/lobby/, it will take pattern `chat/lobby/` and will give views.room
it works fine with or without space, if it is important, I will give space and then submit new PR
I did not swap it, I adjusted it a bit, for example, if the user types http://127.0.0.1:8000 then it will take him to the chat app, and then with the pattern `chat/`, it'll take them to views.index, I did that because in the future if we want to add a new pattern, we'll not always start with `chat`.it gives us more flexibility in our url patterns
@jpic if there is no problem can you please merge this in master
Please remove this file.
yes removed.Thank you for noticing
Please accept this and close this issue #1236
Yes, please add the spaces. If somebody copies this into their project and then uses a linter (such as `flake8` or `black`) they will get an error. 

(This applies to all the examples.)
Sorry to be a pain, but please move the `chat` prefix back to the `include()` call below. 

That way, I can leave my app untouched by include it with a different prefix. I can also include multiple instances of the app under different prefixes. If you change it we need to open the editor to change prefix, and all includes will need an extra path fragment to avoid conflicts.
updated
Is there a reason you removed the slash (`chat` instead of `chat/`?). If not, please add it back.
Take a look at #1237, it shows how to make such a change while keeping compatibility with django < 2.2.
Closing in favour of #1237.
Okay, awesome. I’m not going to get to this until next week now BUT, your breakdown is exactly what I was half-thinking , so if you’d like to sketch that out too, that would be great. (First draft doesn’t have to be perfect.)
@carltongibson I think I got a working fix, it took less time than expected :D

I've added another test case, (multipart + file data + too large POST data) just to ensure we've got that right too. Let me know what you think of it. Basically:

- if we're in a multipart request, we skip channels check, and let django do the check lazily via the multipartparser when accessing POST data
- otherwise, we fail early and loudly, when instanciating the request
I tested on my project and it indeed fix the denied file upload issue, by the way!
Why didn't you decide to set DATA_UPLOAD_MAX_MEMORY_SIZE=None in your project which should disable this check at all, or why did you decide not to increase your DATA_UPLOAD_MAX_MEMORY_SIZE ?
> Why didn't you decide to set DATA_UPLOAD_MAX_MEMORY_SIZE=None in your project which should disable this check at all, or why did you decide not to increase your DATA_UPLOAD_MAX_MEMORY_SIZE ?

@jpic as explained in https://github.com/django/channels/issues/1240, there is a bug in the current implementation. As stated in Django's documentation about `DATA_UPLOAD_MAX_MEMORY_SIZE`:

> The check is done when accessing request.body or request.POST and is calculated against the total request size **excluding any file upload data**.`

I do want to benefit from this protection in my project, I just don't want to have it applied to file uploads, which is the behaviour implemented in Django.
Nice, thanks @EliotBerriot. So, your implementation works for me in the sense that it does what it means to do. However, I'm wondering if it's not the occasion to move that check "upon access" as it is it Django, rather than keeping it in the constructor. 

I mean, having a too big request should prevent me to read it with RequestTooBig, but should it really prevent me from instantiating a request object at all ? Sorry if it's out of the scope of your PR which does fix a bug.
> I mean, having a too big request should prevent me to read it with RequestTooBig, but should it really prevent me from instantiating a request object at all ? Sorry if it's out of the scope of your PR which does fix a bug.

@jpic oh, I understand what you mean. Well that's really an API design decision. I don't see anything inherently wrong with the current approach. In terms of security/resource usage, failing upon instanciation is probably the best choice. 

Now, if we need to instanciate a big request, it could indeed be impractical. I trying to think of a few situations/use cases where we'd need to do that, but cannot find any right now :)
@jpic I've pushed a commit that factorize the boundary / multipart request thing, let me know what you think about it :)
Hey there, what are we doing about this? :)
Hi @EliotBerriot did you see https://github.com/django/channels/issues/1240#issuecomment-462775297?
Hi @carltongibson :) I did, but I don't really know what this mean for the current PR, hence my question. Do we close this? Do we merge this? Do I need to amend this PR?

I understand the need to refactor how channels handle request body. I still think there was a backward incompatible change and a non-standard behaviour (according to django's documentation) with the 2.1.7 release, and in this context I'd say fixing the issue is still relevant. It does not prevent a refactor at a later point.

Setting `DATA_UPLOAD_MAX_MEMORY_SIZE=None` works in theory but I don't want to allow anyone to send requests with megabytes of data in the body, *unless* it's a file.
Hey @EliotBerriot. Yes, I understand. It doesn't make any sense from a project management POV to just merge this, just to alter it again immediately. Better to think through the approach, do it right and then roll a release, with appropriate change notes so people know what has occurred. 

If you're in a super rush here, you can deploy your branch (using Pip's super VCS support) or create a middleware that just wraps the check for you, which you can remove later. 

I am grateful for your effort here, and in particular the test cases that help show what's going on! 

At heart, in patching one issue, we've revealed a sub-optimal area. We'll improve that and make progress. I appreciate that you having found it want a fix to be released **now**, but as I said, measure twice, cut once here. (It's top of my list.)
> Hey @EliotBerriot. Yes, I understand. It doesn't make any sense from a project management POV to just merge this, just to alter it again immediately. Better to think through the approach, do it right and then roll a release, with appropriate change notes so people know what has occurred.

Sure, this makes complete sense, and we can close this. I wanted to avoid having an open PR lying around for months :D 

> If you're in a super rush here, you can deploy your branch (using Pip's super VCS support) or create a middleware that just wraps the check for you, which you can remove later.

For now, I've pinned the previous version, and will follow the progress on this topic as well (I'm not sure if I'll be able to help with the dev part, but I can test things, which is still something)

Thank you for the dedication and maintenance effort :)
No, don't close it. 😀

It won't be months. It'll be a _week or so_. (I just need a hour or two to sit down with it.) 

I need it open so I don't think I've done it, when I haven't. Thanks. 👍
OK, @EliotBerriot. Thanks for your efforts here. 

I've begun work on #1251, which incorporates the tests you've provided. (Very helpful, thank you!) so I'll close this now. I'll ping you on #1251 when that's ready for you to run. 👍
I'm wondering about the security implications that could relate to this change. Does this mean that multipart/form-data requests will never have any control on their size at all, and if so could that become a vector for DoS attacks ? What is DATA_UPLOAD_MAX_MEMORY_SIZE really for if we can bypass it by changing the content type ?
@jpic, based on [Django's implementation](https://github.com/django/django/blob/77d25dbd0f20d6a907c805ffae8aaadd87edbacf/django/http/multipartparser.py#L179), which is called when accessing `request.POST`, there is a check. The second test check I've added in my PR should also ensure we never have a regression at that level.
From 211 to here seems like the same code as from 186 to 206, a little refactor will be required prior to merging.
Both body are different, but we could probably factorize the `AsgiReqest` part?

```
def MultipartAsgiRequest(body, **kwargs):
    data = {
        "http_version": "1.1",
        "method": "POST",
        "path": "/test/",
        "headers": {
            "content-type": b"multipart/form-data; boundary=BOUNDARY",
            "content-length": str(len(body)).encode("ascii"),
        },
    }
    data.update(kwargs)
    return AsgiRequest(data, body)
```

Then, in tests:

```
    def test_size_check_ignore_files_but_honor_other_post_data(self):
        body = (
            b"--BOUNDARY\r\n"
            + b'Content-Disposition: form-data; name="title"\r\n\r\n'
            + b"My First Book\r\n"
            + b"--BOUNDARY\r\n"
            + b'Content-Disposition: form-data; name="pdf"; filename="book.pdf"\r\n\r\n'
            + b"FAKEPDFBYTESGOHERETHISISREALLYLONGBUTNOTUSEDTOCOMPUTETHESIZEOFTHEREQUEST"
            + b"--BOUNDARY--"
        )
        request = MultipartAsgiRequest(body)
```
Would that be acceptable to you?
Sure, then perhaps put the boundary in a module-level or class-level variable so that you can reuse it in both test without having to duplicate the definition ? Or is there a difference between the boundary of both tests that I didn't spot ?
(I'm so puzzled by the fact that this is raised during access of request.POST while the raise itself is in the request constructor)
@jpic the raise in the constructor only applies when we're not in a multipart request. The one on the test you're commenting is produced by django: https://github.com/django/django/blob/77d25dbd0f20d6a907c805ffae8aaadd87edbacf/django/http/multipartparser.py#L198
Nope, that should work :)
Thanks for the heads up !
Very nice contribution Eliot, thank you very much for fixing this ! Once the copy/pasted code is refactored into reused code I will approve this PR.
if body is the same as above, would it work to define a module or class level variable ?
@jpic I can, but my own experience is that we usually don't need the same level of factorization in tests and in runtime code, and I tend to avoid shared state between tests.

Tests should be readable, and independant. If we try to factorize everything, it makes it really harder to understand and maintain tests. Quick example: it took me literally 30  seconds to write those tests, because I could read above tests and copy-paste the code, and edit it as needed.

It would have take me way more time if I had to jump between 5 constants, understand if each matched my needs. Then figure if I should create a new one for my test (which may be slightly different), or edit the one in place (which could break other tests). What if someone edit that contstant in the future? They would need to understand their tests, and mine, to avoid breaking anything.

I like that you can screenshot/copy-paste a test and understand what's going on. It's far more important than factorization IMHO, which quickly become a nightmare with huge codebases and 1000s of tests.

That being said, I'm not maintaining this project, and I'll happily move the whole body in a constant if you think it's the best thing :)
Oh I can live with anything, it was just my advice because I like to refactor tests after writing them, let's see what others think about it ;)

Grats for your contribution and have a great day !
Yep. Super.
By the way, it would of course be possible to add some code to channels itself checking the type of the header keys and values. I'm not convinced it's worth it because Daphne's error message is quite clear.

Also, I'm just fixing my own oversight here. (https://github.com/django/channels/commit/5189b12679fdb14cddf5d69462b3dffb77b296f3)
> > ...it would of course be possible to add some code to channels itself checking the type of the header keys and values...
> 
> Yeah, hmm. I think probably _Out of Scope_ at the moment. I'd rather keep things functional and vanilla right now.

I agree completely.
Yep. This is good, thanks @matthiask. 

> ...it would of course be possible to add some code to channels itself checking the type of the header keys and values...

Yeah, hmm. I think probably _Out of Scope_ at the moment. I'd rather keep things functional and vanilla right now.
Removing the `self._read_started = False` from `_get_files()` etc: 

```
    def _get_files(self):
        if not hasattr(self, "_files"):
            self._read_started = False
            self._load_post_and_files()
```

...should now be possible. 

At that point, just going over the tests properly, and then asking people to test should be all that's left. (In theory... 😝)
This definitely looks a lot cleaner. Looks good so far.
Hey @andrewgodwin. Can I ask you to have another look over this? 

I haven't had the bandwidth to put it into a proper harness to test as yet, so I'm mainly concerned that it unexpectedly breaks something. 🙂 Any thoughts on test cases we could add to be sure(r)? 

Anyone: if you can test this in you app, that would be cool. 


**ASIDE**: this comment  currently says "2hrs from now" for the time. No idea why. It, and the review request, and the marking ready for review, and the rename were prior to https://github.com/django/channels/pull/1251#issuecomment-490522206
I think this should work? I'm a little concerned about `receive`  being in `async_to_sync`, but it's my understanding that it should still function right. I'm really trying to avoid having to do that in Django but it's probably going to mean writing out to a temporary file.
Hey @andrewgodwin — thanks for looking. (Whatever we do here I'm hoping similar makes the leap...)

>  I'm a little concerned about receive being in async_to_sync...

This was credit to @hozblok. I had a slightly different version as my first take:

https://github.com/django/channels/blob/07e7c91e78479bb5eee328fd5aa9c871121fc603/channels/http.py#L192-L201
 
where there's some extra code in `read()` around consuming `receive`. Does that kind of thing give you a place to put extra code that you'd want? (Or not really...?)

Happy to look at the strategy you think best. Ultimately, AFAICS, the only way to avoid loading the entire body is to be able to (choose when we) await receive somehow...
Hi @andrewgodwin 
If we are going to provide a stream with a synchronous `read()` method for Django, then we can go different ways. Initially, I thought to write chunks to the queue, and, accordingly, to read from this queue in the `read()` method. But I agreed with @carltongibson that it was rather cumbersome. So, wrapping the async `read()` method in `async_to_sync` looks almost similar to doing the same with the async `receive` in this case.
I'm sorry, I did not catch how it relates to the mentioned temporary file. Maybe you know more elegant solution to the whole situation?
I think this solution is fine - as long as it passes tests, I'm happy. Like you, I can't think of a better way around it!
OK. Cool. Thanks for taking the time to look. 

Test failures are artifacts of my merging in @hozblok's work. (I missed set of an adjustments...) I'll clear those up and then merge this in. 

I have SOME user feedback, but will ask for a bit more testing before doing a release. (Then just the matching changes in Daphne... 🙂)
Hi @carltongibson ,

I am using this patch in my application with Uvicorn and it works as expected. If I can help with something else here, I'm ready.
Hi @hozblok. Yes. Thanks for the bump. (I've had a bit of _Life™_ but have cleared the space, so let's resolve this...) 

> I am using this patch in my application with Uvicorn and it works as expected. 

OK. That's my concern actually. I kind of think this _should_ work, but I'm a bit reluctant to push it out onto people unconditionally, in case there's an unforeseen _weirdness_. (I'm working round to it but, I haven't had the capacity to properly exercise the patch to be content myself as yet.)

Over on Django, Andrew has implemented a much [safer alternative using a temporary spooled file](https://github.com/django/django/pull/11209/files#diff-1b5d4d494f9efc9a04fc7fa1fb7d019dR178). 

I've been coming round to the idea of making that the default option here, and then bringing in the _wrapped `receive()`_ approach that we've got here as an experimental option.  (`handle()` would take a filelike, rather than bytes, ASGIHandler would implement the tmp file approach, we'd provide a subclass for the option here.) 

If we can get people to run it, then I'd be happier making it the default at a later stage. 

> If I can help with something else here, I'm ready.

Thank you for your keenness. It really does help. 🙂

If you'd like to work on porting Andrew's approach from the Django PR, will bar the actual filelike is not dissimilar, and then adding an `ASGIHandler` subclass to provide this approach, that would be awesome. (If not, that's OK, I'll get to it over the next few weeks.)

(My thought is to document the option in the code and the release notes, so more technical folks will see it.)
Hi @carltongibson ,

Thank you, I will try to implement a new version. But I can not determine the timing of this task, I am a bit excited at this time. :slightly_smiling_face:
> OK. That's my concern actually. I kind of think this should work, but I'm a bit reluctant to push it out onto people unconditionally, in case there's an unforeseen weirdness.

Dear friend,

I adviceto go ahead release it if it passes tests, and let users report real-project issues. IIRC this fixes a critical regression, nobody is going to blame you if it takes a few minor releases to get right.

However, as a dev you need to get feedback from users as soon as possible after your patch, in my little experience asking for feedback on pull requests doesn't work as well as just releasing the thing.

If it make it worse for them, they can just pin the previous release. Otherwise, chances are also that you don't ear about it again after your release, because it's pretty common that things that work in CI also work in production.

If you can't find the confidence then at least you can still issue a release candidate and close the issue, ask people to re-open if issue re-occurs with the RC.

Best of luck
Hey @jpic. Thanks for the thought. I’d rather release something I know to be sound, however.  

This isn’t a critical bug. There are work arounds (including pinning to the old version as you suggest).  

Nor is it a regression. Rather Channels has always just loaded the whole request into memory, and we’re seeking to add here a way to avoid that. I’m not prepared to just push an idea without validation. Certainly not when a safe alternative is available. 

That’ll come over the summer now and I’ll do new releases and every one can move forward. 

I appreciated that as ever, everyone wants everything now, but, bar @hozblok’s input, there’s no one pushing it forward so it’ll be ready when it is. I don’t actually see there’s a rush.
Closing in favour of  #1345, to be rebased after #1352.
i.e. Remove this TODO
Better name?
good change.
Grrr. I'm going to say no to this. (Sorry) 

I don't think here is the place for this kind of advice. — Otherwise we need to add `apt-get install build-essential` and equivalent for all platforms. (Yes, you'll need a compiler for whatever your platform... — but the Channels docs aren't really the place to say that.) 

I hope that makes sense.
Hey @d-s-e. Super thanks. I'll test these over the weekend, but they look just right. 👍
seems legitimate. good changes.
Yep. Super. Thanks!
I rebased, could check if it's correct?
> I rebased, could check if it's correct?

OK
Outdated since #1273. (Please comment if that's not correct.)
would you mind rebase and adjust the change with path() ?
seems alright now as per contributors feedback.
Hi @hozblok. Super thanks. I'm already working on this in #1251 so I shall compare.
Hi @carltongibson. Great. Please, feel free to ask anything about implementation.
Hi @hozblok. Good stuff. Help me understand it... 🙂

So can you tell me why we need the more complex `task` based approach to consuming the `receive` callable, rather than (essentially) just `await`-ing it in `read()`, as I have going in #1251? (What sort of test case shows the other way to be inadequate?) 

Make sense?

Thanks.
Hi @carltongibson 

1) I'm looking at your implementation now. I am ready to admit that your way looks more suitable and simple in this case. (I mean pass the `receive` to the stream). Although I have not tested your version.

2) The `truncate()` for `self.buffer` call is not needed? Will chunks be stored in RAM until truncate?

3) `RequestBodyWrapper` if it's file-like object ... If I were you I would inherit it from `io.IOBase` of `RawIOBase` or `BufferedIOBase`. Thus, we will automatically get the opportunity to close the stream, the `readline()` inherited method, context manager interface.

4) `def __init__(self, scope, body):`  I propose to change the name `body` -> `stream`

5) Why did you decide to remove the check?
```
        # Limit the maximum request data size that will be handled in-memory.
        if (
            settings.DATA_UPLOAD_MAX_MEMORY_SIZE is not None
            and self._content_length > settings.DATA_UPLOAD_MAX_MEMORY_SIZE
        ):
            raise RequestDataTooBig(
                "Request body exceeded settings.DATA_UPLOAD_MAX_MEMORY_SIZE."
            )
```

6) Perhaps an interesting case for tests: `self._content_length` does not match the size of the body being transferred. This should be an exception and we should correctly abort the upload.
So the idea was that if we can just make `receive` into a (sync) file-like then we can basically leverage `django.http.request.HttpRequest`, rather than duplicating all the functionality. So, we remove the `settings.DATA_UPLOAD_MAX_MEMORY_SIZE` check, because Django already does that (and it's much more battle-tested, so we won't hit issues like #1240.)

I agree with your other points. `RequestBodyWrapper` should probably be something like `RequestIO` and extend from `IO...` as you say. etc. 

Fancy jumping onto #1251 and co-authoring it with me? I have time scheduled for the sprints at DjangoCon Europe but if you have capacity we could get it finished and a release out before then? 

The code side is nearly there. (Just needs removing of the `_read_started` checks, as per the comments) The changes you've suggested here make sense. Then it's just tidying the tests and so on. (the pattern of creating the wrapper in the tests could be factored better, etc.) Let me know: happy to input if you can assist! Thanks.
Of course, I'm ready to participate. Let's finish it together.

The scope of work is clear. First I will reread the entire history of the ticket more carefully. 🙂
Hi @carltongibson ,

Just in case, I will duplicate the new PR here:
https://github.com/carltongibson/channels/pull/1
Super. Thanks. I’ll have a look tomorrow. Good work!
Closing in favour of #1251 — Thanks again @hozblok!
Since this is my first PR, I do not know whether I missed something. There were no tests that covered this part of the code (as far as I could find), so I did not add any. Let me know if there are any other issues with this PR, or whether there is anything I can add or change!
Thank you for finding and working through this! Sounds quite helpful!
Well, it's useful at least to me -- I am using it in my Consumers.
Hi @carltongibson, makes complete sense! Thank you for your time and consideration.
@spielmannj — Thank you for the input!
Hi @spielmannj — Thanks for the input here, but I'm going to say no. I'd rather fail fast, log the error, and make sure I'm handling all the message types the application sends than add this kind of catch-all. (For me it's not a good increase in the API surface area.) I hope that make sense.
Looks good.
Yes, good. Thanks.
HI @maliesa96. Thanks for this. Apollo looks interesting. Happy to add it. 

(Would be cool if the README had a "Add to your existing Django project" section. 🙂)

Good luck with the project!
Thanks! You’re right, that should be added to the README. I’ll add it to the todo list.

Mishari

> On Mar 31, 2019, at 12:59 PM, Carlton Gibson <notifications@github.com> wrote:
> 
> Merged #1275 into master.
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub, or mute the thread.
@carltongibson I've updated the PR as discussed in the issue.
OK, Thanks for this. Tests pass and it avoids the install error messages (which are strictly misleading...) 👍
Django 2.0 isn't maintained anymore so this should be fine. -- https://www.djangoproject.com/download/
This doesn't prevent installing channels together with Django 2.0 (`install_requires` still says `Django>=1.11`), it just drops the test runs and discourages the combination.  With the lack of resources behind channels, I don't see the point in officially supporting an unsupported version of Django.
Yep. I'm happy to just test against the supported versions.
not sure about dropping django 2.0 right now though. thanks for the changes.
OK. Super. Thank you.
I've not seen the * syntax used here before.
c.f. [PEP 440: Version Matching](https://www.python.org/dev/peps/pep-0440/#version-matching)

`2.2.*` would match e.g. `2.2rc1` but I can't see a problem there.
> I've not seen the * syntax used here before.

I'm always getting confused by `>x,<y`, so I decided to change that and expected it to get rejected if unwanted.  `~=2.2.0` would have been better regarding rc releases, but is also harder to read for people new to programming or semver.

> would match `2.2rc1`

Oh, I was not aware of that. :/
Not a problem. We're all learning. 🙂

Thanks for the help!
Looks good!
Going to close this as it's outdated. @shakib609 If you'd like to resubmit against the latest version, I'm happy to take a look. 

Thanks.
OK, this makes sense. I'm noting the lack of tests on the command, but they're already missing so... Thanks!
I do agree, I will change to this to other projects I maintain
Yep. Nice. Thanks.
Brilliant. 👍
Yep, OK. Thank you!
OK. Thanks.
👍
Now only the last two points need some clarification.

1. Is it mandatory to put the output if there's no return value?

2. The code in close method of web sockets can be a number or a bool, not anything else?
We'll see, in the mean time I have to keep in mind compatibility with python 3.5.

How should I deal with import sorting? Is there a tool for sorting them before a commit or a configuration in the editor to enable?
Never mind I figured out how to use black and isort
I'm waiting for someone to review the PR.

@matthiask @carltongibson @hishnash anyone?

Can you please give some feedback or just merge the PR?
HI @WisdomPill. I'm currently working on an update for Daphne. Then I'll cut back to channels. I'll have a look at this then.
@carltongibson done!
Hi @WisdomPill. That was quick. 🙂 Still not sure about `StrDict` _per se_ but yes.

I'm looking at releases here for Sept, so will do something with this for then. Good work!
@carltongibson is there anything left in order to merge the pull request?
@WisdomPill Just me getting another chance to review it. 🙂 Thank you for your efforts here!
Stumbled upon this issue because I was looking to see the status of type hinting in Django, so I'd love to see these changes pulled!
@carltongibson just a friendly reminder to review the changes and to point out that I alligned the changes with channels/master.
Hi @WisdomPill. Thanks for your efforts here. I'm just waiting to see what happens with the discussion on Django before coming back here.
Gonna close this for now. Further discussion on #1819.
Hi @WisdomPill. 


This looks good. Thank you for the effort. 

Can I ask a question? Is there any shorthand for this: 

```
Dict[str, Any]
```

Can we define an alias so we can just pass, say `StrDict` — that's rubbish but you get the idea?

(Like 99% of Dicts are `Dict[str, Any]` so it seems quite boilerplatey...)
HI @WisdomPill. 

Sorry for the slow follow-up here. This has been bugging me greatly, and I haven't had a chance to get to it. Anyhow...

Please create a `types` or `typing` module — What do Python folks do here? — 

Then create proper type alias wherever you have something like `Optional[Tuple[str, Tuple[str, Any], StrDict]]`. I simply don't want to look at that. 🙂 Instead I want to see `RouteMatch` or such... 

Then we'll hopefully get something meaningful. i.e. a `scope` is an `AsgiScope` (or just `Scope`), which if I'm interested I'll go and see is a `Dict[Str: Any]` — but only certain keys are allowed, so can we tighten that? (if we can't tighten it now, maybe we will over time. Maybe we'll get `asgiref` to declare that type, and so on...)

Liberal use of type aliases is the key to success here. (As they do in Haskell and friends.) 

Make sense? 

Thanks!
fix the merge error plz
That isn't necessarily true, e.g. when using a custom `User` model.
Is there no way to avoid this import? :-(
Yes, it was a mistake, it should be
```python
from typing import Dict
```

I should have fixed it
would it not make more sense to make the `database_sync_to_async` be generic

```python
def database_sync_to_async(method: Callable[SomeGenericVar...]) -> Callable[ Awaitable[TheGenericReturnOfTHeCallable]]
....
```
I think the type hinting also have another NoReturn type
Optional[str] for domain?
My bad, fixed
Good to know, I will work on that too
It's not that easy, database_sync_to_async inherits from SyncToAsync class from asgiref library.
Are you suggesting that I should inherit the __call__ method to then type it like you wrote?
Can I use AbstractUser instead? Since ```CustomUser``` and ```User``` inherit from it?
I'd use `django.contrib.auth.base_user.AbstractBaseUser` for this.
Yes, you're right
What about Awaitable[None], it can be translated to Awaitable[NoReturn]?
Is this correct? You don't **have** to inherit from `AbstractBaseUser` — it's just "...the easiest way..."
It should, I was talking about it, before with @matthiask 

As a matter of fact the django docs say that for custom user you should inherit from AbstarctBaseUser. But yes it's the easier way to create a CustomUser, maybe we can add a new type for the user that deals with the settings and fetches the auth_user_model class? but it seems to much work for it
@carltongibson here
It's not strictly required to inherit from `AbstractBaseUser`, that's true. But you're really on your own if you don't do this and you should absolutely know what you're doing then. And maybe you don't really need type *hints* either in this case.
Fine. Emphasis on the “hints”.
Since I don't like the idea to close the type to AbstractBaseUser, I think I will not assign any type, a simple Any is better since it can include all the cases
I discovered that NoReturn has been introduced from 3.5.4 and 3.6.2 so I think I will replace the NoReturn with None
`get_user()` doesn't return an awaitable.
type defs like this might be better for us to not put in the `until` file but rather in a types file?

also even through the type of `scope` is a `StrDict` it might be cleaner for reading if we redoing a `Scope` type here?
I agree with the scope type, and I think it should go in `typing.py` file
I'm sorry, I don't understand. In every reference in the codebase there's await before and database_sync_to_async decorator makes the return value of the function an awaitable, doesn't it?
good point, no lets just leave that as is.
Do the `def ...(..) -> ` methods that are decorated with `database_sync_to_async` are not returning an `Awaitable`

the `@database_sync_to_async` is converting them to be `Awaitable`. So the return type of the above should be `-> None`
see my comment above, the `@database_sync_to_async` is making it `Awaitable` so the return signature of the `def get_user ` is not  `Awaitable`
I would suggest in that `module` have a few aliases eg things like:

```python
Scope = StrDict
```
Okay, I can definitely do that
Okay, I'll fix it
I would make channels_redis drop python 3.5, not the entire channels library, do all the other libraries that depend on channels need python3.6? If someone does not need redis, why should he/she be left out?
Closing as per #1282
OK, we probably are going to have to do this (despite folks using Debian stretch etc — just because the Redis backend doesn't actually work on Python 3.5) **but** there's docs and such to go with this.
LGTM
Yep. Super. Thanks.
@keithhackbarth Thank you for making this PR. I've read through the PR and the documentation is clear to me as a developer of channels.

I hope that when @carltongibson gets time he'll be able to merge this piece of documentation. 

I for one appreciate that this is documented.
Hi @keithhackbarth. OK, let´s have it. Thanks for this.
Thanks!
Super. Thanks.
I'm not sure of the value of just having a stub consumer. Folks can just create their own, with an implementation if they need it.
Looks like this change isnt live on https://channels.readthedocs.io/en/latest/tutorial/part_2.html @carltongibson is there something that needs to be done to get readthedocs updated?
Grrr... it seems the builds aren’t working there. I shall have a look 👀
Yes. Looks like a regex no? 🙂 Thanks for the input! 🏅
> And about the codecov project, as I understood, one of the code owners should setup codecov. am I right?

Codecov works out of the box for open source projects.
Should not be necessary.
It is easier to use codecov-bash.
Does not require to pip-install codecov then.
Changes to setup.py should not be necessary (when using codecov-bash).
pytest-cov should be installed manually on Travis (travis.yml).
Super. I was just swinging back round to this myself, so very timely! 🙂

I’m strictly on holiday but I shall have a look this week. 

Thanks!
Hi @carltongibson 

Thanks, as the first exercise I decided to fix the tests a bit. :)
There are no other differences so far (compared to the previous state of 1251 PR).
I plan to implement a scheme with a temporary file in the near future.
Hi @carltongibson ,

It is still useful for #1001 
I think I need to rebase and I’ll think about how this code can be improved. Perhaps the tests for the new handler (StreamedAsgiHandler) should be separate from the main ones (which for AsgiHandler). What do you think?
HI @hozblok. 

Right, this is great. 

I want to take the `tempfile.SpooledTemporaryFile` temporary file changes immediately, and use that as the basis of a release. Then work on the more ambitious approach (with similar for AsyncHttpConsumer) over September. 

If you have capacity can you pull those changes into a single commit, or a separate PR? (Don't worry if not, I can do that if you don't have the energy/space right now.) 

Thanks for your efforts! 🥇
Hey @hozblok — thanks for the effort here: it's super interesting, and possibly something that could be suggested for Django's `ASGIHandler`, but we'll be dropping the Channel's version ≈soonish and it's not something I ~~want to~~ have the bandwidth to investigate here further. I hope that makes sense. Thanks again.
Great, thanks.
Super. Thanks @blueyed. 🥇
Hi @carltongibson ,

Your edits are appropriate!
Thanks for your feedback. :+1:
Hey @hozblok. Thank you for this, and for your persistence. It looks great!

I've pushed a few edits in 06c191bea638add38601fb17490342f5dfad1f67

* Added a test for reading body after the stream, and removed the now redundant _read_started resets. 
* Adjusted  `read_body()` slightly as the `None` branch isn't valid. c.f. https://code.djangoproject.com/ticket/30669

I'll look at this again in the light of day, and we'll get a release out. 

Welcome aboard! Thanks again. 🏅
Thanks for the feedback! Yea, it's always a bit speculative with PRs like this, as I don't know what your thinking is in many areas...

>  Do you have the energy to convert this into such a PR?

Yea, I can put in the time. 

> Don't suppose you could provide an instrumented project that demonstrates the timing issues easily?

Sure. Sholdn't be too hard. Do you think we need it for a test to avoid a regression? Seems like that could be rather hairy!
Actually, do you maybe have a reproduction scenario for the wrong-reactor case? Because I think I might need that to do the work properly?
> Do you think we need it for a test to avoid a regression? 

No. Just interested... 

Let me see if I can find an actual example... (more or less just instantiate a reactor before importing  Daphne... — even that might be more than is necessary.)
> Don't suppose you could provide an instrumented project that demonstrates the timing issues easily?

It's simpler than one might think. Just create a brand new django project and create `startup_test.py`:

```python
import os

os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'django_channels_profile.settings')

import django
django.setup()
```
On my machine running this file takes ~334ms (average three runs, excluding the first). 

Then add pip install channels and add channels as the first app in INSTALLED_APPS. Rerun the same script, now it's ~552ms (average 3 runs, excluding the first). 

That's ~218ms. Slightly better than my measurements above, but still pretty bad imo.

Now on to fixing it! :P
Well.. it looks like daphne already does this check actually, and supplies a nicely written warning and everything. https://github.com/django/daphne/blob/master/daphne/server.py#L9

We  need a new idea for a resolution here I think. How about adding a new app `channels.register_reactor` that just does the daphne import, and update the docs to suggest adding that first in INSTALLED_APPS? And maybe do the same thing as Daphne and detect the problem first to print a more helpful error message?

Seems like a  lot of work for little gain... I hope you have a better idea!
Grrr... Not yet, but you've made me begin to think about it... 

Andrew's original thinking here was to make sure setup was easy for folks. It's part of why Channels requires Daphne, even though you can use it without (e.g. with uvicorn.) I'm 100% behind that. 

BUT we're also evolving towards Django 3.0 (and 3.1) where channels is going to change quite a lot, and more user expectations too... — decoupling would be a good goal.
Well good that you're thinking about it :P 

What would be the status of this PR given this new information?
So what was the decision?
Oh, no decision. I just renamed the `main` branch, and GitHub (for unknown reason) couldn't/didn't correctly migrate the PR. 🤔

I'm thinking that we're going to have to do something in this way at some point...
Discussion about this topic: #1643
That's useful to know if I ever think of renaming the main branch!
Hi @boxed. 

I'm not sure we can accept this... We have users regularly report the exact error that occurs when the correct reactor is not set early enough. (I know the comment says `raven` but that's not the only cause...) I think if we remove this import we're going to see a lot more reports. 

> Better to document this and supply the workaround, or try to discover the fault and error out on it (and then point to the workaround).

OK. I see that. I'd be sympathetic to a PR that did the work on the docs (and code) to make this the case. (Currently Channels is tied to Daphne in a way that isn't strictly necessary... it would be good to loosen that.) Do you have the energy to convert this into such a PR? 

Either way thank you for the report. (Don't suppose you could provide an instrumented project that demonstrates the timing issues easily?)
🎉  Glad to help!
Super. Thank you!
Yes, super. Thank you!
Yep. Super. Thanks! 👍
OK, yeah, thanks.
Thanks for all the inputs @laevilgenius!
OK, let's have this. It looks great.
Do we **need** to bump this? `~=3.0` is the same as `>=3.0` no, so it'll pick up the latest version?
I just fixed some pyflakes and black warnings.
Having mocks work "automagically" would be amazing, any chance this can get merged?
> Having mocks work "automagically" would be amazing, any chance this can get merged?

@ckcollab This pull request has been put on hold, because of the related pull request at https://github.com/django/daphne/pull/284

It causes daphne tests to be about 3x slower, which @carltongibson thought was unacceptable.

So, although the pull requests cause everything to work correctly on all operating systems, it comes at a cost of speed.
OK, finally swinging back to this. 

I've merged #1906 to enforce `fork` here, which at least lets test cases work on macOS. (We'll need a fuller solution long-term, and for Windows support.) 

Note pre-4.0 this requires the development version of `daphne` as well. See #1898 

Then looking at a thread-based approach, as per here (which is what Django's LiveServerTestCase uses) as well as a subprocess (rather than multiprocessing) approach (all the `DaphneProcess` needs really is the ASGI application callable) is next up to resolve finally. 

The tracking issue is #1207.
Resolved by https://github.com/django/channels/pull/1922 & v4.0
Thank you so much :)
I'm guessing that you used `pip freeze` here. My question here are all these dependencies necessary?
That was made from a blank virtual environment, then only pip installing what was required to run the example. Then I did a pip freeze to grab all dependencies. This way if two users are comparing example output the only difference should be machine architecture.

Top dependencies are:
- channels-redis
- Django 2.2.7 (I think it fails on Django 3)
- Selenium
- Default dependencies for Daphne and Channels [tests] package.

I added the example for carltongibson, and wasn't sure if he wanted it as a .tar.gz or committed in the repo like this. My Daphne pull request https://github.com/django/daphne/pull/284 goes in more detail about this example.

I hope this answers your question.
Super. Thank you!
Friendly ping @carltongibson
Hi. The point here was to actually redo the load testing, not just update the figures in the README. 
Fancy working on that?
This isn’t right. re_path() is the new name for url().
Hey @michael-k. Thanks for this. Super stuff. (Just what was needed.) 

I shall give this a run this week and we’ll put a release out.
I've noticed that this does not solve django/channels#1374.  I've looked into it, but could not find a solution.  I'm not familiar enough with the runserver. :/
OK, yes, super. Thanks again @michael-k.
Accoring to Django 2.2's release notes, it supports Python 3.8 as of 2.2.8.
https://docs.djangoproject.com/en/2.2/releases/2.2/#python-compatibility
It might be worth backporting to the 2.3 series.
Hi @andrewgodwin. Thanks for this. 

Given https://github.com/django/channels/issues/1374#issuecomment-566705986 I'm thinking the short-term _solution_ is for Daphne to pass the Twisted reactor a non-default event loop [here](https://github.com/django/daphne/blob/eb582d1d43c74fc9d2cf9414c0cc8006b26a65aa/daphne/server.py#L6-L18). (Need to test that...) 

Longer term, I'm thinking that `django.utils.asyncio` needs to (somehow 😬) detect this kind of "not in this thread" scenario and respond better, or we need to document that folks should **not** pass the default event loop across threads in this way.

What's your thought?
I think passing it a non-default event loop is what I'd go with assuming it works. Not a huge fan of "fixing" the asyncio protection since I don't know how we'd tell what thread the loop was running in versus the thread it claimed to be part of. Maybe scan all threads we know about and see what their corresponding loop is, and raise a better error if we detect the same loop on more than one thread?
OK, thanks for the reply. I will investigate that, and prepare releases on that basis (if it works 🍀)

We can ponder whether there's a fix™ on the cards. If not, maybe we can document a possible gotcha somewhere... Anyhow (the new year...) 

Ta!
Closing in favour of https://github.com/django/daphne/pull/294
Good. Thanks @adamchainz.
Super. Thanks.
Hey @jaydenwindle. This looks great. 

As per my comment on #1319 just now, we need to work out the road map here so we can make sure we document the steps for folks as we go. I need to have a little thought on that: it wasn't on my radar until you stepped up today. 🙂 BUT (as I said in the comment) I think this is a migration that we can do incrementally. 

Really exciting. Thanks for the input!
Hi @jaydenwindle. Thanks for this, it's great. 

I'm going to merge to the ASGI 3 branch, so we can finish off there. 

I'll add a note to consider simplifying `BaseMiddleware` — too many hooks I think now.
@adamchainz OK, I'm Meh but I guess it's better advice for all and sundry. Can you update the pip install in contributing.txt too please? Ta.
Updated all pip installs

Yeah `pip install` has normally worked fine for me too, especially using virtualenvs, but I've helped enough people debug pip issues that I hit the point to change all my projects and write the post :)
OK, overall looks good. 

On Django we don't use code-block for the Python blocks. 

Better go and read your blog post but... 😬
Super. Thank you @adamchainz!
Python is the default right?
I'm so _Meh_ about this. `pip install...` has worked fine for years. 🙂



There was a matching one in `contributing.txt`. (I'm not suggesting you update that too. 🙂)
It is but I think using `::` all over the place makes it hard for copy-pasters to find out about `code-block` and thus realize they can control the language highlighting. I prefer to be explicit
Yeah, OK.
Yeah !
OK, super. Thanks @adamchainz. Let's have this.
Did you check this actually works? c.f. #1354
Yeah it works for me on django 3.0 and channels 2.4.0, and I tried downgrading to 2.1 and channels 2.2.0 and it worked there too.

Pushed at https://github.com/adamchainz/channels-tutorial
OK, but I just haven't merged this because of the report leading to #1354, which had an issue connecting to the `chat/???` route in the next step.
Okay I'll revert this bit
Hey Adam. Right, sorry for the slow uptake here. I’ve been pondering this. 

I think all and sundry will want to use path here. We’ve already hit this three times. (Fixed once. Broken again. Fixed. Now suggested for a change.)

So. I think we should call it out in the example and link to an open issue here to make it work with path. That way it’s 100% obvious that re_path is required, and maybe someone picks it up and implements it. 

Make sense?
#1428 is the issue, updated the tutorial with a note and the URLRouter docs with alink to the issue.
Super. Thank you.
When will this be merged? I'm unable to use the latest version of channels because of the error. Is there any simple workaround?
Hi @sidharthramesh. We'll look for a new version supporting ASGI v3 throughout in the next period. Before Django 3.1 is the obvious goal. 

Personally, I have a commitment to DRF to fulfil and then Channels is top of my list. If you'd like to help the effort that would be great. 

The current version still works but, if you're in a rush you can always deploy this branch directly. ([Pip has very good VCS support](https://pip.pypa.io/en/stable/reference/pip_install/#git).)
Thank you! I figured out what I needed. I was trying to use the Django ASGI object instead of the ProtocolTypeRouter provided by channels. Reading the latest version of the tutorials helped!
> I was trying to use the Django ASGI object... 

Yes, so the goal here would be to make that work. 

You'd wrap your Django v3(.1) app in ProtocolTypeRouter to have Channels handle websockets etc. (You might branch by URL to use Channel's HTTP consumers too, but it's the same idea.) 

Currently you still need to use the Channels supplied handler to serve your Django app. We'll keep that around, since Django 2.2. has two years left to run, but we'll guide folks to the Django supplied option once they're on 3.0+.
> Thank you! I figured out what I needed. I was trying to use the Django ASGI object instead of the ProtocolTypeRouter provided by channels. Reading the latest version of the tutorials helped!

ie, use the channels ProtocolTypeRouter in routing.py: 

`ASGI_APPLICATION = "<project>.routing.application" `

not Django's asgi handler in asgi.py:

`ASGI_APPLICATION = "<project>.asgi.application" `

until this is sorted out.
Will something like this be needed for django 3.1? Given the increased django/asgi/asynchrony support it yields.
@carltongibson are the changes for finalization fairly straightforward (appears to be from the comments)? I should have some time this week to fork this initial change and implement it on a new PR.
Hi @jheld — No, there's not much at it: it looks great. 

The issue is **just™** that I think the migration needs to be done in one-step, with a major version bump, so there's this PR, #1412, and then the consumers to update too. (That last is not **massive** I think: adjust the base classes, fix the tests. 🤞)

The hold-up is just me having time to pull that together, and doc up the changes, but if you have a bit of bandwidth to join in that would be super. 

My plan is to pull the changes into a single branch, make sure they're all ready and then merge back in. If you wanted to start by combining @jaydenwindle's two PRs into a single one and rebasing that would be great.
Rebased in #1479. As I said there: 

> Merging to the asgi-3 branch, so we can get that done before merging back to master.

Thanks for the effort @jaydenwindle!
Hi @jheld — I've merged the two PRs into an new branch for ASGI 3 compat in #1480. 

There's TODOs there if you do have capacity. 🙂 (Simplifying `BaseMiddleware` might be a nice one — it seems a single hook would be enough... — Just `__call__()` maybe? It's only the single middleware in the project that uses it.)
@carltongibson that's awesome! thank you for combining those. I'll fork and build on top of that branch. I'll try to communicate my progress and capacity. Exciting! And thank you for the suggestions.
Hi @jaydenwindle. 

Sorry for the massive delay in uptake here. 2020. (Hope that covers it. 🙂)

Do you still have capacity to work on this? If not no stress, I can pick it up, but if so, super. Let's get it in. 

I think we need to jump in with both feet: I don't think wrapping every application in `guarantee_single_callable` is a great way forward. 

Rather, we'll bump the major version and say to users that they should update their applications or use `asgiref.compatibility.double_to_single_callable()` themselves. That's one time at configuration for them vs overhead on every request otherwise. Make sense? 

Other than that this looks great.
Yep, that looks right. Thanks.
Fixed in https://github.com/django/channels/commit/c272b2bf9ada9542e19f82ec1fdce001908abedd. Thanks.
Resolved in 69363a22e22f501bc46c90b79fbeb70caf1e05d8 #1438 Thanks.
Super. Thanks.
import path instead of re_path
path was imported instead of 're_path'
Looks like we need to update the Twisted dependencies (or pin attrs...) Will look at this in the week.
Any concerns that this is higher priority re:django 3.1? The triage/resolution, in particular.
@carltongibson Since this is a docs-only change, can it be merged despite the CI failure? (Is that fixed in master anyway?)
Yep good. Thanks for the hustle.
Super. Thanks.
Thanks!
Super. Thank you. 

(Sorry for the delay: needed the pandemic to just give me enough time to fix a dependency issue on the CI and then rebase...)
Grrr. I have to fix the CI.
OK, rebased after 47c661eb3803919177bed8bb33797dc2d4214225 🤞
Super. Thanks @ronnievdc! 🥇
You're right - it is for `1.x`, I only discovered that after trying to get it working with a `2.x` project. I started trying to make a fork which would work with `2.x` but didn't get very far and haven't pursued it.
OK, it would be cool if you can get it working. Thanks.
This  breaks the link above. (Both need updating if one is going to be.)
Hi @stephendwolff — so I corrected the link here. 

I see this is against `1.x`. Is that what you want to be using? 

As far as I can see, neither the Debug Panel nor cq were updated for 2.x... — I haven't looked into it; do you have info on that?
Hi @millerf. Super thanks for this! 🏅
Super. Very nice. Thank you.
Fixed #1462 

`black` and `isort` were in conflict so I updated `isort` settings as per the `black` [docs](https://black.readthedocs.io/en/stable/the_black_code_style.html). See the "A compatible `.isort.cfg`" section.
LGTM
Super. Thanks @smithdc1
Is there any procedure I should follow like creating a ticket or something to get my PR merged?
Hi @saibhaskar24. First off I need to watch the video. Then I'm not quite sure whether linking to such is appropriate. We tend not to link to blogs and videos and such since they go stale over time, and also we find that once one link is added there's a constant stream of PRs to add similar. It becomes an arms race. 

Better is to Improve the docs themselves. You said things didn't work for you. As such there should be specific changes you could suggest to the existing guide? That would be a real benefit. 

I hope that makes sense.
Sure @carltongibson .
I understand.

Thank you.
could be a good addition
Hi @michael-k -- Super thanks for this. Just the one comment...
LGTM
OK, super. Thanks @michael-k 🥇
This should be `dj31` I think?
Fixed :)
@carltongibson Yeah, I concur, `__call__` being _the_ place seems appropriate. Sub-steps (alter and resolution of scopes) are generally nice/a good contract, but given how small all of those functions are, it does add complexity, and the price paid to migrate to the simpler implementation within their subclasses is _likely_ 5 minutes of effort for a probably pretty small population of developers. They can even copy in the implementation of `__call__` that they used to rely on to use if they don't want to deal with moving their function bodies into a new overridden `__call__` (perhaps the code in their cases is better off with the extra organization).
I think the straight `__call__` is all we need.
@carltongibson PR #1482 is my first pass through this. I've targeted against this branch, trying to keep everything unified.
@jheld super. Thanks I'll take a look. 👍
I've begun updating the consumers and tests in #1483. ~~Will continue but if anyone wants to jump in, PRs on my branch welcome.~~ **Done**
Hey @andrewgodwin.

Code changes here are for an (overdue) update to ASGI v3 and (so) compat with the ASGI application that Django provides. 

As per todos at the top, I want to go over the docs once next to make sure that's all good. 

Can I ask if you could give a high-level pass and think if there's anything else you'd add as part of a "To go with Django 3.1" release? (Does that make sense? — in particular, no call for you to get into details, unless you have the inclination. 🙂) 

Thanks.
@carltongibson / @jheld Thank you for working on this! Excited for easier Web Socket support for Django and DRF (https://github.com/encode/django-rest-framework/issues/7260#issuecomment-640309470).
Quick review this morning, I noted `ASGIHandler` also needs migrating. **Update**: #1484
OK folks, this is rebased and applied almost everywhere. Importantly the `runserver` command is updated so you can use it. (I'm doing so locally and it seems to be OK.) 

There's a bit more to do but any testing to find the issues will be good. 

@jheld: I'll pull in #1482 next. Thanks for your patience there. 

Still to do is auto-detecting Django v3 and using its `ASGIHandler` as the default `http` application, and then docs (particularly for migration) but it's getting there.
OK, I have branched 2.x, set up the `stable` build (pointing to 2.4.0) as the default on read the docs, and set up a build for the 2.x branch there for legacy purposes there. `latest` docs will continue to build `master`, and when we tag, `stable` will become the docs for 3.0. 

I'm going to merge this now, and work on updating the documentation on the main branch. (We're not far off.)
Hi @jheld. It's my plan to get to this this week. Thanks.
@carltongibson I may be a bit late here, my apologies! Just making sure you don't need me to do this (the branch is closed, though the target branch/rebase does need to change)?
Hey @jheld. The docs changes are a bit late now yes. (Thanks for those now though) 

The BaseMiddleware simplification could go into master still though, if you have capacity. Thanks!
Hey @jheld — can I ask you to rebase the last two commits here on `master` after I merge #1480. Thanks!
Just the tests on `OriginValidator` to go. **Done**
I'm not sure this is the right approach. Better to ensure the folder is there in the first place. c.f. #1499 
Thanks though.
I think there's no need to create a separate test for a mock request with headers with latin-1 characters, imo we could just add a latin-1 header value in the existing mocked requests. But I still doubt the usefulness of this considering that latin-1 is backwards compatible with ascii and everything should work the same. Opinions or corrections are welcome (this is my first contribution btw)
It's about stopping regressions in the future. If we add a test now we get notified when it breaks later.
Thank you, I'm writing a test for latin1 now and I'll commit it
This took time, The travis-ci said that I'm not using the request object I've created and I wanted to fix that even tho using it is useless, I just wanted to pass some latin-1 headers to create a request and ensure it's working. I fixed some stupid things I did.
Refs #1450 — can you see the gunicorn PR linked there, for some tests we might add?
Hi @LeOndaz — Thanks for this. Super.
Hi @smithdc1 Thanks for this. Just need to verify we didn't bump into #1428 with e.g. the `inner` case. 🧐
LGTM
Hey @smithdc1. Thanks for this, looks good. Rebased, and will just wait for CI.
And git bisect is fun hey! 🙂
Hey @smithdc1 — Thanks for this. Super. 👍
Hi @carltongibson.

The **initial** request sent by Websockets is always a HTTP request with method GET. This HTTP request with its cookies, query parameters, headers are in `self.scope` and this passes through the Django channels request handler and also any custom middlewares - such as authentication, permissions or other layers I add.

Once the request reaches the Websocket Consumer, the websocket connection is accepted and all requests henceforth are not HTTP.

It is this initial HTTP handshake request that I would like to wrap in to `AsgiHandler`, and it should be possible as it is a `HTTP` request like any other. Doing this gives easier access to headers, cookies, query parameters, of the initial HTTP handshake, using `AsgiHandler` instead of rooting through the very raw `self.scope` attribute. These cookies and query parameters can then be easily accessed in the middlwares I add.

However converting `self.scope` to `AsgiHandler` produces a traceback for websockets because the method of `GET` is not set, which is what this pull request is trying to fix.

For instance. Regardless of websocket / standard HTTP request, I would like to access a token in the query parameters of the request to verify the user (not saying this is how my authentication actually works, but just as an example). It is easiest to use `AsgiRequest.GET` to do that:

```py
class _ContextMiddlewareInstance:
    """Instance of ContextMiddleware:."""

    def __init__(self, scope, middleware):
        self.scope = scope
        self.middleware = middleware

    async def __call__(self, receive, send):
        request = AsgiRequest(self.scope, io.BytesIO(b''))  # This line tracebacks because GET method is not set for Websockets.
        token = context.request.set(request)
        try:
            inner = self.middleware.inner(self.scope)
            return await inner(receive, send)
        finally:
            context.request.reset(token)
```

```py
class _AuthenticationMiddlewareInstance:
    """Authenticates user and adds user context."""

    def __init__(self, scope, middleware):
        self.scope = dict(scope)
        self.middleware = middleware

    def is_valid(self, token):
         ....

    def get_user(self, token):
         ....

    async def __call__(self, receive, send):
        request = context.request.get()

        token = request.GET.get('token')
        if not self.is_valid(token):
            logging.warning('User is not authorised.')
        else:
            user = self.get_user(token)
            self.scope['user'] = user
            request.user = user

        return await self.middleware.inner(self.scope)(receive, send)
```
Hi @carltongibson! Why is the 'request' key missing from the scope in this case? I guess there's a good reason?
It's just following the ASGI spec. 🤷‍♀
Hi @StefanCardnell. I'm not sure this makes sense. 

`AsgiRequest` is **only used** in handing off HTTP handling to Django. It should never see a websocket request. (It has no support for handling such.) 

Plus, if you're dealing with websockets it's always `GET`.
I'm guessing you should just add the method key to the scope in your middleware if you really want to do this. 🤔
OK, yep thanks I think that will probably help some folks. 👍
Closed in favour of #1504
Can you add to the `community` page, where we have a list of such things. Thanks 👍 

Refs #825
Super. Thanks. Welcome aboard! ⛵️
Thanks @Zinoex!
This is mistake. Nested routers can't use `path()` See #1428. This exact change was made previously but we had to revert it in #1354 because of #1338. 

Thanks though.
HI @minho42 — Thanks for this. I think I prefer  #1499. Your approach is perfectly fine too but….
python -m pytest                                                                     ✔  newDjango3.8.5  1546  23:44:56 20/10/2020
======================================================================================================== test session starts ========================================================================================================
platform darwin -- Python 3.8.5, pytest-6.1.1, py-1.9.0, pluggy-0.13.1
rootdir: /Users/anton/workspace/Django-Channels/channels, configfile: setup.cfg, testpaths: tests
plugins: celery-4.4.7, django-4.0.0, asyncio-0.14.0
collected 61 items                                                                                                                                                                                                                  

tests/test_http.py .                                                                                                                                                                                                          [  1%]
tests/security/test_auth.py ........                                                                                                                                                                                          [ 14%]
tests/test_generic_http.py .                                                                                                                                                                                                  [ 16%]
tests/test_generic_websocket.py ...........                                                                                                                                                                                   [ 34%]
tests/test_http.py ..............                                                                                                                                                                                             [ 57%]
tests/test_inmemorychannel.py ......                                                                                                                                                                                          [ 67%]
tests/test_layers.py ....                                                                                                                                                                                                     [ 73%]
tests/test_routing.py ........                                                                                                                                                                                                [ 86%]
tests/test_testing.py .......                                                                                                                                                                                                 [ 98%]
tests/security/test_websocket.py .                                                                                                                                                                                            [100%]

======================================================================================================== 61 passed in 4.81s =========================================================================================================

I have no idea why travis build failing and local tests passing. any clue?
Hi @agriev. Thanks for the suggestion. 

Happy for you to add this, but I'm not sure it's worth the documentation, testing and maintenance effort in core. I'd be inclined to just let this raise and throw the error back to the client as the default.

If folks want to subclass and implement receive no problem, but not keen on adding little hooks like this. 

I hope that makes sense. 

(Would need tests and docs if we were to proceed.)
Hey @andrewgodwin interesting one in https://github.com/django/channels/pull/1513/commits/1e8dad6173d848d1307bad64e72995139f5dbb9c — Adds `django_db` marks for all tests to Sync consumers, since `asgiref` 3.3. (All good, but thought you'd be interested to note. Ta.)
Hi Carlton, just to check...

So this keeps support for Django 2.2 (which continues to support Python 3.5?) but drops support for Python 3.5 from this package?
Yes, that’s right. We’ll keep support for 2.2 until 3.2 is out. (But 3.5 is EOL now, and...)

Seem reasonable?
Yes, given 3.5 is eol my natural preference is to drop support (may be a bit aggressive for some). 

Question came from being a bit unsure as  previously (on crispy-forms, I think) we'd discussed keeping 3.5 support until 2.2 is eol which is some time away.

I think what your saying something different here in that channels will drop 2.2 support circa.1 year before it becomes eol?
Yes. Happy to keep going until 3.2 is out but if you're doing this stuff you really need to be updated. 

Perhaps I should add a note to that effect to the docs. 🤔
TBH it depends on the cost. If it's **just** as case of keeping `AsgiHandler` then no harm leaving that there — but what I DO want to communicate is that there's no further working going to go into that (and folks should update to 3.x). 

I plan to add deprecation warnings to that effect. 

1. On `ProtocolTypeRouter` without an `"http"` key. 
2. On instantiating (Channels') `AsgiHandler`.
Okay it looks like the run duration has increased slightly by using `tox`, but I still prefer it since it avoids having 'run the tests' configuration in two files, which inevitably get out of sync.
Super, let's have it, thanks! 

I like tox. 😀
Good. This was bothering me. 👍
Modified to:

* Use [black compatible config](https://black.readthedocs.io/en/stable/compatible_configs.html#flake8)
* Fix all violations
* Run tools on CI via `tox` so less copy-paste.
Hey, I'm working on this! 👀
We have a black/flake8 fight. It's my bedtime so I'll leave it to you! 🙂
Okay I force pushed over your force push, I think we were doing basically the same things...
You can merge when you're happy! Thanks @adamchainz!
> You’re not authorized to merge this pull request.

😅
Hmmm no idea why that it. (Will look tomorrow...)

In the meantime...
Yep, super. 👍
Yep. Nice!
Should we keep the 'known' settings to maintain the current ordering?
I was wondering about that too. Let's decide later, after ☕️
`daphne` and `asgiref` aren't really first party since they're not part of the package. Imo better to stick with defaults that are easy to keep consistent everywhere.
OK, let's have it.
Super.
Thanks for the PR @smithdc1 , sorry it wasn't seen to for... a while. I think we can close it though because:

1. Since this PR was created, `setup-python` added [built-in caching support](https://github.com/actions/setup-python#caching-packages-dependencies), which would be better to use.
2. `tox.ini` is not a complete enough hash key - since it does not specify exact versions, it will mean the cache will include old versions. Using fully specified dependencies for caching would require a bit more work, like I have on my projects with [fully pinned requirements](https://github.com/adamchainz/django-browser-reload/tree/main/requirements).
3. Caching small amounts of pip wheels doesn't speed up tests significantly - caching the virtualenvs in `.tox` would help, but I haven't seen a recipe for that.

If you'd like to try a more advanced pinning + caching PR, please do!
Question is what happens when a new Asgiref release goes out. Requirement is already satisfied, so will it get picked up?
> Question is what happens when a new Asgiref release goes out. Requirement is already satisfied, so will it get picked up?

Yes -- I had the same question.

I think, sadly, the answer is that this isn't going to work. Unless the version was pinned in Tox, which I don't think we want to do? 🤔 

```
C:\Users\David>pip install django-crispy-forms==1.9.1
Collecting django-crispy-forms==1.9.1
  Using cached https://files.pythonhosted.org/packages/e4/8f/69d68e1456b308609b3048f094697f4e3edee50ad001f9d4ba7298125637/django_crispy_forms-1.9.1-py2.py3-none-any.whl
Installing collected packages: django-crispy-forms
Successfully installed django-crispy-forms-1.9.1

C:\Users\David>pip install django-crispy-forms
Requirement already satisfied: django-crispy-forms in c:\users\david_2\appdata\local\programs\python\python37\lib\site-packages (1.9.1)

```
What about it we always install the latest asgiref first, as an unpinned tox dependency?
Yes.. I've got a few ideas now, let me have a look later.
So a bit more progress on this:

- Hash the `setup.py` as it contains dependencies
- Run pip upgrade inside tox, to ensure we have the latest versions. When/if a version gets bumped in the `tox.ini`/`setup.py` the whole environment should get re-created but smaller changes should get an upgrade in the meantime. 
- I need to be more sure about what is happening with `djmaster` 

One interesting thing is that I've used the new resolver here as it solves a conflict I am seeing when installing `asgiref`. 

**Old resolver**
```
django 3.1.2 requires asgiref~=3.2.10, but you'll have asgiref 3.3.0 which is incompatible.
Successfully installed asgiref-3.3.0 channels
```

**New resolver**
`Successfully installed asgiref-3.2.10`

EDIT:

So this doesn't quite work. The upgrade command also updates Django 🤦. Could just update asgiref & daphne (and pin the testing tools, so a version bump generates a new hash). 🤔

Looking at the timings, there is a reasonable speed up here (although 3.9 took a LONG time on the most recent run), so I'll keep on progressing with this for a bit.
Hmmm. That's not right. We **want** asgiref 3.3.0. (cc-ing @andrewgodwin) 

Ticket on Django: https://code.djangoproject.com/ticket/32128
So... The tox docs say that you need to rebuild the environments when a dependency changes, so I'm fighting against tox with this somewhat. Therefore to get this to work we'd need to pin the dependencies much more accurately so when a version is bumped (in tox.ini or setup.py) it causes a rebuild of the environments. I am not sure we want to do this and therefore think we should close this and go with #1521 which should at least give some improvement.
Thanks @smithdc1 🙏
Super. 👍
I've read through and this reads ok to me. Note, this is from a readability perspective not a technical one!
Given #1531, I'm going to merge this now to not be battling multiple branches.
This needs an `as_asgi()`
Bases -> based?
While we're here. Url->re_path?

I'd be happy to take an action to conduct a general review for URL() if that'd help.
Yes, these should all be `re_path`. (Not `path` if nested in a middleware...) Thanks!
Super thanks.
@carltongibson I'm unsure why py38 failed. Happy to adjust the code if needed, but otherwise am hopeful that this ready for serious review.
Hey @jheld — that looks like my ropey test. It seems to fail intermittently. I shall have a play with it and adjust 😀
Hey @jheld — Thanks for this. Super! 🥇
Hi @smithdc1 — I'm going to close this so I can merge. Can you do a fresh one against the main branch when you're ready. Thanks.
Hey @smithdc1 — I changed the base here to my #1533, otherwise we're fighting each other the same changes… Can you adjust/reset as needed for that? Thanks!
Hi @carltongibson .

Looks like this broke the rtd build.

Let me have a look. 🔍
The build probably hasn't needed the dependencies until this change (which probably means I need to adjust it on RTD...)
I can't resolve this today. Installing Django fails because of a dependency clash with asgiref/django, which is [trac-32128](https://code.djangoproject.com/ticket/32128)
No, that's fine. Thank you.
What if we just `try` this?
Let's give it a go. ...

OK, looks good. https://readthedocs.org/projects/channels/builds/

Thanks for spotting that @smithdc1 (I wouldn't have noticed for _a while™_)
Thanks Adam. Super.
I tested the solution using the following code https://github.com/alejoortiz/tutorial-django-channels.git
Hello Carlton, I was using the 2.4.0 version, documentation is fine for 2.X. I will close this pull, thanks a lot for your help.
Hi @alejoortiz — these changes are correct for the 3.0 release, which we're preparing currently. 

What version are you using? 2.4.0, which is the latest on PyPI? — in which case you need to make sure you're using the `stable` docs on RTD (or the 2.x version), both of which you can select on the lower left corning on RTD.
The request interleaving will make much more sense (be much easier to do) with a websocket communicator. I'll give that a run tomorrow.
> Hi @gghildyal — thanks you rebased. Can you add a small regression test for this? (Just checking set_cookie() or such)
> 
> Thanks!

No I haven't, just improved the previous fix. Will rebase now and add a test!
Hi @carltongibson - Added tests now, please review and recommend.
Hi @carltongibson, I have rebased again so these changes are ready to be merged.
Hi @carltongibson, Would be good to get this in before the code diverges too much.
Hi @gghildyal — thanks you rebased. Can you add a small regression test for this? (Just checking set_cookie() or such)

Thanks!
Thanks for this @gghildyal 👍
Super. Thank you!
Duplicate of #490. 

Sorry, this isn't something we're going to take on until we have a dependency free `runserver` story in place. Then, yes, we can make Daphne optional. Until then you can install with `--no-deps`
@carltongibson that is not possible to install channels without daphne
https://github.com/django/channels/blob/master/channels/apps.py#L1-L4

Shall we remove this import and add some instructions to import it on those corner cases ?
Ah, yes. You're right. 

No. This has been discussed at length. It's on the list to remove the Daphne dependency but not until we have a story for runserver.
Hey @KStenK. I pushed an edit. Hopefully it makes sense.
Hi @davidmarquis. Lovely, thank you. 🥇 

Welcome aboard! 🙂
After looking into how pip & wheels work, I need to revise this approach. Closing for now.
Hey @oTree-org -- OK thanks. 

This looked close. I'm open to something here if we can solve the issues. Will have a think on it... 🧐
Hi, sorry for my delayed reply. Here is why I think this approach won't work:

- I discovered that pip sometimes installs each package in a separate subprocess. This defeats the "package author" use case of setting the env var dynamically during installation of a package so that it is set by the time channels gets installed.
- More importantly, Channels is distributed as a wheel, so I think setup.py is usually not run during installation.
(Though the rest of the code in that PR could still be used if someone finds another way to skip daphne installation.)
Yes, good thanks. 

For a test, likely you can just instantiate the consumer for a single request — like `SimpleWebsocketApp()` — but `as_asgi()` is the right approach. 

Thanks!
Yes, thanks.
> Can we add a test case that fails with the existing implementation here? 🤔

I suppose you need to pass the result of `asyncio.ensure_future(my_receive())` into `await_many_dispatch()`.

```
diff --git a/tests/test_generic_http.py b/tests/test_generic_http.py
index 99131e0..c7b0b0b 100644
--- a/tests/test_generic_http.py
+++ b/tests/test_generic_http.py
@@ -1,5 +1,6 @@
 import json
 import time
+import asyncio
 
 import pytest
 
@@ -71,3 +72,37 @@ async def test_per_scope_consumers():
     assert second_response["status"] == 200
 
     assert response["body"] != second_response["body"]
+
+
+@pytest.mark.asyncio
+async def test_async_http_consumer_future():
+    """
+    Tests that AsyncHttpConsumer accepts Future objects.
+    """
+
+    class TestConsumer(AsyncHttpConsumer):
+        async def handle(self, body):
+            await self.send_response(
+                200,
+                b'42',
+                headers={b"Content-Type": b"text/plain"},
+            )
+
+    app = TestConsumer()
+
+    async def wrap_app(scope, receive, send):
+        def wrap_receive():
+            return asyncio.ensure_future(receive())
+
+        await app(scope, wrap_receive, send)
+
+    # Open a connection
+    communicator = HttpCommunicator(
+        wrap_app,
+        method="GET",
+        path="/"
+    )
+    response = await communicator.get_response()
+    assert response["body"] == b'42'
+    assert response["status"] == 200
+    assert response["headers"] == [(b"Content-Type", b"text/plain")]
```
FWIW this patch completely fixed running under [NGINX Unit](https://unit.nginx.org/) for me too. Is there anything I can do to help move this along besides the PR I already opened at #1766 with the test. Is the test not suitable?
Is there any interest from the Channels maintainers to get this merged? I point out in (#1766) that this patch both **makes the code more internally consistent**, as-well as makes channels more ASGI spec compliant.

Is the test proposed in (#1766) not suitable or clean enough in some way?
Hi @willstott101 --- thanks for the bump. It's on the list for the next version, which will be this summer (I.e. I'm working on it now.)

If you need it now, I'd suggest pip installing your branch in the meantime. 

Sorry for the delay, but it's just me, in the time I have.
Closing in favour of #1766.
Can we add a test case that fails with the existing implementation here? 🤔
Ok, I've added a test that was mostly guessing but does fail without the previous commit. If you are able to run with it at all or make sure it's sensible that would be great. It would be nice to assert something in the test but at the moment, the test will throw a `CancelledError` without the fix. Stack trace below.

```================================================================== FAILURES ==================================================================
______________________________________________________ test_handler_concurrent_requests ______________________________________________________

self = <asgiref.testing.ApplicationCommunicator object at 0x7f7bc882acf8>, timeout = 1

    async def receive_output(self, timeout=1):
        """
        Receives a single message from the application, with optional timeout.
        """
        # Make sure there's not an exception to raise from the task
        if self.future.done():
            self.future.result()
        # Wait and receive the message
        try:
            async with async_timeout(timeout):
>               return await self.output_queue.get()

../../lib/python3.6/site-packages/asgiref/testing.py:74: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <Queue at 0x7f7bc882ae48 maxsize=0>

    @coroutine
    def get(self):
        """Remove and return an item from the queue.
    
        If queue is empty, wait until an item is available.
    
        This method is a coroutine.
        """
        while self.empty():
            getter = self._loop.create_future()
            self._getters.append(getter)
            try:
>               yield from getter
E               concurrent.futures._base.CancelledError

/usr/lib/python3.6/asyncio/queues.py:167: CancelledError

During handling of the above exception, another exception occurred:

    @pytest.mark.django_db
    @pytest.mark.asyncio
    @pytest.mark.filterwarnings("ignore::DeprecationWarning")
    async def test_handler_concurrent_requests():
        """
        Tests request handling ignores anything after more_body: False
        """
        scope = {"type": "http", "http_version": "1.1", "method": "GET", "path": "/test/"}
        handler = MockHandler()
        comm_1 = ApplicationCommunicator(handler, {**scope})
        comm_2 = ApplicationCommunicator(handler, {**scope})
    
        request_1 = comm_1.send_input(
            {"type": "http.request", "body": b"request 1", "more_body": False}
        )
        request_2 = comm_2.send_input(
            {"type": "http.request", "body": b"request 2", "more_body": False}
        )
    
        await request_1
        await request_2
    
>       await comm_1.receive_output(1)  # response start

tests/test_http.py:376: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../lib/python3.6/site-packages/asgiref/testing.py:85: in receive_output
    raise e
../../lib/python3.6/site-packages/asgiref/testing.py:74: in receive_output
    return await self.output_queue.get()
../../lib/python3.6/site-packages/asgiref/timeout.py:68: in __aexit__
    self._do_exit(exc_type)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <asgiref.timeout.timeout object at 0x7f7bc7fb0048>, exc_type = <class 'concurrent.futures._base.CancelledError'>

    def _do_exit(self, exc_type: Type[BaseException]) -> None:
        if exc_type is asyncio.CancelledError and self._cancelled:
            self._cancel_handler = None
            self._task = None
>           raise asyncio.TimeoutError
E           concurrent.futures._base.TimeoutError

../../lib/python3.6/site-packages/asgiref/timeout.py:105: TimeoutError
========================================================== short test summary info ===========================================================
FAILED tests/test_http.py::test_handler_concurrent_requests - concurrent.futures._base.TimeoutError
======================================================== 1 failed, 71 passed in 5.93s ========================================================```
Ok, super thanks. I will have a play. Good work. 

(Be a few days...)
@AlexHill nice work, although there's one more place in [staticfiles.py](https://github.com/django/channels/blob/master/channels/staticfiles.py#L58) where `self.scope` remains used which is causing problem now, since `self.scope` does not exist anymore.
Hi @AlexHill. Thanks for this. 

Can we add _some_ kind of test? (It doesn't need to be perfect, e.g. 0b1bc054ed76b3274b4fbe1db48876e7829386d1)
Good spot @yedpodtrzitko! I've adjusted that in c3cf5bea8eefe0aa5186dadd3bb26498e505434c. 

Let's have this. Thanks @AlexHill!
Thanks @AlexHill — this is good. Let me have a look at it.
What's the status on this PR? Definitely needs to be tested & under consideration. Don't want this to go stale since it directly addresses severe concurrency problems with v3.
I've tested this PR on 3.2. It did not seem to resolve http concurrency.

My test case involved adding `time.sleep(30)` to a view, then attempting to access a different view simultaneously. Tested using `Hypercorn` and `Daphne`.

@carltongibson Have you tested this PR and do you agree with my results?
Hi @Archmonger 

Currently I'm pondering whether this is safe. I don't have an answer there. 

(Even with `thread_sensitive=False` you will still be limited by the number of ASGI threads in play.)
Also, whilst not making fast progress at the moment (glances around at the universe circa 2020/21 for a moment) this issue is high on the list. It's not going stale for other changes. 

(Again here, running standard Django views under WSGI is the very sensible, and battle-tested, approach, while ASGI, and Django Async is still young.)
@Archmonger this PR will only help if you’re using Channels’ AsgiHandler, which isn’t recommended in newer versions of Django. Currently on mobile so I’m going by memory, but I believe Django’s built-in handler can benefit from the same change if it’s determined that it’s safe.
Ok, having had a deeper glance at the current Django async code, I think this same fix will apply in principle but in practice it looks a lot more complicated. `sync_to_async(..., thread_sensitive=True)` is used in a bunch of places and it'll take some familiarity with that code to know which of those should be changed.
I'll take at look at all `sync_to_async` calls within the django core and do an assessment as to which ones can be easily & safely converted to use `thread_sensitive=False`.
Found a fix, does not appear to have any adverse impact on any other Django 3.x functionality. Verified to work in my `time.sleep(30)` test case. Will submit a PR today to django/django for others to review.
@carltongibson PR has been made at django/django#14310
Could you look at this or ping someone on the django/django team in order to get visibly on the PR?
Alas, we can't merge this — Django's views must be dispatched with `thread_sensitive=True` in order to avoid issues, particularly with ORM. This is the reason `asgiref` made  `thread_sensitive=True the default. 

https://github.com/django/django/commit/36fa071d6ebd18a61c4d7f1b5c9d17106134bd44, which will be in Django 4.0 allows a thread (async context) per-request, which should improve things. 

In the meantime (and maybe even after) it's likely that using WSGI for traditional views, saving ASGI for specifically async things, such as Channels consumers, is the way to go.
Great. Thanks.
'both not' is a bit hard to read. Could remove the word 'both'?
Add patch number here? Is this 3.0.0 (I'm assuming it is)?
Think this line can be removed?
Adjusted.
Sorry. I was trying to refer to the closing bracket here. That is the `)`
Yes, thanks.
could you please also add test for the proposed changes?
Hi @mraleson — I'm afraid this isn't a complication we'll add here. 

The idea is that this matches Django's `WSGI_APPLICATION`, so you're looking for something like this: 

```
ASGI_APPLICATION = "your_project.asgi.application"
```

Where `your_project.asgi` is the module and `application` is the ASGI callable. 
We don't want to make it more advanced than that.
Yep, ok, super. Thanks.
@carltongibson 
As far as I understand it, the in-memory layer is clearly marked as "Do Not Use In Production". I used it during development to get rid of redis as an additional dependency of the development setup. Everything worked well until I tried to implement a background worker. Since this is running in another process I could have concluded from [this part of the documentation](https://channels.readthedocs.io/en/stable/topics/channel_layers.html#in-memory-channel-layer) that it does not work. However, I think it might help to have another hint in the documentation for the background jobs.
OK, thanks for the follow-up @benjaminbecker! I'd be really happy to take an additional suggestion, if that would have helped you along that way. 🙂
OK, thanks. 

Related: the in-memory layer should be clearly marked as not for use. Obviously it's not, since you're using it...? Can I ask, what might have put you off doing so? (Or, equally, why did you choose to use it?) Thanks!
It seems the test error cause has been fixed in #1617 

Please rebase (or merge?) the branch https://github.com/mikaraunio/channels/compare/master...django:master
Great. Thanks.
@carltongibson Please see [my comment](https://github.com/django/channels/issues/1588#issuecomment-771027880) in the issue message thread that this PR fixes.
Hey @DanielSwain — OK, thanks for the detail there. 

We need to think about a unit test here though. It should be enough to pass the init args see the error raised no?
@carltongibson I hate to admit it, but unfortunately I'm at the edge of my knowledge and am not able to add a unit test.
Ok, no problem. I shall have a look at it, review what's going on and add the tests. 

Thanks again for the input, and all the extra details! 👍
Hello!

Came over here from #1588, see my latest comment https://github.com/django/channels/issues/1588#issuecomment-772678507 there.

I've tried applying the proposed fix locally, and with the recommended minimal test case according to the documentation (https://channels.readthedocs.io/en/latest/topics/testing.html#setting-up-async-tests), and an empty (just `pass`, see comment) `WebsocketConsumer` implementation, the error goes away, and another error appears.

```
Traceback (most recent call last):
  File "/home/jonas/.local/share/virtualenvs/paperless-RxYopU_u/lib/python3.6/site-packages/asgiref/testing.py", line 74, in receive_output
    return await self.output_queue.get()
  File "/usr/lib/python3.6/asyncio/queues.py", line 167, in get
    yield from getter
concurrent.futures._base.CancelledError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/jonas/.local/share/virtualenvs/paperless-RxYopU_u/lib/python3.6/site-packages/asgiref/testing.py", line 74, in receive_output
    return await self.output_queue.get()
  File "/home/jonas/.local/share/virtualenvs/paperless-RxYopU_u/lib/python3.6/site-packages/asgiref/timeout.py", line 68, in __aexit__
    self._do_exit(exc_type)
  File "/home/jonas/.local/share/virtualenvs/paperless-RxYopU_u/lib/python3.6/site-packages/asgiref/timeout.py", line 105, in _do_exit
    raise asyncio.TimeoutError
concurrent.futures._base.TimeoutError

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/home/jonas/.local/share/virtualenvs/paperless-RxYopU_u/lib/python3.6/site-packages/asgiref/sync.py", line 147, in __call__
    return call_result.result()
  File "/usr/lib/python3.6/concurrent/futures/_base.py", line 425, in result
    return self.__get_result()
  File "/usr/lib/python3.6/concurrent/futures/_base.py", line 384, in __get_result
    raise self._exception
  File "/home/jonas/.local/share/virtualenvs/paperless-RxYopU_u/lib/python3.6/site-packages/asgiref/sync.py", line 212, in main_wrap
    result = await self.awaitable(*args, **kwargs)
  File "/home/jonas/git/paperless/src/paperless/tests/test_websockets.py", line 11, in test_auth
    response = await communicator.get_response()
  File "/home/jonas/.local/share/virtualenvs/paperless-RxYopU_u/lib/python3.6/site-packages/channels/testing/http.py", line 42, in get_response
    response_start = await self.receive_output(timeout)
  File "/home/jonas/.local/share/virtualenvs/paperless-RxYopU_u/lib/python3.6/site-packages/asgiref/testing.py", line 78, in receive_output
    self.future.result()
  File "/home/jonas/.local/share/virtualenvs/paperless-RxYopU_u/lib/python3.6/site-packages/asgiref/compatibility.py", line 34, in new_application
    return await instance(receive, send)
TypeError: __call__() missing 1 required positional argument: 'send'

```

`asgiref` is at version 3.3.1. `channels` at 3.0.3. Let me know if you need anything else.
Hi @jonaswinkler thanks for the confirmation. 

I just need some bandwidth to sit down with this myself, but I'm a little constrained at the moment (with everything) 

If you were able to contribute a test case that would speed things up, as it would make it much easier to review when I do get a moment. (It makes the needed moment smaller.)

Thanks both!
I did some more digging and came to the following conclusions (all barring the fact that I'm just a user of your libraries and don't know any of the details)

* Sometimes (the exact 'when' still left to figure out), `asgiref` detects WebsocketConsumer subclasses (or other consumers from channels as well) as legacy "double-callables". The visible issue is caused by trying to convert that double callable to a single-callable by invoking the constructor with the scope as an argument (this fails).
* See their `compatibility.py` for details.
* ~This happens when trying to run test cases with the `HttpCommunicator`.~
* Further issues about the missing `send` argument are caused since `asgiref` now expects that consumer to be a "single-callable" and just passes "send" and "receive", but `__call__` of `AsyncConsumer` expects the scope as well, as first argument.

Two possible scenarios:
* `asgiref` incorrectly detects channel consumers as "double-callables".
* `AsyncConsumer` is actually a legacy "double-callable" from pre ASGI v3, and needs updating.

Might need some help from the folks over there.

See also https://asgi.readthedocs.io/en/latest/specs/main.html#applications

In any case, *IMHO* the proposed fix does not address the underlying issue.
Hi,
I looked into this a bit, and I think found the underlying issue.

here's a test I'm using:
```
@pytest.mark.asyncio
async def test_websocket_consumer_init():
    results = {}

    class TestConsumer(WebsocketConsumer):
        def connect(self):
            results["connected"] = True
            self.accept()

        def receive(self, text_data=None, bytes_data=None):
            results["received"] = (text_data, bytes_data)
            self.send(text_data=text_data, bytes_data=bytes_data)

        def disconnect(self, code):
            results["disconnected"] = code

    communicator = WebsocketCommunicator(TestConsumer, "GET", '/test/')
    connected, _ = await communicator.connect()
```

in this case I'll end up with the error:

```
class WebsocketConsumer(SyncConsumer):
    def __init__(self, *args, **kwargs):
>       super().__init__(*args, **kwargs)
E       TypeError: object.__init__() takes exactly one argument (the instance to initialize)

channels/generic/websocket.py:25: TypeError
```

Changing the test this way fixes the issue:

```diff
-communicator = WebsocketCommunicator(TestConsumer, "GET", '/test/')
+communicator = WebsocketCommunicator(TestConsumer.as_asgi(), "GET", '/test/')
```

So the problem happens when `TestConsumer` is converted to asgi callable elsewhere than in explicit call of `as_asgi()`. That's here in asgiref: 

https://github.com/django/asgiref/blob/a528275e424eb31067250c14be2a88ebf797ea52/asgiref/compatibility.py#L32-L34

As someone previously pointed out, the signature of asgi callable has changed in v3 - `scope` parameter has moved from its constructor to its call, which is not the case \^here, which is why this error happens with extra param in construcor happens. So if I'm not missing anything, then this should be fixed inside asgiref ([see my PR](https://github.com/django/asgiref/pull/243) )
Apparently my assumption about a fix in asgiref was incorrect (see my closed PR above). Using the test from my previous comment with the change proposed in this PR shows that it fixes the consequences of missing `.as_asgi()` in one place, but then another problem will pop up further down the line because the application will be improperly converted to legacy ASGI v2 application, which has a different signature and it ends up with this error instead:

```
    # asgiref/compatibility.py:34: TypeError
    async def new_application(scope, receive, send):
        instance = application(scope)
>       return await instance(receive, send)
E       TypeError: __call__() missing 1 required positional argument: 'send'
```

One option could be `ApplicationCommunicator` would detect `.as_asgi()` wasn't called and do it automatically. But that won't stop people writing wrong code and it will add more compatibility clutter. 

Could it throw an error when it receives such application instead? The tricky part could be detecting that it's ASGI v3 application instead of legacy v2 or v4 in future. So maybe `AsyncConsumer` could have a parameter like `asgi_version = 3` or similar, which could help detect what version of ASGI application are we dealing with, and do the right thing (whatever option that will be).
Closing in favour of #1724. Thanks @DanielSwain!
Hi @DanielSwain, welcome!  

We’re obviously missing some test coverage here. Ideally this would have been picked up by the test suite already. Are you able to add matching regression tests? 

Thanks!
Shouldn't we always update the ASGI reference to the latest version?

The current docs describe the old specification of ASGI2 instead of ASGI3. ASGI2 defined as double-callable (the first one takes an argument `scope`, the later takes two arguments `send` and `receive`), while ASGI3 defined as single-callable (which takes all of the three previous arguments directly).

See django/asgiref@fae4ef0
@hashlash Yes you're right. I was looking at the text but not the code signature. Sorry!
Alright, your welcome!
Thanks again. Sorry for the brain melt. Busy week. 🤪
close this
I don't see the benefit of this change. Thanks.
Right, let's go with this. 

Thanks @hashlash
close this!
C.I failed because we need to drop Python 3.6 and 3.7 from testing against Django's main development branch (which is now 3.8+)

I'll sort this out later on.
Thanks @CosmicReindeer! Welcome aboard ⛵️
Great, thanks.
Sure thing! It seems like the "fix" broke a couple of the tests too so I'll look into that and adding regression tests.
@carltongibson should be good to review now :slightly_smiling_face:
Hi. Thanks for this. All changes need regression tests. Can you add a test case demonstrating the issue?
Super! Looks good @Kyle-Verhoog — thanks very much. 

Welcome aboard! ⛵️
Good spot. Thanks.
done!
Awesome, welcome aboard! ⛵️
Hi @danidee10 — great thanks. 

I fixed the `tox` config in #1665 — can I get you to rebase. 👍
Great, thanks.
Ok, this looks great.
OK, I need to look into that CI failure, which is new.
I added a commit whilst it was testing, to add an extra line underneath,
OK, thanks.
importing settings doesnt cause any problem, this is misleading
I have tested import of settings with this code and it works without any problem: 

```import os
from django.conf import settings

# randomly print some settings
print(settings, settings.STATIC_URL)


from django.core.asgi import get_asgi_application
os.environ.setdefault("DJANGO_SETTINGS_MODULE", "myapp.settings")

django_asgi_app = get_asgi_application()


from channels.auth import AuthMiddlewareStack
from channels.routing import ProtocolTypeRouter, URLRouter
from myapp.chat.routing import websocket_urlpatterns

application = ProtocolTypeRouter(
    {
        "http": django_asgi_app,
        "websocket": AuthMiddlewareStack(URLRouter(websocket_urlpatterns)),
    }
)
```
output
```
$ gunicorn myapp.asgi:application -k uvicorn.workers.UvicornWorker -b 127.0.0.1:8000
[2021-04-21 20:39:28 +0700] [5328] [INFO] Starting gunicorn 20.1.0
[2021-04-21 20:39:28 +0700] [5328] [INFO] Listening at: http://127.0.0.1:8000 (5328)
[2021-04-21 20:39:28 +0700] [5328] [INFO] Using worker: uvicorn.workers.UvicornWorker
[2021-04-21 20:39:28 +0700] [5370] [INFO] Booting worker with pid: 5370
<Settings "myapp.settings.dev"> /static/
```
Its not misleading at all. If you decide to lose the variable name "django_asgi_app", and just call the function like this:

```
import X from projectsettings
import module.that.accesses.project.settings

application = ProtocolTypeRouter({
    # Django's ASGI application to handle traditional HTTP requests
    "http": get_asgi_application(),
})
```

then it will throw irrational errors, because you are trying to import a Django setting, without Django being initialised in this codespace

you MUST execute the function at the top of the page, and store it in a variable
Perhaps `use` rather than `import` in the last line.
I didn't test with any settings directly in the asgi.py file, I had included a module that didn't access the ORM models, but did access project.settings

As soon as you import a module that uses project.settings in it (eg, imagine you grab something from the settings to use in your consumer, and you import the consumer to include in the URL route) it breaks
(The point really is the `django.setup()` is called, but I don't want to go into that in the Channels docs — this should be enough to help beginners, but folks should know their Django...)
It's really difficult to reason about anything if you provide only pseudocode like `import module.that.accesses.project.settings` instead of the traceback you are getting.

If your code is really not accessing any models, then that should work. If it doesn't, then it's a bug in Django initialization process, and you should open it as a bug in Django bugtracker with a minimal reproducible example, instead of merely rephrasing instructions in one of Django apps.
In your example of "randomly print some settings" will work, because you are assigning the `get_asgi_application()` to a variable, and passing that to the protocol router.

Try the exact same code snippet, but with the variable removed, and executing `get_asgi_application()` directly in the router.

Without a specific pointer, people coming to this project may not know that you MUST execute it before passing it to the router.
I'm just trying to help people in the future.

If you decide a better wording that my replacement, cool, I just want others to not have the same migraine I have right now.
Super. 💃
> You have to setup django before importing ``AuthMiddlewareStack`` or ``AuthMiddleware``.

@shahriarshm I dont believe this is necessary. I have an app which I can run via Daphne without getting any error  (see code below which works without problem) . Can you provide the whole traceback you are getting? I'd be curious to see where the error is really triggered.

```
from channels.auth import AuthMiddlewareStack
from channels.routing import ProtocolTypeRouter, URLRouter
from myapp.chat import routing as chat_routing

application = ProtocolTypeRouter({"websocket": AuthMiddlewareStack(URLRouter(chat_routing.websocket_urlpatterns))})
```
@yedpodtrzitko It's OK when I run the project with `manage.py runserver` but `daphne core.asgi:application` raises this error:
```
Traceback (most recent call last):
  File "/home/shahriar/miniconda3/envs/notify/bin/daphne", line 8, in <module>
    sys.exit(CommandLineInterface.entrypoint())
  File "/home/shahriar/miniconda3/envs/notify/lib/python3.9/site-packages/daphne/cli.py", line 170, in entrypoint
    cls().run(sys.argv[1:])
  File "/home/shahriar/miniconda3/envs/notify/lib/python3.9/site-packages/daphne/cli.py", line 232, in run
    application = import_by_path(args.application)
  File "/home/shahriar/miniconda3/envs/notify/lib/python3.9/site-packages/daphne/utils.py", line 12, in import_by_path
    target = importlib.import_module(module_path)
  File "/home/shahriar/miniconda3/envs/notify/lib/python3.9/importlib/__init__.py", line 127, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 1030, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1007, in _find_and_load
  File "<frozen importlib._bootstrap>", line 986, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 680, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 790, in exec_module
  File "<frozen importlib._bootstrap>", line 228, in _call_with_frames_removed
  File "./core/asgi.py", line 12, in <module>
    from channels.auth import AuthMiddlewareStack
  File "/home/shahriar/miniconda3/envs/notify/lib/python3.9/site-packages/channels/auth.py", line 12, in <module>
    from django.contrib.auth.models import AnonymousUser
  File "/home/shahriar/miniconda3/envs/notify/lib/python3.9/site-packages/django/contrib/auth/models.py", line 3, in <module>
    from django.contrib.auth.base_user import AbstractBaseUser, BaseUserManager
  File "/home/shahriar/miniconda3/envs/notify/lib/python3.9/site-packages/django/contrib/auth/base_user.py", line 48, in <module>
    class AbstractBaseUser(models.Model):
  File "/home/shahriar/miniconda3/envs/notify/lib/python3.9/site-packages/django/db/models/base.py", line 108, in __new__
    app_config = apps.get_containing_app_config(module)
  File "/home/shahriar/miniconda3/envs/notify/lib/python3.9/site-packages/django/apps/registry.py", line 253, in get_containing_app_config
    self.check_apps_ready()
  File "/home/shahriar/miniconda3/envs/notify/lib/python3.9/site-packages/django/apps/registry.py", line 135, in check_apps_ready
    settings.INSTALLED_APPS
  File "/home/shahriar/miniconda3/envs/notify/lib/python3.9/site-packages/django/conf/__init__.py", line 82, in __getattr__
    self._setup(name)
  File "/home/shahriar/miniconda3/envs/notify/lib/python3.9/site-packages/django/conf/__init__.py", line 63, in _setup
    raise ImproperlyConfigured(
django.core.exceptions.ImproperlyConfigured: Requested setting INSTALLED_APPS, but settings are not configured. You must either define the environment variable DJANGO_SETTINGS_MODULE or call settings.configure() before accessing settings.
```
Here is the code in asgi.py:
``` python
import os
from django.core.asgi import get_asgi_application
from channels.auth import AuthMiddlewareStack
from channels.routing import ProtocolTypeRouter, URLRouter

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "core.settings")

import notification.routing

websocket_urlpatterns = []
websocket_urlpatterns += notification.routing.websocket_urlpatterns

application = ProtocolTypeRouter({
  "http": get_asgi_application(),
  "websocket": AuthMiddlewareStack(URLRouter(websocket_urlpatterns)),
})
```
@shahriarshm thanks for the update, your code is however different than the example in docs  - you initialize ASGI app for `http` item in `ProtocolTypeRouter`. In the example the ASGI app is not present at all, but I see where you are coming from. 

The real issue isn't really `import AuthMiddlewareStack` on its own, but it's the import in combination with `get_asgi_application()`.

The solution in your case would be to move the `get_asgi_application()` line above the import of `AuthMiddlewareStack`:

```
asgi_app = get_asgi_application()
from channels.auth import AuthMiddlewareStack
...
application = ProtocolTypeRouter({
  "http": asgi_app,
...
```

`get_asgi_application()` internally calls `django.setup()`, [and at one point in Django docs it's mentioned:](https://docs.djangoproject.com/en/3.2/topics/settings/#calling-django-setup-is-required-for-standalone-django-usage):

> django.setup() may only be called once.

So calling `django.setup()` explicitly in this case isn't the best practice, since it will be called second time in `get_asgi_application()`.


The same problem initiated [this MR](https://github.com/django/channels/pull/1681) recently, which updated the docs about the same issue elsewhere, but it's probably so subtle and in quite late chapter that it's easy to miss it. 

Maybe the proper way how to document this issue would be to have a big fat warning somewhere at the beginning of the docs where it's hard to miss it and when everyone is still paying full attention, rather than updating code examples here and there.
I opened #1692 to postpone the model import in `channels.auth` which might solve this issue if it will get merged.
@yedpodtrzitko Thanks for the review.
This will be resolved by #1692, which will be in the upcoming release. Thanks.
I moved the docs changes from #1693 here, as it makes sense to have it merged atomically.

- since `channels.auth` can be imported early now, I removed the mention of `AuthMiddlewareStack` as a problematic code and moved its import above `get_asgi_application()`
- the code sample in `routing.rst` looks like it would likely lead to the `ImproperlyConfigured` error too, since it's calling `get_asgi_application()` very late, so I replaced it with the example from `deploying.rst` to make it more unified.
- fixed a few typos
Ok, thanks. I just need to have a little play. 👍
@carltongibson I assume you're super busy, but is there any chance merging this soon? This seems like the most common issue newcomers are hitting and it's spawning a lot of redundant Issues and MRs (eg. fresh #1707)...
Hi @yedpodtrzitko — yes, I'm just getting some bandwidth to swing back here now. This is on my agenda for the next point release. (Thanks! 👍)
Hi @yedpodtrzitko — Thanks for this, yes, I think it's probably a good idea.
Hi @yedpodtrzitko — sorry for the slow uptake here. This looks great. Thanks!
`...before Django setup is complete`? Maybe.
done
moved into #1692
hi,
dots are replaced with underscore automatically so `chat.message` is acceptable to have too. See docs here:

https://channels.readthedocs.io/en/stable/topics/channel_layers.html#what-to-send-over-the-channel-layer

> The name of the method will be the `type` of the event with periods replaced by underscores - so, for example, an event coming in over the channel layer with a `type` of `chat.join` will be handled by the method `chat_join`.
Ah okay, my mistake. Thanks for the quick reply, I'll close this PR
Extensions are documented [here](https://github.com/django/channels/blob/main/docs/channel_layer_spec.rst#extensions) inchannels and [here](https://github.com/django/asgiref/blob/main/specs/asgi.rst#extensions) in asgiref.

It seems that they are not used by channels itself because this list should be checked by applications.
It's from the spec. https://channels.readthedocs.io/en/latest/channel_layer_spec.html#extensions

Clients can query this to see if the extension is supported
Yes, nice. Thanks. 👍
This is resolved by #1692, which will be in the upcoming release. Thanks!
I'm so sorry lol this was supposed to be opened on my fork but github's default opened it here... 😕

Yes I saw #1643. Indeed it's tricky and I don't have a good idea to fix it in general...

Although might be worth pointing out that channels + hypercorn + uvloop is incompatible at the moment because twisted ends up getting imported which tries to configure its event loop which fails:

```
...
app_1  |   File "/usr/local/lib/python3.9/site-packages/django/apps/registry.py", line 91, in populate
app_1  |     app_config = AppConfig.create(entry)
app_1  |   File "/usr/local/lib/python3.9/site-packages/django/apps/config.py", line 116, in create
app_1  |     mod = import_module(mod_path)
app_1  |   File "/usr/local/lib/python3.9/importlib/__init__.py", line 127, in import_module
app_1  |     return _bootstrap._gcd_import(name[level:], package, level)
app_1  |   File "<frozen importlib._bootstrap>", line 1030, in _gcd_import
app_1  |   File "<frozen importlib._bootstrap>", line 1007, in _find_and_load
app_1  |   File "<frozen importlib._bootstrap>", line 986, in _find_and_load_unlocked
app_1  |   File "<frozen importlib._bootstrap>", line 680, in _load_unlocked
app_1  |   File "<frozen importlib._bootstrap_external>", line 855, in exec_module
app_1  |   File "<frozen importlib._bootstrap>", line 228, in _call_with_frames_removed
app_1  |   File "/usr/local/lib/python3.9/site-packages/channels/apps.py", line 4, in <module>
app_1  |     import daphne.server
app_1  |   File "/usr/local/lib/python3.9/site-packages/daphne/server.py", line 20, in <module>
app_1  |     asyncioreactor.install(twisted_loop)
app_1  |   File "/usr/local/lib/python3.9/site-packages/twisted/internet/asyncioreactor.py", line 307, in install
app_1  |     reactor = AsyncioSelectorReactor(eventloop)
app_1  |   File "/usr/local/lib/python3.9/site-packages/twisted/internet/asyncioreactor.py", line 60, in __init__
app_1  |     raise TypeError(
app_1  | TypeError: SelectorEventLoop required, instead got: <uvloop.Loop running=False closed=False debug=False>
```

Although now that I think about it, the daphne (twisted) import can be avoided by only installing the channels django app in debug mode:

```python
if DEBUG:
    INSTALLED_APPS += ("channels", )
```

Is it worth including this workaround in the installation docs @carltongibson? If so, let me know! Happy to write it up 🙂
Hey @Kyle-Verhoog — OK, yes we could add something there. 👍 Thanks.
Hi @Kyle-Verhoog — sorry, we can't just drop Daphne in this manner... 

Have a look at https://github.com/django/channels/discussions/1643. Decoupling Channels from Daphne is on the agenda, but we need a good way forwards. 

Ideas welcome, but we need to handle the constraints that are raised in the linked issues there. 

Thanks.
From what I see, this should be tested by the ["normal test"](https://github.com/django/channels/blob/main/tests/security/test_websocket.py#L16).

You didn’t triggered it because your last build (18d in Github Action) is older than the python release (3 days ago).
Ok, thanks. Let me have a look and check.
That was quick. 

Can we add a specific test case to channels/tests/security/test_websocket.py?
Yes, super. Thanks. 

It certainly helps if we call the function with the expected types. 

I'll look to roll a release including this fix this week. 

Welcome aboard! ⛵
Yep, great. Thanks.
Yes, good. Thank you!
Is `--check-only` deprecated or something? Or you just think it looks prettier? 😄
Yeah, I just thought it was "prettier" because `isort` is often times used along side `black`, and this way the commands are the same.
Test run here: https://github.com/willstott101/channels/actions/runs/1435192934
I've edited the original comment here with more context from #1577 

This is a very minor non-breaking code change that would unblock usage of channels under **NGINX Unit**

Would the maintainers here prefer a more simplified unit test for `await_many_dispatch`? It seems to me that a unit test for a utility function is not something that would catch this if it regresses again later, after say, refactoring and removing that utility function. That being said I'm very happy to replace that test if it helps?
Re-based onto current main, improved test documentation and am now testing both coroutines (which have always worked) AND awaitable callables - to make it clearer that both should work and need to be supported.
Worth noting that literally less than 12 lines below this change [ensure_future is already used in this same function for later instantiations of callables](https://github.com/django/channels/blob/7bc96b6554a995471574ab498bfc942f79d099ad/channels/utils.py#L52) meaning this utility function isn't even consistent. The changes here both make the behaviour of this function consistent - and more spec compliant. The test ensures spec compliance in this area for the `AsyncHttpConsumer` in an integration test style.

Failing test run (with existing code): https://github.com/willstott101/channels/actions/runs/1909911872
Passing test run (with patched code): https://github.com/willstott101/channels/actions/runs/1909905681
Is there any chance of this patch being back-ported to Channels 3? Updating to channels 4 is non-trivial for us, but without this patch we can't load our app in Nginx Unit.
@ElRoberto538 You'll have to back port it yourselves.
Great. Thanks!
Super. Thanks.
Thanks for this. Channels 2.x isn't supported so I'll close it.
why ask for a pr if you wont even merge it
Yep, thanks! 👍
@carltongibson anything I can do to move this forward?
@vanschelven No, not really. I was just looking at it this morning actually. 

It looks good. I'll likely make cosmetic edits and merge. 

Thanks!
OK, great, thanks.
Great thanks.
@smithdc1 please do merge when it’s green. 👍
Thanks for the merge. 

It was still saying I didn't have correct permissions when I looked at it last night.
Yes, super! 🐎
OK, thanks.
Ah, yes, time to drop `PY36`.
> Ah, yes, time to drop `PY36`.

Most likely to be a separated PR?

Do you need me to do it, or are you able to? 
Thanks for any support.
Yes, separate PR — I'm very happy if you'd like to help with that!
See #1787 for dropping Python 3.6 (and unsupported Django versions).
Thanks @smithdc1 !

I've just rebased on the updated `main`.
Thanks for rebasing this. I don't have write access to this repo so we will need @carltongibson to merge.
Yes, OK, come on then. Let's have this. Thanks.
This is a decent fix for this problem, I just made a [comment](https://github.com/django/channels/issues/1722#issuecomment-1032965993) on a thread about how people could monkey patch their django installs temperately to avoid this issue until a more permanent fix is approved. Thank you for your contribution, cheers.
Pardon my ignorance.  I am running Django 3.2, does this imply I can throw away channels==3.0.4 in favor of something else?

"With Django 3.0 and newer we have native ASGI handler. This fast fix removes annoying deadlock exception for development server. I saw we shouldn't focus on it and have to rewrite this part using Django native capabilities, but it can work as temporary simple fix."
@LiteWait the native ASGI handler only replaces one part of Channels: adapting Django middleware/views system to ASGI. You still need channels if you have any Consumers in your app.
@sterliakov have you tested this on Django 2.2 (which is current minimum for Channels)? I don't think it calls get_response_async.
Django 3.2 will be the minimum required version going forward.
Tested using Django 4.0.5, looks like to solve the issue.
Yes, but this will be removed in favour of Django's own `ASGIStaticFilesHandler` for the next release.
Superseded by #1890.
Thanks for the patch. 

The Python 3.8 docs say.

Changed in version 3.8: On macOS, the spawn start method is now the default. The fork start method should be considered unsafe as it can lead to crashes of the subprocess. See bpo-33725.

https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods

I'm therefore not sure we should be advising to over ride the multiprocess start method in this way.

Sorry I don't have a better proposal on what the next steps should be here.
@smithdc1, thank you for getting back to me.  Maybe there is a better work around and I am just not familiar enough with multiprocessing and channels to know what it is.

Do you have any thoughts about the second part of the PR where  it seems like I needed to switch from:
`self.driver.switch_to_window()`
to 
`self.driver.switch_to.window()`
I think there was a new marjor version of selenium recently. Maybe that introduced those changes.

It could be with splitting this PR into two changes. Likely the selenium ones will be easier to review and merge them the multiprocess ones.
Ok, I will close this PR and split them.  Thank you!
Done in #1831. Thanks.
Super. Thanks.
Ok I rebased.
OK, yes, let's add it... — happy to merge if you rebase. Thanks @collinanderson! 👍
Super. Thanks @collinanderson! 🎁
`url` is deprecated/removed from Django?

Maybe worth updating to use `path()`?
Ok here's a separate PR for removing url(): #1826
Yes, lovely. Thanks!
This is security sensitive. There's not much chance of it being merged without significant discussion, and tests.
@carltongibson Is there anything I can do from my side?
Well... you could define an ASGI application that didn't use Origin Validator just for you electron app, or use your own version, as you've given here, or ... 🤔 

**But** I haven't thought through the implications of that. (What would a fake origin on a desktop app look like... --- you have to have a think 🤔 )
Yeah, I defined CustomOriginValidator which supports this specific case.

---

As far as I know, I can use [Node WebSocket API](https://github.com/websockets/ws/) to connect to WebSockets providing any origin I want.

```js
const ws = new WebSocket("ws://site.com/ws/consumer/", { origin: "http://site.com" })
```

But the same API doesn't work in the browser environment.

Still, I want to connect to the WebSocket using browser API so I can reuse code between web and electron bundles.

---

> This is security sensitive. There's not much chance of it being merged without significant discussion, and tests.

I mean is there anything I can do to speed it up (tests or something).
Basically, outside of the browser, the `Origin` header may be anything you want.

Browsers enforce `Origin` to equal `window.location.origin`.

I want to make sure that no one can connect from the page served through HTTP if the domain doesn't match.

But still, I can allow any traffic through the `file` protocol, because it's unlikely to happen.

That way I can make sure that in browsers only specific domains can use the WebSocket.

And if someone wants to connect to the WebSocket from the local file, so be it.
OK, thanks. Short of a pressing need (and tests and docs) I'd rather not merge anything here.
Nice. Thanks.
Thanks @mohitgoel188. 

The `switch_to.window` changes were handled in #1831. 👍
OK, done. Thanks. 

https://github.com/django/channels/blob/a881bc08116526c8837a3f47cc9beb4f1e8e6eef/docs/conf.py#L49
The tutorial was updated for the upcoming v4 release. See #1898. Can you review and resubmit if still needed. Thanks.
We're not going to move the bulid system to flit. Setuptools works fine.
Closing in favour of #1897, which will be in Channels v4 around early-September.
Great. Thanks.
Great thanks.
Thanks -- this looks right. 

The deprecation notice on the old site is here https://sites.google.com/a/chromium.org/chromedriver/
Super. 👍
Great. Thanks.
Thanks @smithdc1
Great. Thanks.
OK, thanks.
Hi @carltongibson, what is meant by "Django version" here? Django doesn't offer classes with similar names or function as AsgiHandler/AsgiRequest. Do you mean Django's own `HttpRequest` and `HttpResponse` ? Would Django's `StreamingHttpResponse` be usable for long-lived async streams? Thanks for any advice.
Thanks @matthiask, that's really helpful. Let me have a read and a ponder. 😉
Hey @matthiask — Can I get you to look again? 

I inlined the function. Tests pass... 😬

~~I wasn't sure what the `kwargs.update()` line was for. (See inline comment) I can investigate (by commenting that out to start with 😜)~~
Thanks @matthiask 🙏
Indeed, it has been a while!

I think the change looks good. I checked the test suite and if the inner router's `kwargs` hold the correct values it should be fine (see https://github.com/django/channels/blob/9c1ac42f2a5b4dbfcdade02bd52445bab2851cb9/tests/test_routing.py#L148-L156 and https://github.com/django/channels/blob/9c1ac42f2a5b4dbfcdade02bd52445bab2851cb9/tests/test_routing.py#L195-L198)

Tests are passing after all and I have more confidence in the tests than in my judgement (even in tests I may have added myself)

The `route_pattern_match` docstring should be changed because no backporting is necessary anymore. Which makes me wonder if `route_pattern_match` could be removed altogether now. I'm 99% sure it has to stay because https://github.com/django/django/blob/00370342ca3a478660372975b3309ffc4d535be1/django/urls/conf.py#L80 sets `is_endpoint` to `True` (since the `URLRouter` is callable) but this is wrong because we want to continue resolving at this point in time.
Looks good to me. I had to check if it's possible to pass positional arguments to `path()` (for the view/consumer) but that's not possible.

This is a really nice simplification of the code!
This can go. Just left it as a sanity check for the moment.
What's this for? 🤔

Similar just below... `"kwargs": {**outer.get("kwargs", {}), **kwargs},` — Need to have a play. 


`test_url_router` is requiring it.
Ok, so the example is this: 

```
            path("defaultkwargs/", defaultkwarg_app, kwargs={"default": 42}),
```

So we're adding the `kwargs={"default": 42}` — added a comment in https://github.com/django/channels/pull/1894/commits/0276b612c695a040f8ee4ffddbf0240e0ff9421c
Yes, exactly. The consumer should receive the merged arguments from all patterns *and* from the data passed to `path` (or `re_path`)
Let's go with.
I'm going to merge this now to progress with the packaging changes. (The install docs are slightly ahead of that with the `channels["daphne"]` optional.)
@carltongibson This looks great! Thanks so much for all of your work in the Django ecosystem. ❤️
Thanks @johnthagen ☺️
Oh, yes, good spot. Thanks.
Great. Thanks.
Oh, yeah. We probably don't need that twice. Thanks. 😀
OK, great. This works! 😜

Thanks @adamchainz 🎁
Super. Thanks for the review @smithdc1 🎁
4.0.0? 🤔
Extra back ticks here?
Hi @learningnoobi 

Congratulations on using channels to make a Bingo game. Good work.

This docs section is not really for showing off complete projects though. It's rather for showing libraries using Channels that developers may use in their projects.

Sites like [Built with Django](https://builtwithdjango.com/) exist for showing off projects.

So well done, but we won't be merging this to Channels!
Sure np
Lovely. Thank you.
I think we have 2 options here:
- dont install daphne at all on the tests
- duplicate tests to run with daphne and without.

on the tests the class `ChannelsLiveServerTestCase` is not tested so far so daphne is not really needed at moment
We should have a regression test here... 🤔

Perhaps an environment running the tests without Daphne installed (to make sure that works).
Looks lovely 🥰 Thank you!
This is as intended.
Sorry didn't realize it defaulted to rebase-and-merge instead of squash-and-merge, and I’ve just added a bunch of tiny commits to `main` 😅
Again, great. Please proceed when you're ready. 🎁 

> aside: why no long_description? good to add one?

Be my guest. 🦄
CI failure is unrelated.
Great. Thanks.
Oh, yes. Good. Thanks.
Great. Thanks. I added a regression test.
Lovely. Thank you.
OK, yep great. Thanks.
OK, yep, seems reasonable. Thanks.
Grrr. Meh. OK, I guess. Thanks.
Great. Thanks.
OK, yep, agreed. 👍
OK, thanks 👍
Thanks for this @ElijahQuiazon! Just to let you know I'm not ignoring it, I just haven't had the moment to sit down and update my locally tutorial version to try it out. As soon as I've done that I will merge it.
Hey no worries @carltongibson! Life just finds a way to get busier each day :laughing: — feel free to let me know if there's anything else I can help with!
OK, finally got to sit with it at the desk. 
Thanks @ElijahQuiazon
Ah right, it is a Zsh thing, didn't realize that works on Bash.
On Bash you don't need the quotes at all, so it's only Apple switching here that has this come up... anyhooo... 😜

Thanks for the fix.
Ok, Great thanks! 

(Zsh 🤦‍♀️ :)
CC @YegorDB for awareness
Yep, OK. Thanks!
this pull request has a bug.
Hi. Can you please add a regression test that demonstrates the issue? Thanks 🙏
AFAICS it works fine as it is: 

```
 % pip install channels_redis
Collecting channels_redis
  Downloading channels_redis-4.1.0-py3-none-any.whl (18 kB)

[... snip ...]

Installing collected packages: msgpack, typing-extensions, sqlparse, async-timeout, redis, asgiref, Django, channels, channels_redis
Successfully installed Django-4.2.4 asgiref-3.7.2 async-timeout-4.0.3 channels-4.0.0 channels_redis-4.1.0 msgpack-1.0.5 redis-5.0.0 sqlparse-0.4.4 typing-extensions-4.7.1
```
> AFAICS it works fine as it is:
> 
> ```
>  % pip install channels_redis
> Collecting channels_redis
>   Downloading channels_redis-4.1.0-py3-none-any.whl (18 kB)
> 
> [... snip ...]
> 
> Installing collected packages: msgpack, typing-extensions, sqlparse, async-timeout, redis, asgiref, Django, channels, channels_redis
> Successfully installed Django-4.2.4 asgiref-3.7.2 async-timeout-4.0.3 channels-4.0.0 channels_redis-4.1.0 msgpack-1.0.5 redis-5.0.0 sqlparse-0.4.4 typing-extensions-4.7.1
> ```

Got it. Thank you for your reply!
`var_info` has one param (`cast`) or two params (`cast` and `default`).
The `default` is the last param because is optional.

https://github.com/rconradharris/envparse/blob/master/envparse.py#L62

This is a convention, not a fatal bug ;)
Then you have a issue ... :-)

Traceback (most recent call last):
  File "manage.py", line 10, in <module>
    execute_from_command_line(sys.argv)
  File "/Users/guglielmo/.virtualenvs/op_pcv/lib/python2.7/site-packages/django/core/management/**init**.py", line 453, in execute_from_command_line
    utility.execute()
  File "/Users/guglielmo/.virtualenvs/op_pcv/lib/python2.7/site-packages/django/core/management/**init**.py", line 376, in execute
    sys.stdout.write(self.main_help_text() + '\n')
  File "/Users/guglielmo/.virtualenvs/op_pcv/lib/python2.7/site-packages/django/core/management/**init**.py", line 242, in main_help_text
    for name, app in six.iteritems(get_commands()):
  File "/Users/guglielmo/.virtualenvs/op_pcv/lib/python2.7/site-packages/django/core/management/**init**.py", line 109, in get_commands
    apps = settings.INSTALLED_APPS
  File "/Users/guglielmo/.virtualenvs/op_pcv/lib/python2.7/site-packages/django/conf/**init**.py", line 53, in **getattr**
    self._setup(name)
  File "/Users/guglielmo/.virtualenvs/op_pcv/lib/python2.7/site-packages/django/conf/__init__.py", line 48, in _setup
    self._wrapped = Settings(settings_module)
  File "/Users/guglielmo/.virtualenvs/op_pcv/lib/python2.7/site-packages/django/conf/__init__.py", line 132, in **init**
    mod = importlib.import_module(self.SETTINGS_MODULE)
  File "/Users/guglielmo/.virtualenvs/op_pcv/lib/python2.7/site-packages/django/utils/importlib.py", line 35, in import_module
    **import**(name)
  File "/Users/guglielmo/Workspace/op_pcv/op_pcv/settings.py", line 15, in <module>
    DEBUG = env('DEBUG')  # False if not in os.environ
  File "/Users/guglielmo/.virtualenvs/op_pcv/src/environ/environ/environ.py", line 91, in **call**
    return self.get_value(var, cast=cast, default=default)
  File "/Users/guglielmo/.virtualenvs/op_pcv/src/environ/environ/environ.py", line 186, in get_value
    value = cls.parse_value(value, cast)
  File "/Users/guglielmo/.virtualenvs/op_pcv/src/environ/environ/environ.py", line 222, in parse_value
    value = cast(value)
TypeError: 'bool' object is not callable
Ok, it's fatal TYPO in README.rst :(

``` python
env = environ.Env(DEBUG=(False, bool))
```

became

``` python
env = environ.Env(DEBUG=(bool, False))
```

The `default` parameter must be the last because it is optional.
[![Coverage Status](https://coveralls.io/builds/855321/badge)](https://coveralls.io/builds/855321)

Coverage remained the same when pulling **f25dbdbcee6ece8dafec9f44f10c9457569b6a0e on jamesdoherty:readme-typo** into **6df0db1a9535328f95460dd7ae32992bb9e9b82b on joke2k:master**.
[![Coverage Status](https://coveralls.io/builds/910119/badge)](https://coveralls.io/builds/910119)

Coverage decreased (-0.13%) when pulling **afdc089521c32e4fc5bea5597baa5c1d43813402 on moimael:master** into **64e3642c9cffdc21b655a6520d88d4024b61f1d9 on joke2k:master**.
Any thoughts on this ?
Can you review this ? It will allow me to ditch my fork ;)
thank you for PR and forgive me for being late.

I wrote a test and slightly modified the URL parser to handle the absence of the PORT.
[![Coverage Status](https://coveralls.io/builds/1182476/badge)](https://coveralls.io/builds/1182476)

Coverage remained the same when pulling **cac43b5ad87328e8fcc41efce308d4d780283887 on RockingRolli:patch-1** into **b5c1a5b64892d3520719d9824ccc6ba18ab7338d on joke2k:master**.
[![Coverage Status](https://coveralls.io/builds/1294790/badge)](https://coveralls.io/builds/1294790)

Coverage increased (+0.11%) when pulling **05428d9cebffe9b10ab4e5d712e40278d6dba011 on averagehuman:class-level-environ** into **b5c1a5b64892d3520719d9824ccc6ba18ab7338d on joke2k:master**.
[![Coverage Status](https://coveralls.io/builds/1295008/badge)](https://coveralls.io/builds/1295008)

Coverage increased (+0.11%) when pulling **b3f3748efb9668aa4aab25b4b7bb12feaa7d64ed on averagehuman:class-level-environ** into **b5c1a5b64892d3520719d9824ccc6ba18ab7338d on joke2k:master**.
Manually merged.

thank you
[![Coverage Status](https://coveralls.io/builds/1295402/badge)](https://coveralls.io/builds/1295402)

Coverage decreased (-0.72%) when pulling **2273e88748b0798f798c4810e10908a6057ca67a on averagehuman:interpolating-reader** into **b5c1a5b64892d3520719d9824ccc6ba18ab7338d on joke2k:master**.
[![Coverage Status](https://coveralls.io/builds/1295502/badge)](https://coveralls.io/builds/1295502)

Coverage decreased (-0.1%) when pulling **2b3bf2f3f4e131fd7457c553b51d049e1a685b4a on averagehuman:interpolating-reader** into **b5c1a5b64892d3520719d9824ccc6ba18ab7338d on joke2k:master**.
[![Coverage Status](https://coveralls.io/builds/1295857/badge)](https://coveralls.io/builds/1295857)

Coverage increased (+0.14%) when pulling **13842c6e74db80a2be58851d9a5778fad909d4b4 on averagehuman:interpolating-reader** into **b5c1a5b64892d3520719d9824ccc6ba18ab7338d on joke2k:master**.
[![Coverage Status](https://coveralls.io/builds/1295974/badge)](https://coveralls.io/builds/1295974)

Coverage increased (+0.26%) when pulling **86f95263f70d741f3a9fd49788b70cccc147aa6f on averagehuman:interpolating-reader** into **b5c1a5b64892d3520719d9824ccc6ba18ab7338d on joke2k:master**.
[![Coverage Status](https://coveralls.io/builds/1352213/badge)](https://coveralls.io/builds/1352213)

Coverage increased (+0.3%) when pulling **065ce101ad9942ff7ac69e4fbf0f74ec4250818b on averagehuman:interpolating-reader** into **b5c1a5b64892d3520719d9824ccc6ba18ab7338d on joke2k:master**.
Hi, your contribution seems very good, can you stash your commits?
This pull-request includes #14 ?
There are a lot of good ideas in your PR, but i can't merge that.
I'll porting some of these manually so i leave open this PR
[![Coverage Status](https://coveralls.io/builds/1545609/badge)](https://coveralls.io/builds/1545609)

Coverage increased (+0.02%) when pulling **201bacd3fb6ea263f6c92b84afc8f9395755b913 on karabijavad:patch-1** into **b5c1a5b64892d3520719d9824ccc6ba18ab7338d on joke2k:master**.
[![Coverage Status](https://coveralls.io/builds/1633690/badge)](https://coveralls.io/builds/1633690)

Coverage remained the same when pulling **5dcc1e5487afb6a0e8286967a01a3b497920bd75 on cmheisel:master** into **b5c1a5b64892d3520719d9824ccc6ba18ab7338d on joke2k:master**.
[![Coverage Status](https://coveralls.io/builds/1682640/badge)](https://coveralls.io/builds/1682640)

Coverage remained the same when pulling **81dfff2166acfe0e58b1edce23788ce7c456c56b on mcilvena:patch-1** into **b5c1a5b64892d3520719d9824ccc6ba18ab7338d on joke2k:master**.
[![Coverage Status](https://coveralls.io/builds/1684314/badge)](https://coveralls.io/builds/1684314)

Coverage increased (+0.02%) when pulling **9cbc754f263c142d9f1d5a8758c5e31848b2da09 on cmheisel:develop** into **b5c1a5b64892d3520719d9824ccc6ba18ab7338d on joke2k:master**.
Manually merged.

Thank you
I'm trying to make this working but I can't, not sure why.
in my .env file I've `DICT_TEST=FIELD1=False;FIELD2=1;FIELD3=ciao;FIELD4=0`
and I've this in the code `DICT_TEST =env.dict('DICT_TEST', cast=dict(FIELD1=bool,FIELD4=bool))`
the result is all string `{'FIELD1': 'False', 'FIELD2': '1', 'FIELD3': 'ciao', 'FIELD4': '0'}`
@esseti try to use a json config instead :smile:
[![Coverage Status](https://coveralls.io/builds/2448797/badge)](https://coveralls.io/builds/2448797)

Coverage remained the same at 89.97% when pulling **62c79565ac9beea2ff348103469dfc5c4d88a775 on theskumar:patch-1** into **b5c1a5b64892d3520719d9824ccc6ba18ab7338d on joke2k:master**.
+1
I don't know if it is a right solution.
Why the `email_url_config` method needs to know the heroku variables?
Maybe we can compose an url like `smtp://user:pass@smtp.sendgrid.net:587` don't you think?
Probably can be useful something like `smtp://$SENDGRID_USERNAME:$SENDGRID_PASSWORD@smtp.sendgrid.net:587` but it isn't implemented functionality right now.

p.s. Your code is so broken :sweat_smile:
Can i close?
Trying to understand, what are proxied values? Is there a reason, it needs to handled implicitly? 

A documentation along the PR will help too.
c.f. https://github.com/joke2k/django-environ/blob/201bacd3fb6ea263f6c92b84afc8f9395755b913/environ/environ.py#L257-260

Under the current code, if `env` is an `Env()` object, and you call `env('FOO')`, and `FOO` is defined in the environment as `$BAR`, then `env('FOO')` will return the value of `os.environ['BAR']`. I'm porting the same functionality over to `Env.read_env()` to allow your `.env` file var/value to reference other environment variables - that's all.

My use case is that I'm using Memcachier on Heroku. Because that requires authenticated memcache access, I can't use the stock pylibmc backend, so I'm using https://github.com/django-pylibmc/django-pylibmc/ instead - which allows configuration of the memcached location, username, and password from environment variables. Heroku provides `MEMCACHER_SERVERS`, `MEMCACHER_USERNAME`, and `MEMCACHER_PASSWORD`, bur django-pylibmc requires `MEMCACHE_SERVERS`, `MEMCACHE_USERNAME`, and `MEMCACHE_PASSWORD`. My `.env` file has lines like `MEMCACHE_USERNAME=$MEMCACHIER_USERNAME` - I'd like that to actually work.

HTH.
> My .env file has lines like MEMCACHE_USERNAME=$MEMCACHIER_USERNAME - I'd like that to actually work.

This is interesting and useful too. Thanks for taking time to explain.
I searched through the docs and it seems are no existing doc about the proxied values. It will be very useful to have changes well documented as part of the PR.
Hi, this functionality is already implemented, but not documented ^__^

See https://github.com/joke2k/django-environ/blob/develop/environ/environ.py#L259
Thank you, I've implemented all haystack engines (solr included) in #42
Also did some PEP8 formatting (which is why there are a few whitespace changes).
Such a good feature, but can't add it to my repository because of your formatting changes :-(
Hi @burhan can you redo a PR without pep8 fixes?
its really hard to merge.
Thank you
Never mind, I did it
[![Coverage Status](https://coveralls.io/builds/3038117/badge)](https://coveralls.io/builds/3038117)

Coverage increased (+0.09%) to 90.078% when pulling **f982bbe147ea505d2ebe3fe119ced523ae6ad929 on burhan:string-methods** into **a902dfb45bc005b98bd2a6f1882bbf662774ced0 on joke2k:master**.
Thank you, I've already added these rules in #42
Also closes #32
thank you
+1 on this.  Running into similar issues with some overly complex password generators.
Hi, 
maybe we have to decode the path too, don't you think?
@joke2k, let me know if there's anything else I need to do - thanks :-)
@edmorley thank you
@joke2k Any thoughts on merging? This would be helpful to me as well.
@joke2k if an extra pair of hands would be useful for triaging PRs etc, I would be more than happy to help out as an additional maintainer? :-)
@joke2k Same here
There are some problems with database query options, see #50
Probably we will need more control about that.

At the moment your code resolves the issue, but in the future probably we have to do a big refactor.

Thank you for PR
Many thanks for merging :-)
When will this fix make it to PyPi?
[![Coverage Status](https://coveralls.io/builds/17340089/badge)](https://coveralls.io/builds/17340089)

Coverage increased (+0.05%) to 89.104% when pulling **6cc1600a10a26f03a55c2c003bc42733a92bd598 on smart-cast** into **093dc7e84cc2f0b542f7682b032fcf51721838d1 on develop**.
[![Coverage Status](https://coveralls.io/builds/17340089/badge)](https://coveralls.io/builds/17340089)

Coverage increased (+0.05%) to 89.104% when pulling **6cc1600a10a26f03a55c2c003bc42733a92bd598 on smart-cast** into **093dc7e84cc2f0b542f7682b032fcf51721838d1 on develop**.
[![Coverage Status](https://coveralls.io/builds/17340089/badge)](https://coveralls.io/builds/17340089)

Coverage increased (+0.05%) to 89.104% when pulling **6cc1600a10a26f03a55c2c003bc42733a92bd598 on smart-cast** into **093dc7e84cc2f0b542f7682b032fcf51721838d1 on develop**.
how did you do that thing where if you put your cursor to the side the menu pops up?
Bump -- would love to see this in the next release
+1
@joke2k Any reason this hasn't been merged in? It would resolve our divergent fork due to handling special characters in passwords.
this issue still continue

edit:

```
File "/usr/local/lib/python3.6/urllib/parse.py", line 169, in port
    port = int(port, 10)
ValueError: invalid literal for int() with base 10: 'chunk'
```
@mrinalsinha this is not stackoverflow
See #148 #145
[![Coverage Status](https://coveralls.io/builds/17337826/badge)](https://coveralls.io/builds/17337826)

Coverage decreased (-0.4%) to 88.647% when pulling **fb6e4c9e2b418f9925b77d54fbe39994bc1914f2 on six-free** into **093dc7e84cc2f0b542f7682b032fcf51721838d1 on develop**.
[![Coverage Status](https://coveralls.io/builds/17340047/badge)](https://coveralls.io/builds/17340047)

Coverage increased (+0.2%) to 89.26% when pulling **b107f15b2c7c55be04ac96206a682e7027199088 on six-free** into **093dc7e84cc2f0b542f7682b032fcf51721838d1 on develop**.
Thank you so much, really appreciate the quick response.
🎉
The `read_env()` call is executed some lines above in the example.
btw thank you :D
[![Coverage Status](https://coveralls.io/builds/5651303/badge)](https://coveralls.io/builds/5651303)

Coverage remained the same at 88.189% when pulling **a1b1c0be769910195fae3c38c0357bff5ff61905 on ofa:nickcat/clarify-warning** into **422ea182fe89f09a585a573ac3bdb99542b82891 on joke2k:develop**.
@joke2k this fails because of a config issue with appveyor (`You're using an outdated location for the get-pip.py script, please use the one available from https://bootstrap.pypa.io/get-pip.py`)

The tests work on travis and coverage remains the same. Do I need to fix appveyor here to get this merged in?

Thanks
This is an annoying bug. Would be good to at least have a helpful error message.
Thank you forgive me for being late.
[![Coverage Status](https://coveralls.io/builds/6503499/badge)](https://coveralls.io/builds/6503499)

Coverage remained the same at 88.189% when pulling **d76e442a1fe007eba408c3becd160601d12b1f55 on edmorley:update-testing-matrix** into **422ea182fe89f09a585a573ac3bdb99542b82891 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/6503394/badge)](https://coveralls.io/builds/6503394)

Coverage remained the same at 88.189% when pulling **97a206afe0831b471f65596297064a72556d23d8 on edmorley:update-testing-matrix** into **422ea182fe89f09a585a573ac3bdb99542b82891 on joke2k:develop**.
Updated with Django 1.10b1 instead of 1.10a1.
[![Coverage Status](https://coveralls.io/builds/6712607/badge)](https://coveralls.io/builds/6712607)

Coverage remained the same at 88.189% when pulling **30c17e36e7c80901ded45b28f9d7e47f7bb8fb04 on edmorley:update-testing-matrix** into **422ea182fe89f09a585a573ac3bdb99542b82891 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/6712607/badge)](https://coveralls.io/builds/6712607)

Coverage remained the same at 88.189% when pulling **30c17e36e7c80901ded45b28f9d7e47f7bb8fb04 on edmorley:update-testing-matrix** into **422ea182fe89f09a585a573ac3bdb99542b82891 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/6712607/badge)](https://coveralls.io/builds/6712607)

Coverage remained the same at 88.189% when pulling **30c17e36e7c80901ded45b28f9d7e47f7bb8fb04 on edmorley:update-testing-matrix** into **422ea182fe89f09a585a573ac3bdb99542b82891 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/7286617/badge)](https://coveralls.io/builds/7286617)

Coverage remained the same at 88.189% when pulling **7b45b95dff4eff5a8d5dc33d3ada70fc2de3a281 on edmorley:update-testing-matrix** into **422ea182fe89f09a585a573ac3bdb99542b82891 on joke2k:develop**.
Updated with to use the final Django 1.10 release. Plus have added testing on Django master (though is marked as being allowed to fail).

@joke2k could you take a look? :-)
@joke2k, I'm happy to help as an additional maintainer for this package, if that would be of any use? :-)
[![Coverage Status](https://coveralls.io/builds/7614596/badge)](https://coveralls.io/builds/7614596)

Coverage increased (+0.3%) to 88.451% when pulling **d09947030b5574a2c2c1b98a4fa790487daad96a on budlight:patch-1** into **422ea182fe89f09a585a573ac3bdb99542b82891 on joke2k:develop**.
this is actually sorta fixed in the development version just has a bad message as mentioned in #83
[![Coverage Status](https://coveralls.io/builds/9595666/badge)](https://coveralls.io/builds/9595666)

Coverage increased (+0.03%) to 88.342% when pulling **6932e1337934c876a6d35f5d735192000fa11623 on innoteq:fix-uwsgi-reload** into **43d572f32192cadb40adb03adb6789278e7edf75 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/9595666/badge)](https://coveralls.io/builds/9595666)

Coverage increased (+0.03%) to 88.342% when pulling **6932e1337934c876a6d35f5d735192000fa11623 on innoteq:fix-uwsgi-reload** into **43d572f32192cadb40adb03adb6789278e7edf75 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/9595666/badge)](https://coveralls.io/builds/9595666)

Coverage increased (+0.03%) to 88.342% when pulling **6932e1337934c876a6d35f5d735192000fa11623 on innoteq:fix-uwsgi-reload** into **43d572f32192cadb40adb03adb6789278e7edf75 on joke2k:develop**.
I can confirm that this resolves #58 for me!
Unless I'm mistaken, this patch means that unless an envfile is read, there will be no environment variables read at all (which is what #118 and #117 look like).

EDIT: tests are unable to detect this regression due to forcing the environment in https://github.com/joke2k/django-environ/blob/e668e37c5faf41b68429466ed70f7abba582cce9/environ/test.py#L63
[![Coverage Status](https://coveralls.io/builds/9613345/badge)](https://coveralls.io/builds/9613345)

Coverage increased (+0.1%) to 88.462% when pulling **77f733da8097a7f14598b62400d8dc7e38a75e28 on dmwyatt:develop** into **43d572f32192cadb40adb03adb6789278e7edf75 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/9613345/badge)](https://coveralls.io/builds/9613345)

Coverage increased (+0.1%) to 88.462% when pulling **77f733da8097a7f14598b62400d8dc7e38a75e28 on dmwyatt:develop** into **43d572f32192cadb40adb03adb6789278e7edf75 on joke2k:develop**.
This is resolved in [`develop`](https://github.com/joke2k/django-environ/pull/313) branch. Thank you for the patch, and for helping us make django-environ better. And I am sorry about the delay.
[![Coverage Status](https://coveralls.io/builds/9767717/badge)](https://coveralls.io/builds/9767717)

Coverage remained the same at 88.312% when pulling **73a7d5f5cce18833c730b45f578588f662263073 on edmorley:django1.11** into **43d572f32192cadb40adb03adb6789278e7edf75 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/9767717/badge)](https://coveralls.io/builds/9767717)

Coverage remained the same at 88.312% when pulling **73a7d5f5cce18833c730b45f578588f662263073 on edmorley:django1.11** into **43d572f32192cadb40adb03adb6789278e7edf75 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/9767958/badge)](https://coveralls.io/builds/9767958)

Coverage remained the same at 88.312% when pulling **e27c5da3991c587e372123f7be09fd22f11a6adf on edmorley:django1.11** into **43d572f32192cadb40adb03adb6789278e7edf75 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/9767958/badge)](https://coveralls.io/builds/9767958)

Coverage remained the same at 88.312% when pulling **e27c5da3991c587e372123f7be09fd22f11a6adf on edmorley:django1.11** into **43d572f32192cadb40adb03adb6789278e7edf75 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/9767958/badge)](https://coveralls.io/builds/9767958)

Coverage remained the same at 88.312% when pulling **e27c5da3991c587e372123f7be09fd22f11a6adf on edmorley:django1.11** into **43d572f32192cadb40adb03adb6789278e7edf75 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/9767958/badge)](https://coveralls.io/builds/9767958)

Coverage remained the same at 88.312% when pulling **e27c5da3991c587e372123f7be09fd22f11a6adf on edmorley:django1.11** into **43d572f32192cadb40adb03adb6789278e7edf75 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/9768085/badge)](https://coveralls.io/builds/9768085)

Coverage remained the same at 88.312% when pulling **4a09a8fa77c437f87dca54ed244c1887b3f71dca on edmorley:django1.11** into **43d572f32192cadb40adb03adb6789278e7edf75 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/9768085/badge)](https://coveralls.io/builds/9768085)

Coverage remained the same at 88.312% when pulling **4a09a8fa77c437f87dca54ed244c1887b3f71dca on edmorley:django1.11** into **43d572f32192cadb40adb03adb6789278e7edf75 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/9768085/badge)](https://coveralls.io/builds/9768085)

Coverage remained the same at 88.312% when pulling **4a09a8fa77c437f87dca54ed244c1887b3f71dca on edmorley:django1.11** into **43d572f32192cadb40adb03adb6789278e7edf75 on joke2k:develop**.
@joke2k please could you merge this?
[![Coverage Status](https://coveralls.io/builds/11013170/badge)](https://coveralls.io/builds/11013170)

Coverage remained the same at 88.312% when pulling **b072900f8bde21b00f75ae7534d44794818e518e on edmorley:django1.11** into **43d572f32192cadb40adb03adb6789278e7edf75 on joke2k:develop**.
👍
Absolutely!
I'll release a new version tomorrow
great job
1.11 is proper now
Updated.
[![Coverage Status](https://coveralls.io/builds/10043409/badge)](https://coveralls.io/builds/10043409)

Coverage remained the same at 88.312% when pulling **a4b38a23cef14b2577950ed74604ca85eea1cc5c on alorence:develop** into **43d572f32192cadb40adb03adb6789278e7edf75 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/10451829/badge)](https://coveralls.io/builds/10451829)

Coverage remained the same at 88.312% when pulling **df67df28996115c72ced40264aa8d9eab2355e96 on uncovertruth:develop** into **43d572f32192cadb40adb03adb6789278e7edf75 on joke2k:develop**.
@joke2k ping ☺️
I want to close this issue because these backward incompatible changes will introduce another issues and break existing projects that use spaces as leading or trailing characters for variable values. Thank you for the patch and I'm sorry for the delay.
Hi, could you make some example or tests please?
I'm closing this issue due to the lack of any reaction. I'll open it again if the need arises
[![Coverage Status](https://coveralls.io/builds/11366028/badge)](https://coveralls.io/builds/11366028)

Coverage increased (+0.03%) to 88.342% when pulling **955aa7b84a793657d5ded2f3c08c0889c7e17ac6 on sanoma:feature/redis_locations** into **7e50e3420b8aeaac48f0555a5949d2fb189fec77 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/11399519/badge)](https://coveralls.io/builds/11399519)

Coverage remained the same at 88.312% when pulling **22813ac98d0176bfb3806cdccbde7d515d6777a3 on zbyte64:develop** into **7e50e3420b8aeaac48f0555a5949d2fb189fec77 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/11604736/badge)](https://coveralls.io/builds/11604736)

Coverage remained the same at 88.312% when pulling **27ed45f3997b83ccc8c73e288449a980f2dc3a80 on FlipperPA:pyodbc-support** into **7e50e3420b8aeaac48f0555a5949d2fb189fec77 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/11604843/badge)](https://coveralls.io/builds/11604843)

Coverage remained the same at 88.312% when pulling **f990eb27e66eb7e1f7cf96921e6092949016d7e3 on FlipperPA:pyodbc-support** into **7e50e3420b8aeaac48f0555a5949d2fb189fec77 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/11885775/badge)](https://coveralls.io/builds/11885775)

Coverage remained the same at 88.312% when pulling **d72ea3efe62ff779630466ba975f9a64fc7b97a6 on federicoemartinez:patch-1** into **7e50e3420b8aeaac48f0555a5949d2fb189fec77 on joke2k:develop**.
[![Coverage Status](https://:/builds/12016646/badge)](https://:/builds/12016646)

Coverage increased (+0.3%) to 88.571% when pulling **875b5726b30bf733b44417352d937bbf7e49303f on Taik:develop** into **7e50e3420b8aeaac48f0555a5949d2fb189fec77 on joke2k:develop**.
Hi, can you explain with an example how to use the export prefix?
Hi; sure thing. I have project specific envrc files that is sourced using [direnv](https://direnv.net/). It's bash compliant and expects variables to be in the format of:

```
export DB_URL=1
export VAR2=2
...
```
I'm not sure what the correct approach is in regards to subclassing. I could possibly make it a classmethod that can be overridden in subclasses or we could assume that if it's empty dictionary it's probably safe to rewrite. Please advise.
[![Coverage Status](https://coveralls.io/builds/43652440/badge)](https://coveralls.io/builds/43652440)

Coverage increased (+0.4%) to 91.048% when pulling **53eec972cc6bfa3db4438a00f8893b82e33d2c6b on IvanAnishchuk:fix_empty_environment** into **cbbd6d6d454352e4ff712947502466a84dd8faef on joke2k:develop**.
PR was closed by mistake. Reopened it.
This is a weird patch. I have never experienced anything like this and have never heard of anyone experiencing it. Moreover, after a long time of experimentation, I could not reproduce it. I'm sorry, I have to decline this, because I could not be sure of the need for this, but if I have made an oversight, please do get back in touch. Thanks
[![Coverage Status](https://coveralls.io/builds/12185485/badge)](https://coveralls.io/builds/12185485)

Coverage decreased (-0.06%) to 88.251% when pulling **ce59e000db9624cbdbc3020b1b80c8a3c5473d02 on fdemmer:130-fix-redis_cache-detection** into **7e50e3420b8aeaac48f0555a5949d2fb189fec77 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/12186110/badge)](https://coveralls.io/builds/12186110)

Coverage increased (+0.2%) to 88.512% when pulling **7b13c4c9b00cb9a18a0462ffc93e798f7b8526f5 on fdemmer:130-fix-redis_cache-detection** into **7e50e3420b8aeaac48f0555a5949d2fb189fec77 on joke2k:develop**.
Thank you for PR

but instead of installing all the third-party packages into the test environment we should use mock instead.
What do you think?
I think the functionality being tested is actually finding a specific optional package by name; "detecting" if a package is installed and adapting behaviour accordingly. _Presence_ of the package is directly influencing functionality. I think mocking that would somewhat defeat the purpose of the tests.

A mock would cover up any possible side effects or issues with using `pkgutil` to find the package, like the blanket `except` statement before.

Besides that I see two issues/difficulties with mocking in that case:

- `mock` was only included with Python from 3.3 onwards, so instead of having `django-redis-cache` as a test requirement, we'd have to add `mock` to support Python 2.x.
- detection of the installed package happens at import, on module level, so a `@mock.patch()` on specific tests does not work.

Django and six are already dependencies; is adding a small third one as _test requirement_ really an issue?
I'll remove django too from requirements.
The redis cache package import is fixed with back compatibility.
[![Coverage Status](https://coveralls.io/builds/12186013/badge)](https://coveralls.io/builds/12186013)

Coverage increased (+0.2%) to 88.491% when pulling **a79ff5ff0d87bf3cca7fd5e8f71f13f812e2ab61 on fdemmer:133-fix-parsing-None** into **7e50e3420b8aeaac48f0555a5949d2fb189fec77 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/12194313/badge)](https://coveralls.io/builds/12194313)

Coverage increased (+0.3%) to 88.601% when pulling **bc2b3431f12c3583ca86c4014a97d18d3801399a on fdemmer:fix-path-subtract** into **7e50e3420b8aeaac48f0555a5949d2fb189fec77 on joke2k:master**.
Merged in develop with 8c9a1e744b22071cedfaae6a84227d2bb3b1724f removing assertRaises with statement to allow tests in python2.
[![Coverage Status](https://coveralls.io/builds/12195048/badge)](https://coveralls.io/builds/12195048)

Coverage remained the same at 88.312% when pulling **ee6242651b4a39a4801ee11eef127b8a91d812b1 on fdemmer:103-read_env-overrides** into **7e50e3420b8aeaac48f0555a5949d2fb189fec77 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/17735833/badge)](https://coveralls.io/builds/17735833)

Coverage increased (+3.8%) to 89.51% when pulling **31fd174b5fddb7db8ae77361389c014f2b06ee72 on fdemmer:103-read_env-overrides** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
There is a bit of history with regards to variable precedence: e.g. #58 #66 #88. This may be a backwards-incompatible change :(
PR was closed by mistake. Reopened it.
This is implemented in [`develop`](https://github.com/joke2k/django-environ/pull/329) branch. Thank you for the pathc, and for helping us make django-environ better. And I am sorry about the delay.
[![Coverage Status](https://coveralls.io/builds/12415977/badge)](https://coveralls.io/builds/12415977)

Coverage increased (+0.06%) to 88.372% when pulling **cb78bf12e512af0593431108f5ff8a96c2ad922d on jmerdich:patch-1** into **7e50e3420b8aeaac48f0555a5949d2fb189fec77 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/13387588/badge)](https://coveralls.io/builds/13387588)

Coverage increased (+0.03%) to 88.462% when pulling **423a0769905e4cf1fe8b348937f135919667acf0 on secretescapes:develop** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/13387588/badge)](https://coveralls.io/builds/13387588)

Coverage increased (+0.03%) to 88.462% when pulling **423a0769905e4cf1fe8b348937f135919667acf0 on secretescapes:develop** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
See #148
PR was closed by mistake. Reopened it.
This is resolved in [`develop`](https://github.com/joke2k/django-environ/issues/271) branch and released in v0.8.0. Thank you for the patch, and for helping us make django-environ better. And I am sorry about the delay.
[![Coverage Status](https://coveralls.io/builds/13725047/badge)](https://coveralls.io/builds/13725047)

Coverage decreased (-0.09%) to 88.342% when pulling **d5afbb20b19a1c0de23dd06d7a5d943a09916801 on mrogaski:bugfix/60_proxy_var** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
FYI I added a way to make this optional https://github.com/joke2k/django-environ/pull/145
Interpolation of environment variables on read is a very risky behavior. Even if there's a valid use case for it (which is debatable), it should be disabled by default.
Thank you

A lot of people use the proxy values, so we can't remove without a lot of issues of backports.
But I understand your point.
We should use the quoting to catch or not the proxy value, for example:
```python
# .end file:
# FOO="$BRIAN"
# BAR='$BRIAN'
# ZAP=$BRIAN
# BRIAN=brian

# if quoted the proxy is not evaluated
>>> print env('FOO'), env('BAR')
('$BRIAN', '$BRIAN')
>>> print env('ZAP')
brian
```

To do that we should edit `read_env()` method adding a dict that records if a variable is quoted or not.
Then in `get_value()` we can check if this variable is not quoted and finally apply the proxy solution.

See #145
This is a reasonable approach.  Thank you.
another aspect of this, that i'd consider broken with proxy variables are default values and that would not be improved with the suggested approach. consider the following test:

    self.assertEqual('$@u#c4w=%k', self.env('not_present', default='$@u#c4w=%k'))

here the environment variable `not_present` does not exist and the default value happens to start with a $. this is assumed to be a "proxy variable" and looked up (using the _same value_ as default again), which leads to an infinite recursion.

came across this issue when using django's `get_random_secret_key()` for a safe default:

    SECRET_KEY = env.str('SECRET_KEY', default=get_random_secret_key())

it seems to me like a feature, that does more harm, than good and should be explicitly enabled; would suggest a semantic major version update with breaking change.
@fdemmer The `SECRET_KEY` example is what got me looking at this in the first place. ;)
I just got hit by this and was very confused. The secret key that got generated for me started with a $. Took me a while to figure it out because I had not yet read about proxy variables on the docs. And I am now a little more confused about the state of this issue, since both this and #145 are both still open I assume the only fix for my case is to change my SECRET_KEY? This may be fine for new setups but may make it impossible for me to deploy django-environ on some projects where variables will necessarily have values starting with $...
PR was closed by mistake. I can't reopen it since the repository that submitted this PR has been deleted. I'll review this PR and give feedback soon.
[![Coverage Status](https://coveralls.io/builds/13797125/badge)](https://coveralls.io/builds/13797125)

Coverage increased (+6.3%) to 94.725% when pulling **953a68a33448f982bc3d41c5c521303f248b5006 on simlun:pytest** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
This is resolved in [`develop`](https://github.com/joke2k/django-environ/pull/307) branch. `setup.py` file will be updated a bit later. Thank you for the patch, and for helping us make django-environ better. And I am sorry about the delay.
[![Coverage Status](https://coveralls.io/builds/13930452/badge)](https://coveralls.io/builds/13930452)

Coverage increased (+5.5%) to 93.901% when pulling **8e070baf3861675813e04e846980fbc2caf3ea69 on mixkorshun:feature/separate-tests-from-build** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/13930544/badge)](https://coveralls.io/builds/13930544)

Coverage remained the same at 88.432% when pulling **55908c51b9c6c12b8946f9bf1a3b91ef52ad9469 on mixkorshun:feature/separate-tests-from-build** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
Fixed with https://github.com/joke2k/django-environ/commit/dcd8353946a80b1c5da619f56d05587325ea7a6b
Thank you
`environ/test_env.txt` actually should be included. Files listed in MANIFEST.in are included in sdist tarbar file.
[![Coverage Status](https://coveralls.io/builds/13941409/badge)](https://coveralls.io/builds/13941409)

Coverage remained the same at 88.432% when pulling **a09bb928c3e57117f1da233d08d3a7ccb3bb5b1d on mixkorshun:feature/django-environ-project-template** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/14011156/badge)](https://coveralls.io/builds/14011156)

Coverage remained the same at 88.432% when pulling **704abf1e9561d224adcdfc6b3d55ea528de25576 on ntravis:fix_appveyor_builds** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/14011156/badge)](https://coveralls.io/builds/14011156)

Coverage remained the same at 88.432% when pulling **704abf1e9561d224adcdfc6b3d55ea528de25576 on ntravis:fix_appveyor_builds** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/14011343/badge)](https://coveralls.io/builds/14011343)

Coverage remained the same at 88.432% when pulling **109c60a174231b1cfcdff1da6417ae8ebba830d0 on ntravis:fix_appveyor_builds** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/14011538/badge)](https://coveralls.io/builds/14011538)

Coverage remained the same at 88.432% when pulling **7f389245181122eca47c1eb0c9f36ce8e28fb914 on ntravis:fix_appveyor_builds** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/14011795/badge)](https://coveralls.io/builds/14011795)

Coverage remained the same at 88.432% when pulling **849bcfa77cd1c353e32c10514d68b7a0bd815470 on ntravis:fix_appveyor_builds** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/14241829/badge)](https://coveralls.io/builds/14241829)

Coverage remained the same at 88.432% when pulling **8ac8c24e282c8d86c43842c411406e566f7617d4 on konstin:patch-1** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/15719780/badge)](https://coveralls.io/builds/15719780)

Coverage remained the same at 88.432% when pulling **ce954c308584977b2ec754b6b826e3a3508311f9 on Jafnee:feature/mssql-support** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
Hi @joke2k , are there any changes required on the PR?
I need this too. @joke2k is there anything we can do to have this merged soon?
Yep, i'll release soon as a possible.
@joke2k I've fixed https://github.com/joke2k/django-environ/pull/157#discussion_r170956381 by amending the commit
Actually I've realized that this isn't useful. Because it's the same as using `pyodbc://`

@beruic Would using that work instead for you?
So I can basically just use `pyodbc://` instead of `mssql://`?

For me it is also a question of customers understanding of things, so if `pyodbc://` works, I'd love a `mssql://` alias anyway.
Correct, as long as you want to use ODBC to connect to your SQL server.

According to info from Microsoft https://docs.microsoft.com/en-us/sql/connect/python/python-driver-for-sql-server#getting-started there are 2 drivers for Python, pyodbc and pymssql.

> There are several python SQL drivers available. However, Microsoft places its testing efforts and its confidence in pyodbc driver.

Just from that pyodbc should be the choice for `mssql://`
I agree
In that case, this PR already does what we agree on
I add just the alias.
Thank you
Whoops! my mistake, just realized I didn't change the variable name
[![Coverage Status](https://coveralls.io/builds/14568561/badge)](https://coveralls.io/builds/14568561)

Coverage increased (+0.06%) to 88.491% when pulling **7e22a9b93c1b032be431081e1dde661451cf7a08 on ratson:postgres-socket** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
@ratson need to also support postgis which is the same as postgres but for GIS support on Postgres
FYI for the default path this works fine `psql:///db`
Can this test be manually re-run? It looks like AppVeyor might have bombed out for reasons outside of the tests if I'm reading this right. 

I'm happy to volunteer/work on anything if there are concerns.
[![Coverage Status](https://coveralls.io/builds/14834976/badge)](https://coveralls.io/builds/14834976)

Coverage increased (+3.1%) to 91.575% when pulling **8a6b4caf276a6f7a6ca73186a58251a90ad13e91 on Jafnee:feature/bytes-casting** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
Test failing due to #164
[![Coverage Status](https://coveralls.io/builds/14835017/badge)](https://coveralls.io/builds/14835017)

Coverage increased (+0.06%) to 88.491% when pulling **9a156103a90cd18de3dd77d90c443d2ca257d762 on Jafnee:feature/bytes-casting** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/14835017/badge)](https://coveralls.io/builds/14835017)

Coverage increased (+0.06%) to 88.491% when pulling **9a156103a90cd18de3dd77d90c443d2ca257d762 on Jafnee:feature/bytes-casting** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/14835017/badge)](https://coveralls.io/builds/14835017)

Coverage increased (+0.06%) to 88.491% when pulling **9a156103a90cd18de3dd77d90c443d2ca257d762 on Jafnee:feature/bytes-casting** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/14835017/badge)](https://coveralls.io/builds/14835017)

Coverage increased (+0.06%) to 88.491% when pulling **9a156103a90cd18de3dd77d90c443d2ca257d762 on Jafnee:feature/bytes-casting** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
+1 for this to be merged
[![Coverage Status](https://coveralls.io/builds/15063568/badge)](https://coveralls.io/builds/15063568)

Coverage remained the same at 88.432% when pulling **0088da944739dec6a8446182ebe89a48bfc91665 on Jafnee:patch-1** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
This LG, specific to `DJANGO_ADMINS` where it need emails, here is how I handle it. Just my 2 cents. 

```python
from email.utils import getaddresses

# In the format 'Full Name <email@example.com>, Full Name <anotheremail@example.com>'
# e.g. DJANGO_ADMINS=Full Name <email-with-name@example.com>,anotheremailwithoutname@example.com
ADMINS = getaddresses([env('DJANGO_ADMINS')])
```

https://github.com/Fueled/django-init/blob/master/%7B%7Bcookiecutter.github_repository%7D%7D/settings/production.py#L34
Thanks, I now prefer the  `getaddresses`approach too.

I can't think of any use case where the tip I added would add enough value to justify documenting then.
[![Coverage Status](https://coveralls.io/builds/15149087/badge)](https://coveralls.io/builds/15149087)

Coverage increased (+0.3%) to 88.689% when pulling **8f71d11a17e0c79e6e0b2f2612444eceba1ba16e on gabriellima:fix-db_url_config** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
I've proposed practicly the same in #173 (sorry, I didn't see your PR) 
The only problem that I see with your PR is that, doing this, the only way to configure a custom engine is using the ```engine``` parameter of ```Env.db()```. I think that the ```scheme``` present in ```DATABASE_URL``` should be valid too.

Another problem is the order of importance to configure the engine, I mean, what parameter should be cheked first (```DATABASE_URL``` scheme vs ```engine``` parameter), what it is proposed in #175. I agree with your proposal that engine should be more important and the last of being checked.

Anyway, :+1:
Thank you but I preferred the @ddiazpinto approach.
[![Coverage Status](https://coveralls.io/builds/15418559/badge)](https://coveralls.io/builds/15418559)

Coverage remained the same at 88.432% when pulling **168cae5807b6c67b5a5911ab88c7178cb4acbb99 on browniebroke:django-2.0** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/17336448/badge)](https://coveralls.io/builds/17336448)

Coverage increased (+0.4%) to 88.861% when pulling **61424505e82d0690cb4fa6b8d7cbce40e22aa909 on immerrr:warn-about-ignored-sqlite-netlocs** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/15544546/badge)](https://coveralls.io/builds/15544546)

Coverage decreased (-0.2%) to 88.205% when pulling **493f52368367356e86b2a3e72c79215a2d2324ef on ddiazpinto:fix-custom-db-backend-url-scheme** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/17335769/badge)](https://coveralls.io/builds/17335769)

Coverage increased (+0.03%) to 88.776% when pulling **7f15096cc3abedd2680fe8fc964168442aacfe4d on ddiazpinto:fix-custom-db-backend-url-scheme** into **99d23c94769710009bf6630ac981e5ed0cdc461c on joke2k:develop**.
@joke2k Is there something we can do to help you handling these issues?
I have added a simple patch to fix #175 too, because it is closely related to this PR.

After merging this PR, it is going to be possible to define a custom engine using ```engine``` attribute of ```Env.db()``` or the url.schema present in ```DATABASE_URL```. In case both were present, the ```engine``` would be used.
[![Coverage Status](https://coveralls.io/builds/15599925/badge)](https://coveralls.io/builds/15599925)

Coverage remained the same at 88.432% when pulling **fc5cc66176fbd75628204d5bd4f978566d442885 on opencollective:opencollective** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
Manually merged. Thank you and sorry for being late :D
[![Coverage Status](https://coveralls.io/builds/16366256/badge)](https://coveralls.io/builds/16366256)

Coverage increased (+0.06%) to 88.491% when pulling **5961f52dc635b4e60adc917e55f468fbd4e48cd4 on fcurella:fcurella-patch-1** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/15816816/badge)](https://coveralls.io/builds/15816816)

Coverage decreased (-0.2%) to 88.235% when pulling **2714457ef1c7eb28ddb878ecef7e6a0898375d52 on fcurella:fcurella-patch-1** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/15816816/badge)](https://coveralls.io/builds/15816816)

Coverage decreased (-0.2%) to 88.235% when pulling **2714457ef1c7eb28ddb878ecef7e6a0898375d52 on fcurella:fcurella-patch-1** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/15816816/badge)](https://coveralls.io/builds/15816816)

Coverage decreased (-0.2%) to 88.235% when pulling **2714457ef1c7eb28ddb878ecef7e6a0898375d52 on fcurella:fcurella-patch-1** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/16011488/badge)](https://coveralls.io/builds/16011488)

Coverage remained the same at 88.432% when pulling **98a1bc79625cfc122e7c25f8f4391d47b66d7931 on jameshiew:patch-1** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/16011488/badge)](https://coveralls.io/builds/16011488)

Coverage remained the same at 88.432% when pulling **98a1bc79625cfc122e7c25f8f4391d47b66d7931 on jameshiew:patch-1** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/16011488/badge)](https://coveralls.io/builds/16011488)

Coverage remained the same at 88.432% when pulling **98a1bc79625cfc122e7c25f8f4391d47b66d7931 on jameshiew:patch-1** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/16051412/badge)](https://coveralls.io/builds/16051412)

Coverage remained the same at 88.432% when pulling **91b8ab96509409d103a2cf75d102608241e3026e on xrmx:psqlunixsocketexample** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
Thank you for PR but doctests aren't used in this package.
These docs are used only in Sphinx documentation.
Yeah, I'd like to have it as reference documentation not for testing
[![Coverage Status](https://coveralls.io/builds/16235455/badge)](https://coveralls.io/builds/16235455)

Coverage increased (+0.07%) to 88.5% when pulling **3b0955b9179ae1c38ae230af7564415a0f0240dd on mintel:hotfix/psycopg2** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/16404428/badge)](https://coveralls.io/builds/16404428)

Coverage remained the same at 88.432% when pulling **8c69b62f039e2645c91e1d935db20b831b8f0795 on bitfinity:develop** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
Sorry, I didn't see the exceptions based on django. I might work on a version without django.
[![Coverage Status](https://coveralls.io/builds/17010075/badge)](https://coveralls.io/builds/17010075)

Coverage increased (+3.0%) to 91.402% when pulling **20b00956ef2082256d97eef7213ca6d65fc73b28 on imomaliev:multiline-string** into **628ed38e540ec9a6f3aff622953948e54f14a76d on joke2k:develop**.
I don't know why do you need the double slash... have you some use cases?
@joke2k Double slash occurs when you use `\n` new line character
@imomaliev maybe if some unquote function is raised on a string... but there isn't here.
I think that you can use `\n` without problems.
```
# STR=Hello\nWorld
>>> print env.str ('STR')
Hello
World
```
It works...
@joke2k I am using 0.4.4 

```
# .env
STR_VARR=Hello\nWorld

# settings.py
STR_VARR = env('STR_VARR', default='')

# ./manage.py shell
In [1]: from django.conf import settings

In [2]: settings.STR_VARR
Out[2]: 'Hello\\nWorld'
```

FYI I am passing it through docker-compose's .env file
[![Coverage Status](https://coveralls.io/builds/18165653/badge)](https://coveralls.io/builds/18165653)

Coverage increased (+3.7%) to 89.376% when pulling **56772cb6b347ec51661b6501f5dcc4fffef20878 on sharpertool:develop** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/17886268/badge)](https://coveralls.io/builds/17886268)

Coverage increased (+3.7%) to 89.401% when pulling **e9795629e3a3c5f9ea6b64ea3c2a37603bfac277 on sharpertool:develop** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
This would be very useful to have 👍
@joke2k Can we get this merged?
Any chance this will be merged soon?
I think the idea that it should not override original env variables [os.environ]

You can use the following helper to merge envs from files

```

def merge_files_env_vars(*files):
    """Merge env variables from files.
    order of files is important, bc next file can override overlapping values from previous files
    
    files are processed in reverse order bc environ uses setdefault, 
    so the latest file env can not be overwritten by previous
    """
    env = environ.Env()
    env.ENVIRON = {}
    for file_path in reversed(files):
        env.read_env(file_path)
    
    return env.ENVIRON

```

and later load them by 
```
    env = environ.Env()
    env_variables = merge_files_env_vars(*env_files)
    env.read_env(**env_variables)
```
PR was closed by mistake. Reopened it.
This is implemented in [`develop`](https://github.com/joke2k/django-environ/pull/329) branch. Thank you for the pathc, and for helping us make django-environ better. And I am sorry about the delay.
Nice!  This is exactly what I need to support Redis with SSL 👍
Glad it helps!
Hi @joke2k!
Can you merge this update in?  I'd love to use this in the next release of `django-environ` 
Thanks!
@joke2k - What is required to merge this in? This is necessary for anyone using secure redis i.e. Amazon Elasticache.
[![Coverage Status](https://coveralls.io/builds/20389091/badge)](https://coveralls.io/builds/20389091)

Coverage increased (+3.8%) to 89.486% when pulling **0340705e7a62e8d5b6f91ed9383410c04adadc91 on fdemmer:159-add-disable-serverside-cursors** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/20389091/badge)](https://coveralls.io/builds/20389091)

Coverage increased (+3.8%) to 89.486% when pulling **0340705e7a62e8d5b6f91ed9383410c04adadc91 on fdemmer:159-add-disable-serverside-cursors** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/20389091/badge)](https://coveralls.io/builds/20389091)

Coverage increased (+3.8%) to 89.486% when pulling **0340705e7a62e8d5b6f91ed9383410c04adadc91 on fdemmer:159-add-disable-serverside-cursors** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/20389091/badge)](https://coveralls.io/builds/20389091)

Coverage increased (+3.8%) to 89.486% when pulling **0340705e7a62e8d5b6f91ed9383410c04adadc91 on fdemmer:159-add-disable-serverside-cursors** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/20389091/badge)](https://coveralls.io/builds/20389091)

Coverage increased (+3.8%) to 89.486% when pulling **0340705e7a62e8d5b6f91ed9383410c04adadc91 on fdemmer:159-add-disable-serverside-cursors** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/20389091/badge)](https://coveralls.io/builds/20389091)

Coverage increased (+3.8%) to 89.486% when pulling **0340705e7a62e8d5b6f91ed9383410c04adadc91 on fdemmer:159-add-disable-serverside-cursors** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/20389091/badge)](https://coveralls.io/builds/20389091)

Coverage increased (+3.8%) to 89.486% when pulling **0340705e7a62e8d5b6f91ed9383410c04adadc91 on fdemmer:159-add-disable-serverside-cursors** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/20389091/badge)](https://coveralls.io/builds/20389091)

Coverage increased (+3.8%) to 89.486% when pulling **0340705e7a62e8d5b6f91ed9383410c04adadc91 on fdemmer:159-add-disable-serverside-cursors** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/20389091/badge)](https://coveralls.io/builds/20389091)

Coverage increased (+3.8%) to 89.486% when pulling **0340705e7a62e8d5b6f91ed9383410c04adadc91 on fdemmer:159-add-disable-serverside-cursors** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
I'd really appreciate this ^^
Closing, this is implemented. If I have made an oversight, please do get back in touch. Thanks
[![Coverage Status](https://coveralls.io/builds/20480864/badge)](https://coveralls.io/builds/20480864)

Coverage increased (+3.8%) to 89.486% when pulling **bb0afd52551a0250e38269d015817d9814e02a8e on lukewiwa:docs_spelling_fix** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
@joke2k I know it's small, giving this a bump because the misspelling irks me
BUMP I think this is worth a merge
[![Coverage Status](https://coveralls.io/builds/21233580/badge)](https://coveralls.io/builds/21233580)

Coverage increased (+3.8%) to 89.486% when pulling **ca16f987eab9ce37e11eab2e9e985a110f2c89fa on DDuarte:patch-1** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/42656886/badge)](https://coveralls.io/builds/42656886)

Coverage increased (+0.1%) to 89.593% when pulling **ca16f987eab9ce37e11eab2e9e985a110f2c89fa on DDuarte:patch-1** into **dff27c0c5da53398c0cf0a9bfa76310249d2bfb1 on joke2k:develop**.
Great! I've just got bitten by that. Would be nice if this fix landed in a release.
+1 to be merged.
PR was closed by mistake. Reopened it.
This is resolved in [`develop`](https://github.com/joke2k/django-environ/pull/323) branch. Thank you for the patch, and for helping us make django-environ better. And I am sorry about the delay.
[![Coverage Status](https://coveralls.io/builds/21282913/badge)](https://coveralls.io/builds/21282913)

Coverage increased (+3.8%) to 89.486% when pulling **b0db3f02e3b1d78f69afa09232e08a6f82908709 on fdemmer:192-fix-default** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/21282913/badge)](https://coveralls.io/builds/21282913)

Coverage increased (+3.8%) to 89.486% when pulling **b0db3f02e3b1d78f69afa09232e08a6f82908709 on fdemmer:192-fix-default** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/21282913/badge)](https://coveralls.io/builds/21282913)

Coverage increased (+3.8%) to 89.486% when pulling **b0db3f02e3b1d78f69afa09232e08a6f82908709 on fdemmer:192-fix-default** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/21282913/badge)](https://coveralls.io/builds/21282913)

Coverage increased (+3.8%) to 89.486% when pulling **b0db3f02e3b1d78f69afa09232e08a6f82908709 on fdemmer:192-fix-default** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/21282913/badge)](https://coveralls.io/builds/21282913)

Coverage increased (+3.8%) to 89.486% when pulling **b0db3f02e3b1d78f69afa09232e08a6f82908709 on fdemmer:192-fix-default** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
You can disable the smart cast 
https://github.com/joke2k/django-environ/commit/4028a79fb174ee875985ab183d346727867108d2
[![Coverage Status](https://coveralls.io/builds/21364091/badge)](https://coveralls.io/builds/21364091)

Coverage increased (+3.8%) to 89.486% when pulling **7e10490692ea66dd62b700a675aa4d002a3853e3 on rtcharity:develop** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/21364091/badge)](https://coveralls.io/builds/21364091)

Coverage increased (+3.8%) to 89.486% when pulling **7e10490692ea66dd62b700a675aa4d002a3853e3 on rtcharity:develop** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/21364091/badge)](https://coveralls.io/builds/21364091)

Coverage increased (+3.8%) to 89.486% when pulling **7e10490692ea66dd62b700a675aa4d002a3853e3 on rtcharity:develop** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/21364091/badge)](https://coveralls.io/builds/21364091)

Coverage increased (+3.8%) to 89.486% when pulling **7e10490692ea66dd62b700a675aa4d002a3853e3 on rtcharity:develop** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
Any reason this has not been accepted? I want to contribute `hiredis` as well, but I want to know that the contribution will be worthwhile...
@joke2k would it be possible to release this?
Could you also please add django 2.2?

@joke2k when this will be merged?
Done in PR #222 (but no one seems to seen it). A litte merge perhaps @joke2k ?
[![Coverage Status](https://coveralls.io/builds/22742886/badge)](https://coveralls.io/builds/22742886)

Coverage increased (+3.8%) to 89.486% when pulling **e53ff237d2ab6bd979bcf4e97cd1354110bf362f on doismellburning:patch-1** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/22742886/badge)](https://coveralls.io/builds/22742886)

Coverage increased (+3.8%) to 89.486% when pulling **e53ff237d2ab6bd979bcf4e97cd1354110bf362f on doismellburning:patch-1** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
Thanks
[![Coverage Status](https://coveralls.io/builds/23022052/badge)](https://coveralls.io/builds/23022052)

Coverage increased (+3.8%) to 89.486% when pulling **f639902fb4f98d221b936d1a118e4a2454179e2b on ebertti:patch-1** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/23022052/badge)](https://coveralls.io/builds/23022052)

Coverage increased (+3.8%) to 89.486% when pulling **f639902fb4f98d221b936d1a118e4a2454179e2b on ebertti:patch-1** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/23022052/badge)](https://coveralls.io/builds/23022052)

Coverage increased (+3.8%) to 89.486% when pulling **f639902fb4f98d221b936d1a118e4a2454179e2b on ebertti:patch-1** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/23022052/badge)](https://coveralls.io/builds/23022052)

Coverage increased (+3.8%) to 89.486% when pulling **f639902fb4f98d221b936d1a118e4a2454179e2b on ebertti:patch-1** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
Manually merged. thank you
[![Coverage Status](https://coveralls.io/builds/23226709/badge)](https://coveralls.io/builds/23226709)

Coverage increased (+3.8%) to 89.51% when pulling **eab5d3ffc30021f71937820f39988a70873fde0a on mattaw:develop** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/23226709/badge)](https://coveralls.io/builds/23226709)

Coverage increased (+3.8%) to 89.51% when pulling **eab5d3ffc30021f71937820f39988a70873fde0a on mattaw:develop** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/23241495/badge)](https://coveralls.io/builds/23241495)

Coverage increased (+3.9%) to 89.631% when pulling **7078530835625bc77c4ce55a5842ba7f905898e2 on mattaw:develop** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/23226709/badge)](https://coveralls.io/builds/23226709)

Coverage increased (+3.8%) to 89.51% when pulling **eab5d3ffc30021f71937820f39988a70873fde0a on mattaw:develop** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/23226709/badge)](https://coveralls.io/builds/23226709)

Coverage increased (+3.8%) to 89.51% when pulling **eab5d3ffc30021f71937820f39988a70873fde0a on mattaw:develop** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/23226709/badge)](https://coveralls.io/builds/23226709)

Coverage increased (+3.8%) to 89.51% when pulling **eab5d3ffc30021f71937820f39988a70873fde0a on mattaw:develop** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/23226709/badge)](https://coveralls.io/builds/23226709)

Coverage increased (+3.8%) to 89.51% when pulling **eab5d3ffc30021f71937820f39988a70873fde0a on mattaw:develop** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/23226709/badge)](https://coveralls.io/builds/23226709)

Coverage increased (+3.8%) to 89.51% when pulling **eab5d3ffc30021f71937820f39988a70873fde0a on mattaw:develop** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/23226709/badge)](https://coveralls.io/builds/23226709)

Coverage increased (+3.8%) to 89.51% when pulling **eab5d3ffc30021f71937820f39988a70873fde0a on mattaw:develop** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
@mattaw I'd recommend you to test your fix against #117, #118 and #119. These regressions were triggered by my attempt to fix the same problem (#105).

AFAIK, there were no automated tests to check this.
bugfixing the test cases helped a lot, and I have added one to test to see if environment variables are preserved or not. I should have written the test case before the code.

Question: Are there ever more than one env supposed to be around? It looks like not as the ENVIRON is static. However the docs clearly show creating an instance, env, and the code is littered with self.ENVIRON, not Env.ENVIRON. However only scheme is saved in the instance.
@max-arnold  Thanks for the issue numbers!

I have bugfixed `__contains__` to use `get_var` so any scheme is applied consistently to `__call__` and `__contains__`. Before, it was possible for a `if VAR in env:` to fail, when a default was set in the scheme as `__call__` just used to return `env.ENVIRON`, it is now consistent.

I have matched previous behavior by 100%, using the classmethods and instance methods as a guide to my question above.

I have created a test which checks to see if the existing environment variables are respected properly, and which catches the cases in #117, #118 and #119.

[I still think we should refactor this app to be 100% a singleton class only using classmethods. I can't see the value of multiple env's running about inside Django.]

I love this app, it cleaned up so much rubbish in my previous setup.
PR was closed by mistake. I can't reopen it since the repository that submitted this PR has been deleted. I'll review this PR and give feedback soon.
[![Coverage Status](https://coveralls.io/builds/26271691/badge)](https://coveralls.io/builds/26271691)

Coverage increased (+3.7%) to 89.416% when pulling **9baaa8010dc1f2bc3950202f24a42ac20d922da9 on tkdchen:validate-cache-url** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/26256247/badge)](https://coveralls.io/builds/26256247)

Coverage increased (+3.04%) to 88.756% when pulling **bba7affd322565c2bd2be0b1a92e0128ce5a8459 on tkdchen:validate-cache-url** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/26260005/badge)](https://coveralls.io/builds/26260005)

Coverage increased (+3.6%) to 89.342% when pulling **47f2b6b216aedb27ea5a1a68c70e9ae138c2bb75 on tkdchen:add-newer-dj-py-ver** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/26258830/badge)](https://coveralls.io/builds/26258830)

Coverage increased (+3.6%) to 89.362% when pulling **eef7847e21d799025b630278e8a6baa4426a8429 on tkdchen:add-newer-dj-py-ver** into **c2620021614557abe197578f99deeef42af3e082 on joke2k:develop**.
This is resolved in `develop` branch. Thank you for the patch, and for helping us make django-environ better. And I am sorry about the delay.

References:
- https://github.com/joke2k/django-environ/pull/305
- https://github.com/joke2k/django-environ/pull/307
[![Coverage Status](https://coveralls.io/builds/26517171/badge)](https://coveralls.io/builds/26517171)

Coverage decreased (-0.2%) to 89.293% when pulling **a1cd862ed37c02843b101b46c12ac422a414a809 on rasulkireev:patch-1** into **b32c07d7ed57cdeaef246f995a29e5fe39a076b3 on joke2k:master**.
[![Coverage Status](https://coveralls.io/builds/26538533/badge)](https://coveralls.io/builds/26538533)

Coverage decreased (-0.2%) to 89.3% when pulling **c1d73531212b2f0be75d92699d765056bb66ca7a on rasulkireev:patch-2** into **b32c07d7ed57cdeaef246f995a29e5fe39a076b3 on joke2k:master**.
[![Coverage Status](https://coveralls.io/builds/26885157/badge)](https://coveralls.io/builds/26885157)

Coverage decreased (-0.6%) to 88.785% when pulling **298520aa42126447baaf6b2eae68813dc8d3b294 on ad-m:pyupgrade** into **f0af058f9efcbed6eb06daf98a48c3286a303cdc on joke2k:develop**.
@joke2k I think this PR is good to go.. Not sure why the Coveralls check disappeared though.
Thank you.
[![Coverage Status](https://coveralls.io/builds/43652356/badge)](https://coveralls.io/builds/43652356)

Coverage increased (+0.6%) to 91.171% when pulling **c7d9dac8603daf239dae00f0dd7baacc57e4d21e on ATNC:fix_dict_keys** into **cbbd6d6d454352e4ff712947502466a84dd8faef on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/26958093/badge)](https://coveralls.io/builds/26958093)

Coverage decreased (-0.01%) to 89.326% when pulling **c7d9dac8603daf239dae00f0dd7baacc57e4d21e on ATNC:fix_dict_keys** into **f0af058f9efcbed6eb06daf98a48c3286a303cdc on joke2k:develop**.
PR was closed by mistake. Reopened it.
Implemented in https://github.com/joke2k/django-environ/pull/400. Thank you for the patch, and for helping make django-environ better!
[![Coverage Status](https://coveralls.io/builds/42694683/badge)](https://coveralls.io/builds/42694683)

Coverage decreased (-0.2%) to 89.732% when pulling **64cbbb2df90e5c01d118280b8cec778dbb7d8e78 on variable:feature/env_file_path_environment_var** into **192b813fc97fd395cb432eba5d0064a73d4ab9f0 on joke2k:develop**.
PR was closed by mistake. Reopened it.
I have updated my branch
Thank you!
Ran into this while extending Env to add support for extra url schema I needed.
Caused a bit of confusion (e.g. should/can we call this to add extra schemes),
so looked into what it's actually doing, specifically with these "undocumented, but have a public-looking name" uses_* variables in urllib.parse/urlparse.

As far as I can see this isn't needed anymore, none of the db/email/cache/search URL actually read the 'params' part of urlparse result...
And `uses_query` and `uses_fragment` aren't used in urllib anymore (so these are always parsed), only left for backwards compatibility.
[![Coverage Status](https://coveralls.io/builds/43652311/badge)](https://coveralls.io/builds/43652311)

Coverage increased (+0.4%) to 90.98% when pulling **170880ccf204fd457a8a50116e17aae0a590fe1f on jor-rit:remove-global-register-schemes** into **cbbd6d6d454352e4ff712947502466a84dd8faef on joke2k:develop**.
PR was closed by mistake. Reopened it.
Implementing in https://github.com/joke2k/django-environ/pull/399. Thank you for the patch, and for helping make django-environ better! And I'm sorry for the delay.
I'm going to lint everything for next release.
Thank you
[![Coverage Status](https://coveralls.io/builds/42656852/badge)](https://coveralls.io/builds/42656852)

Coverage increased (+0.2%) to 89.616% when pulling **15b3dd9911ff42fc9497bee740e03b4eb884715b on yzdann:#249** into **dff27c0c5da53398c0cf0a9bfa76310249d2bfb1 on joke2k:develop**.
PR was closed by mistake. Reopened it.
⚠️ This is a major change in behaviour.

My patch was accepted, which now allows for `read_env(overwrite=True)` to explicitly overwrite environment variables with your `.env` variables if that's what you want to do.
Thanks @SmileyChris  for the reminder. Closing this one in favor of https://github.com/joke2k/django-environ/pull/329. 

@yzdann Thank you for the patch and helping us make django-environ better!
@sergeyklay @SmileyChris 
Thank you guys for maintaining this project.
PR was closed by mistake. Reopened it.
Rebased off of develop to resolve conflicts.

The warning is still being thrown by `django-environ` so I still think this PR has value, as simple as it is. I'll leave it open and try to keep the PR in a "ready-to-merge" state for now.
[![Coverage Status](https://coveralls.io/builds/42670320/badge)](https://coveralls.io/builds/42670320)

Coverage remained the same at 89.933% when pulling **ab217163c7d6378e20323306082cccaa60dd2744 on birdcar:@nickcannariato-make-env-file-optional** into **d43ffd5e93fe5c41ade6cf698dd0eeee187ec483 on joke2k:develop**.
Thank you!
I have updated the develop branch with some of your code. 
Grazie
I just found the same issue. + 1 for this fix.
This is resolved in [`develop`](https://github.com/joke2k/django-environ/pull/315) branch. Thank you for the patch, and for helping us make django-environ better. And I am sorry about the delay.
This is resolved in [`develop`](https://github.com/joke2k/django-environ/pull/315) branch. Thank you for the patch, and for helping us make django-environ better. And I am sorry about the delay.
This is resolved in [`develop`](https://github.com/joke2k/django-environ/pull/308) branch. Thank you for the patch, and for helping us make django-environ better. And I am sorry about the delay.
PR was closed by mistake. Reopened it.
This is resolved in [`develop`](https://github.com/joke2k/django-environ/pull/318) branch. Thank you for the patch, and for helping us make django-environ better. And I am sorry about the delay.
Reason behind running tests on ppc64le: This package is included in the ppc64le versions of RHEL and Ubuntu - this allows the top of tree to be tested continuously as it is for Intel, making it easier to catch any possible regressions on ppc64le before the distros begin their clones and builds. This reduces the work in integrating this package into future versions of RHEL/Ubuntu.

Please provide your views towards the PR.
Any views on PR?
We no longer support Travis CI. Thank you for the patch, and for helping us make django-environ better. And I am sorry about the delay.
In the meantime, for anyone looking to use `Path` without having to `import os` you can do `str(BASE_DIR / '.env')` to get the path that `read_env` will accept
This is resolved in [`develop`](https://github.com/joke2k/django-environ/pull/313) branch. Thank you for the patch, and for helping us make django-environ better. And I am sorry about the delay.
[![Coverage Status](https://coveralls.io/builds/42656841/badge)](https://coveralls.io/builds/42656841)

Coverage decreased (-0.06%) to 89.391% when pulling **32e473faa667ffb2895dbafff9bea0bf9a83c63d on ungaratto93:'log-invalid-lines'** into **dff27c0c5da53398c0cf0a9bfa76310249d2bfb1 on joke2k:develop**.
PR was closed by mistake. Reopened it.
Merged! Thank you for the patch, and for helping us make django-environ better. And I am sorry about the delay.
@Moon-developer Have you tried https://github.com/joke2k/django-environ/pull/281 instead?
This is resolved in [`develop`](https://github.com/joke2k/django-environ/pull/313) branch. Thank you for the patch, and for helping us make django-environ better. And I am sorry about the delay.
Thank you for the path, and for helping us make django-environ better.
:+1:
This is resolved in [`develop`](https://github.com/joke2k/django-environ/pull/307) branch. Thank you for the patch, and for helping us make django-environ better. And I am sorry about the delay.
This is resolved in [`develop`](https://github.com/joke2k/django-environ/pull/308) branch. Thank you for the patch, and for helping us make django-environ better. And I am sorry about the delay.
PR was closed by mistake. Reopened it.
I've rebased this onto the latest `develop` and included your changes from sergeyklay/django-environ-2#29
I'll review this PR ASAP. Thank you for the contributing!
[![Coverage Status](https://coveralls.io/builds/42870830/badge)](https://coveralls.io/builds/42870830)

Coverage decreased (-0.1%) to 89.823% when pulling **6080f4d19e00af81491f43a592244d1a12768a03 on johnbergvall:develop** into **3bb8e6ef3009b1d0a26f7dc7f5bf7eecb505dc5b on joke2k:develop**.
Merged! Thank you for the patch, and for helping us make django-environ better.
Looks good to me
PR was closed by mistake. Reopened it.
This is resolved in [`develop`](https://github.com/joke2k/django-environ/pull/321) branch. Thank you for the patch, and for helping us make django-environ better. And I am sorry about the delay.
This is resolved in [`develop`](https://github.com/joke2k/django-environ/pull/308) branch. Thank you for the patch, and for helping us make django-environ better. And I am sorry about the delay.
AppVeyor build failed. This is unrelated
AppVeyor build failed. Unrelated.
[![Coverage Status](https://coveralls.io/builds/42520086/badge)](https://coveralls.io/builds/42520086)

Coverage decreased (-0.5%) to 88.525% when pulling **69ba79db583e76e2de2b4aa3f999db4182971dc8 on fix/codestyle** into **127edeb511b6149d0c3577e46ce9542995039fcd on develop**.
[![Coverage Status](https://coveralls.io/builds/42524138/badge)](https://coveralls.io/builds/42524138)

Coverage increased (+0.9%) to 89.45% when pulling **e6a35e6fca75c9da4bc51c22d8e4077649ffe90a on feature/tests** into **253370e704af97a71195c984ca933115f4510742 on develop**.
[![Coverage Status](https://coveralls.io/builds/42537111/badge)](https://coveralls.io/builds/42537111)

Coverage remained the same at 89.45% when pulling **406f4242774d42cb2a20c414b1f090e4f31fc179 on feature/package-description** into **a374a48250698d576cd95a7b166b92e67122d517 on develop**.
[![Coverage Status](https://coveralls.io/builds/42541787/badge)](https://coveralls.io/builds/42541787)

Coverage remained the same at 89.45% when pulling **395513014e77316792563c15ba38c1bf6ccbb1ca on feature/test-against-py35** into **377a47db91ff1150d381f6ab523ad21b34519448 on develop**.
[![Coverage Status](https://coveralls.io/builds/42547110/badge)](https://coveralls.io/builds/42547110)

Coverage remained the same at 89.45% when pulling **828c2ff865f68309aa38751664712d1fedfa886e on feature/extras-require** into **cc5d45ba94980b5131586cd42792878db7f46ab7 on develop**.
[![Coverage Status](https://coveralls.io/builds/42550402/badge)](https://coveralls.io/builds/42550402)

Coverage remained the same at 89.45% when pulling **294fa5adeccfdbda8b9fcae91d14a76985ec7993 on feature/test-against-py34** into **6dc6cf156730e04fe0c2e489935d5a2f5b4fe84c on develop**.
[![Coverage Status](https://coveralls.io/builds/42556556/badge)](https://coveralls.io/builds/42556556)

Coverage remained the same at 89.45% when pulling **ca66a6067970a37b4a6071661cb36a6fa88f559e on feature/build-test** into **dff27c0c5da53398c0cf0a9bfa76310249d2bfb1 on develop**.
[![Coverage Status](https://coveralls.io/builds/42558543/badge)](https://coveralls.io/builds/42558543)

Coverage increased (+0.1%) to 89.569% when pulling **1a6b75823129e357d5cce9bd46f2745a6180cd95 on feature/pathlike** into **68d9544319b64d63b44f41b36a66ed08eaf97356 on develop**.
[![Coverage Status](https://coveralls.io/builds/42584769/badge)](https://coveralls.io/builds/42584769)

Coverage increased (+0.02%) to 89.593% when pulling **96fafc6d5ec4492a3f7517be56716cf0e35a17d6 on fix/postgres-scheme** into **3e02a644584e6dda44b2fa9176ad4c759d169916 on develop**.
[![Coverage Status](https://coveralls.io/builds/42656836/badge)](https://coveralls.io/builds/42656836)

Coverage remained the same at 89.593% when pulling **c774c7bddde1f3d56a36ac0cb9b1306cf29681c8 on feature/bump-version** into **230153161957bc5a138a775f19820ad235b6c35a on develop**.
[![Coverage Status](https://coveralls.io/builds/42657229/badge)](https://coveralls.io/builds/42657229)

Coverage remained the same at 89.593% when pulling **4cc2bbbc8af1c09fd37a972baa1df7e9b13150dc on feature/negative-floats** into **9caeaa5de8dde5710b321725a4b51e7b3eef571e on develop**.
[![Coverage Status](https://coveralls.io/builds/42658328/badge)](https://coveralls.io/builds/42658328)

Coverage increased (+0.2%) to 89.819% when pulling **6a87fa716957320221eb1ade9f27c683491251a2 on feature/amend-tests** into **80af9872967ab37baac05c2c496d6e7a7c1d3621 on develop**.
[![Coverage Status](https://coveralls.io/builds/42658857/badge)](https://coveralls.io/builds/42658857)

Coverage remained the same at 89.819% when pulling **05b7ae64ffd231eb74fe49fdddc2b9ae177a2e9e on fix/links** into **addd4f5a99d86d9b030ea8248e2131a3a2b75fa9 on develop**.
[![Coverage Status](https://coveralls.io/builds/42660282/badge)](https://coveralls.io/builds/42660282)

Coverage increased (+0.02%) to 89.842% when pulling **5e0b2b01089568f01df684c527c45d5fdbe783b2 on feature/elasticsearch5-support** into **a711f34abeb46da3dc8f83fdf1efc6e40ff20510 on develop**.
[![Coverage Status](https://coveralls.io/builds/42660403/badge)](https://coveralls.io/builds/42660403)

Coverage remained the same at 89.842% when pulling **3f21d84487e774205af301dcf0afcaf967820c88 on feature/elasticsearch7-support** into **31c8f98343bd871d51c5bf6d73c3573c6cbde72e on develop**.
[![Coverage Status](https://coveralls.io/builds/42661125/badge)](https://coveralls.io/builds/42661125)

Coverage increased (+0.09%) to 89.933% when pulling **09dbc01f5c8e577e9af8c7fba86e828b89665a63 on fix/bytes-default** into **30e06c8cee4c4d7c5eb16e2af9a64b04946bae67 on develop**.
[![Coverage Status](https://coveralls.io/builds/42694217/badge)](https://coveralls.io/builds/42694217)

Coverage remained the same at 89.933% when pulling **e928b6aea636ef0a55dcc8e936af5c97a27f6750 on feature/cache-url-test** into **192b813fc97fd395cb432eba5d0064a73d4ab9f0 on develop**.
[![Coverage Status](https://coveralls.io/builds/42696906/badge)](https://coveralls.io/builds/42696906)

Coverage increased (+0.2%) to 89.933% when pulling **d969d46e4578658383955040004573be273d707f on revert-242-feature/env_file_path_environment_var** into **770e968204ffd349260dddea5e553c044ba4cc67 on develop**.
> Reverts #242
> 
> @variable I'm sorry, but #242 provides a redundant feature. Right now django-environ provides a possibility to use any .env file location using the following approach:
> 
> ```shell
> # .secret file contents
> SOME_VAR=3.14
> ```
> 
> ```
> $ export ACTUAL_ENV_FILE=$(pwd)/.secret
> 
> $ python -c 'from environ.environ import Env
> > env = Env()
> > env.read_env(env.str("ACTUAL_ENV_FILE", ".env"))
> > print(env("SOME_VAR"))'
> 3.14
> ```
> 
> The key point is to use:
> 
> ```python
> env.read_env(env.str("ACTUAL_ENV_FILE", ".env"))
> 
> # OR
> 
> env.read_env(env_file=env.str("ACTUAL_ENV_FILE", ".env"))
> ```
> 
> Thus, will be used `.env` if `ACTUAL_ENV_FILE` environment variable is not defined. This feature has been documented in #155.
> 
> I'd like django-environ remain simple as long as possible. I'd not complicate its codebase without an urgent and obvious need. Therefore, I have to roll it back. I'm sorry.

Oh yeah all good, I didn't know I could use `ACTUAL_ENV_FILE` environment
[![Coverage Status](https://coveralls.io/builds/42804531/badge)](https://coveralls.io/builds/42804531)

Coverage increased (+0.3%) to 89.933% when pulling **d0a2b4640d355bf9a2baa1eda96e1b6d95d82751 on develop** into **4e327ec3442bf8ded9b245461dda9f7fbfe0b0a7 on main**.
I'll take a look ASAP
[![Coverage Status](https://coveralls.io/builds/42883763/badge)](https://coveralls.io/builds/42883763)

Coverage increased (+1.0%) to 90.909% when pulling **9f614e2b3bfd43678c1e66c81120a615db043d68 on SmileyChris:file-aware** into **caf1ce28b235330fd14a8f6e6f95293e7c187247 on joke2k:main**.
Oh, we're supporting 3.5 still. Easy changes to make for that.
Windows CI fails because it can't read temp files 😒
One design decision that should be considered: currently if you use a `_FILE` key on a missing file (or not enough permissions), then it will fail hard with an os exception -- the thinking being that failing loud is better than silently if you explicitly asked to use a file.
@SmileyChris Could you please update the PR descrption by adding a bit more info about purpose and possible use cases.
@sergeyklay updated description, pushed py3.5 fix, 100% coverage, and hopefully fixed windows ci tests too
Lint fixed (pfft, should use black's 88 line length now :D)
Merged! Thank you for the patch, and for helping us make django-environ better.
is there a timeline for the next release that includes this PR?
I'll try to find time for release this weekend.
In general, everything looks quite good, except for a few nitpicking from me.
Could you please exclude this file from the pull request?
Could you please move this to tips.rs file? I'd like to keep README.rst simpler
I would ask you to add a description to this class
Keeping it simple is good, but then I don't think anyone will find the feature if it lives there... Could I trim it down instead?
Ok, removed it (but added a short mention of how to do it in the "Features" bullet point that remains in README)
Done
[![Coverage Status](https://coveralls.io/builds/43074390/badge)](https://coveralls.io/builds/43074390)

Coverage decreased (-0.02%) to 90.891% when pulling **02f5d3087e273afce8bae5ff1fc8b17f3e2f9449 on SmileyChris:read_env-overwrite** into **a8871d0199d250a8adefe77109ee2735ece843a5 on joke2k:main**.
@SmileyChris Could you please send this path to `develop` branch?
Updated against develop

coveralls check is a bit silly, since I simplified a file by a line, it dropped average coverage
Thank you!
Looks good to me
[![Coverage Status](https://coveralls.io/builds/43091770/badge)](https://coveralls.io/builds/43091770)

Coverage increased (+0.02%) to 90.909% when pulling **444c3ca8289676b78d4db84d295c7b773d6ccc88 on feature/update-documentation** into **790106fbe4348c1a19e980f543a373e29a3e8319 on develop**.
@sergeyklay ready for review.
[![Coverage Status](https://coveralls.io/builds/43303678/badge)](https://coveralls.io/builds/43303678)

Coverage remained the same at 90.909% when pulling **d482353a932bae0f74c6fc87372a78c604ad6326 on mehdy:main** into **a8871d0199d250a8adefe77109ee2735ece843a5 on joke2k:main**.
Looks good to me, thanks!
@sergeyklay ready for review.
@mehdy Could you please update change log?
[![Coverage Status](https://coveralls.io/builds/43308821/badge)](https://coveralls.io/builds/43308821)

Coverage increased (+0.02%) to 90.927% when pulling **26fb010ab301da30158e847c2de159cb73c22dd2 on mehdy:default-none** into **972b10392d42bf3688829c129b1cca6cfb558aa5 on joke2k:develop**.
@mehdy Please note, I changed the base branch from `main`  to `develop`
> @mehdy Could you please update change log?

Sure!
Done!
Looks good to me. Thank you!
```suggestion
  `#209 <https://github.com/joke2k/django-environ/issues/209>`_.
```
Oh, I made the change!
[![Coverage Status](https://coveralls.io/builds/43342930/badge)](https://coveralls.io/builds/43342930)

Coverage increased (+0.07%) to 90.998% when pulling **1b6c4ba7e1fc1548a5b9692c923a6523a11ef4af on mehdy:develop** into **7dc1c1b97ef0598cd5037da4603efb77de45be7d on joke2k:develop**.
@sergeyklay ready for review.
@mehdy Thank you for the patch.

In fact, I'd like to go this way:

1. Make current interpolation feature optional and provide an ability to disable it **v0.8.0**
2. Implement a brand new interpolation feature using the following form: `FOO=${BAR}` **v0.9.0**
3. Disable by default old feature **v0.9.0**
4. Enable by default new feature **v1.0.0**
5. Drop old feature **v1.0.0**

I'm trying to understand how much your patch might hinder or help with this plan.
@sergeyklay You're welcome! 

I think I can add a feature flag to the escaping logic so it meets the first step's requirements.
Should I go for it?
Yeah, it would be better. Also could you disable it by default?
@sergeyklay What do you think of this?
@mehdy Looks as I expected, thanks! Could you please add a quick note to the documentation? Feel free to edit the tips.rst to show possible use cases and examples.
@sergeyklay Sure!
@sergeyklay I think we're good to go!
Thank you for the patch, and for helping make django-environ better!
[![Coverage Status](https://coveralls.io/builds/43381762/badge)](https://coveralls.io/builds/43381762)

Coverage increased (+0.02%) to 91.016% when pulling **f2163279c915b3ff678592bff15373bc13d4881e on iflare3g:fix/incorrect-parsing-database-url-google-cloud-mysql** into **ef15435080baf90baf7be48b31270bbb8d0d706e on joke2k:develop**.
Nice 😃 thanks so much for reviewing it!
Thank you for the patch, and for helping make django-environ better!
Thanks so much for your time on reviewing and merging it!
You're welcome :)
Looks good to me!
[![Coverage Status](https://coveralls.io/builds/43426769/badge)](https://coveralls.io/builds/43426769)

Coverage increased (+0.1%) to 91.12% when pulling **1c62ff53c91bf610589ba2a8e7d79a889898fc8f on SmileyChris:pymemcache** into **f5ab1f13defd536fe9a80c7e4a777254b12f5f7d on joke2k:develop**.
@SmileyChris Could you take a look at linting issues?
Thank you for the patch, and for helping make django-environ better!
Looks good to me!
[![Coverage Status](https://coveralls.io/builds/43541100/badge)](https://coveralls.io/builds/43541100)

Coverage remained the same at 90.909% when pulling **ac3ce78df358ce75480e12f0be859502e67f39a3 on dependabot/github_actions/actions/checkout-2.3.5** into **ca78fb627dd04ddaca83acc859966107e867d25c on main**.
[![Coverage Status](https://coveralls.io/builds/43556437/badge)](https://coveralls.io/builds/43556437)

Coverage increased (+0.2%) to 91.12% when pulling **813d1038f0ba6b8e2734490fc5d4200d33b2bf30 on develop** into **c7559ac48580b59e831ad470d9d0230efd11816b on main**.
Seconded, comments are great, our environment configs are totally separate from the code, so it's useful to have comments to explain expected values.
As [document](https://github.com/joke2k/django-environ/blob/main/docs/getting-started.rst)(`A good .env.dist could look like this:`) shows comment and blank line.
So, it would be great this PR would be merged 😄
Today we updated to 0.8.0 and faced the same problem. Please add support for comments and blank lines. Thanks. Have a nice day.
@mike667 I'm so sorry!  It was my mistake, I did not carefully review the proposed feature.
[![Coverage Status](https://coveralls.io/builds/43615056/badge)](https://coveralls.io/builds/43615056)

Coverage increased (+0.03%) to 91.154% when pulling **96b5804121edae734c313875ec414356def4f9af on pratyushmittal:main** into **d3f4b010b08d2f0916aa84bd94aa306aa534a097 on joke2k:main**.
@sergeyklay @pratyushmittal Thank you.
Thank you for the patch!
Documentation tests failed, it was expected.
[![Coverage Status](https://coveralls.io/builds/43621351/badge)](https://coveralls.io/builds/43621351)

Coverage remained the same at 91.154% when pulling **0a22b163ff69051e3e9bbf3a6f400b4e20b41c52 on fix/pymemcached-url-parsing** into **7361c91b9f415a6fab3f55c534dda1b466dab896 on develop**.
Nice, thanks!
[![Coverage Status](https://coveralls.io/builds/43621732/badge)](https://coveralls.io/builds/43621732)

Coverage increased (+0.03%) to 91.154% when pulling **e1232cbb6fd2ba558af54e8fc0a1af83b3c001a4 on develop** into **d3f4b010b08d2f0916aa84bd94aa306aa534a097 on main**.
Docs test failed. It is expected.
[![Coverage Status](https://coveralls.io/builds/43652825/badge)](https://coveralls.io/builds/43652825)

Coverage remained the same at 91.171% when pulling **a8682d76f455c843fd69f5bdbe12866c2326590b on feature/bump-python-version** into **38c716614bd39dceaa637fa3d2593db78c65cc9d on develop**.
[![Coverage Status](https://coveralls.io/builds/43654513/badge)](https://coveralls.io/builds/43654513)

Coverage remained the same at 91.171% when pulling **dffba964c8dff92bd45c8579cb88fece944e3022 on feature/improve-docs** into **34ea0450d2927af033339585eb361485059214fc on develop**.
[![Coverage Status](https://coveralls.io/builds/43989762/badge)](https://coveralls.io/builds/43989762)

Coverage remained the same at 91.154% when pulling **434c3f02d89b312a7799f6ac10d6e0dae27093a4 on dependabot/github_actions/actions/checkout-2.4.0** into **44ac6649ad6135ff4246371880298bf732cd1c52 on main**.
[![Coverage Status](https://coveralls.io/builds/44022655/badge)](https://coveralls.io/builds/44022655)

Coverage remained the same at 91.154% when pulling **450179c3731ce75c2488d5c35b6c8015f91be47f on dependabot/github_actions/actions/checkout-2.4.0** into **44ac6649ad6135ff4246371880298bf732cd1c52 on main**.
OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.

If you change your mind, just re-open this PR and I'll resolve any conflicts on it.
[![Coverage Status](https://coveralls.io/builds/44345270/badge)](https://coveralls.io/builds/44345270)

Coverage remained the same at 91.154% when pulling **594247a14a8d3d38ba4bdc4c36b3514f4f40225a on dependabot/github_actions/actions/setup-python-2.3.0** into **44ac6649ad6135ff4246371880298bf732cd1c52 on main**.
@dependabot rebase
OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.

If you change your mind, just re-open this PR and I'll resolve any conflicts on it.
[![Coverage Status](https://coveralls.io/builds/44419744/badge)](https://coveralls.io/builds/44419744)

Coverage decreased (-0.02%) to 91.154% when pulling **77efc463fa75842a5ed404945d86e32629458ba3 on therefromhere:patch-1** into **ef89a70653969d887c4b877d49f73db259857108 on joke2k:develop**.
Thank you!
[![Coverage Status](https://coveralls.io/builds/44606659/badge)](https://coveralls.io/builds/44606659)

Coverage remained the same at 91.154% when pulling **7b0af0704501b03d8aa9302132ad72f015bf7b1a on dependabot/github_actions/actions/setup-python-2.3.1** into **44ac6649ad6135ff4246371880298bf732cd1c52 on main**.
OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.

If you change your mind, just re-open this PR and I'll resolve any conflicts on it.
[![Coverage Status](https://coveralls.io/builds/45322736/badge)](https://coveralls.io/builds/45322736)

Coverage increased (+0.1%) to 91.304% when pulling **6e74baa245d3ef71a3fe907432f86163d94cd449 on Kapellmeister:postgres-db-cluster-parsing** into **509cf7737363a56e4464962dbae4ab72b801c7b3 on joke2k:develop**.
Thank you!
[![Coverage Status](https://coveralls.io/builds/45322632/badge)](https://coveralls.io/builds/45322632)

Coverage remained the same at 91.171% when pulling **3ea5d6908d80672a6b35b6452e5b81cc52652faf on KyleKaniecki:develop** into **509cf7737363a56e4464962dbae4ab72b801c7b3 on joke2k:develop**.
Thank you!
[![Coverage Status](https://coveralls.io/builds/45322671/badge)](https://coveralls.io/builds/45322671)

Coverage remained the same at 91.171% when pulling **f253eb31f5827ac06db5a20722363789e01db053 on SebastiaanZ:attach-cause-to-improperly-configured-exception** into **509cf7737363a56e4464962dbae4ab72b801c7b3 on joke2k:develop**.
Thank you!
Thank you for the patch, and for helping make django-environ better!
[![Coverage Status](https://coveralls.io/builds/46241291/badge)](https://coveralls.io/builds/46241291)

Coverage remained the same at 91.154% when pulling **c979da212bde3ee6d66639686d9378fb7abf8405 on dependabot/github_actions/actions/setup-python-2.3.2** into **44ac6649ad6135ff4246371880298bf732cd1c52 on main**.
Superseded by #367.
[![Coverage Status](https://coveralls.io/builds/46940861/badge)](https://coveralls.io/builds/46940861)

Coverage remained the same at 91.154% when pulling **10494ac80841284ad58a38956e0c854549ee96bb on dependabot/github_actions/actions/setup-python-3** into **44ac6649ad6135ff4246371880298bf732cd1c52 on main**.
Superseded by #375.
[![Coverage Status](https://coveralls.io/builds/47019338/badge)](https://coveralls.io/builds/47019338)

Coverage remained the same at 91.154% when pulling **3f76232e84e702d441f7b30f6fd86c66815c4624 on dependabot/github_actions/actions/checkout-3** into **44ac6649ad6135ff4246371880298bf732cd1c52 on main**.
Superseded by #379.
Thank you for contributing and I'm sorry for the delay.
[![Coverage Status](https://coveralls.io/builds/47929069/badge)](https://coveralls.io/builds/47929069)

Coverage remained the same at 91.154% when pulling **e01e0b328b6a6be13454ae7dc2d3c791692c2240 on dependabot/github_actions/actions/setup-python-3.1.0** into **44ac6649ad6135ff4246371880298bf732cd1c52 on main**.
OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.

If you change your mind, just re-open this PR and I'll resolve any conflicts on it.
[![Coverage Status](https://coveralls.io/builds/48053185/badge)](https://coveralls.io/builds/48053185)

Coverage remained the same at 91.154% when pulling **e40eecd69ce3a37ec2a4d914b96414c541ba8507 on browniebroke:upgrade/django-4.0** into **44ac6649ad6135ff4246371880298bf732cd1c52 on joke2k:main**.
Will you merge it?
Thank you for contributing and I'm sorry for the delay.
Looks good to me. I'll merge a bit later.
Django 4.0 requires Python 3.8+ so it doesn't install on PyPy
[![Coverage Status](https://coveralls.io/builds/48095335/badge)](https://coveralls.io/builds/48095335)

Coverage remained the same at 91.154% when pulling **0b7565a1478d587a2b0e76071368295aef01f007 on dependabot/github_actions/actions/setup-python-3.1.1** into **44ac6649ad6135ff4246371880298bf732cd1c52 on main**.
Superseded by #380.
[![Coverage Status](https://coveralls.io/builds/48129017/badge)](https://coveralls.io/builds/48129017)

Coverage remained the same at 91.154% when pulling **7c63609ff4f8666bd1834631e1ed4fcbe519262b on dependabot/github_actions/actions/upload-artifact-3** into **44ac6649ad6135ff4246371880298bf732cd1c52 on main**.
Close in favour of https://github.com/joke2k/django-environ/pull/390
OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.

If you change your mind, just re-open this PR and I'll resolve any conflicts on it.
[![Coverage Status](https://coveralls.io/builds/48129057/badge)](https://coveralls.io/builds/48129057)

Coverage remained the same at 91.154% when pulling **37462d20d35073fbc10253707713ae0c9f2479e4 on dependabot/github_actions/actions/checkout-3.0.0** into **44ac6649ad6135ff4246371880298bf732cd1c52 on main**.
Superseded by #381.
[![Coverage Status](https://coveralls.io/builds/48180184/badge)](https://coveralls.io/builds/48180184)

Coverage remained the same at 91.154% when pulling **6492aa972a6e4104e88c4257a33dc2a68aa73dba on dependabot/github_actions/actions/setup-python-3.1.2** into **44ac6649ad6135ff4246371880298bf732cd1c52 on main**.
Superseded by #389.
[![Coverage Status](https://coveralls.io/builds/48319324/badge)](https://coveralls.io/builds/48319324)

Coverage remained the same at 91.154% when pulling **8f945ea9880c5f77d3aac17b2f85dc4c46a1aee8 on dependabot/github_actions/actions/checkout-3.0.1** into **44ac6649ad6135ff4246371880298bf732cd1c52 on main**.
Superseded by #384.
This was fixed here https://github.com/joke2k/django-environ/pull/374. Thank you for contributing and I'm sorry for the delay.
[![Coverage Status](https://coveralls.io/builds/48464069/badge)](https://coveralls.io/builds/48464069)

Coverage remained the same at 91.154% when pulling **253324937e9e876bf845ac588105d5c4d16fbfde on dependabot/github_actions/actions/checkout-3.0.2** into **44ac6649ad6135ff4246371880298bf732cd1c52 on main**.
Close in favour of https://github.com/joke2k/django-environ/pull/390
OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.

If you change your mind, just re-open this PR and I'll resolve any conflicts on it.
[![Coverage Status](https://coveralls.io/builds/49853187/badge)](https://coveralls.io/builds/49853187)

Coverage remained the same at 91.154% when pulling **82cdcb487cb1e66e9d730533a22fa865c421a1be on dependabot/github_actions/actions/setup-python-4.0.0** into **44ac6649ad6135ff4246371880298bf732cd1c52 on main**.
Close in favour of https://github.com/joke2k/django-environ/pull/390
OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.

If you change your mind, just re-open this PR and I'll resolve any conflicts on it.
[![Coverage Status](https://coveralls.io/builds/49976669/badge)](https://coveralls.io/builds/49976669)

Coverage remained the same at 91.304% when pulling **02a2f37432581f783b18a6d4b393f7f348c1f38b on feature/update-actions** into **f124acebdb8676f2dbc96505224a77c934b51574 on develop**.
[![Coverage Status](https://coveralls.io/builds/50004726/badge)](https://coveralls.io/builds/50004726)

Coverage increased (+0.2%) to 91.541% when pulling **452b8bb82a7f13031ef33df13aca5e9e2c9a9cb3 on deprecation/unicode** into **1ef4926659ac668a1d307ff5f2d64e01d922f5f7 on develop**.
[![Coverage Status](https://coveralls.io/builds/50032112/badge)](https://coveralls.io/builds/50032112)

Coverage increased (+0.03%) to 91.589% when pulling **16de0116a4df21b6186c3cf805bd1c1a810ea558 on fix/path-eq** into **ea308232d474ad1eb7fc6826869baad6b7136b96 on develop**.
[![Coverage Status](https://coveralls.io/builds/50044415/badge)](https://coveralls.io/builds/50044415)

Coverage increased (+0.4%) to 91.589% when pulling **bccbae4158b2f4276d31d0601c8a0c4251af812b on develop** into **44ac6649ad6135ff4246371880298bf732cd1c52 on main**.
[![Coverage Status](https://coveralls.io/builds/50057313/badge)](https://coveralls.io/builds/50057313)

Coverage decreased (-0.05%) to 91.541% when pulling **0c7640ba99dd0e832c1c32b1856e6c42d15b85bb on drop/unicode** into **bc8860a6e6d1634c122afabce3159531f61e6a63 on develop**.
[![Coverage Status](https://coveralls.io/builds/50061162/badge)](https://coveralls.io/builds/50061162)

Coverage remained the same at 91.541% when pulling **586666a74b9b3bdb210503132b40592e06146dd2 on deprecate/python3.5** into **1f220bf15f201cf94cc3aaf60dad921b1230d78d on develop**.
@glasnt Could you please send this PR to develop branch?
@sergeyklay that should be fixed now. My apologies!
[![Coverage Status](https://coveralls.io/builds/50101959/badge)](https://coveralls.io/builds/50101959)

Coverage increased (+0.06%) to 91.667% when pulling **7ee07abaae55732f5ea52c8a65621626f77e9198 on glasnt:feat/redis-django** into **27fcdc3f74f8bc01d3b031b51231de28d8058dac on joke2k:develop**.
@glasnt Tests failed. See logs
```
2022-06-16T07:50:12.1170507Z     def test_cache_parsing(url, backend, location):
2022-06-16T07:50:12.1170795Z         url = Env.cache_url_config(url)
2022-06-16T07:50:12.1171022Z     
2022-06-16T07:50:12.1171332Z >       assert url['BACKEND'] == backend
2022-06-16T07:50:12.1171863Z E       AssertionError: assert 'django.core....is.RedisCache' == 'django_redis...he.RedisCache'
2022-06-16T07:50:12.1172533Z E         - django_redis.cache.RedisCache
2022-06-16T07:50:12.1172876Z E         + django.core.cache.backends.redis.RedisCache
```

Could you adjust tests? Also note I changed a bit your patch.
Thank you for the patch, and for helping make this project better!
Thank you @sergeyklay for your help on this one! I was going to address your comments this morning but you've already done it! ✨
Yes, I wanted to merge it ASAP. Thank you very much for your input!
[![Coverage Status](https://coveralls.io/builds/50109239/badge)](https://coveralls.io/builds/50109239)

Coverage increased (+0.2%) to 91.852% when pulling **12976c32fde6c4bfaea1c084f2ce54046c4de8b9 on feature/amend-tests** into **6985d8fafe728692e68b69f3361033b50dfeb027 on develop**.
[![Coverage Status](https://coveralls.io/builds/50111432/badge)](https://coveralls.io/builds/50111432)

Coverage decreased (-0.2%) to 91.667% when pulling **ddf9cba5239f77f6581cca94d38b9ebaa76c5818 on drop/register_schemes** into **6628b09a59c0db5d8d6ef4effe95537270b56713 on develop**.
[![Coverage Status](https://coveralls.io/builds/50157185/badge)](https://coveralls.io/builds/50157185)

Coverage remained the same at 91.667% when pulling **bad36149cdaab694716a130a62b021989efa6a06 on feature/enhanced-dict** into **2144df995b78d5e95c88449b7606c201ac3b9fcb on develop**.
[![Coverage Status](https://coveralls.io/builds/50159814/badge)](https://coveralls.io/builds/50159814)

Coverage decreased (-0.03%) to 91.635% when pulling **20ba2d1635cccc0aaafae91c86e3c74775078c61 on fix/codestyle** into **495be601669654070b6ac603b4df5c7dcf756281 on develop**.
[![Coverage Status](https://coveralls.io/builds/50229255/badge)](https://coveralls.io/builds/50229255)

Coverage remained the same at 91.635% when pulling **aaf03778c67d64a48db17f0729b0641f2e7472c1 on feature/python-3.11** into **4e5c05cd3e2cd65d75545aca88629b500c996361 on develop**.
[![Coverage Status](https://coveralls.io/builds/50481186/badge)](https://coveralls.io/builds/50481186)

Coverage remained the same at 91.635% when pulling **3c1594ab87d39e111aa5a33c05ad6d4fa807ff2c on jnm:stricter-check-for-none-default-value** into **9c201d4119e53fe784c03feceb0f474601452f9f on joke2k:develop**.
Thanks for reviewing so quickly! Best wishes for strength and safety :ukraine:
Thank you for the patch, and for helping make django-environ project better!
I will keep this open for a day or two to allow other contributors a chance to speak up, and to take a fresh look at it later. But at the moment it seems good to me.
[![Coverage Status](https://coveralls.io/builds/50763539/badge)](https://coveralls.io/builds/50763539)

Coverage remained the same at 91.589% when pulling **ebd3a734e7adb656d96c9191b5f3a87faeb345b1 on dependabot/github_actions/actions/setup-python-4.1.0** into **7720a4965915d523b6787f3b765d68dc5b8f09af on main**.
[![Coverage Status](https://coveralls.io/builds/50804184/badge)](https://coveralls.io/builds/50804184)

Coverage remained the same at 91.589% when pulling **2eef7122aa6b6bb03de6cfdf65fef7a5f904af44 on dependabot/github_actions/actions/setup-python-4.1.0** into **7720a4965915d523b6787f3b765d68dc5b8f09af on main**.
OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.

If you change your mind, just re-open this PR and I'll resolve any conflicts on it.
[![Coverage Status](https://coveralls.io/builds/51391510/badge)](https://coveralls.io/builds/51391510)

Coverage remained the same at 91.589% when pulling **cf94f7ebe545929a82cf03e65a95e1978dd9d813 on dependabot/github_actions/actions/setup-python-4.2.0** into **7720a4965915d523b6787f3b765d68dc5b8f09af on main**.
@dependabot rebase
@dependabot rebase
Looks like this PR is already up-to-date with main! If you'd still like to recreate it from scratch, overwriting any edits, you can request `@dependabot recreate`.
@dependabot close
[![Coverage Status](https://coveralls.io/builds/52603345/badge)](https://coveralls.io/builds/52603345)

Coverage decreased (-0.2%) to 91.466% when pulling **b30e56d1a5977163cb1c37e441579181b16eb81e on fizyk:allow-override_db_schemes_children** into **86716ac2b0f097a36c40d871ecda1f521126be85 on joke2k:develop**.
Looks good to me. Thank you!
https://github.com/joke2k/django-environ/issues/413
@sergeyklay
@denys-pidlisnyi Could you please send this PR to develop branch?
@sergeyklay Done
[![Coverage Status](https://coveralls.io/builds/52602836/badge)](https://coveralls.io/builds/52602836)

Coverage decreased (-0.05%) to 91.589% when pulling **f3c04d28cb250b74d5f84fc5423ffb1415293350 on denys-pidlisnyi:main** into **86716ac2b0f097a36c40d871ecda1f521126be85 on joke2k:develop**.
Looks good to me. Thanks!
I believe this doesn't solve the problem I see with the code: when using interpolation and cast together you'll get unexpected error. Minimal example:

```
# .env file contents:
# BAR=3.2
# FOO=$BAR

import environ
env = environ.Env(interpolate=True)
env.str('FOO') # -- outputs "3.2" as expected
env.float('FOO') # <- errores out, as it tries to make float out of not expanded string literal "BAR"
```
Hey @WTK 

Thanks for the comment, I think it would be worth creating another PR to fix the issue you are mentioning.
The hereby PR is adding the logic to deactivate the `interpolate` option, whereas, from what I'm understanding, you are mentioning that interpolation doesn't work properly.
@sergeyklay I see you are now the main contributor with push access to this repository, would you mind merging this simple PR ? It just makes interpolate works like it is supposed to be. It doesn't create new errors or anything like that.
Rebased to fix the conflict.
[![Coverage Status](https://coveralls.io/builds/61381516/badge)](https://coveralls.io/builds/61381516)

coverage: 92.5% (+0.2%) from 92.255% when pulling **8c1b1c1ce09e617e7bc3561f89f5c6beffd6ba0c on David-Wobrock:feat/add-interpolate-option** into **2750dd54e0e4b1b591a31409cfb1dc16a82b958d on joke2k:develop**.
Hi @sergeyklay 

Thanks for your input 👍 

> However, there seem to be a few builds that failed

I adapted the code ✔️ We should be good now (linting passes locally).
I forced-push, to keep one lean commit, but it seems that the PR requires new approval for running the CI 😕 

> add an entry in the changelog about these changes

Done ✔️ 

> update corresponding article https://github.com/joke2k/django-environ/blob/main/docs/tips.rst#proxy-value

From my understanding, everything is already documented in the tips section.
That was one of the major reasons of the PR: the logic was documented, but not implemented 😄
Thank you!
@David-Wobrock Thank you for your contribution to the project. Unfortunately, after implementing your interpolation solution, [we've encountered issues from our users](https://github.com/joke2k/django-environ/issues/485). Due to [this, we've decided to revert your changes](https://github.com/joke2k/django-environ/pull/486) and release a patch version.

This is not a reflection on the quality of your code or idea; it's just that it has caused some complications in this particular context.
@David-Wobrock I've been looking through your pull request and in principle, everything looks good. However, there seem to be a few builds that failed, notably the code style checks and linters. Could you please make the necessary adjustments? It would greatly assist in maintaining our codebase's quality and readability. Also, I would appreciate it if you could add an entry in the changelog about these changes as well as update corresponding article https://github.com/joke2k/django-environ/blob/main/docs/tips.rst#proxy-value. This would save me some time and ensure that we keep our documentation up to date.
line too long (97 > 79 characters)
[![Coverage Status](https://coveralls.io/builds/53003150/badge)](https://coveralls.io/builds/53003150)

Coverage remained the same at 91.589% when pulling **cde7e88a8db42053166c1bf5e6763532c640eb07 on dependabot/github_actions/actions/checkout-3.1.0** into **7720a4965915d523b6787f3b765d68dc5b8f09af on main**.
Superseded by #428.
[![Coverage Status](https://coveralls.io/builds/53146115/badge)](https://coveralls.io/builds/53146115)

Coverage remained the same at 91.589% when pulling **e003cad4adcc3210ccb9c7518aa02f8c00c6ee84 on dependabot/github_actions/actions/setup-python-4.3.0** into **7720a4965915d523b6787f3b765d68dc5b8f09af on main**.
Superseded by #427.
Thank you for the patch, and for helping make django-environ better!
[![Coverage Status](https://coveralls.io/builds/54985894/badge)](https://coveralls.io/builds/54985894)

Coverage remained the same at 91.589% when pulling **ad419644269964965ffe413cd3c39d31d7d5c3e7 on dependabot/github_actions/actions/setup-python-4.3.1** into **7720a4965915d523b6787f3b765d68dc5b8f09af on main**.
Superseded by #429.
[![Coverage Status](https://coveralls.io/builds/55121249/badge)](https://coveralls.io/builds/55121249)

Coverage remained the same at 91.589% when pulling **bd1f2d2628805ffd1e0c859c9dbdd0697c5f992c on dependabot/github_actions/actions/checkout-3.2.0** into **7720a4965915d523b6787f3b765d68dc5b8f09af on main**.
Superseded by #431.
[![Coverage Status](https://coveralls.io/builds/55406102/badge)](https://coveralls.io/builds/55406102)

Coverage decreased (-0.0%) to 91.589% when pulling **39174e69e1b7254daec212ec53f3181dc3e31350 on dependabot/github_actions/actions/setup-python-4.4.0** into **7720a4965915d523b6787f3b765d68dc5b8f09af on main**.
Superseded by #435.
[![Coverage Status](https://coveralls.io/builds/55680005/badge)](https://coveralls.io/builds/55680005)

Coverage: 91.589% (-0.0%) from 91.589% when pulling **668226b775fd371332878cbe084a20ea751799eb on dependabot/github_actions/actions/checkout-3.3.0** into **7720a4965915d523b6787f3b765d68dc5b8f09af on main**.
OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.

If you change your mind, just re-open this PR and I'll resolve any conflicts on it.
OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.

If you change your mind, just re-open this PR and I'll resolve any conflicts on it.
[![Coverage Status](https://coveralls.io/builds/59118587/badge)](https://coveralls.io/builds/59118587)

Coverage: 91.956% (+0.3%) from 91.635% when pulling **589770515b1ac26fc0643fbbba305a2b1aadb47e on invasy:main** into **8874288ac11bc70fa491439d52a4c307f9388aea on joke2k:main**.
Closed in favor of pull request #468 with fixed issues.
Thank you for your contribution to django-environ. Your code looks good and is in line with the project's philosophy. I am ready to accept your changes, however, there are a few things that need to be done before I can do so:

Add documentation for the new feature: This is a very important aspect for the users of this project. Please ensure that you've added detailed information on how to use the new feature, including examples and possible use cases.

Update the changelog: This will help the community stay informed about the changes happening in the project. Please add information about your new feature and how it affects the current functionality of the project.

After completing these two items, I'll be more than happy to accept your Pull Request. If you have any questions or need assistance, please feel free to reach out.

Finally, send this PR to `develop` branch, not `main`.

Thank you for your collaboration and efforts in improving django-environ!
[![Coverage Status](https://coveralls.io/builds/55898988/badge)](https://coveralls.io/builds/55898988)

Coverage: 91.589% (-0.0%) from 91.589% when pulling **9c9487741f508e9a0f224a38172e31fb89fb8ca4 on dependabot/github_actions/actions/setup-python-4.5.0** into **7720a4965915d523b6787f3b765d68dc5b8f09af on main**.
OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`. You can also ignore all major, minor, or patch releases for a dependency by adding an [`ignore` condition](https://docs.github.com/en/code-security/supply-chain-security/configuration-options-for-dependency-updates#ignore) with the desired `update_types` to your config file.

If you change your mind, just re-open this PR and I'll resolve any conflicts on it.
[![Coverage Status](https://coveralls.io/builds/57224430/badge)](https://coveralls.io/builds/57224430)

Coverage: 91.434% (-0.2%) from 91.589% when pulling **433eee36708e6303dab4af692347b73bcf3642af on aixcyi:main** into **7720a4965915d523b6787f3b765d68dc5b8f09af on joke2k:main**.
These changes have been in the develop branch for a long time and will be released ASAP.

For details see:
- https://github.com/joke2k/django-environ/commit/7ee07abaae55732f5ea52c8a65621626f77e9198
- https://github.com/joke2k/django-environ/commit/4ef047f2258255b05720c9fbc2440bc504daf893
- https://github.com/joke2k/django-environ/commit/c1b7034bbd54c548f48f8d19c882c772a29f394b
if a user has redis cache, they'll likely want to use it here (or for backwards compatibility sake). I'd switch the order to check whether the user already has redis cache or not.
[![Coverage Status](https://coveralls.io/builds/57298300/badge)](https://coveralls.io/builds/57298300)

Coverage: 91.589% (-0.0%) from 91.589% when pulling **f8fec0ccd98cd180f8a9d791ab90fa2fea2af1fb on mrodal:read_env-encoding** into **7720a4965915d523b6787f3b765d68dc5b8f09af on joke2k:main**.
Merged by https://github.com/joke2k/django-environ/pull/442. Thank you for the patch, and for helping make django-environ better!
[![Coverage Status](https://coveralls.io/builds/56960445/badge)](https://coveralls.io/builds/56960445)

Coverage: 91.589% (-0.0%) from 91.589% when pulling **a3d2884a9de2de1a699928c8f9140efca3ce93dd on imomaliev:patch-1** into **7720a4965915d523b6787f3b765d68dc5b8f09af on joke2k:main**.
Thank you for the patch, and for helping make django-environ better!
[![Coverage Status](https://coveralls.io/builds/57405305/badge)](https://coveralls.io/builds/57405305)

Coverage: 91.635% (-0.0%) from 91.635% when pulling **300b8283f4834c3f5c75f698054e24303d08daca on fix/ci** into **bd1e640926e5b8c26074f3a887c365e0ee449c45 on develop**.
[![Coverage Status](https://coveralls.io/builds/57405951/badge)](https://coveralls.io/builds/57405951)

Coverage: 91.635%. Remained the same when pulling **998ad1315e7f315f885b1ca920c863c60d7b09c0 on feature/rework-ci** into **d307861bfb2fdadee5fb2306b8dd84d4586d66a4 on develop**.
[![Coverage Status](https://coveralls.io/builds/57407147/badge)](https://coveralls.io/builds/57407147)

Coverage: 91.635%. Remained the same when pulling **8abbe774db41d2026e420fa7d779e04aa65ac303 on fix/read_env-encoding** into **6948d3a536806b0bf0f20817fde21b28db3687fa on develop**.
[![Coverage Status](https://coveralls.io/builds/57407147/badge)](https://coveralls.io/builds/57407147)

Coverage: 91.635%. Remained the same when pulling **8abbe774db41d2026e420fa7d779e04aa65ac303 on fix/read_env-encoding** into **6948d3a536806b0bf0f20817fde21b28db3687fa on develop**.
[![Coverage Status](https://coveralls.io/builds/57407147/badge)](https://coveralls.io/builds/57407147)

Coverage: 91.635%. Remained the same when pulling **8abbe774db41d2026e420fa7d779e04aa65ac303 on fix/read_env-encoding** into **6948d3a536806b0bf0f20817fde21b28db3687fa on develop**.
[![Coverage Status](https://coveralls.io/builds/57487935/badge)](https://coveralls.io/builds/57487935)

Coverage: 91.635% (+0.05%) from 91.589% when pulling **2191f5dfb233ac7e3ed6a58ad54266c358856462 on develop** into **7720a4965915d523b6787f3b765d68dc5b8f09af on main**.
@rcy17 Could you please update tests in `test_db_parsing`. It would also be nice to update the change log. Thank you!
Sorry for ignoring the tests. 
I'v fixed the test and updated the change log. But I'm not sure the version number of this, and I just used 0.10.1.
[![Coverage Status](https://coveralls.io/builds/57542384/badge)](https://coveralls.io/builds/57542384)

Coverage: 91.635%. Remained the same when pulling **79957a8160e1845a09aa3c342209b8f6b37584e0 on rcy17:patch-1** into **2191f5dfb233ac7e3ed6a58ad54266c358856462 on joke2k:develop**.
Thank you!
Looks good to me
[![Coverage Status](https://coveralls.io/builds/57542641/badge)](https://coveralls.io/builds/57542641)

Coverage: 91.255% (-0.4%) from 91.635% when pulling **91d3e0a740ab1df0644014d40ba43b1a2217333e on fix/documentation** into **05b3199e8bfd55af175b75f9c790915a63c01a9e on develop**.
Your PR was set to target `main`, PRs should be target `develop`
The base branch of this PR has been automatically changed to `develop`, please check that there are no merge conflicts.
[![Coverage Status](https://coveralls.io/builds/57804463/badge)](https://coveralls.io/builds/57804463)

Coverage: 91.255%. Remained the same when pulling **bff97ecac0d4f9d5f21b25d57f4f8659b29e4898 on legau:redis-driver** into **bec18530b41745f4ecf1f0a39d690c1e3c41d4a4 on joke2k:develop**.
Thank you for the patch, and for helping make django-environ better!
Please do not use this ignore file to define platform specific files.

For these purposes create a global .gitignore file, which is a list of rules  for ignoring files in every Git repository on your workstation.

See https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files#configuring-ignored-files-for-all-repositories-on-your-computer for details
Could you please remove these 2 empty lines?
I'm not sure why do we need a new import here
I added a warning when no redis driver was found but I removed it afterwards
[![Coverage Status](https://coveralls.io/builds/58040882/badge)](https://coveralls.io/builds/58040882)

Coverage: 91.255%. Remained the same when pulling **c10357b2c0573bea6389e0f33fd9bf5c696753c2 on dependabot/github_actions/develop/actions/checkout-3.4.0** into **d88db95f07344d7f7aee9aa3992b35f422586d45 on develop**.
Your PR was set to target `main`, PRs should be target `develop`
The base branch of this PR has been automatically changed to `develop`, please check that there are no merge conflicts.
@sergeyklay let me know what else I can do to make this go live. I like to use django-environ for the django-4.2rc1 as soon as possible without any rushing.
Superseded by https://github.com/joke2k/django-environ/pull/456
Looks good to me. Thank you!
[![Coverage Status](https://coveralls.io/builds/58213952/badge)](https://coveralls.io/builds/58213952)

Coverage: 91.255%. Remained the same when pulling **0789759c28d6bd9113422e440ad25ff756935c98 on simkimsia:django_4.2** into **1e834a19e6f671bbe584687a13b70f57c5e684b6 on joke2k:develop**.
[![Coverage Status](https://coveralls.io/builds/58276617/badge)](https://coveralls.io/builds/58276617)

Coverage: 91.255%. Remained the same when pulling **87431f1b6fb712212611a3a31b23727a3acb231a on dependabot/github_actions/develop/actions/checkout-3.5.0** into **f43deca453370829e0c711cfd70534990ef9fa74 on develop**.
Your PR was set to target `main`, PRs should be target `develop`
The base branch of this PR has been automatically changed to `develop`, please check that there are no merge conflicts.
I would suggest you describe the issue in a little more detail or, if possible, refer to the existing issue. Also, for a change of this nature, we need to have tests. And of course, it is important that the existing tests pass
[![Coverage Status](https://coveralls.io/builds/58435437/badge)](https://coveralls.io/builds/58435437)

Coverage: 91.37% (+0.1%) from 91.255% when pulling **1d6a25720a25eeb51f1dd540a233cf59ddd79311 on MayGrass:main** into **4294fb56d4a13850527ede0089573584b641c624 on joke2k:develop**.
Thank you for the patch, and for helping make django-environ better!
flake8 expected 2 blank lines here, found 1

```suggestion
    return urlparse(quote(url, safe=':/?&=@'))

```
flake8 expected 2 blank lines here, found 1

```suggestion

def _urlparse_quote(url):
```
Your PR was set to target `main`, PRs should be target `develop`
The base branch of this PR has been automatically changed to `develop`, please check that there are no merge conflicts.
Wrong branch
[![Coverage Status](https://coveralls.io/builds/59118716/badge)](https://coveralls.io/builds/59118716)

Coverage: 91.45% (+0.08%) from 91.37% when pulling **44bb0964e0e9f293473310c5f2dfbcc99e4d76f0 on mizi:develop** into **d1494c605e0d5639e18a8c66a71737ddcb920873 on joke2k:develop**.
Thank you!
Thank you for your work on this Pull Request. Overall, the changes look good and align with the project's philosophy. However, before I can accept your Pull Request, I'd like to ask you to make the following adjustments:

Please make the necessary code style adjustments to ensure your code adheres to our project's style guide. This will help improve code readability and make it easier to maintain in the future.

It would be great if you could update the changelog to reflect your changes. This will make it easier for other developers to track the project's changes and expedite the review process.

Once you've made these adjustments, I'll be happy to accept your Pull Request. If you have any questions or need assistance, please don't hesitate to reach out.

Thank you for your contribution to the project!
line too long (105 > 79 characters)
Thanks for reviewing @sergeyklay.
I've hit the statement limit for this method, though. What do you want me to do about it?
```
lint: commands[1]> pylint --logging-format-style=old '--good-names-rgxs=m[0-9],f,v' --disable=too-few-public-methods --disable=import-error --disable=unused-import --disable=too-many-locals --disable=too-many-branches --disable=too-many-public-methods --disable=too-many-lines environ
  ************* Module environ.environ
  environ/environ.py:746:4: R0915: Too many statements (55/50) (too-many-statements)
```
Add `--disable=too-many-statements`? Splitting the method would seem out of character for this module.
And I couldn't optimize the number of statements in this method without touching older code and/or losing clarity.
Your PR was set to target `main`, PRs should be target `develop`
The base branch of this PR has been automatically changed to `develop`, please check that there are no merge conflicts.
Okay #456 already did this, I just didn't see that due to the `main` / `develop` separation.
[![Coverage Status](https://coveralls.io/builds/58985210/badge)](https://coveralls.io/builds/58985210)

Coverage: 91.37%. Remained the same when pulling **01beb844e33779b1aff9c68c500775253d55543a on dependabot/github_actions/develop/actions/checkout-3.5.2** into **d1494c605e0d5639e18a8c66a71737ddcb920873 on develop**.
[![Coverage Status](https://coveralls.io/builds/59215516/badge)](https://coveralls.io/builds/59215516)

Coverage: 91.786% (+0.3%) from 91.45% when pulling **c211a3b7b0ccb55e0e7dd9e4b2a43b69d260e3cc on fix-cyclomatic-complexy-search-url** into **428c3cbc7f03ffe97871980be56cc63531fd53b0 on develop**.
[![Coverage Status](https://coveralls.io/builds/59250093/badge)](https://coveralls.io/builds/59250093)

Coverage: 92.215% (+0.3%) from 91.921% when pulling **bee44b9c6a2aa3619174e3f538eab67b64d4ea58 on invasy:feature/expansion** into **69b4bc9a5aa855040ca9e8da19aea35a08dcd639 on joke2k:develop**.
Thank you for the patch, and for helping make django-environ better!
Hey @sergeyklay, is there already a new release available including this change?
on pypi.org I can see `0.10.0` from 3rd of march, so this can't be included. are there plans for a new release?

thx and cheers,
Marius
Hi, @elmcrest. I'll release new version ASAP.
Your PR was set to target `main`, PRs should be target `develop`
The base branch of this PR has been automatically changed to `develop`, please check that there are no merge conflicts.
[![Coverage Status](https://coveralls.io/builds/60222944/badge)](https://coveralls.io/builds/60222944)

Coverage: 92.215%. Remained the same when pulling **58bb0db85c83b1ad1656a0f57478920df98355a3 on simkimsia:django_4.2** into **6c1daf905a26c9fe733a83ea280433cc538e13dc on joke2k:develop**.
Hi @simkimsia, thank you for your PR.

It resolves the #473 as well, right?
@joke2k 

Yes 

two birds 🐦 one stone 🗿

🙌
Sorry just asking, @joke2k any estimate on when you will release a new version that's Django 4.2 compatible on pypi?
@simkimsia We'll release new version ASAP.
[![Coverage Status](https://coveralls.io/builds/61001345/badge)](https://coveralls.io/builds/61001345)

coverage: 92.215%. remained the same when pulling **44f9ad39052eeb704982be4cfa2a1049a5ed6813 on dependabot/github_actions/develop/actions/setup-python-4.6.1** into **92062c1eb0dbf3b2fd69274ddd30144b3c15d803 on develop**.
@dependabot rebase
Your PR was set to target `main`, PRs should be target `develop`
The base branch of this PR has been automatically changed to `develop`, please check that there are no merge conflicts.
I noticed related issues that are addressed by this PR:

- https://github.com/joke2k/django-environ/issues/91
- https://github.com/joke2k/django-environ/pull/475
[![Coverage Status](https://coveralls.io/builds/61187581/badge)](https://coveralls.io/builds/61187581)

coverage: 92.255% (+0.04%) from 92.215% when pulling **09a965ab42ed5fed84c7122da81982612e81bbae on lvanderree:issue/91-inline-comments** into **7f31fcae1b6a173bebe56c026ac3b66b272b7ddf on joke2k:develop**.
@lvanderree I've been looking through your pull request and in principle, everything looks great. I really like what you've done here. However, there seem to be a few builds that failed, notably the code style checks and linters.

Could you please have a look into why these didn't pass and make the necessary adjustments? It would greatly assist in maintaining our codebase's quality and readability.

Also, I would appreciate it if you could add an entry in the changelog about these changes. This would save me some time and ensure that we keep our documentation up to date.
Looks great. Thank you for contributing and patience
> So if you want "#" hashes in your values, place them inside quotes.

Unfortunately the Django `SECRET_KEY` has "#" as a valid character, so this is actually a fairly serious breaking change.
> Unfortunately the Django `SECRET_KEY` has "#" as a valid character, so this is actually a fairly serious breaking change.

what is the breaking change exactly? Have you got an example that isn't working anymore?
As far as a I see everything is still possible, but with the additional functionality to also be able to place comments
.env file contents:
```
SECRET_KEY_499_1=abc#def
SECRET_KEY_499_2='abc#def'
SECRET_KEY_499_3='abc\#def'
SECRET_KEY_499_4="abc\#def"
SECRET_KEY_499_5=abc\#def
```

Test 2750dd54e0e4b1b591a31409cfb1dc16a82b958d (this PR)
```
SECRET_KEY_499_1=abc
SECRET_KEY_499_2=abc#def
SECRET_KEY_499_3=abc\#def
SECRET_KEY_499_4="abc\
SECRET_KEY_499_5=abc\
```

Test 8874288ac11bc70fa491439d52a4c307f9388aea (v0.10.0)
```
SECRET_KEY_499_1=abc#def
SECRET_KEY_499_2=abc#def
SECRET_KEY_499_3=abc\#def
SECRET_KEY_499_4=abc#def
SECRET_KEY_499_5=abc\#def
```

For more see: https://github.com/joke2k/django-environ/issues/499
Hey @lvanderree,

I'm currently working on some modifications to the functionality you introduced in this PR. While the inline comments feature is useful, it has led to some unintended side effects that need addressing. I've opened a new pull request (see [#500](https://github.com/joke2k/django-environ/pull/500)) to tackle these issues.

I'd appreciate your thoughts and any feedback you might have on this.
> > Unfortunately the Django `SECRET_KEY` has "#" as a valid character, so this is actually a fairly serious breaking change.
> 
> what is the breaking change exactly? Have you got an example that isn't working anymore? As far as a I see everything is still possible, but with the additional functionality to also be able to place comments

If the SECRET_KEY variable starts with a # then the site will not load, because a non-blank secret key is required. If the SECRET_KEY contains a #, then the key will be silently shortened which reduces security.
Great work on the PR! Noticed some linter warnings. Please, could you address them? After that, it'll be ready for merge. Thanks!
```suggestion
- Added capability to handle comments after #, after quoted values, like ``KEY= 'value_1 # value_2' # comment``
```
I paraphrased and reformatted your comment a bit to make it clearer and satisfy the code style.

```suggestion
                # Look for value in quotes, ignore post-# comments
                # (outside quotes)
```
I paraphrased and reformatted your comment a bit to make it clearer and satisfy the code style.

```suggestion
                    # For no quotes, find value, ignore comments
                    # after the first #
```
Do we really need this piece of code?
String `"ab#cd"`  does not work(
See https://github.com/joke2k/django-environ/pull/500
[![Coverage Status](https://coveralls.io/builds/60677902/badge)](https://coveralls.io/builds/60677902)

coverage: 92.215%. remained the same when pulling **ab90b636ac234447099b8a7d77a36e7a002e60cf on dependabot/github_actions/develop/actions/checkout-3.5.3** into **e1486b2c0051bf81991cb1429e76e7b003a56889 on develop**.
[![Coverage Status](https://coveralls.io/builds/61391844/badge)](https://coveralls.io/builds/61391844)

coverage: 92.5%. remained the same when pulling **6f294dcc85f8c65177d08e5fed1fd3340d6744a2 on dependabot/github_actions/develop/actions/setup-python-4.7.0** into **797101bed7bfd1518c84061a7606628a47c81996 on develop**.
Found that it is already in `develop` branch, just a difference of comma. 😅
@wongcht This PR cannot be rebased automatically due to conflicts. Could you please rebase and send PR again?
[![Coverage Status](https://coveralls.io/builds/62310585/badge)](https://coveralls.io/builds/62310585)

coverage: 92.5%. remained the same when pulling **edf2ac65f106f4c1cb09daa0db095241261c83b9 on wongcht:479-support-django42** into **89ac873e6eb588641e5517a31ca1cbcd65b82e29 on joke2k:develop**.
Thank you
Thank you!
[![Coverage Status](https://coveralls.io/builds/62275909/badge)](https://coveralls.io/builds/62275909)

coverage: 92.5%. remained the same when pulling **0258ad368bdb2aff74d693f04d4d28a00e1834fd on dependabot/github_actions/develop/actions/checkout-3.6.0** into **638720cf3cc4f409a16e65df02b3bd4a49ca19d0 on develop**.
[![Coverage Status](https://coveralls.io/builds/62324015/badge)](https://coveralls.io/builds/62324015)

coverage: 92.5% (+0.9%) from 91.635% when pulling **cbff150e80a8b741041e600de66f2991d4807662 on develop** into **8874288ac11bc70fa491439d52a4c307f9388aea on main**.
Code review is ok and test suite passes.
[![Coverage Status](https://coveralls.io/builds/62339263/badge)](https://coveralls.io/builds/62339263)

coverage: 92.487% (-0.01%) from 92.5% when pulling **ff71e4767a1035bc49b4139ec32ba2addd0ad11b on fix/revert-interpolate** into **22a88b64f758bc936e239e285fd63e3f4a9cd4d7 on develop**.
[![Coverage Status](https://coveralls.io/builds/62339606/badge)](https://coveralls.io/builds/62339606)

coverage: 92.487% (-0.01%) from 92.5% when pulling **77f2142eab7cb7e7cdc5ba983295afc9baa65fc7 on develop** into **4a21fd1a9dc4f51ee617f2ea3dc4dd43c905376b on main**.
[![Coverage Status](https://coveralls.io/builds/62340028/badge)](https://coveralls.io/builds/62340028)

coverage: 92.487%. remained the same when pulling **d31147897a5fdc0b80f450b669b541fa29604ee2 on develop** into **96c56e69a97145a58754bfd587f8ee381c024799 on main**.
[![Coverage Status](https://coveralls.io/builds/62547840/badge)](https://coveralls.io/builds/62547840)

coverage: 92.268% (+0.05%) from 92.215% when pulling **35933b6a25fa8a32459a34bcee9c608bfcb56649 on fix/issue-499** into **7b5d7f933dc91fd43d744f06d2282860ee53aa38 on develop**.
:+1:  this is exactly what I had in mind after hearing about the issues: Add a feature flag to enable/disable it
Do you maybe know when this fix might be pushed into release?
> Do you maybe know when this fix might be pushed into release?

We'll try to release next week.
[![Coverage Status](https://coveralls.io/builds/62881339/badge)](https://coveralls.io/builds/62881339)

coverage: 92.268%. remained the same when pulling **3a5952df187e2d9fdb59039868065e6622a07be1 on dependabot/github_actions/develop/actions/checkout-4.1.0** into **e3e7fc9551858d1a41ed21ff7e46245e4f97652c on develop**.
Superseded by #505.
[![Coverage Status](https://coveralls.io/builds/63031858/badge)](https://coveralls.io/builds/63031858)

coverage: 92.268%. remained the same when pulling **b75adf7982f66ca54f94e791bea3eb7c149808dc on dependabot/github_actions/develop/actions/setup-python-4.7.1** into **e3e7fc9551858d1a41ed21ff7e46245e4f97652c on develop**.
[![Coverage Status](https://coveralls.io/builds/63581412/badge)](https://coveralls.io/builds/63581412)

coverage: 92.612%. remained the same when pulling **8ea08cc3d7c4eca180e94780ad0453c17bb17500 on dependabot/github_actions/develop/actions/checkout-4.1.1** into **b108444c3859e6617f8dace1149dc2ee01dfab7d on develop**.
@dependabot rebase
[![Coverage Status](https://coveralls.io/builds/63598644/badge)](https://coveralls.io/builds/63598644)

coverage: 92.612% (+0.3%) from 92.268% when pulling **79b30c73d6f4e362cb6efb53ad50bd0313e753be on adamchainz:django_5.0** into **e3e7fc9551858d1a41ed21ff7e46245e4f97652c on joke2k:develop**.
Thank you!
Thanks for merging. Can you respond to my question about dropping old versions?
Your PR was set to target `main`, PRs should be target `develop`
The base branch of this PR has been automatically changed to `develop`, please check that there are no merge conflicts.
[![Coverage Status](https://coveralls.io/builds/63553197/badge)](https://coveralls.io/builds/63553197)

coverage: 92.612% (+0.3%) from 92.268% when pulling **54cd3b25cdd02d7f7771f7a4a1a5c63d85f010cd on foarsitter:py312** into **e3e7fc9551858d1a41ed21ff7e46245e4f97652c on joke2k:develop**.
Thank you
Thanks for this one, nvie.
Already discussed at https://github.com/lukaszb/django-guardian/pull/7
Sorry I didn't get back to this. I had to put permissions management in the UI of the app I was working on, not in the admin, and have not had time to try to make it usable there.
Not a problem - as you may see admin integration landed already into master. If you think I've missed something from your fork (or you want to re-discuss ordering for instance) please let me know :)
Incredibly fast! Thanks for those changes, they fix many things and are great!
Thanks for pointing this out. I'll write some note in docs about the flag.
Great! Thanks for that, already patched.
Am curious of course, thanks for sharing the work! I don't have much nonrel experience but once I have some more free time I'll definitely play with it.
There were some kind of trouble with attaching patch. Replied to the email but file just vanished lol. Pull request seems handy so I have done it. Please check out! thanks.

Sorry for the closing the request.
Thanks for your contribution - greatly appreciated! New release is out.
Thank you!
Thanks for this contribution, however I'd really like to see some tests (we have 100% test coverage policy for django-guardian).
Cool, I'd be happy to make the tests, I'll let you know when that's done. A
little bit offtopic, as I've never worked with Sphinx before, how can I test
if the documentation I've added on the method compiles cleanly? Thanks, Rafa

On Thu, Jul 7, 2011 at 7:30 PM, lukaszb <
reply@reply.github.com>wrote:

> Thanks for this contribution, however I'd really like to see some tests (we
> have 100% test coverage policy for django-guardian).
> 
> ## 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/lukaszb/django-guardian/pull/38#issuecomment-1526867
Simply go to the docs directory and try to run: "make html" in terminal.

On Jul 8, 2011, at 12:33 AM, rafadev wrote:

> Cool, I'd be happy to make the tests, I'll let you know when that's done. A
> little bit offtopic, as I've never worked with Sphinx before, how can I test
> if the documentation I've added on the method compiles cleanly? Thanks, Rafa
> 
> On Thu, Jul 7, 2011 at 7:30 PM, lukaszb <
> reply@reply.github.com>wrote:
> 
> > Thanks for this contribution, however I'd really like to see some tests (we
> > have 100% test coverage policy for django-guardian).
> > 
> > ## 
> > 
> > Reply to this email directly or view it on GitHub:
> > https://github.com/lukaszb/django-guardian/pull/38#issuecomment-1526867
> 
> ## 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/lukaszb/django-guardian/pull/38#issuecomment-1526876
Hey man, just wanted to ask how is it going? Do you need any assistance? You may catch me via gtalk or at irc.freenode.net#django-guardian most of the time. Asking as I'd like to make a release next week and would like to see this shortcut in it :)
Hey! I've been stuck finishing a project, but certainly going to finish it
for next week.

I'll ask you if I get stuck, thanks a lot!

Rafa

On Wed, Jul 13, 2011 at 6:25 PM, lukaszb <
reply@reply.github.com>wrote:

> Hey man, just wanted to ask how is it going? Do you need any assistance?
> You may catch me via gtalk or at irc.freenode.net#django-guardian most of
> the time. Asking as I'd like to make a release next week and would like to
> see this shortcut in it :)
> 
> ## 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/lukaszb/django-guardian/pull/38#issuecomment-1566257
Hey! How're you doing? Just wanted to let you know that I am going to finish
my commit tomorrow, is that alright?

Thanks,

Rafa

On Wed, Jul 13, 2011 at 6:59 PM, Rafael Ponieman rafadev@gmail.com wrote:

> Hey! I've been stuck finishing a project, but certainly going to finish it
> for next week.
> 
> I'll ask you if I get stuck, thanks a lot!
> 
> Rafa
> 
> On Wed, Jul 13, 2011 at 6:25 PM, lukaszb <
> reply@reply.github.com>wrote:
> 
> > Hey man, just wanted to ask how is it going? Do you need any assistance?
> > You may catch me via gtalk or at irc.freenode.net#django-guardian most of
> > the time. Asking as I'd like to make a release next week and would like to
> > see this shortcut in it :)
> > 
> > ## 
> > 
> > Reply to this email directly or view it on GitHub:
> > https://github.com/lukaszb/django-guardian/pull/38#issuecomment-1566257
Sure, great and thanks for your contribution!

On Jul 19, 2011, at 7:02 PM, rafadev wrote:

> Hey! How're you doing? Just wanted to let you know that I am going to finish
> my commit tomorrow, is that alright?
> 
> Thanks,
> 
> Rafa
> 
> On Wed, Jul 13, 2011 at 6:59 PM, Rafael Ponieman rafadev@gmail.com wrote:
> 
> > Hey! I've been stuck finishing a project, but certainly going to finish it
> > for next week.
> > 
> > I'll ask you if I get stuck, thanks a lot!
> > 
> > Rafa
> > 
> > On Wed, Jul 13, 2011 at 6:25 PM, lukaszb <
> > reply@reply.github.com>wrote:
> > 
> > > Hey man, just wanted to ask how is it going? Do you need any assistance?
> > > You may catch me via gtalk or at irc.freenode.net#django-guardian most of
> > > the time. Asking as I'd like to make a release next week and would like to
> > > see this shortcut in it :)
> > > 
> > > ## 
> > > 
> > > Reply to this email directly or view it on GitHub:
> > > https://github.com/lukaszb/django-guardian/pull/38#issuecomment-1566257
> 
> ## 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/lukaszb/django-guardian/pull/38#issuecomment-1608691
All done and commited, also, I've fixed a couple of things and re-built and
tested the documentation (only for the get_objects_for_user and
get_objects_for_group).

Rafa

On Tue, Jul 19, 2011 at 2:09 PM, lukaszb <
reply@reply.github.com>wrote:

> Sure, great and thanks for your contribution!
> 
> On Jul 19, 2011, at 7:02 PM, rafadev wrote:
> 
> > Hey! How're you doing? Just wanted to let you know that I am going to
> > finish
> > my commit tomorrow, is that alright?
> > 
> > Thanks,
> > 
> > Rafa
> > 
> > On Wed, Jul 13, 2011 at 6:59 PM, Rafael Ponieman rafadev@gmail.com
> > wrote:
> > 
> > > Hey! I've been stuck finishing a project, but certainly going to finish
> > > it
> > > for next week.
> > > 
> > > I'll ask you if I get stuck, thanks a lot!
> > > 
> > > Rafa
> > > 
> > > On Wed, Jul 13, 2011 at 6:25 PM, lukaszb <
> > > reply@reply.github.com>wrote:
> > > 
> > > > Hey man, just wanted to ask how is it going? Do you need any
> > > > assistance?
> > > > You may catch me via gtalk or at irc.freenode.net#django-guardian most
> > > > of
> > > > the time. Asking as I'd like to make a release next week and would like
> > > > to
> > > > see this shortcut in it :)
> > > > 
> > > > ## 
> > > > 
> > > > Reply to this email directly or view it on GitHub:
> > > > 
> > > > https://github.com/lukaszb/django-guardian/pull/38#issuecomment-1566257
> > 
> > ## 
> > 
> > Reply to this email directly or view it on GitHub:
> > https://github.com/lukaszb/django-guardian/pull/38#issuecomment-1608691
> 
> ## 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/lukaszb/django-guardian/pull/38#issuecomment-1608751
Thanks for this @rafadev, much appreciated! Would like to take a look at changes tomorrow, just before new release. Seems sane at first glance, thanks!
Added one test, done some minor changes, merged and released. Again, thanks for your contribution, Rafael!
Cool, nice to contribute =)

Looking forward to making more contributions. For my own project, I've done
some modifications to the UserAdmin, to incorporate a new inline that allows
me to see a listing of different model instances, and view and select the
ones I want to give a particular user permission to access. I think that
developing some generic interface to extend the user admin in that way would
be really useful. Let me know your thoughts. I can send you the code of what
I've done, although it's specific to my project, and not generic, it might
be interesting.

Rafa

Rafa Mon, Jul 25, 2011 at 7:00 AM, lukaszb <
reply@reply.github.com>wrote:

> Added one test, done some minor changes, merged and released. Again, thanks
> for your contribution, Rafael!
> 
> ## 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/lukaszb/django-guardian/pull/38#issuecomment-1644664
So, why do I want this?
- It looks like raising PermissionDenied is Django's preferred method for generating a 403. It looks like it's the method they'll be using when they add rich error page support for 403s (see: https://code.djangoproject.com/ticket/9847)
- It seems consistent with how we raise Http404 instead of just returning a response
- For folks like me who are implementing a more extensive error handling middleware, catching an exception is more predictable than watching for a 403. The exception won't be visible to any of the other middleware classes, but the 403 status code will be, so I can't be sure that another middleware won't clobber my 403 response, or that I'm clobbering some previous middleware's 403 response.
Let me explain why we use response rather raising an error.

Response is more convenient - it doesn't require error to be handled. Same middleware can both catch _PermissionDenied_ **and** check if _status_code_ is 403. It can be used out of the box (response). That's the main reason it's there in the first place. Moreover, guardian was created with assumption that allowing or disallowing to access objects is (or should be) predictable - exceptions on the other hand are raised to indicate that something went wrong. This should **not** be the case with guardian.

What is the main difference with _get_object_or_404_? This is a function that raises 404, if object does not exist. This is error. Moreover, it's **much** more convenient to raise exception in that case - that function is used inside a view function and can easily break request to response process. Point is - decorator doesn't need this. If user has no permission for requested object, we don't even need to look inside view function.

It also seems like #9847 is bumped since pre 1.2. Conclusion for me is just opposite from yours - there were no decision about changing preferred way of generating 403.

Okey, that's me. Of course I agree that writing own 403.html template would be much simpler than writing whole logic for 403 handler (which I've done some years ago and push to most of projects I work on without much changes). I can also accept this patch after some more discussion/work.

So here we are - I'm not going to change current default behavior. Since version _1.0_ we try not to change it. However, I believe we can add configuration variable for this. Of course I'd need tests for both, default value and custom one (use _mock_ for this).

I hope above explanation is clear enough? Let me know if you'd still want to clarify anything (or proceed with discussion, or flame me, or whatever :)). Anyway, thanks for bringing this up, as I have to admit, that I probably haven't spent enough time on that part in the first place.
I think it's an unacceptably bad user experience to send the user a blank page when they try to access something without permission. I'm resolving that issue myself with my own middleware. I can make it work with the current django-guardian by intercepting empty 4xx responses and turning them into new responses with user-friendly content. This seems less than ideal because it risks clobbering some other code in the project that for whatever reason really wanted to send out an empty 4xx response (for an API, for example).

It seems like it would be slightly nicer if guardian was raising Django's built-in PermissionDenied exception the same way that it raises the Http404 exception via get_object_or_404. There's no risk of clobbering somebody else's response and it looks like it's in line both with how current Django handles permission denied errors and how future Django will implement rendering user-friendly content on 403.

The truth is, django-guardian is not quite production ready for me until it provides a way to send out user-friendly 403 errors itself, or Django adds support for it internally. I don't know what your best option is for fixing this and I'm not prepared to write that patch, but I think this change gets you closer to it. :)
Ok, added possibility to raise _PermissionDenied_. However, using **GUARDIAN_RENDER_403=True** would be easier than catching exceptions at the middleware level. If you'd have any suggestions before I close this one, please let me know.
You are a machine! :D
Yeah, that's amazing. Thank you!
@funkaoshi, taken as complement ;-)

@osirius, ok, closing this one, thanks for your time and again - for pointing out this particular case.
Seems like nice simplification at the first glance... but please consider you have 10k+ users or groups. Browser would drop dead before it can render such dropbox. And we mage _huge_ query just to show user the option.

Sorry, can't merge it. If you can/like to work on another approach (ajax'ed dropbox), well, we'd have another conversation!

Please let me know if you agree with that.
Yes, I feared as much.  I have to agree with you.  I'll be using this change in my current project and thus will keep working on a more refined solution.
Cool, thanks for your feedback!
Thanks man!
That's sane, thanks for the fix!
Thanks, that fix looks cool!

Sorry for not checking it before...
Hey Lukas, can you going to update the version of the library on PyPi? That's where we pull things from normally. It's at 1.0.3 right now, but I think there are a few changes it'd be nice to have access to. Thanks.
the patch had a typo. I forgot the "import" in a one line patch lol.
Anyway, you can add a 

from django.core.exceptions import ImproperlyConfigured

line in view_mixins.py
Cant's see what has been changed at all (using github commits/diff tab on this page). Will try to manually pick changes...
Hi Lukasz,

The fix removes  the `super` call - this is where the action would still 
be carried out before the permission was checked. See line 
https://github.com/danielsokolowski/django-guardian/commit/bb225de9a0457227b9de79d1e09553eaba96e737#L1L90, 
the other changes are cosmetic and feel free to skip them.

On 11/07/2012 09:34, Lukasz Balcerzak wrote:

> Cant's see what has been changed at all (using github commits/diff tab on this page). Will try to manually pick changes...
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/lukaszb/django-guardian/pull/73#issuecomment-6906547

## 

Daniel Sokolowski
Web Engineer
Danols Web Engineering
http://webdesign.danols.com/
Yep, I've closed it due to not being able to merge it automatically anyway. It requires a lot of small updates (add missing tests, docstrings should match with other docstrings out there etc, permission_required should probably be a list, permission checks should be put into extra method that can be overridden, make sure we can change class attributes to control login required view etc.). Hopefully would finish it by tomorrow.
This merge is important to make unit test work if guardian and south are in INSTALLED_APPS together. So please merge it upstream! Thank you!
Will try to check it today, sorry for being not responsive!
Ok, so I'm confused - just checked if there were any problems with current migrations and can't see any (Django 1.4, mock 1.01b, South 0.7.6.

Can you provide more information of how do you run tests, package versions and when the suit fails?
Hi Lukas,

Sorry for not being too explicit in the previous comment. I've run unit tests against my application that uses guardian and south (Django 1.3.1, South 0.7.3).

I've run python manage.py test over my app and I stumbled upon this error:

  File "/usr/lib/pymodules/python2.7/guardian/migrations/0004_auto__del_field_groupobjectpermission_object_id__del_unique_groupobjec.py", line 52, in backwards
    "Cannot reverse this migration. 'GroupObjectPermission.object_id' and its values cannot be restored.")
RuntimeError: Cannot reverse this migration. 'GroupObjectPermission.object_id' and its values cannot be restored.

Using MySQL as database backend.

Let me know if I can help you further here.
Hmm, I'm still confused. What I understand you successfully managed to revert 0005 migration to 0004 and then it crashed because of error raised at 0004 migration's backwards method call. So you've moved exception raising to 0005 and could successfully revert 0004 migration? Is that right?

Not sure if this is proper way to solve the problem here. Moreover, why your tests run migration (backwards!)? This is probably most critical question for me to understand what's going on.
I guess the discussion around this diverged from the original intent of the pull request.
The reason why I opened it is because when using south and mysql you cannot delete a field and a reference to it in the same migration because it will delete the field first and it will fail when trying to delete the reference since the column does no longer exist. Since the 0004 migration was partially run, south will try to rollback and that is the moment when the backwards method raises (naturally) the RuntimeError.
My fix was to simply move deletion of the field itself after the reference to it was deleted so there is no fk constraint error.
Please let me know if you need additional info on this (stacktrace... etc).
PS... I am not sure why you would run migrations within tests either... but I guess that is a different discussion.
I tried to run migration for django-guardian with a mysql db backend, the 0004 you propose mzetea raised a "ValueError: Cannot find a UNIQUE constraint on table guardian_userobjectpermission, columns ['object_id', 'user_id', 'content_type_id', 'permission_id']".
The only way I found to get rid of that was to comment line 18, 21, 24 and 27 of your pull request 0004 file.
(For the moment I'm not in production mode of course ... and I just wanted to pass the migrations to use guardian)
I don't encounter the issue you are describing. Mysql 5.1.x (ubuntu and centos envs) running innodb, strict mode, utf8 for character set and collation.
thanks for your answer. It was my mysql engine set to myisam ...
It happens to me using MySQL 5.5.24-0ubuntu0.12.04.1, InnoDB using UTF8 as character and collation.
@sixstone-qq - I upgraded mysql and cannot reproduce what you are describing. please check latest fk fail in mysql logs or the way the db is defined within django settings...
@lukaszb : Please let me know if you need additional info before merging this. Thanks.
Sorry for not responding for so long. Yeah, changes seems sane, thanks!
Yep, that totally makes sense. Changes however need some tweaks:
1. please do NOT remove "import os" and "abspath = ...." lines from utils.py (it totally breaks the lib as other parts depends on that _abspath_)
2. Please add a test for non authenticated user!
3. Please add yourself to the AUTHORS file :)
No idea why I had removed those lines..
Anyway, as far as I can tell, it looks like this issue was fixed through
some other mechanism. While trying to write a test case to cover the issue
I ran into, I copied with test_user_has_access in decorators_test.py and
made a test that assigned the permission to the anonymous user. It looks
like has_permission works identically on both the User type and the
AnonymousUser type, which if I recall the problem I had
correctly, wasn't the case with the version I was using. As far as I can
tell, replacing get_anonymous_user (as defined in guardian/util.py) with
AnonymousUser (as defined in django.contrib) works interchangeably with
respect to setting and checking user permissions.

On Thu, Oct 18, 2012 at 10:47 AM, Lukasz Balcerzak <notifications@github.com

> wrote:
> 
> Yep, that totally makes sense. Changes however need some tweaks:
> 1. please do NOT remove "import os" and "abspath = ...." lines from
>    utils.py (it totally breaks the lib as other parts depends on that *
>    abspath*)
> 2. Please add a test for non authenticated user!
> 3. Please add yourself to the AUTHORS file :)
>    
>    —
>    Reply to this email directly or view it on GitHubhttps://github.com/lukaszb/django-guardian/pull/78#issuecomment-9573855.
Ok then, I believe we can close this one. Please let me know if the issue re-appear somehow!
There is Documentation section there already. Link to rtfd would be helpful, though, and putting this section to the top of the file seems like a good idea, so if you can merge information (about both, rtfd and packages links) I can pull that. Oh, once you're done, please make sure to smash commits into one (rebase).

Thanks in advance!
+1, but slightly biased :)
This pull request [passes](http://travis-ci.org/lukaszb/django-guardian/builds/2145499) (merged c4cb0e38 into c731681f).
Cool, thanks! Just please add yourself to the AUTHORS file!
This pull request [passes](http://travis-ci.org/lukaszb/django-guardian/builds/2154421) (merged c7332a45 into c731681f).
Sorry for not responding for so long. I wanted to understand use case you're trying to cover and get to conclusion that it's not really best one.

If one would need full set of permissions for particular user (retrieved by model instance attribute, in example) then it might be done at the view level. Or by manual signal. And yet I believe this use case is wrong from the very beginning. If user is an owner of particular instance then permissions should not be checked at all, probably - owner should be able to do anything.

Am closing this as _no go_ for now. Let me know if you had other use case on mind and thanks for the input!
I was trying to find this bug but there is none as far as I can tell. Please note that there is a call to `get_users_with_perms` with proper parameter so we operate on list of users that has at least one object permission (without groups)

```
    users = {}
    for user in get_users_with_perms(obj,
            with_group_users=with_group_users):
        users[user] = sorted(get_perms(user, obj))
    return users
```

It would also be much easier to write a simple test case that shows a bug :)
Sorry, this is not a good use case. Owner of the object - if desired - should have specific logic at the view level. Trying to synchronise object permissions is too implicit in my view.
Changes looks cool, thanks man for the contribution!
Hey, thanks for contribution!

Before I merge your changes I would like you to extend them:
1. Add a test that actually breaks before the change
2. Add yourself to AUTHORS
Done, I hope that will be fine.
Yep, that's it! Thanks for a quick fix!
[![Coverage Status](https://coveralls.io/builds/455127/badge)](https://coveralls.io/builds/455127)

Changes Unknown when pulling **edc52c5075a30bd7d4234c49bfc7a7207e1e3621 on rockaboxmedia:master** into *\* on lukaszb:master**.
Closing this one in favor of #119. Am still not sure how to proceed.
I believe that removing this tag will break backwards compatibility with django 1.2x.  Also the url paths that this tag provides will be incorrect in django 1.5 if we do not address those issues.

I have a branch on my fork that I am trying to solve this issue if you want to check it out and maybe work together on it.
Sorry, have to close this one as it breaks compatibility with older Django versions. This commit fixes that: fb474dd489ecea4e467913ea783e350d77ef04e1
Thanks for the input, however I cannot merge that.
1. No tests.
2. Django now supports bulk inserts, they can be used instead of raw sql that works with one backend.

Still, that can be a nice starting point for #52
Thanks for the changes however tests are still failing (see https://travis-ci.org/lukaszb/django-guardian/builds/3907930)

Also, I would really prefer to have a `compat.py` module that would contain things like that and then use `patterns` etc. by importing from that module (I don't want to have multiple places where those compatibility checks occur).

Moreover, please add yourself to AUTHORS file :)
Actually I don't think the CI build executed for the last commit ( 892a3e2faeb11cb8a13da0fc1ba3aff233a466fe ).

Either way I will go ahead add a compat module, it is a much cleaner way to do this check, Thanks.  I will make this change and hopefully the CI build will execute this time.

Thanks for the feedback.
Thanks for this!
Hey, does it break anything if we don't set those attributes?
Technically, only `self.kwargs` needs to get set. If that isn't set and you use the standard Django `SingleObjectMixin` (or any of it's derivatives), when it calls `get_object()`, it checks the `self.kwargs` dictionary for the `pk` and `slug` needed to get the model instance, and breaks because it isn't set. Normally in the base Django `View` class, the first thing done in `dispatch()` is to set all three of these values. Using the Guardian mixin preempts that, and tries calling `get_object()`
Oh, ok, that seems fair. However... this was already merged (I had few heavy merges last few days and seems I forgot about merging those changes). Thanks for the explanation anyway!
I've updated the patch to work with the latest changes, but a many tests are failing because of the user creation.

https://github.com/abec/django-guardian/pull/1
I am still using this patch :). I will have to update it in the near future it seems. There was/is a cyclical dependency that involved compat.py and get_user_model. get_user_model loads all installed apps before inferring the actual model (a known issue in the Django community).
Hmm, just noticed that there are not unit tests for `create_anonymous_user` function. Can you guys add one, i.e. in   example project (for Django 1.5 only)?
Well, this is tested through integration so it looks like good to merge
[![Coverage Status](https://coveralls.io/builds/710068/badge)](https://coveralls.io/builds/710068)

Changes Unknown when pulling **0e123b25a410fcbbedb0e0cface68dfddfcfcbb4 on abec:master** into *\* on lukaszb:master**.
Hey, thanks for the contribution, can you please add a test case against this? Also, it seems like you can simply call `getattr(object, None)` here (we check if `get_object` exist as it's a method). Moreover, please add yourself to 
AUTHORS file.
You're right, I was working from old code. There was a prior fix in there for this. Reverted to that, but added a test to cover it, as the case more closely matches how the SingleObjectMixin views are constructed (the "object" attribute is assigned in their get() call rather than at instantiation), so this covers that.
already fixed https://github.com/lukaszb/django-guardian/pull/116
Yep, thanks for the input anyway!
Amazing! I was going to work on that during the weekend and you've just saved me a beer with friends, sir ;-)

Please add yourself to AUTHORS file and am going to merge that once this is done.
Thanks again!
I'm having a problem with the custom user table:

```
Running migrations for guardian:
- Migrating forwards to 0005_auto__chg_field_groupobjectpermission_object_pk__chg_field_userobjectp.
> guardian:0001_initial
FATAL ERROR - The following SQL query failed: ALTER TABLE "guardian_userobjectpermission" ADD      CONSTRAINT "user_id_refs_id_688a7168df6a89ce" FOREIGN KEY ("user_id") REFERENCES  "myapp_customuser" ("id") DEFERRABLE INITIALLY DEFERRED;
The error was: relation "myapp_customuser" does not exist
```

Here's my user model:

```
class CustomUser(AbstractUser):
....
class Meta:
    db_table = 'custom_users'
```

In my settings.py:

```
AUTH_USER_MODEL = 'myapp.CustomUser'
```

Same case if I inherit from AbstractBaseUser and implement all the necessary fields.
Using the shell:

```
 >>> User = get_user_model()
 >>> print User.objects.all()[0]._meta.db_table
 custom_users
```
Looks good, thanks!
Even smaller changes are always appreciated! Please add yourself to the AUTHORS file and I'll merge those.
I've added myself to AUTHORS, amended my commit and force updated the branch
Thanks!
Nice! Thanks for this, however there is already _example_project_ directory under repository root where for Django 1.5 we use custom user model. You can replace your custom user model with one which is there already. That should do the work.
Should I put the tests in the example project as well? There are no tests in the example project at the moment
Yes please do. Also, update tox.ini file (so it tests guardian _and_ example_project, which should be included to INSTALLED_APPS too). This is strongly coupled integration test anyway.
I'll look into it tomorrow.

But I fear a lot if the unit tests will fail if we swap the user model with
a model without username, because of the test user creation and because it
breaks some admin tests of django-guardian.
Yep, a lot of tests would fail. Have created an issue for that: #124. This is not very urgent, though, so don't worry and take your time.

Thanks for working on this!
I've created an integration_tests app in example_project and move the test there (but left the custom model with username, I think we should change this in #124). I've also added a new tox env, but we probably shoudl add it to travis as well
Unfortunately some tox env fails for me - don't they for you?
Yes they work for me. What env fails for you? 

I think we should add the integration tests to travis, I'm not very familiar with travis, but I'll look into that this weekend
Finally merged this. Thanks again for your work!
Also I tested this against Django 1.5, but did not regression test it (apologies for not doing that).
https://github.com/ArrantSquid/django-guardian/commit/d0d68e7b0fe01ea08a3db3458799b3f6b61e927a was tested against Django 1.4 and 1.5.
Hey, guardian supports Django 1.2+ so if you can confirm it works correctly with Django 1.2 and 1.3 I can merge this. Thanks!
It does not. I'll work on a fix this evening for it.
Great, thank you!
Oh, and while you would be pushing changes just make sure to add yourself to the AUTHORS file
Alright. The last commit is less hacktacular than the first attempt. Honestly, I don't know of a better way to check though, outside of doing something like this (which I don't think is any better):

import django
from distutils.version import LooseVersion
version = django.get_version()
if LooseVersion(version) < LooseVersion('1.4'):
  change behavior
This was already merged (manually) and resolved. Thanks again!
Similar approach in this app - https://github.com/etianen/django-reversion/wiki/Admin-integration
Resurrecting this and pinging the author @lukaszb :)
Ok, sorry mate that this took me so long. Actually, I've been reading this few weeks ago and thought I would reject this. Re-read once again and came to conclusion your description is sane enough. Just few more steps before merge:
1. Please remove details from README. Add a link instead. There are whole sentences copied and this is something that only part of guardian users would benefit from so it should not be at readme.
2. Please break lines after 79 characters.
3. Fix typos.

If point 2 is somewhat inconvenient for you let this to me if you won't do this yourself.

Many thanks for this, by the way!
Well, I gave a second thought about this and unfortunately I need to reject those changes. It's against Python zen after all.

_Explicit is better than implicit_

I would rather see some mixins for admin classes.
[![Coverage Status](https://coveralls.io/builds/752875/badge)](https://coveralls.io/builds/752875)

Changes Unknown when pulling **3b54139efb1366e87dceb8e3aa6812bf8a3f209c on danielsokolowski:monkeypatch_admin_integration** into *\* on lukaszb:master**.
[![Coverage Status](https://coveralls.io/builds/752911/badge)](https://coveralls.io/builds/752911)

Changes Unknown when pulling **3b54139efb1366e87dceb8e3aa6812bf8a3f209c on danielsokolowski:monkeypatch_admin_integration** into *\* on lukaszb:master**.
s/proivde/provide/
s/Thrid/third/
s/great// - for some, monkey patching (however sanely performed) would still not be considered as _great_
s/great// - for some, monkey patching (however sanely performed) would still not be considered as great
Thanks!
Как минимум, нужно выпилить превращение в `set`. А как максимум, переписать запросы.
@dkrnl thanks for this. Still, 1.5s is not impressive ;-) As this is an performance issue, can you provide more information? Like, how long does query take exactly. Bonus: can you please try same (with distinct) for _direct fks_ (https://github.com/lukaszb/django-guardian/blob/master/docs/userguide/performance.rst#direct-foreign-keys) ?

@midiotthimble, hey, that's rude man! Please use english!
@lukaszb I mean, `set` is no need more. And `distinct` may slow with big data.
@lukaszb some "benchmark":

``` sql
SELECT SQL_NO_CACHE `auth_permission`.`codename`
FROM `auth_permission`
INNER JOIN `django_content_type` ON (`auth_permission`.`content_type_id` = `django_content_type`.`id`)
LEFT OUTER
JOIN `guardian_userobjectpermission` ON (`auth_permission`.`id` = `guardian_userobjectpermission`.`permission_id`)
LEFT OUTER
JOIN `guardian_groupobjectpermission` ON (`auth_permission`.`id` = `guardian_groupobjectpermission`.`permission_id`)
LEFT OUTER
JOIN `auth_group` ON (`guardian_groupobjectpermission`.`group_id` = `auth_group`.`id`)
LEFT OUTER
JOIN `auth_user_groups` ON (`auth_group`.`id` = `auth_user_groups`.`group_id`)
WHERE (`auth_permission`.`content_type_id` = 23 AND ((`guardian_userobjectpermission`.`object_pk` = '544902' AND `guardian_userobjectpermission`.`user_id` = 36 AND `guardian_userobjectpermission`.`content_type_id` = `auth_permission`.`content_type_id`) OR (`guardian_groupobjectpermission`.`object_pk` = '544902' AND `auth_user_groups`.`user_id` = 36 AND `guardian_groupobjectpermission`.`content_type_id` = `auth_permission`.`content_type_id`)))
ORDER BY `django_content_type`.`app_label` ASC, `django_content_type`.`model` ASC, `auth_permission`.`codename` ASC;
/* Affected rows: 0  Found rows: 916  Warnings: 0  Duration for 1 query: 1,750 sec. */
SELECT SQL_NO_CACHE DISTINCT `auth_permission`.`codename`
FROM `auth_permission`
INNER JOIN `django_content_type` ON (`auth_permission`.`content_type_id` = `django_content_type`.`id`)
LEFT OUTER
JOIN `guardian_userobjectpermission` ON (`auth_permission`.`id` = `guardian_userobjectpermission`.`permission_id`)
LEFT OUTER
JOIN `guardian_groupobjectpermission` ON (`auth_permission`.`id` = `guardian_groupobjectpermission`.`permission_id`)
LEFT OUTER
JOIN `auth_group` ON (`guardian_groupobjectpermission`.`group_id` = `auth_group`.`id`)
LEFT OUTER
JOIN `auth_user_groups` ON (`auth_group`.`id` = `auth_user_groups`.`group_id`)
WHERE (`auth_permission`.`content_type_id` = 23 AND ((`guardian_userobjectpermission`.`object_pk` = '544902' AND `guardian_userobjectpermission`.`user_id` = 36 AND `guardian_userobjectpermission`.`content_type_id` = `auth_permission`.`content_type_id`) OR (`guardian_groupobjectpermission`.`object_pk` = '544902' AND `auth_user_groups`.`user_id` = 36 AND `guardian_groupobjectpermission`.`content_type_id` = `auth_permission`.`content_type_id`)))
ORDER BY `django_content_type`.`app_label` ASC, `django_content_type`.`model` ASC, `auth_permission`.`codename` ASC;
/* Affected rows: 0  Found rows: 2  Warnings: 0  Duration for 1 query: 0,000 sec. */
```

About database:
Mysql 5.1.56-log

``` csv
Name;Engine;Row_format;Rows;Avg_row_length;Data_length;Index_length
auth_user_groups;MyISAM;Fixed;141;13;1833;10240
auth_group;MyISAM;Dynamic;20;31;628;5120
auth_permission;MyISAM;Dynamic;147;66;9796;11264
django_content_type;MyISAM;Dynamic;49;54;2660;8192
guardian_groupobjectpermission;MyISAM;Dynamic;3642;25;92832;191488
guardian_userobjectpermission;MyISAM;Dynamic;1667;25;42720;101376
```
EXPLAIN SELECT SQL_NO_CACHE ...:

``` csv
id;select_type;table;type;possible_keys;key;key_len;ref;rows;Extra
1;SIMPLE;django_content_type;const;PRIMARY;PRIMARY;4;const;1;
1;SIMPLE;auth_permission;ref;content_type_id;content_type_id;4;const;3;Using where
1;SIMPLE;guardian_userobjectpermission;ref;permission_id_refs_id_8352772a;permission_id_refs_id_8352772a;4;nedvigus-dev.auth_permission.id;152;
1;SIMPLE;guardian_groupobjectpermission;ref;permission_id_refs_id_35b560df;permission_id_refs_id_35b560df;4;nedvigus-dev.auth_permission.id;243;Using where
1;SIMPLE;auth_group;eq_ref;PRIMARY;PRIMARY;4;nedvigus-dev.guardian_groupobjectpermission.group_id;1;Using index
1;SIMPLE;auth_user_groups;ref;group_id_refs_id_f0ee9890;group_id_refs_id_f0ee9890;4;nedvigus-dev.auth_group.id;12;Using where
```

EXPLAIN SELECT SQL_NO_CACHE DISTINCT...:

``` csv
id;select_type;table;type;possible_keys;key;key_len;ref;rows;Extra
1;SIMPLE;django_content_type;const;PRIMARY;PRIMARY;4;const;1;Using temporary; Using filesort
1;SIMPLE;auth_permission;ref;content_type_id;content_type_id;4;const;3;Using where
1;SIMPLE;guardian_userobjectpermission;ref;permission_id_refs_id_8352772a;permission_id_refs_id_8352772a;4;nedvigus-dev.auth_permission.id;152;Distinct
1;SIMPLE;guardian_groupobjectpermission;ref;permission_id_refs_id_35b560df;permission_id_refs_id_35b560df;4;nedvigus-dev.auth_permission.id;243;Using where; Distinct
1;SIMPLE;auth_group;eq_ref;PRIMARY;PRIMARY;4;nedvigus-dev.guardian_groupobjectpermission.group_id;1;Using index; Distinct
1;SIMPLE;auth_user_groups;ref;group_id_refs_id_f0ee9890;group_id_refs_id_f0ee9890;4;nedvigus-dev.auth_group.id;12;Using where; Distinct
```

Reason: explain is almost equal, slowing is in fetching big queryset result (916 rows).
Hey, can we close this as of https://github.com/lukaszb/django-guardian/pull/134 being merged already?
yes, close this pull request.
Nice idea! :+1: better than [my pull request](https://github.com/lukaszb/django-guardian/pull/133). But travis build failed :(
@dkrnl really better than distinct :)
@reavis thanks for that! Few things before I can merge this:
1. Add yourself to the `AUTHORS` file
2. Add a comment telling why we do separate queries for user and group perms (so when someone in future would look at this, wouldn't have this great idea in mind _hey, let's just make it single query!_)
3. Optional: I would refactor variables assignments (two lines with same variable being assigned is not very clear at first glance, would rather see it first user/group_perms being user/group_perms_qs, you can also use `values_list("codename", flat=True)` instead of ugly chaining)

Thanks!
@lukaszb, thanks for the feedback. I will make those changes, rebase to clean up the history, and issue a new pull request in the next day or two.
@reavis thanks, however you can re-use same pull request - simply force push changes in same branch. I prefer that over having to handle with another pull request. Thank you again for working on that, I really appreciate this!
I think this pull request should be up to snuff now. @lukaszb, let me know if you'd like me to tweak anything else.
Thanks!
Thanks!
[![Coverage Status](https://coveralls.io/builds/76482/badge)](https://coveralls.io/builds/76482)

Coverage decreased (-0%) when pulling **52e5d60248642f844256e83265cfd02ab48ae521 on ggreer:faster_get_objects_for_user** into **4452a5d89f5dc0ea3238cd18eb7ccf906e41ca27 on lukaszb:master**.
[![Coverage Status](https://coveralls.io/builds/76498/badge)](https://coveralls.io/builds/76498)

Coverage decreased (-0%) when pulling **748af90c3a655d3cc567d70e94fd31c06929ad5d on ggreer:faster_get_objects_for_user** into **4452a5d89f5dc0ea3238cd18eb7ccf906e41ca27 on lukaszb:master**.
I'm very interested in this improvement so I applied this to our app, but unfortunately this patch doesn't work well in some situations with RDBMSs such as PostgreSQL, since type of the `object_pk` column of object permission table is `CharField`(i.e. `varchar(255)`) and models' id type is integer, resulting a type error like `ERROR:  operator does not exist: integer = character varying`. I'm so sorry that I don't have enough experience in django ORMs or python to fix this problem.
@beingryu Hmm... I'm using postgres and I don't have that problem. I'd appreciate more information on the issue. I don't think I have a particularly unusual django db. My models look like this: http://abughrai.be/pics/django_models.png (the django guardian stuff is responsible for most of the tables).
[![Coverage Status](https://coveralls.io/builds/299071/badge)](https://coveralls.io/builds/299071)

Coverage increased (+0.1%) when pulling **078191c3db0e722048f0f62f70aed5dc0ff259a5 on ggreer:faster_get_objects_for_user** into **4f7f4d306a39acd1c78df2ffe606de34a4fd70e7 on lukaszb:master**.
Overall I like the changes, however they are actually failing for me with PostgreSQL (I use 9.3.0; they're fine for sqlite, though). Could you possibly fix them? (Hint: in order to run tests against postgresql just use tox: `fox -e postgresql`)

Also, please add yourself to `AUTHORS` file.
I think that covers it. Do you want me to squash the commits?
Oh, I also had an unrelated test fail. GroupPermissionTests.test_assign_perm_validation tries to create a user whose username is 32 characters long. Django's default maximum is 30 characters.
Does this issue relate to my problem too? : https://github.com/lukaszb/django-guardian/issues/189
Thanks!
Well, I thank YOU. Good job there and sorry for not merging it earlier!
No worries; I've neglected pull requests longer than this. :) 

Though I am glad others get to benefit from this performance improvement.
This is not required as `ContentType.objects.get_for_model` already has cache mechanism (see https://docs.djangoproject.com/en/1.6/ref/contrib/contenttypes/#django.contrib.contenttypes.models.ContentTypeManager.get_for_id but codes would tell you more I guess). Please remove it.
[![Coverage Status](https://coveralls.io/builds/85877/badge)](https://coveralls.io/builds/85877)

Coverage decreased (-0%) when pulling **8f46c9b45d3fbf0926ea3ef0cfef225925cc94b2 on lfaraone:lfaraone-noanon** into **4452a5d89f5dc0ea3238cd18eb7ccf906e41ca27 on lukaszb:master**.
[![Coverage Status](https://coveralls.io/builds/86011/badge)](https://coveralls.io/builds/86011)

Coverage decreased (-0%) when pulling **8f46c9b45d3fbf0926ea3ef0cfef225925cc94b2 on lfaraone:lfaraone-noanon** into **4452a5d89f5dc0ea3238cd18eb7ccf906e41ca27 on lukaszb:master**.
Hello!

Would it be also possible somehow just to defer creation of AnonymousUser? I have a custom user derived from AbstractBaseUser with multiple REQUIRED_FIELDS. I don't want to sacrifice AnonymousUser functionality entirely, I just need to create AnonymousUser later, after syncdb, within custom manage script and with all required fields.

Michal
> Would it be also possible somehow just to defer creation of AnonymousUser?

Someone could implement that, sure. Its not particularly germane to my use case (only logged-in users should have access rights), though.

Could you accomplish what you're trying to do by setting a default value for those `REQUIRED_FIELDS`?
That's something unusual, indeed. Do you at any point manipulate `ObjectPermissionChecker` instance directly? I've just scanned codes briefly and cannot find line that could cause that.

Would definitely need some explanation how can I reproduce this.
Sorry, I made a deeper research and it was my fault. Stupid mistake, I haven't emptied a dict.
[![Coverage Status](https://coveralls.io/builds/141274/badge)](https://coveralls.io/builds/141274)

Coverage decreased (-0%) when pulling **4c0203a9644c075f95d71b1e110121c7d086b6b5 on aweakley:master** into **d5703a1c964f4f1145d1800468db5352dacfaa18 on lukaszb:master**.
Sorry for late response. I would accept this but please add tests. Also, please add yourself to `AUTHORS` file
Closing as there were no response in a long time. Let me know if that's still a requested feature.
[![Coverage Status](https://coveralls.io/builds/165314/badge)](https://coveralls.io/builds/165314)

Coverage decreased (-0%) when pulling **abc3be5129544888a87be0e0791ba84992877629 on yetty:master** into **d5703a1c964f4f1145d1800468db5352dacfaa18 on lukaszb:master**.
Overall I'm fine with those. Please refer to the inline comments above and also add yourself to the `AUTHORS` file.
Closing as there were no response in a long time. Let me know if that's still a requested feature.
I would use `guardian.tests.conf.override_settings` to set concrete `settings.LOGIN_URL` and use `assertRedirects` instead of simply checking for status code.
Please revert those changes - this is style only, not related to actually proposed changes
I would definitely refuse to merge those changes with such name. I would rather see something like `redirect_anonymous_only` or something.
Hey, thanks for this contribution. It breaks unfortunately so if you could fix tests I would gladly merge this
Tests are fixed, please try again.
Hmm, cannot see another commit (with fixed tests). Can you please make sure you've pushed it?
Just pushed it, sorry for that.
[![Coverage Status](https://coveralls.io/builds/276246/badge)](https://coveralls.io/builds/276246)

Coverage decreased (-0.37%) when pulling **64dcba82b9f8c780474087a5d6205ba30bbc5216 on florentin:master** into **d5703a1c964f4f1145d1800468db5352dacfaa18 on lukaszb:master**.
Unfortunately they are failing for Django < 1.5

Can you possibly fix those?
Bump! :-)
Thanks for the fix, I've merged it to `devel` branch
[![Coverage Status](https://coveralls.io/builds/203166/badge)](https://coveralls.io/builds/203166)

Coverage decreased (-0.21%) when pulling **fda3096b16249b1ac820765a4dcc92d94172ce4f on yceruto:patch-1** into **d5703a1c964f4f1145d1800468db5352dacfaa18 on lukaszb:master**.
Thanks for this contribution! Please also extend docstring and add yourself to the AUTHORS file.
Closing in favour of https://github.com/lukaszb/django-guardian/pull/172 (as this one is pretty old by now and new PR has some docs)
[![Coverage Status](https://coveralls.io/builds/225314/badge)](https://coveralls.io/builds/225314)

Coverage decreased (-0.14%) when pulling **c2a97befa491e498bf27912a6cf1343ca40aa896 on thepapermen:master** into **c638557c3334fe19697928048bf77189cd934b34 on lukaszb:master**.
[![Coverage Status](https://coveralls.io/builds/266107/badge)](https://coveralls.io/builds/266107)

Coverage remained the same when pulling **0d5f9d2141fc96505f2b7e6566ac9a18d212ac49 on migueldvb:docs** into **c638557c3334fe19697928048bf77189cd934b34 on lukaszb:master**.
Can you please motivate those changes (I'm not saying they're wrong, just asking if it actually matters to show to the user where the models are from)?
I think it is useful for new users to see how to import the User and Group models if they are following the tutorial in the interactive shell.
[![Coverage Status](https://coveralls.io/builds/267066/badge)](https://coveralls.io/builds/267066)

Coverage decreased (-0.13%) when pulling **ba2270af3be140196a9b861003af961ed5b3508a on mfa:master** into **c638557c3334fe19697928048bf77189cd934b34 on lukaszb:master**.
[![Coverage Status](https://coveralls.io/builds/282992/badge)](https://coveralls.io/builds/282992)

Coverage decreased (-0.07%) when pulling **bf816667257e6fd904ef9a8e29074455cd86071b on ocanbascil:patch-1** into **0d01c9a5a04e6bf33fdc9899040ac9ce0a47c7b0 on lukaszb:master**.
Thanks!
[![Coverage Status](https://coveralls.io/builds/1847332/badge)](https://coveralls.io/builds/1847332)

Coverage decreased (-3.26%) to 92.66% when pulling **34a4637d3b751c4a3fc8e28e3a9d2e5c28318522 on mobstac:master** into **0d01c9a5a04e6bf33fdc9899040ac9ce0a47c7b0 on lukaszb:master**.
[![Coverage Status](https://coveralls.io/builds/1847332/badge)](https://coveralls.io/builds/1847332)

Coverage decreased (-3.26%) to 92.66% when pulling **34a4637d3b751c4a3fc8e28e3a9d2e5c28318522 on mobstac:master** into **0d01c9a5a04e6bf33fdc9899040ac9ce0a47c7b0 on lukaszb:master**.
[![Coverage Status](https://coveralls.io/builds/302811/badge)](https://coveralls.io/builds/302811)

Coverage decreased (-0.14%) when pulling **98e3dc878fc176c8aa359c196a437e90b6f1b430 on mojeto:master** into **4f7f4d306a39acd1c78df2ffe606de34a4fd70e7 on lukaszb:master**.
Right, so I am going to accept this change but please update changes according to line notes. Also, please add yourself to the `AUTHORS` file.
Newline missing before this line
It seems description is wrong. If `accept_global_perms` would be set to `True`, then mixing would first check for global perms, if none found, then it will proceed to check object level permissions. Please update.
[![Coverage Status](https://coveralls.io/builds/313766/badge)](https://coveralls.io/builds/313766)

Coverage remained the same when pulling **6e69a45f17a5a7f38c07b06eee558f60bc9397e3 on yceruto:patch-2** into **6af4f4b94372798649f7a3423e5759c5bb2dcebf on lukaszb:master**.
[![Coverage Status](https://coveralls.io/builds/319233/badge)](https://coveralls.io/builds/319233)

Coverage remained the same when pulling **aa3ea26a14f2eaa131436d4f63cff59ea8e0b497 on jwegis:patch-1** into **483aeab1347ebec73dc56014530406c4fa55d0c6 on lukaszb:devel**.
Thanks!
And thank you for django-guardian!

On Thu, Nov 14, 2013 at 2:45 PM, Lukasz Balcerzak
notifications@github.comwrote:

> Thanks!
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/lukaszb/django-guardian/pull/175#issuecomment-28530671
> .
[![Coverage Status](https://coveralls.io/builds/328611/badge)](https://coveralls.io/builds/328611)

Coverage remained the same when pulling **6c4d025abfc82d4cd3834d69dab1476dcead969a on irgmedeiros:patch-1** into **bc95b260c6f81c3a5faa16a1a6dda48c57cf499c on lukaszb:devel**.
Thanks!
[![Coverage Status](https://coveralls.io/builds/342999/badge)](https://coveralls.io/builds/342999)

Coverage decreased (-0.04%) when pulling **f1e7378b86ebdc5ac75146dfa7913724c3c97615 on lfaraone:lfaraone-get-filtered-users** into **4978dda1adf8862d082e8808bb448e88c5e8bee8 on lukaszb:devel**.
Hey, sorry for late response.

Overall it looks fine. However I would like to clarify one thing: if we pass two permission codenames but user has only one of them for given object, user would still be returned by this shortcut. Following test shows what I have on mind:

https://github.com/lukaszb/django-guardian/blob/pr/178/guardian/tests/shortcuts_test.py#L222

So my question is - was that intended? As added documentation doesn't specify this and name of the parameter can suggest different behaviour.

In fact, I would expect this new test case to pass as I see this as valid use case (one passes list of all permissions that user must have for a given object in order to do something ...). If so, please updated docstring and fix implementation.

Additionally, please refer to inline comments.

Thanks!
Closing as there were no response in a long time. Let me know if that's still a requested feature.
you can create key before the loop.

Also, please do one query instead of N where N is number of given permissions (do query before the loop)
[![Coverage Status](https://coveralls.io/builds/356796/badge)](https://coveralls.io/builds/356796)

Coverage remained the same when pulling **3ab915e48964d9b5a19ccda6cd3ebca78433da6f on nickers:devel** into **4978dda1adf8862d082e8808bb448e88c5e8bee8 on lukaszb:devel**.
Hej, thanks for contribution. However, have to ask - how can I check the translations? Had added https://github.com/mbi/django-rosetta app to example project but cannot see polish translations there (well, they are 0% done).
[![Coverage Status](https://coveralls.io/builds/407056/badge)](https://coveralls.io/builds/407056)

Coverage decreased (-0.54%) when pulling **fd6d9c667c314d955d9e52019ffd15dd4f6c7d57 on nickers:devel** into **4978dda1adf8862d082e8808bb448e88c5e8bee8 on lukaszb:devel**.
I failed miserably! Translation file was empty. Sorry for that and thanks for checking.

There is one translation that need to be checked before merging this. It is my first time with pull request and I did not know it would be updated automatically with my branch.

In project where I used these translations everything worked, guess I mixed guardian's translation with mine project translation.
Np, thanks for translations!
Yeah, thanks for this. I still need to ask for a few improvements, please:
- create pull requests against `devel` branch
- make sure all tests passes
- write a test case that shows improvement in queries being issued when using `User.has_perm` method
- add yourself to `AUTHORS` file
Actually, I would close this PR as changes would require new one (against `devel` branch).
[![Coverage Status](https://coveralls.io/builds/381857/badge)](https://coveralls.io/builds/381857)

Coverage remained the same when pulling **fe0328ce6d9fbf48b962ddef109b1c94b6d38e86 on luzfcb:add-pt_BR-translation** into **ed5617e6a1f0a2f89db8a04e1ef7510dc957de66 on lukaszb:devel**.
Thanks!
[![Coverage Status](https://coveralls.io/builds/394176/badge)](https://coveralls.io/builds/394176)

Coverage increased (+0.02%) when pulling **960bf7ba165cfd437d40107dca31f7ec85ea4405 on hansl:devel** into **ed5617e6a1f0a2f89db8a04e1ef7510dc957de66 on lukaszb:devel**.
Makes sense, thanks!
[![Coverage Status](https://coveralls.io/builds/410378/badge)](https://coveralls.io/builds/410378)

Coverage decreased (-0.05%) when pulling **46695de475d34da73eac9f8067e7661ab029e358 on moemen:devel** into **52dbecbc996d5ae3375d0df6334b58b17508a575 on lukaszb:devel**.
Hmm, actually, I've decided to remove those methods.

They were not documented nor used anywhere at the codebase. And as you've pointed out, they could be understood wrongly (which is my fault only) - they were supposed to return object level permissions that are associated with **model** (as opposed to _instance_), which doesn't make much sense and could lead to security problems if someone would use those.

Normally, I would deprecate them first, however this sounds like trouble for future users.

Overall, I appreciate greatly that you spend time and created this pull request.

Do you think there is any reason we should leave those methods? Aren't functions from `guardian.shortcuts` not enough? Particularly, I have `get_perms` and `get_perms_for_model` on mind.

Am closing this for now. If you have any comments, please let me know. Thanks again for bringing this up!
[![Coverage Status](https://coveralls.io/builds/434719/badge)](https://coveralls.io/builds/434719)

Coverage remained the same when pulling **b1ebe8d886a6f9bd024290f145a80c85401c7178 on kostko:devel** into **52dbecbc996d5ae3375d0df6334b58b17508a575 on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/434719/badge)](https://coveralls.io/builds/434719)

Coverage decreased (-0.1%) when pulling **b1ebe8d886a6f9bd024290f145a80c85401c7178 on kostko:devel** into **52dbecbc996d5ae3375d0df6334b58b17508a575 on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/434732/badge)](https://coveralls.io/builds/434732)

Coverage decreased (-0.1%) when pulling **7ae0aea2b98cd054370e7ce4e87c3e8dcfb2de10 on kostko:devel** into **52dbecbc996d5ae3375d0df6334b58b17508a575 on lukaszb:devel**.
While I can't think of any use case (beside some metaprogramming chaos magic ;-)) I appreciate the refactor as it simplifies that method. Thanks!
[![Coverage Status](https://coveralls.io/builds/435222/badge)](https://coveralls.io/builds/435222)

Coverage remained the same when pulling **032533512f07e368d061b6e5c58364e84c5f9c6c on ellmetha:devel** into **52dbecbc996d5ae3375d0df6334b58b17508a575 on lukaszb:devel**.
Hey, thanks for those! Sorry for not responding earlier. The problem I have is... I simply cannot verify those :/ would need one more person to look into this. Do you know anyone who can help out?
I am French (yes, with an 'F') and I approve these translations.
Thank you both guys!
hanging pyc had me thinking this was broken, so i closed it. Fixed that and now it works. yay?
Well, this is good idea, however I would still prefer to import such modules from one place. And in case mock cannot be imported at all, simply don't import it as it won't be used outside of tests anyway.

The other idea is to create `devcompat.py` module, not `mock_compat.py`.
I thought about test_compat.py, but didn't do it because that would take a
deeper understanding of the code, would be a larger change and I am
currently working under a deadline. I could take a stab at it in a few
days.
On Jan 21, 2014 2:03 AM, "Lukasz Balcerzak" notifications@github.com
wrote:

> Well, this is good idea, however I would still prefer to import such
> modules from one place. And in case mock cannot be imported at all, simply
> don't import it as it won't be used outside of tests anyway.
> 
> The other idea is to create devcompat.py module, not mock_compat.py.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/lukaszb/django-guardian/pull/193#issuecomment-32834892
> .
Fixed at e8439d7cf253d9e9867504db808aa84564db0eb7
Thanks for that!
Great, thanks for working on this.

Few things still need to be done here:
- add Django 1.7 trunk to travis and tox configs in a similar way we have added not final releases of Django before (you can check history of .travis.yml or tox.ini to see how we added deps that were not yet available from PyPI)
- run tox locally to make sure everything works
- add yourself to the AUTHORS file

Let me know in case need any assistance with those.
I'll do that this evening.
Would be great, thank you so much!
@lukaszb somme feedback about this week end. I managed to get most of the builds green with tox. I'll update the PR this evening.

However, it looks like I have issues setting up 3 envs:
- custom-user-model
- no-tests-app
- migrations

Is there some script to build those 3 envs ? doing incremental error / installation cycle takes forever :(
PR updated.
[![Coverage Status](https://coveralls.io/builds/507458/badge)](https://coveralls.io/builds/507458)

Coverage remained the same when pulling **0b915309308543225aae8e380f07c50747e2e232 on linovia:feature/django_1_7** into **52dbecbc996d5ae3375d0df6334b58b17508a575 on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/507458/badge)](https://coveralls.io/builds/507458)

Coverage remained the same when pulling **0b915309308543225aae8e380f07c50747e2e232 on linovia:feature/django_1_7** into **52dbecbc996d5ae3375d0df6334b58b17508a575 on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/507458/badge)](https://coveralls.io/builds/507458)

Coverage remained the same when pulling **0b915309308543225aae8e380f07c50747e2e232 on linovia:feature/django_1_7** into **52dbecbc996d5ae3375d0df6334b58b17508a575 on lukaszb:devel**.
Overall, **great work**! I am really glad you had found time to work on this.

Please let me know what's with this `pillow` package (reply to the inline comment) and remember to add yourself to the AUTHORS file.
Oh, you've also pointed me into something - we should not monkey patch User model. That was my debugging helpers (which, IIRC, I also use at tests, unfortunately). That's totally another story, though (#199).
Checking Django version could be done simpler `django.VERSION >= (1, 7)`
Why pillow here?
It was required for the image field tests. Django 1.7 wouldn't run without (can't remember whether it was for python 3.x or any version).
Indeed ! I can't remember why I did this :(
Hmm, but still. Is it only for Django 1.7? Is it only for allowing Django test suite to pass?

I believe this can be removed (as we don't test whole Django). If someone would need to run whole Django test suite, she can add it herself.

I hope you can agree that we don't need guardian users to always install pillow :)
It's just for the tests, not for a regular installation, is it ?
As a side note, I'll try tonight to see if I can remove it.
Oups, yep, you're right. Not sure why I got the impression this is for all requirements, my bad.

Would be glad if it can be removed but I would merge those changes anyway.
Makes sense, thanks for the pull request!
Hey @guettli, can you please provide a failing-before-changes test? Or at least an example of a model that you believe is not supported by guardian? That would definitely be a bug and would require a fix
I just upgraded and have the same issues.  We use a MAC address as a primary key for our app.... ie:

```
class Host(models.Model):
    mac = MACAddressField('Mac Address', primary_key=True)
    hostname = models.CharField(max_length=255, unique=True, validators=[validate_hostname], db_index=True)
    description = models.TextField(blank=True, null=True)
.....
```
Any status on this patch?

#217 is my contribution.....fyi
We need tests. Anyone can write those, not necessary the original author.
Added a pull with tests here: #253
Hey, thanks for the changes, yeah, we definitely need to update those.

However, as we also need to support older Django versions, we probably simply need to create an alias methods.

So, as you've already renamed methods can you please re-add `queryset` methods that simply call `get_queryset` methods? This way we would still be able to support older Django versions.

(Sorry for such late response, btw)
@lukaszb Done! I don't think it is the cleanest code, but I'm not sure if there is any other way to support multiple versions in the same code.
Fixes #262 #261
Hey,

Nice work with the patchset! Is there a schedule for merging (and releasing a new version for pypi)? The deprecation warnings produce quite a bit of output in a test setup which runs multiple tests, would be nice to get rid of those :)
As a stop gap, Has anyone here found a way to successfully `warnings.filterwarnings('ignore'...` this? I have tried various combinations and still can't suppress the deprecation warning.  Is it because of the mixin being subclasses and not caught with `module`?

``` python
    from django.utils.deprecation import RemovedInDjango18Warning
    # tried with RemovedInDjango18Warning and DeprecationWarning
    warnings.filterwarnings(
        "error", category=DeprecationWarning,
        module='myapp.models'
    )

    warnings.filterwarnings(
        "error", category=DeprecationWarning,
        module='django.forms.widgets'
    )

    warnings.filterwarnings(
        "error", category=DeprecationWarning,
        module='guardian.admin'
    )

```
https://github.com/lukaszb/django-guardian/pull/267 should fix this.
Should be fixed now.
Generally I like those changes. Can you please align with current upstream and add yourself to the authors file? Sorry for not looking into it earlier and thanks for the PR!
I'll get myself a fresh fetch and get that going. Thanks for an awesome package!
no need for caps ;-)
I'm sorry I forgot to run the tests, it brakes guardian, I'm going to study how to fix this properly.
Thanks!
It's a problem either way.
My pk might be a varchar.
The real problem is that Django ORM does not support type casting.
I guess I'm unclear as to why we are casting these to an int at all if they are generic?  If the PKs are ints, let them be, likewise if they are varchar.
So how is it more generic if the pk is a string? You can't compare a string with an integer.
You can cast an integer to a string though.
No I agree, I just don't understand why we are trying to convert instead of just letting the Django ORM do it.  I am using MAC addresses as primary keys in an app I have in which the ORM converts them to a string (::text in postgres) to do a comparison.  We shouldn't need to force converting to INT or vice versa.
Because the ORM does not coherce values (not really).
All right, this make sense however I would need a test for this before merging.
Added a pull with tests here: #253
why `user_model` is used instead of `group_model` here?
[![Coverage Status](https://coveralls.io/builds/801369/badge)](https://coveralls.io/builds/801369)

Coverage remained the same when pulling **77afe4ab518c180a13c10d08ea5d870ad422145c on quamilek:devel** into **dc55dac8f29e2a5c6b3d747f9fa9bcb352f803c0 on lukaszb:devel**.
Thank you!
This is in reference to #219
So, for reference #219, how do we temporarily 'fix' this? 

"django.core.exceptions.ImproperlyConfigured: AUTH_USER_MODEL refers to model 'myapp.MyCustomUser' that has not been installed"
I'm looking into the travis errors.
[![Coverage Status](https://coveralls.io/builds/815799/badge)](https://coveralls.io/builds/815799)

Coverage decreased (-0.07%) when pulling **61f192be8d973a1a14fa85c6e2ad812268733108 on emperorcezar:devel** into **dc55dac8f29e2a5c6b3d747f9fa9bcb352f803c0 on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/815844/badge)](https://coveralls.io/builds/815844)

Coverage decreased (-0.1%) when pulling **75fa1437f603c79d82c86b4822f5393bf8c42cf0 on emperorcezar:devel** into **dc55dac8f29e2a5c6b3d747f9fa9bcb352f803c0 on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/816454/badge)](https://coveralls.io/builds/816454)

Coverage decreased (-0.03%) when pulling **7147b77107bfea7adfd44752ac23e9428bd94d22 on emperorcezar:devel** into **dc55dac8f29e2a5c6b3d747f9fa9bcb352f803c0 on lukaszb:devel**.
Great, thanks for all the work. I will review the changes within a day.
Done with the review. Really like the changes, thanks for your hard work and keeping an eye on travis alerts, I really appreciate that!

All notes are minor but would be great if you can look at them.
[![Coverage Status](https://coveralls.io/builds/819058/badge)](https://coveralls.io/builds/819058)

Coverage decreased (-0.03%) when pulling **5ffe9b8b9369e901006719d43ebb000469991693 on emperorcezar:devel** into **dc55dac8f29e2a5c6b3d747f9fa9bcb352f803c0 on lukaszb:devel**.
Made the changes. Any idea when this will get merged in? I'd like to pull from this repo for our deployments instead of a fork.

There is also #221
Done, thank you very much for those changes!
Please import settings module and use `settings.MONKEY_PATCH` instead of importing `MONKEY_PATCH` directly.

By directly importing "primitive" objects users cannot dynamically change behaviour in runtime (well, after the imports of course). For example, we won't be able to change it at tests easily.
Please separate imports. I know this is minor but that's how I prefer it and would be more consistent with other modules.

(my justification: it's easier for looking at the diffs [one remove/addition instead of both remove and addition] and also keeping imports sorted and "human searchable")

This comment apply to the other imports with multiple names being imported in a single line (if any)
use `settings.MONKEY_PATCH`, see comment above
separate import lines
spaces between `=` sign
Please add a comment that we do import here as `AbstractUser` is available since Django 1.5
can we use method decorator instead? We don't use not mocked `get_user_model` function so it's ok and we won't have extra indent level
[![Coverage Status](https://coveralls.io/builds/817047/badge)](https://coveralls.io/builds/817047)

Coverage decreased (-0.03%) when pulling **609b0ba106be741dfdf55b94092fec921074a029 on emperorcezar:migrations_db_type** into **dc55dac8f29e2a5c6b3d747f9fa9bcb352f803c0 on lukaszb:devel**.
Any news on this one? The Travis error is an error pulling from pip, I can't restart the job.
Updated it to separate out the imports.
Split imports please :)
Ha.  So use to PyCharm doing my work for me.
On Jun 5, 2014 3:31 PM, "Lukasz Balcerzak" notifications@github.com wrote:

> In guardian/migrations/0001_initial.py:
> 
> > @@ -2,7 +2,9 @@
> >  from south.db import db
> >  from south.v2 import SchemaMigration
> > 
> > -from guardian.compat import user_model_label
> > +from guardian.compat import user_model_label, get_user_model
> 
> Split imports please :)
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/lukaszb/django-guardian/pull/221/files#r13462609.
[![Coverage Status](https://coveralls.io/builds/846209/badge)](https://coveralls.io/builds/846209)

Coverage remained the same when pulling **1597208ae9f4f7019af5924d1b9bd25bdfdd3cb3 on Lacrymology:docs-typo** into **83f61f8ab71c7c81e5ad8f4b6f8a76b5728b2ae8 on lukaszb:devel**.
thanks!
can you also provide a test for those changes?
[![Coverage Status](https://coveralls.io/builds/854810/badge)](https://coveralls.io/builds/854810)

Coverage decreased (-0.0%) when pulling **cfa4404c975bbe9b2e7354344504096eb6b9d628 on wvolz:permredirectfix** into **13fddfa22a6d3ea02b744f4dd3de45374fff9dc1 on lukaszb:devel**.
just committed tests that should work.
[![Coverage Status](https://coveralls.io/builds/858894/badge)](https://coveralls.io/builds/858894)

Coverage decreased (-0.5%) when pulling **99da60b320e2e9c73d2dc1291d1807c9adaae270 on wvolz:permredirectfix** into **13fddfa22a6d3ea02b744f4dd3de45374fff9dc1 on lukaszb:devel**.
oops... setting LOGIN_URL to a class only works on Django versions >= 1.5. Working on new test case.
[![Coverage Status](https://coveralls.io/builds/859028/badge)](https://coveralls.io/builds/859028)

Coverage decreased (-0.01%) when pulling **b1e56f939da7dfc1a94706afa152b0538372c78a on wvolz:permredirectfix** into **13fddfa22a6d3ea02b744f4dd3de45374fff9dc1 on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/885937/badge)](https://coveralls.io/builds/885937)

Coverage increased (+0.18%) when pulling **ef448fa3ad9dcbe6332763d65f2683a57aeffc9d on wvolz:permredirectfix** into **13fddfa22a6d3ea02b744f4dd3de45374fff9dc1 on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/886102/badge)](https://coveralls.io/builds/886102)

Coverage increased (+0.22%) when pulling **203989bf9d760c3ca96b232b9a39df37c5c9f886 on wvolz:permredirectfix** into **13fddfa22a6d3ea02b744f4dd3de45374fff9dc1 on lukaszb:devel**.
hopefully good to go now!
Looks good now, thanks!
Looks like `assertRedirects` would be a better fit here.
See https://docs.djangoproject.com/en/dev/topics/testing/tools/#django.test.SimpleTestCase.assertRedirects
This would leave `LOGIN_URL` with changed value for other tests (configuration leakage).

Please use `guardian.testapp.tests.conf.override_settings` (backported to work for older Django versions; see  https://docs.djangoproject.com/en/dev/topics/testing/tools/#django.test.override_settings)
I agree with this, but this will require code in the testapps urls.py. That same code will not work with anything < Django 1.3 I believe. So then the question becomes how do you support older versions?
[![Coverage Status](https://coveralls.io/builds/925207/badge)](https://coveralls.io/builds/925207)

Coverage remained the same when pulling **7c60c3617209330bb4c3ce0d0afc69e8114aee74 on thedrow:patch-1** into **632b1bbaefa9dec2702b6a477a5459d4822438b5 on lukaszb:devel**.
Nice catch, thanks!
[![Coverage Status](https://coveralls.io/builds/925285/badge)](https://coveralls.io/builds/925285)

Coverage remained the same when pulling **2709028e3c3467d036de3633c8be60541f2c521e on thedrow:patch-1** into **133af002e63ca5bdb325680366f55c7f45b0aa05 on lukaszb:devel**.
Sure, done: https://pypi.python.org/pypi/django-guardian/1.2.1
@lukaszb I meant with this PR as well :)
Yep, sorry. Updated https://pypi.python.org/pypi/django-guardian/1.2.2
[![Coverage Status](https://coveralls.io/builds/929637/badge)](https://coveralls.io/builds/929637)

Coverage remained the same when pulling **6313e8f17c5ab2d585e350a8b6ceccd91ae45338 on thedrow:patch-1** into **0410c45afd329fe1bee693ec8e6ab3aafdb48404 on lukaszb:devel**.
@lukaszb ping?
Right, so this is my fault as I haven't asked for tests in the first place.
Please add them to this PR
@lukaszb What kind of tests? All existing tests are functional.
Oh OK I think I got it. One moment please.
tests for admin panel with user model that has pk attribute not named `id`
Hmm I can't customize the CustomUser because it breaks all of your other tests since they don't use pk.
Also I'm not sure it's smart to change CustomUser since it might break other tests (or is that a good thing?).
Well, what do you know. The tests exposed another problem.
This time with get_anonymous_user(). It is now fixed.
[![Coverage Status](https://coveralls.io/builds/939115/badge)](https://coveralls.io/builds/939115)

Coverage decreased (-0.73%) when pulling **e40c91841c9851f08e7cd7f0cf06e403ceafd06e on thedrow:patch-1** into **0410c45afd329fe1bee693ec8e6ab3aafdb48404 on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/939121/badge)](https://coveralls.io/builds/939121)

Coverage decreased (-0.7%) when pulling **e40c91841c9851f08e7cd7f0cf06e403ceafd06e on thedrow:patch-1** into **0410c45afd329fe1bee693ec8e6ab3aafdb48404 on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/939138/badge)](https://coveralls.io/builds/939138)

Coverage remained the same when pulling **54e8f9805769c170b091db6b7a2c2c55d6b7fc12 on thedrow:patch-1** into **0410c45afd329fe1bee693ec8e6ab3aafdb48404 on lukaszb:devel**.
@lukaszb This PR is ready to go.
Please merge and release :)
@lukaszb ping?
Looks good, thanks!
Ignore, opening another. Had a derp.
[![Coverage Status](https://coveralls.io/builds/967675/badge)](https://coveralls.io/builds/967675)

Coverage remained the same when pulling **496bde6d366793d453d102a2eaac6c3af4604c9a on samuraisam:patch-1** into **b821d0c83f16ba270884766e6661a8d8f2e02e56 on lukaszb:devel**.
Good one :D Personally I don't care much about performance gain here but it's definitely more readable :)
thanks!
[![Coverage Status](https://coveralls.io/builds/984346/badge)](https://coveralls.io/builds/984346)

Coverage remained the same when pulling **b09bda360c80ce08d886005be17e1add9b16c32d on mkouhei:devel** into **b821d0c83f16ba270884766e6661a8d8f2e02e56 on lukaszb:devel**.
thanks!
[![Coverage Status](https://coveralls.io/builds/986684/badge)](https://coveralls.io/builds/986684)

Coverage decreased (-1.16%) when pulling **8269530c5bb0220c4bc4b7fba240deb7d181be8b on thedrow:topic/migrations-for-custom-user** into **b821d0c83f16ba270884766e6661a8d8f2e02e56 on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/986684/badge)](https://coveralls.io/builds/986684)

Coverage decreased (-1.16%) when pulling **8269530c5bb0220c4bc4b7fba240deb7d181be8b on thedrow:topic/migrations-for-custom-user** into **b821d0c83f16ba270884766e6661a8d8f2e02e56 on lukaszb:devel**.
This pull request has significant changes to south migrations, which are depreciated. If it is still relevant, needs to be redone. This pull request should be closed.
It is if we still support Django 1.6 or projects that upgraded from 1.1.6 and still use south migrations.
What needs to be redone?
There is a ticket proposing to drop support for Django < 1.7 - #350.

Django < 1.7 is official end-of-life - see https://www.djangoproject.com/download/ - and probably has security issues.

It might seem harsh, however I don't think we can keep supporting all old Django versions especially after they stop being supported upstream. It adds complexity to the code base, is likely to break without notice, and takes developer time away from improving django-guardian further.
[![Coverage Status](https://coveralls.io/builds/1011884/badge)](https://coveralls.io/builds/1011884)

Coverage increased (+0.1%) when pulling **47a7d7cede4d2d67b6d48e0ee7e5a10cae8060dc on vitan:devel** into **b821d0c83f16ba270884766e6661a8d8f2e02e56 on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/1013422/badge)](https://coveralls.io/builds/1013422)

Coverage increased (+0.22%) when pulling **8bcf490873b39600accb043350116d7efafde8d2 on vitan:devel** into **b821d0c83f16ba270884766e6661a8d8f2e02e56 on lukaszb:devel**.
The exceptions will be raised run on <Django--1.6:
1. perm.user_set unimplemented before Django--1.6
2. User.objects.bulk_create() unimplemented before Django--1.4

back compatible is hard a little.
This pull request needs updating so that it applies against the latest master. In the meantime - considering the last update was 2014 - suggest it be closed.
[![Coverage Status](https://coveralls.io/builds/1012109/badge)](https://coveralls.io/builds/1012109)

Coverage decreased (-0.15%) when pulling **b8bbe8fc0cca542e2cc70bc88bfd7a4880d49388 on wlanslovenija:get-users-by-permission** into **b821d0c83f16ba270884766e6661a8d8f2e02e56 on lukaszb:devel**.
Thanks, makes sense! Test is missing, though. Also, please add tests for generic related permissions and those created manually with direct FKs. And add yourself to the AUTHORS file.
Closing as there were no response in a long time. Let me know if that's still a requested feature.

Moreover, I'm not that sure of this one anymore. It would probably make more sense to allow to narrow permissions to a set of codenames instead of only one.
Sorry, didn't have time to look into this.
[![Coverage Status](https://coveralls.io/builds/1012310/badge)](https://coveralls.io/builds/1012310)

Coverage decreased (-0.0%) when pulling **4bb75dee16a343d4dcaa2f2bea4c99c2147eed22 on wlanslovenija:empty-permissions-objects** into **b821d0c83f16ba270884766e6661a8d8f2e02e56 on lukaszb:devel**.
Why is this never pushed into django-guardian?
As far as I can tell, this pull request makes a number of changes within the one commit. This makes it very hard to review. The comment suggests it is adding support for perms to be an empty list, however I can't see anything that is related to this. Rather it seems to change the behavior of `ctypes` and `codenames` and I am failing trying to understand this.

Test cases for this would also be good.
Yes, it was hard to make this separate things. As I explained, there are three things here:
- allowing to get objects for which user has any permission
- passing query as a sub-query instead of memory list
- allowing non-numeric IDs
And no, it does not change behavior of `ctypes` and `codenames`, it just makes it a subquery instead of a list.
I added comments with more explanation.
Thanks for the comments. Will look at them now.
@mitar Can I please have your opinion on #334? Suspect it might also be a patch to deal with perms being an empty list too. Are both pull requests required? Just this one?

This change seems OK to me. It needs to be fixed so that it will apply cleanly, and it really should have test cases too.
I updated the pull request. Let's me see about the tests.
The pull request here does not fix the #334. The test available in #334 still fails. So that is something else.
I added a test.
Tests for non-numeric IDs were already there. Passing query as a sub-query instead of memory list is just an optimization, but no other tests broke, so it seems it is a good optimization. :-)
Thanks for this. Looks good to me.

I don't have write access yet, hope to get it very soon. Unless @lukaszb raises any objections I will rebase this - to avoid the merge commit inside the pull request which from my experience is a bad idea - and merge the result.
I rebased it, compared it with your original, and created a new merge request #363. That makes this merge request redundant now. Unless there are any problems getting #363 merged.
Great! Thanks!
Merged #363, so closing this.
Great!
See here. Instead of just making it always filter by `codenames`, it filters only when it is non-zero (so  when `ctype` was specified). This allows the behavior of getting any objects for any permission.
Similar here. Just splitting filter building into two steps, where one is conditional.
And this one is just making it a subquery instead of in-memory list.
And non-integer IDs you get for free.
[![Coverage Status](https://coveralls.io/builds/1033942/badge)](https://coveralls.io/builds/1033942)

Coverage remained the same when pulling **83bc40db7604afcd8d44ecb2d2074f81fb3a3172 on kevinlondon:patch-1** into **b821d0c83f16ba270884766e6661a8d8f2e02e56 on lukaszb:devel**.
Thanks again!
[![Coverage Status](https://coveralls.io/builds/1034008/badge)](https://coveralls.io/builds/1034008)

Coverage remained the same when pulling **8de15353ae1f8ee9253fa3d5b1d7cf166bebfb11 on kevinlondon:patch-2** into **b821d0c83f16ba270884766e6661a8d8f2e02e56 on lukaszb:devel**.
Thanks!
[![Coverage Status](https://coveralls.io/builds/1096156/badge)](https://coveralls.io/builds/1096156)

Coverage increased (+0.04%) when pulling **dceb6beb5830746b624a7ac99d93949ff263fb98 on sjdemartini:fix/get-objects-for-user-non-integer-pk** into **b821d0c83f16ba270884766e6661a8d8f2e02e56 on lukaszb:devel**.
@lukaszb Can you take a look at this? Thanks in advance.
This looks cool, thank you for your work!

Please just update the docstrings and add yourself to the AUTHORS file and we are good to merge!
Yeah, no problem @lukaszb! I was following the [PEP8](http://legacy.python.org/dev/peps/pep-0008/#documentation-strings) style; didn't realize Django was doing it differently. Fixed that now, and added myself to the authors file.
[![Coverage Status](https://coveralls.io/builds/1099693/badge)](https://coveralls.io/builds/1099693)

Coverage increased (+0.04%) when pulling **54786f6c8d55fbd436e64bef4e19f2888473b657 on sjdemartini:fix/get-objects-for-user-non-integer-pk** into **b821d0c83f16ba270884766e6661a8d8f2e02e56 on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/1099745/badge)](https://coveralls.io/builds/1099745)

Coverage increased (+0.04%) when pulling **15952b9386882d1a3a1d024c51a909d05384b4ef on sjdemartini:fix/get-objects-for-user-non-integer-pk** into **b821d0c83f16ba270884766e6661a8d8f2e02e56 on lukaszb:devel**.
Thank you so much!
@sjdemartini  FYI PEP-0257 is the one that specifies how to format docstrings.
for docstrings (this and next ones) please use Django-style (newline just after first 3-quotes)
I believe this issue has been fixed, so this pull request can be closed.
[![Coverage Status](https://coveralls.io/builds/1189130/badge)](https://coveralls.io/builds/1189130)

Coverage decreased (-0.51%) when pulling **f48b7e83a7cb49258f9c7d1c3e14df808fbe01f2 on buff3r:devel** into **0b2248e04cea8d1f0c0af7f3933d551cc1cf1b40 on lukaszb:devel**.
+1 for merging this
[![Coverage Status](https://coveralls.io/builds/1214443/badge)](https://coveralls.io/builds/1214443)

Coverage remained the same when pulling **a38195658efcaffcbb74a596819159da2f234747 on thanhleviet:patch-1** into **0b2248e04cea8d1f0c0af7f3933d551cc1cf1b40 on lukaszb:devel**.
Looks like there are more problems with new Django version and example project.

This change in particular doesn't look to solve a problem anyway. Closing as we need more "proper" solution.
thanks!
[![Coverage Status](https://coveralls.io/builds/1308289/badge)](https://coveralls.io/builds/1308289)

Coverage increased (+0.01%) when pulling **51c0b0579f01a9e606c4ae9e81c809cb8f771e9f on zauddelig:devel** into **b486bf6b5a3ff7e8ad9544a0da2af9cfe31531ef on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/1333660/badge)](https://coveralls.io/builds/1333660)

Coverage decreased (-0.02%) when pulling **1bd4beea1227cbfbcadbb7307044b5a0d40001b7 on zauddelig:devel** into **b486bf6b5a3ff7e8ad9544a0da2af9cfe31531ef on lukaszb:devel**.
thanks!
You're welcome :)
add spaces between equality sign
Ok done, sorry I did a fast edit on github
[![Coverage Status](https://coveralls.io/builds/1319878/badge)](https://coveralls.io/builds/1319878)

Coverage increased (+0.01%) when pulling **8e19d5a429bafc62e5f4ae981e0e539b48a67bea on shanx:devel** into **b486bf6b5a3ff7e8ad9544a0da2af9cfe31531ef on lukaszb:devel**.
Looks like `get_query_set` is still omitted. But overall it's an improvement. Please add yourself to the AUTHORS file and ping me once done, so I can merge this.
Thanks! Hereby
Thank you!
@lukaszb : Can you bump the version for this?
@lukaszb : +1 , it would be really convenient if this could be pushed to PyPi with an incremented version number.
@lukaszb: +1
@lukaszb can you pypi or do this as a hotfix please? Every person here is
getting this message on restart, it's been a while now. It's pretty
annoying and filter hasn't been able suppress the warning.
On Dec 27, 2014 4:41 AM, "Mathieu Marques" notifications@github.com wrote:

> @lukaszb https://github.com/lukaszb: +1
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/lukaszb/django-guardian/pull/267#issuecomment-68177361
> .
Yep, will do that tonight
This change doesn't take into account group permissions as well which is why the tests are failing. Closing this PR for the time being.
[![Coverage Status](https://coveralls.io/builds/1370289/badge)](https://coveralls.io/builds/1370289)

Coverage increased (+0.51%) when pulling **61a4859a5d843368121c723c48f1e50c897111b7 on troygrosfield:django17** into **b821d0c83f16ba270884766e6661a8d8f2e02e56 on lukaszb:master**.
The test failures that are happening are on django 1.3.x and 1.4.x and they aren't failures related to django-guardian itself.

```
..................................................................................F
======================================================================
FAIL: test_poisoned_http_host (django.contrib.auth.tests.views.PasswordResetTest)
Poisoned HTTP_HOST headers can't be used for reset emails
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/travis/virtualenv/python2.6.9/lib/python2.6/site-packages/django/test/utils.py", line 215, in inner
    return test_func(*args, **kwargs)
  File "/home/travis/virtualenv/python2.6.9/lib/python2.6/site-packages/django/contrib/auth/tests/views.py", line 138, in test_poisoned_http_host
    self.assertEqual(len(mail.outbox), 0)
AssertionError: 1 != 0
----------------------------------------------------------------------
Ran 83 tests in 3.914s
```

You'll see the failure is happening at:

```
django.contrib.auth.tests.views.PasswordResetTest
```

I believe this issue is being caused by the fact that django 1.7 throws warning if the settings doesn't have `MIDDLEWARE_CLASSES` set.  It's now being set with this PR and thus causing the issue.  See: `guardian/testsettings.py` changes.

When I submitted the PR for the django-facebook app to become django 1.7 compatible, we just incremented the major app version and changed the minimum required django version to be 1.5 which is the same thing I would recommend here:
- https://github.com/tschellenbach/Django-facebook/pull/459

@lukaszb, Thoughts?
[![Coverage Status](https://coveralls.io/builds/1370333/badge)](https://coveralls.io/builds/1370333)

Coverage increased (+0.51%) when pulling **8cea53579b20889b7cb285c11cf1bf5e51e85a0d on troygrosfield:django17** into **b821d0c83f16ba270884766e6661a8d8f2e02e56 on lukaszb:master**.
Many thanks for doing this, I really appreciate that!

Closing as this is already merged in a devel branch.
Thanks! :)
`--all` is south related only switch - we assume that south users would know what they are doing. However, I do agree that we should also try to educate users if possible so I've extended that doc. Thanks for noticing this!
[![Coverage Status](https://coveralls.io/builds/1538556/badge)](https://coveralls.io/builds/1538556)

Coverage decreased (-0.57%) when pulling **5c4f52d131f4858afa2d499dff7f72151dccc0f3 on kaesemeister:devel** into **3b41775705a0466d9033c5f88e425386d7e553cb on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/1539861/badge)](https://coveralls.io/builds/1539861)

Coverage decreased (-0.5%) when pulling **50b435b9901e8d4109c0d506aaece3caa575d658 on kaesemeister:devel** into **3b41775705a0466d9033c5f88e425386d7e553cb on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/1540576/badge)](https://coveralls.io/builds/1540576)

Coverage increased (+0.03%) when pulling **4d2e37760c94b9c77da4b57d91ca33d499c9c981 on kaesemeister:devel** into **3b41775705a0466d9033c5f88e425386d7e553cb on lukaszb:devel**.
All right, thank you!
[![Coverage Status](https://coveralls.io/builds/1543383/badge)](https://coveralls.io/builds/1543383)

Coverage decreased (-0.0%) when pulling **40a99a81a79f5a20d0d9487f4c7ec0dcbbbb96a9 on kaesemeister:devel** into **3b41775705a0466d9033c5f88e425386d7e553cb on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/1543383/badge)](https://coveralls.io/builds/1543383)

Coverage decreased (-0.0%) when pulling **40a99a81a79f5a20d0d9487f4c7ec0dcbbbb96a9 on kaesemeister:devel** into **3b41775705a0466d9033c5f88e425386d7e553cb on lukaszb:devel**.
it seems like the whole function can be refactored to `return isinstance(obj, models.Model)`
you're right.. fixed it.
[![Coverage Status](https://coveralls.io/builds/1710476/badge)](https://coveralls.io/builds/1710476)

Coverage decreased (-0.03%) when pulling **79f1b66983a6036e6aa6e593c49b4143d04dac77 on bsvetchine:devel** into **dd33b2c44cc18c44d16fd3cbad8507a971c86623 on lukaszb:devel**.
#274
@lukaszb This is an important PR! Django 1.8 is rapidly approaching and such a simple fix should be incorporated.
Makes sense, thanks for pinging me
I think this should fix #274 and #303, correct?  Any idea on when this will be released?
Unfortunately this fix does not fix all compabilities problems for Django 1.8. I am currently working on another PR for full Django 1.8 support.
Thanks for the heads up @bsvetchine! I'll keep an eye out for the pr. Thanks for the contributions in advance!
@bsvetchine, any updates on the Django 1.8 PR?
#311 and #312 both need to be merged into master for 1.8 support.
[![Coverage Status](https://coveralls.io/builds/1731963/badge)](https://coveralls.io/builds/1731963)

Coverage remained the same when pulling **bdc7b101b387f28a625e324888c5d99af5c0a1c0 on jensenbox:patch-1** into **e1b2064cace9db37aced719f4d1b77f0a5c70db5 on lukaszb:master**.
thanks!
[![Coverage Status](https://coveralls.io/builds/1795725/badge)](https://coveralls.io/builds/1795725)

Coverage increased (+0.12%) to 96.14% when pulling **a814158fea0ff592f39b5fc4bd0a4e63bc708bfe on v-erena:global-permission-check-in-get-objects** into **dd33b2c44cc18c44d16fd3cbad8507a971c86623 on lukaszb:devel**.
PR looks well thought out and well tested
@aidanlister thank you! I honestly don't have much time to go through those changes so am merging based on your opinion.

And of course thanks for this PR, @v-erena !
Alright that scares me a little bit but I'll pull this into production and feed back with any issues.
@aidanlister haha, wondered if you feel it ;-) Good to hear I'm not the only one that worried. But seriously, before I put release comment I'm going to go through it more closely anyway ;-)
happy to have any feedback on that, and of course, eager to contribute further ;-)
[![Coverage Status](https://coveralls.io/builds/1819496/badge)](https://coveralls.io/builds/1819496)

Coverage decreased (-3.33%) to 92.69% when pulling **d0ddffdc9faabce759eae53e1137789ccfb48c64 on thedrow:patch-2** into **dd33b2c44cc18c44d16fd3cbad8507a971c86623 on lukaszb:devel**.
So the 1.7 tests aren't running yet. Don't merge this yet.
Thanks a lot!
[![Coverage Status](https://coveralls.io/builds/1929075/badge)](https://coveralls.io/builds/1929075)

Coverage decreased (-3.35%) to 92.82% when pulling **db69557a4ab51e4e9dad344c8245828321d8c3d8 on patgmiller:django-migrations-south+1.7** into **af822d75113d048c7686b5b8790a57113c9ef604 on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/1929075/badge)](https://coveralls.io/builds/1929075)

Coverage decreased (-0.05%) to 96.11% when pulling **db69557a4ab51e4e9dad344c8245828321d8c3d8 on patgmiller:django-migrations-south+1.7** into **af822d75113d048c7686b5b8790a57113c9ef604 on lukaszb:devel**.
Makes sense, thank you!
[![Coverage Status](https://coveralls.io/builds/2098186/badge)](https://coveralls.io/builds/2098186)

Coverage remained the same at 80.95% when pulling **2874bd2b669f9ec1c644bf8ef26b3e9f57529f37 on adrienbrunet:patch-1** into **f4c785303e22245dddad02d2a389f98259d1c46f on lukaszb:release-v1.2**.
thanks!
[![Coverage Status](https://coveralls.io/builds/2320322/badge)](https://coveralls.io/builds/2320322)

Coverage decreased (-0.1%) to 92.66% when pulling **80c7b88dc0257dc8f8c93f17847bff55fc0ad5c7 on bsvetchine:devel** into **17fa48a24fc2188f17876891f94bc65869fba4c7 on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/2320322/badge)](https://coveralls.io/builds/2320322)

Coverage decreased (-0.1%) to 92.66% when pulling **80c7b88dc0257dc8f8c93f17847bff55fc0ad5c7 on bsvetchine:devel** into **17fa48a24fc2188f17876891f94bc65869fba4c7 on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/2320322/badge)](https://coveralls.io/builds/2320322)

Coverage decreased (-0.1%) to 92.66% when pulling **80c7b88dc0257dc8f8c93f17847bff55fc0ad5c7 on bsvetchine:devel** into **17fa48a24fc2188f17876891f94bc65869fba4c7 on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/2320322/badge)](https://coveralls.io/builds/2320322)

Coverage decreased (-0.1%) to 92.66% when pulling **80c7b88dc0257dc8f8c93f17847bff55fc0ad5c7 on bsvetchine:devel** into **17fa48a24fc2188f17876891f94bc65869fba4c7 on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/2320322/badge)](https://coveralls.io/builds/2320322)

Coverage decreased (-0.1%) to 92.66% when pulling **80c7b88dc0257dc8f8c93f17847bff55fc0ad5c7 on bsvetchine:devel** into **17fa48a24fc2188f17876891f94bc65869fba4c7 on lukaszb:devel**.
:+1:
**Thank you!**

Going to update tox/travis, run it there and merge if green.
[![Coverage Status](https://coveralls.io/builds/2404210/badge)](https://coveralls.io/builds/2404210)

Coverage decreased (-0.1%) to 92.66% when pulling **2515614978b6be371b0e46778ad5abce753de830 on bsvetchine:devel** into **17fa48a24fc2188f17876891f94bc65869fba4c7 on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/2404210/badge)](https://coveralls.io/builds/2404210)

Coverage decreased (-0.1%) to 92.66% when pulling **2515614978b6be371b0e46778ad5abce753de830 on bsvetchine:devel** into **17fa48a24fc2188f17876891f94bc65869fba4c7 on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/2404867/badge)](https://coveralls.io/builds/2404867)

Coverage increased (+3.12%) to 95.89% when pulling **b64a3bc44374bc31a288858077950ab188ab0c7f on bsvetchine:devel** into **17fa48a24fc2188f17876891f94bc65869fba4c7 on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/2404867/badge)](https://coveralls.io/builds/2404867)

Coverage increased (+3.12%) to 95.89% when pulling **b64a3bc44374bc31a288858077950ab188ab0c7f on bsvetchine:devel** into **17fa48a24fc2188f17876891f94bc65869fba4c7 on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/2404867/badge)](https://coveralls.io/builds/2404867)

Coverage increased (+3.12%) to 95.89% when pulling **b64a3bc44374bc31a288858077950ab188ab0c7f on bsvetchine:devel** into **17fa48a24fc2188f17876891f94bc65869fba4c7 on lukaszb:devel**.
Hello Lukasz,

I updated tox and travis files to test guardian under Django 1.8. All tests run sucessfully.

Please note that I had to update the 0001 migration in the testapp due to a behaviour change with the User last_login field in Django 1.8.
https://docs.djangoproject.com/en/1.8/ref/contrib/auth/#fields
@bsvetchine looks awesome. Will review it more closely in the evening but it seems to be good. One quick thing - does `tox` actually work? I mean, it seems `py27-django18` and `py34-django18` are missing entries in the config. And there is no Python 3.3 entry at all.
[![Coverage Status](https://coveralls.io/builds/2428890/badge)](https://coveralls.io/builds/2428890)

Coverage increased (+3.12%) to 95.89% when pulling **f940ad4f2a9e0e81f2a3254a13e85ef9977f8b47 on bsvetchine:devel** into **17fa48a24fc2188f17876891f94bc65869fba4c7 on lukaszb:devel**.
@lukaszb you were right, the tox.ini django18 config were not registered. I added py33-django18 config and registered all django18 config.
@bsvetchine perfect, thanks!
@lukaszb with this merged in can we get a 1.2.6 tag made and pushed to PyPI?
I don't think that we are ready for a release yet saying that there is full 1.8 support as pull requests such as #311 are still open.
+1 to getting #311 merged and getting this bad boy released so I can stop deploying from the master branch.  Let me know if there's anything I can do to push this along.
[![Coverage Status](https://coveralls.io/builds/2386935/badge)](https://coveralls.io/builds/2386935)

Coverage remained the same at 92.76% when pulling **393adb5061e91a5b9472ef8e9973994235aef8c4 on frwickst:queryset_fix** into **17fa48a24fc2188f17876891f94bc65869fba4c7 on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/2386935/badge)](https://coveralls.io/builds/2386935)

Coverage remained the same at 92.76% when pulling **393adb5061e91a5b9472ef8e9973994235aef8c4 on frwickst:queryset_fix** into **17fa48a24fc2188f17876891f94bc65869fba4c7 on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/2386935/badge)](https://coveralls.io/builds/2386935)

Coverage remained the same at 92.76% when pulling **393adb5061e91a5b9472ef8e9973994235aef8c4 on frwickst:queryset_fix** into **17fa48a24fc2188f17876891f94bc65869fba4c7 on lukaszb:devel**.
I think you also need to remove the `django.VERSION < 1.6` check, otherwise in line 156 of `obj_perms_manage_view`, `self.queryset` will error out.
The above commits are just a rebase to the current 'devel' branch, no changes to the code yet. (The lined refered to by @ayc92 is now on line 151)
Would it be a better solution to change the queryset call at line 151 (and 224,227) to get_queryset instead? Ideas?
[![Coverage Status](https://coveralls.io/builds/2447716/badge)](https://coveralls.io/builds/2447716)

Coverage decreased (-3.82%) to 92.07% when pulling **40ece1817a69dbb3384acf369fe839366e6518c1 on frwickst:queryset_fix** into **8f82cf92b6b4140c84023b06d81820e5c7f24194 on lukaszb:devel**.
@frwickst I'm in favor of your solution.
Ad pointed out in Issue #307 this might be a good time to remove support for older versions of Django. But for this to happen I want the go ahead from @lukaszb before going forward.
As a user: I'm also in favour of changing self.queryset in lines 151, 224 and 277 to self.get_queryset ... I don't see how these changes would hurt backwards compatibility, as the calls are specific to GuardedModelAdminMixin and decendants, and django < 1.6 apps will have the aliases. I'm going to deploy django-guardian in my Django 1.8 installation that way and notify you if I see any further problems.

(i.e. deploying with this patch:)

``` diff
    Modified   guardian/admin.py
diff --git a/guardian/admin.py b/guardian/admin.py
index 5c83454..a884b77 100644
--- a/guardian/admin.py
+++ b/guardian/admin.py
@@ -148,7 +148,7 @@ class GuardedModelAdminMixin(object):
         shown. In order to add or manage user or group one should use links or
         forms presented within the page.
         """
-        obj = get_object_or_404(self.queryset(request), pk=object_pk)
+        obj = get_object_or_404(self.get_queryset(request), pk=object_pk)
         users_perms = SortedDict(
             get_users_with_perms(obj, attach_perms=True,
                 with_group_users=False))
@@ -221,7 +221,7 @@ class GuardedModelAdminMixin(object):
         Manages selected users' permissions for current object.
         """
         user = get_object_or_404(get_user_model(), pk=user_id)
-        obj = get_object_or_404(self.queryset(request), pk=object_pk)
+        obj = get_object_or_404(self.get_queryset(request), pk=object_pk)
         form_class = self.get_obj_perms_manage_user_form()
         form = form_class(user, obj, request.POST or None)

@@ -274,7 +274,7 @@ class GuardedModelAdminMixin(object):
         Manages selected groups' permissions for current object.
         """
         group = get_object_or_404(Group, id=group_id)
-        obj = get_object_or_404(self.queryset(request), pk=object_pk)
+        obj = get_object_or_404(self.get_queryset(request), pk=object_pk)
         form_class = self.get_obj_perms_manage_group_form()
         form = form_class(group, obj, request.POST or None)

@@ -443,4 +443,3 @@ class GroupManage(forms.Form):
         except Group.DoesNotExist:
             raise forms.ValidationError(
                 self.fields['group'].error_messages['does_not_exist'])
-

```
With 1.8 and on the guardian devel branch as at https://github.com/lukaszb/django-guardian/commit/112c373f213a19d93baa81fa4a941a41333115b5, I needed to change all lines guardian/admin.py

```
obj = get_object_or_404(self.queryset(request), pk=object_pk)
```

to

```
obj = get_object_or_404(self.get_queryset(request), pk=object_pk)
```
[![Coverage Status](https://coveralls.io/builds/2396225/badge)](https://coveralls.io/builds/2396225)

Coverage decreased (-0.05%) to 92.72% when pulling **bc28e30c8e5c27273c215454c44fe45267500707 on frwickst:dj19depracation** into **17fa48a24fc2188f17876891f94bc65869fba4c7 on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/2396225/badge)](https://coveralls.io/builds/2396225)

Coverage decreased (-0.05%) to 92.72% when pulling **bc28e30c8e5c27273c215454c44fe45267500707 on frwickst:dj19depracation** into **17fa48a24fc2188f17876891f94bc65869fba4c7 on lukaszb:devel**.
I just verified that the deprecation warnings I got with django-admin check are fixed with this PR.
Thanks @frwickst and @TauPan !
Would it be possible to get a release that includes this fix ?
Would be much appreciated to go forward with Django REST Framework against master.
Yup, just started vacations, hopefully I would release new version soon.
Looking forward to it and enjoy your vacations !
[![Coverage Status](https://coveralls.io/builds/2599157/badge)](https://coveralls.io/builds/2599157)

Coverage remained the same at 95.89% when pulling **ed9c6fb0a9bef231c95a5221e629ccffe2f39549 on cabello:patch-1** into **8f82cf92b6b4140c84023b06d81820e5c7f24194 on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/2599157/badge)](https://coveralls.io/builds/2599157)

Coverage remained the same at 95.89% when pulling **ed9c6fb0a9bef231c95a5221e629ccffe2f39549 on cabello:patch-1** into **8f82cf92b6b4140c84023b06d81820e5c7f24194 on lukaszb:devel**.
What can I do to help this and other PRs get merged?
@cabello  pinging me is fine, thanks :)
We could also think about a test case for this - unfortunately I'm not too familiar with the django-guardian test setup.
[![Coverage Status](https://coveralls.io/builds/2658922/badge)](https://coveralls.io/builds/2658922)

Coverage decreased (-0.03%) to 95.81% when pulling **8af4005d6b973a65a05d073aba2760e0667ea3d2 on zooeysoftware:devel** into **112c373f213a19d93baa81fa4a941a41333115b5 on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/2658922/badge)](https://coveralls.io/builds/2658922)

Coverage decreased (-0.03%) to 95.81% when pulling **8af4005d6b973a65a05d073aba2760e0667ea3d2 on zooeysoftware:devel** into **112c373f213a19d93baa81fa4a941a41333115b5 on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/2658922/badge)](https://coveralls.io/builds/2658922)

Coverage decreased (-0.03%) to 95.81% when pulling **8af4005d6b973a65a05d073aba2760e0667ea3d2 on zooeysoftware:devel** into **112c373f213a19d93baa81fa4a941a41333115b5 on lukaszb:devel**.
+1, just ran into this. It's returning the generic classes instead of the custom classes
Same here. Generics working well but no direct fk.
I just ran into this issue, and this patch fixes it.
Just wasted two hours to figure out why my permission checks don't work anymore after updating to 1.8.
Same issue here :/
When is this going to be pulled into the release?
Looks like I got this applied in #359, see bac7c403062e81594a2ebed31562e72e83004dff

This pull request can be closed.
[![Coverage Status](https://coveralls.io/builds/2686364/badge)](https://coveralls.io/builds/2686364)

Coverage decreased (-80.87%) to 14.97% when pulling **d357dbdb0f538e6055dc7363160dbf28819593e0 on soby:devel** into **112c373f213a19d93baa81fa4a941a41333115b5 on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/2716505/badge)](https://coveralls.io/builds/2716505)

Coverage remained the same at 95.84% when pulling **832a73cce1a3641851ca28be94dd710ec79608cc on frwickst:queryset_fix** into **e9fdcb00a5b8151646637e9ae5094eb743f34e05 on lukaszb:devel**.
I believe this pull request is no longer required and can be closed.
[![Coverage Status](https://coveralls.io/builds/2731168/badge)](https://coveralls.io/builds/2731168)

Coverage remained the same at 95.84% when pulling **de7ca5c39dfd0870067497f5843581e9cd2b017f on giocalitri:devel** into **e9fdcb00a5b8151646637e9ae5094eb743f34e05 on lukaszb:devel**.
[![Coverage Status](https://coveralls.io/builds/2731168/badge)](https://coveralls.io/builds/2731168)

Coverage remained the same at 95.84% when pulling **de7ca5c39dfd0870067497f5843581e9cd2b017f on giocalitri:devel** into **e9fdcb00a5b8151646637e9ae5094eb743f34e05 on lukaszb:devel**.
`app_label` could be None at this point if `perms` is an empty list. So is having `perms` an empty list valid?

This might be related to  #247 - "Allow specifying an empty list of permissions for get_objects_for_user" a pull request that I didn't understand.

Not sure I fully understand just yet what is going on in this code.
Suggest this should be closed in favor of #334, which also has a test case.
`if user.has_perm(ctype.app_label + '.' + code):`  # better as app_label will always be None if passing in simple codenames (e.g. 'change_group') along with `klass` parameter
[![Coverage Status](https://coveralls.io/builds/2753628/badge)](https://coveralls.io/builds/2753628)

Coverage decreased (-0.45%) to 95.39% when pulling **d9bb277db7d74f498d9ebac22eb11f144dabe31f on autrilla:devel** into **e9fdcb00a5b8151646637e9ae5094eb743f34e05 on lukaszb:devel**.
Apparently it works on django 1.6+. Sadly I don't have time to read your code and make this work with every django version, but maybe my fix for django 1.8 helps you.
Fix by #336
As #336 has been merged, I believe this can be closed.
Seems fine to me - apart from title which I find confusing. Good tests. However, adds 71 lines - is it worth the added complexity?

Also:
- #46 - has already been closed as invalid.
- #327 - I can't see the connection.
Brian, thanks for fixing my title.

Using direct_perms_only=True provides a way to determine the permissions directly assigned to a user, vs. permissions available to that user due to superuser status (#327) or group membership (#46). This feature is essential to my site.
I do not think this is needed anymore with #403 being merged in. @kewama, can you verify? (#407 is a followup, so maybe check that one as well.)
Going to close this based on comments on @mitar. If this is incorrect and #403 does not solve the required problem, please let me know and I will reopen.
Isn't `direct_perms_only` redundant? You could simply set `with_superusers` and `with_group_users` to `False` and you would get the same result as setting `direct_perms_only` to `True`? No?
Which is what you do below. :-)
#403, #407 do solve my issue. I think the new get_users_with_perms() behavior is great and what I originally expected (see #327). However, it is a backwards-incompatible change and so may break existing apps that depend on the previous behavior. Probably worth calling out in the release notes.
In which way it is a backwards incompatible change? It didn't break any tests.

You mean, because now `attach_perms` set to `True` return really what you asked for and not everything as before? I see this as a bugfix, but yes, it should be mentioned in the release notes.
There may not have been tests that cover it, but the old behavior was described in #46, which was closed as invalid. Thus a user might have felt comfortable depending on that behavior. Or might be accidentally depending on it and be surprised on upgrade.

The defense of the old behavior in #46 was the reason I created a pull request that did not break backwards compatibility. But treating it as a bugfix results in a better long term solution, imo.
Good point. I opened: https://github.com/django-guardian/django-guardian/pull/410
Am beginning to think we need a -devel mailing list hosted somewhere so we can discuss general strategies involving django-guardian. What constitutes an backward incompatible change, when new releases should be made, should we have a section on the documentation (like Django) that describes all potential compatibility issues, etc. Any good mailing list providers for this purpose? I only know the big ones like Google and Yahoo. alioth.debian.org might also be a good option.
Personally, I prefer to keep all stuff/discussions in one place (GitHub issues/pull requests). Moreover, I observed that younger developers have issues using mailing lists. They are simply old school.

So I do not see much benefit of having a mailing list.

Maybe we just need label "discussion" for an issue and then we discuss something there.
+1, please merge
+1

```
  File ".../local/lib/python2.7/site-packages/guardian/shortcuts.py", line 416, in get_objects_for_user
    if user.has_perm(app_label + '.' + code):
TypeError: unsupported operand type(s) for +: 'NoneType' and 'unicode'
```
Merged in f9392a5ca9d82422a80719fdfef03a3602d023fb.
I know the travis build info isn't showing here, but this successfully passed all tests in travis.
I've checked out your fork & branch and I was able to visit "Object Permissions" in admin. I am not the project maintainer but :+1: !
+1
Would be great this merged. Currently running off this branch because master breaks on 1.8.
@lukaszb Can you take a second look on this one please?
Run tests at https://travis-ci.org/django-guardian/django-guardian/builds/83927071
All passed, THANKS!
Hello, 
is it possible to do a pypi release with these patches please ?
@Seraf  done
@lukaszb thanks for your reactivity !!
@ad-m Not sure I see the connection between your comment and this pull request. Maybe you accidentally commented on the wrong pull request?
For Django 1.9 support, need to add Django 1.9 to tests and ensure tests pass.

Looks like this patch is not sufficient to get tests to pass under Django 1.9b1. I am getting the following errors just trying to run the tests:

```
  File "/home/brian/tree/debian/upstream/django-guardian/guardian/management/__init__.py", line 46, in <module>
    signals.post_syncdb.connect(create_anonymous_user, sender=guardian_app,
AttributeError: module 'django.db.models.signals' has no attribute 'post_syncdb'
```
Made some minor changes to this change for consistency and merged as 6fa90589db664ad26e8d88314c41bc959a47fdac.

There are still some Django 1.9 issues remaining.
This change really could do with test cases to go with it.
I don't think this change has been thought out or tested. By inheriting from Group, you are using Multi-table inheritance, and creating a new table. See https://docs.djangoproject.com/en/1.8/topics/db/models/#multi-table-inheritance

Suspect what you may have wanted instead was a proxy model, see https://docs.djangoproject.com/en/1.8/topics/db/models/#proxy-models

Sure, this is easy to do. However no point adding complexity for no reason. What is the use case for a group.has_perm() function?
Yes. I suppose a proxy model would have been apt for this case. I had implemented this function in a side project where there was a 2-level permission checking system. User - Group - Model. This required a check whether the group had a particular permission on the model, and whether a user had a certain level of access with respect to the group.
I am going to close this for now. Feel free to resubmit using a Proxy model :-)
@brianmay is it already possible to inherit permissions from the group or has this PR remained unresolved?
Sorry wrote previous text (now deleted) before looking at the pull request.

I am no longer maintaining this package.

As far as I know, nothing happened here, because I was unhappy with the quality of the pull request, and so far nobody has updated the pull request as per my feedback to address the issues.

This pull request is about adding a has_perm to groups.

When you say "inherit permissions" I suspect you might want something different entirely, that was never provided for by this pull request, in which case you should open a new issue.
Looks cool, thanks!
When trying to access an Object Permissions page in the Admin, I get the error `<lambda>() takes exactly 2 arguments (1 given)`, thrown by line 154 in compat.py:
`return OrderedDict(sorted(items.items(), key=lambda k, v: key(v)))`
Fixed by #336
This change probably should get merged... I assume the translations are correct...
Thanks @alexshin!
Take care `collections.OrderedDict` has missing attribute `keyOrder` with method `sort`. See django-guardian/django-guardian#347 and django-guardian/django-guardian#345 .
Thanks, I fixed it.
@aidanlister hey, thanks for the input however changes break compat with other versions...

In addition, please add 1.9 check to travis/tox configurations.
The Django 1.8 tests weren't actually executed by travis-ci. "Ran 0 tests in 0.000s". If they were executed they would probably be fails too. See #356.
It looks like this change unconditionally removes the `friendly_load` tag. However a number of files reference `friendly_load`, so the change is invalid.

I don't like the idea of `friendly_load`, it makes me think of conditions were the file should exist but disappears and the error gets silently ignored, however removing it isn't as simple as this pull request makes out.
Suggest we close this request. I have not yet looked at Django 1.9 compatibility, however this doesn't look like the way to do it.
See #339, looks like it might be a better solution.
my object ids is pd_ios, and i get the url of the item is pd_5Fios, and this causes a 404 every time I  want to manage this object permission.
Think this pull request should get merged. Seems strange it is required, however that is due to Django admin's URL scheme.
Merged in af3b1f3a7f21bfe484f9c33581d4b77907072413.
All the tests that I expected to pass did in fact pass.
Yup, thanks, this is definitely an improvement.
All tests pass. Probably should add Python3.5/Django1.8 to Travis-CI too. Not sure if Travis-CI picks that up automatically from tox.ini or if it needs to be configured.
Needs to be configured at .travis.yaml, actually. Would you do that in this PR?
Had a look, not sure I understand the syntax properly. We need to make sure that Python3.5 tests only run for Django 1.8. I probably should make an effort to learn about travis sometime.

Would this be sufficient, or would it try to run Python3.5 tests with Django1.7?

``` diff
diff --git a/.travis.yml b/.travis.yml
index b7b81be..b27ba63 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -5,6 +5,7 @@ python:
  - 2.7
  - 3.3
  - 3.4
+ - 3.5

 env:
  - DJANGO_VERSION=1.2.7
```
@brianmay , you can do it in this way. If you append python version you will tests over all django version, django 1.7 over python 3.5 too. You can fg. exclude by blacklist:

``` yml
matrix:
    exclude:
        - python: 3.5
          env: DJANGO_VERSION=1.7
```

You can use whitelist too fg:

``` yml
env:
  global:
    - DATABASE_URL="mysql://root:@localhost/test_feder"
    - DJANGO_SETTINGS_MODULE="config.settings.travis"
  matrix:
    - TOX_ENV=py27-dj18
    - TOX_ENV=py33-dj18
    - TOX_ENV=py27-djmaster
    - TOX_ENV=pypy-dj18
    - TOX_ENV=pypy-djmaster
    - TOX_ENV=flake8
```

If you use whitelist you can use allow_failures list too:

``` yml
matrix:
  allow_failures:
    - env: TOX_ENV=flake8
    - env: TOX_ENV=py33-dj18
    - env: TOX_ENV=py27-djmaster
    - env: TOX_ENV=pypy-dj18
    - env: TOX_ENV=pypy-djmaster
```
Tests fixed up. I used the blacklist method, because it is already used. I also updated some files to clarify that Python 2.6 is not supported anymore - the tests failed for every Django version. Have a vague recollection that recent Django versions do not support Python 2.6 anyway. I also enabled the Django 1.7.x tests which were (possibly accidentally) disabled.
Thank you so much!
Why was this merge request closed?
Ok, I see, looks like it causes the tests to fail under Django 1.7 and Django 1.8.

Regardless the problems this pull requests attempts to fix are real, so am going to keep this open as a reminder that this needs fixing.
Looks like post_migrate isn't getting invoked as expected before the tests.
The sender argument was incorrect, needs to be a a Django 1.7 style App object. Fixed and merged in cf1c818d30abaa649eae2e5697e862c168d8b166
This change is causing problems with postgresql, see #366.
Doesn't seem to work for me without the following change:

```
diff --git a/guardian/testapp/manage.py b/guardian/testapp/manage.py
index bcdef77..2a10a60 100755
--- a/guardian/testapp/manage.py
+++ b/guardian/testapp/manage.py
@@ -6,7 +6,7 @@ if __name__ == "__main__":
     # should be ../../ (`djangoguardian/`)
     BASE_DIR = os.path.dirname(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

-    sys.path.append(BASE_DIR)
+    sys.path.insert(0, BASE_DIR)

     os.environ.setdefault("DJANGO_SETTINGS_MODULE", "guardian.testapp.testsettings")
```

On my system, `guardian/testapp` is getting inserted at the start of the sys.path, and it looks like this new entry has to appear first.
Was also confused with the title of this pull request: has nothing to do with `example_project`, but `guardian/testapp`.
Ok, I will take a look at that, not today though, rough day. You are right on the title, I just used the issue title but it's completely irrelevant.
I'm back. I was wondering, are you not using a virtualenv? There is for example a [specific question in SO](http://stackoverflow.com/questions/10095037/why-use-sys-path-appendpath-instead-of-sys-path-insert1-path) that recommends use append vs insert, and that this error can be dealt with virtualenv.

Changing the code as you recommended makes no difference to me btw, still running ok so I don't really mind. I was just wondering if this is the correct approach.

Also edited the title.
Also to mention that tests fail for Django 1.7.0, require >=1.7.1 due to 

```
TypeError: __init__() got an unexpected keyword argument 'preserve_default'
```

Which has been dealt in 1.7.1. See [relevant link](http://stackoverflow.com/questions/26432242/django-1-7-migrations).
Made some minor changes and merged this as 6359074a9cbe997cea06a478b19911a15a663795.

Looking at `tests.py` - I see it makes changes to the settings, which perhaps should get merged into `testsettings.py`.

Not sure there is any need for `tests.py` anymore actually, the `manage.py` looks like a better solution.
Yes, I agree with that. Reduce complexity.
Merged in 0991c488d7f22fe72ad8bb53ca9c13431858cb67.

Thanks!
Thanks for this.

Rebased and merged in following commits:
- eda009c957162ef370985bad90c490e9ab135606
- 7cac00008216e5bac0a938fa7b36de2feda23ebf
- f69feeb1402771ab45094319b5629b86cc15b353
- 777ce05cada4d6ac4008ea122bb5f4b8aaa7e954
- 227fad354c0680014a7ed068627e7b3e0490bcaf
Great, very happy to have helped.
Thanks for you code. It looks very promising and interesting :smile_cat: :+1:

What do you think about tests & docs?
I want to drop here this snippet to take awareness about `Prefetch`:

```
from django.db.models import Prefetch
(…)
from guardian.models import GroupObjectPermissionBase, UserObjectPermissionBase
(…)
class CaseQuerySet(QuerySet):
    def with_involved_staff(self):
        qs = (CaseUserObjectPermission.objects.filter(user__is_staff=True).
              select_related('permission', 'user').
              all())
        return self.prefetch_related(Prefetch('caseuserobjectpermission_set', queryset=qs))
(…)
class Case(models.Model):
(…)
    name = models.CharField(max_length=150, verbose_name=_("Subject"))
(…)
class CaseUserObjectPermission(UserObjectPermissionBase):
    content_object = models.ForeignKey(Case)

```
I've added fixes for the two issues you pointed out. Do they look ok?

I'll add some tests and docs in the coming days. Where is the best place to add the docs? Directly in the repo?

I'll take a closer look at the prefetch solution but I'm not sure it will work for my use case.
> Where is the best place to add the docs? Directly in the repo?

Yes, in `/docs/`. It will auto-rebuild for rtfd (see `repository` section in http://readthedocs.org/projects/django-guardian/ ).

> (…) I'm not sure it will work for my use case.

I would like mark that I use `with_involved_staff` to show grouped users (and perms) who have access to cases in `CaseListView`, not for permission check. I note only to think about, but I'm not sure. I don't use groups, models perms etc.
At the moment my priority is fixing #366.

In the meantime however you might want to compare with other proposals for improving the performance: https://github.com/django-guardian/django-guardian/labels/Performance
No worries. This is ready to go whenever you're ready. I've added tests which are passing and documentation. I'm not sure why the travis build is failing but it doesn't seem to be related to my code.

From what I can see the other issues revolve around getting users for objects while this deals with getting perms for objects.
@keattang, no worries abou Travis build. Everything is fine. See #384.
How does this compare with #295?

This patch appears to cache things in the `ObjectPermissionChecker` object; #295 appears to cache globally per thread.

Not sure how to compare, or if one of these changes becomes redundant now, or what.
#295 only seems to only cache the lookup of an object's permissions model

```
_related_object_permission_models_cache.user_obj_perms_models_cache[obj.__name__] = 
get_obj_perms_model(obj,
    UserObjectPermissionBase,
    UserObjectPermission)
```

Whereas this patch caches the actual permissions and does so on a list of objects `obj_list`, rather than a single object, so as to reduce the number of lookups when iterating through the list from `len(obj_list)` to 1. Similar to the `prefetch_related` queryset method.

Both of these should therefore be compatible and beneficial
Any progress on this?
Any progress on this?
Reviewing this is still on my todo list...
Any progress on this? Thanks
Hi @brianmay  we're really looking to use this to make improvements, any chance if can get looked at in the near future? thanks
Rebased, squashed, and merged in e6e45ba81ae0a17172d7a41d4f2c7c274f9215e4.
Awesome thanks!
Awesome work @keattang! This is a super helpful feature.

Are you planning on adding support in `prefetch_perms` for Direct Foreign Key permissions?
I would like mark that in line 167 key you generate by `(ctype.id, pk)`. I'm not sure this is correct to cast `object_pk` to int. CharField can have set `primary_key=True`, so it will be `object_pk`. In this case it will raises exceptions.
Undefined name 'pks'. Add `pks = []` after line 25.
Maybe I ask stupid question,but...Why do you need this settings update?
connection.queries only works when django is in debug mode
Why not `TransactionTestCase.assertNumQueries`?
Because you still need to use `connection.queries` to find the initial number of queries to compare against
Thank you for your replies.
No worries :)
Thanks for this! Was just thinking something like this would be important.
Looks like in addition to #366, mysql tests are failing on Django 1.9.0 :-(
@brianmay, you are right, but other tests pass for Django 1.9 eg. SQLite, so this is something broken in django-guardian, not - by change - in my pull requests. Unfortunately, I am unable spend more time for @django-guardian this month.
Yes, exactly. This is about the one situation where I think it is "ok" to merge a request despite failing tests - when it highlights that it was already broken. Anyway merged now.
Would be better if you split the PEP8 fixes - especially to `example_project/settings.py` and `settings.py` into another commit - or maybe even another pull request...
Rebased and applied. Thanks.
Whops need to support older versions as well
Thanks for this. Have merged.

Just realized none of this is documented, something that should get fixed too I guess.
No problem.
Thanks for a great library!
Thanks. Applied in b6a1c5830c0b6b7705d2c2daba1d620df7f15edc.
Appears to have broken the travis tests :-(

https://travis-ci.org/django-guardian/django-guardian/builds/111091401 - not sure why it worked in the pull request.
Think I fixed this in 06dc4790996479f4a6361067454a71d1dbf8e013.
Cool! any idea why the original implementation broke the travis tests (just wan't to know so I can be a better coder)?
Apparently Django 1.7 has an undocumented (at least I couldn't find the documentation) `each_context` function that doesn't take the request parameter.

Am not sure I understand why the tests passed for your pull request and then failed after the rebase, however I haven't really investigated.
This explains it. The tests were broken and not running in the master branch.

```
Creating test database for alias 'default'...

----------------------------------------------------------------------
Ran 0 tests in 0.000s

OK
```
Thanks!
Does this have any connection with #263?
I do not think so. That seems something else.

The issue here is that permissions are always returned as effective permissions. So there was no standard way to get just really set permissions, not inferred. This is problem in admin, because you get all permissions checked in the admin, if you are superuser. You get all permissions listed as assigned to the object, but when you try to remove one, you cannot.

Similarly the problem is (was) with `get_users_with_perms`. If you used `attach_perms` it would attach effective permissions (so all, or user + group), even if you disabled getting group of super-user permissions.
Ok, so if I understand this correctly, this doesn't break the current API, it adds new functions and leaves the `get_perms()` function behaving in the same way.
Yes, it is mostly a refactor, and does not change anything from before, **except** that the admin interface will start showing assigned permissions even for superadmins, and not all possible permissions.
Similarly, `get_perms_for_model` and `get_groups_with_perms` when used with `attach_perms` will return really the attached permissions and not all permissions for superusers.
Looks like this patch is good, and probably worth applying, however may not be complete.

For the example_project, If I revoke one of my my permissions for the super user, after this change is applied I see the correct results at the following page:

http://localhost:8001/admin/posts/post/1/permissions/

If I click the edit button however, it lists that I have all available permissions.

http://localhost:8001/admin/posts/post/1/permissions/user-manage/2/

There were also some problems with the example project which I will fix now.
Rebased in a6a637829c726d5147f658ef0df6b079b6f56af8
Cool!
Should the example be updated to Django 1.9 from Django 1.6 (in requirements?).
Sounds like a good idea to me.
What other issues have you seen with examples?
Thanks for your work on this, and also on the other related tickets. I don't have time to review your changes now, hopefully I will get a chance tomorrow. I don't think I noticed any problems with the examples, except for what I mentioned above.
@kewama, I added tests from #328 here.
I also added documentation and tests for new features.
Rebased and merged.
Seems cool.
@mitar shall I update matching your comments or wait for more input.
Hm, I would update, so that we get closer to the state ready for merging.
hmm the indentation actually matches the rest of the file, does it not?
> hmm the indentation actually matches the rest of the file, does it not?

Oh, you are right. So strange code style.
Rebased, squashed, and merged  in 7049a57bf90f3234632d1d6a1640e05eb4b87b32.
Unrelated change?
Indentation?
Incorporated in 77292c370cedca7ee73a7b6d8427bfc6cbfb6abc.
Incorporated in 45e1d574241b5881b5d5e2b10e2dd051e7835f11.
Thanks!
Thanks! I'm using `django-guardian` and a custom user model, so this commit is essential – currently 1.4.2 is breaking my tests. Could you do a PyPI release for this?
Done.
Rebased and merged in f46f6702bfae48b46efff1bf1a06f19550699e21
I just read through #338 saw this comment from @lukaszb:

> As to the second issue, regarding django-polymorphic - as a rule of thumb we are not supporting 3rd party packages that does something with your model, sorry. If someone would want to work on it, feel free to create another package that would bind guardian and polymorphic.

I don't know another way to override `ContentType.objects.get_for_model(obj)` besides what is being done in the PR. Would you accept a PR that allows third party apps to override `ContentType.objects.get_for_model(obj)` somehow? Instead of the `get_ctype_from_polymorphic` that I have now, I could add a generic `get_ctype` method with a default implementation like this:

```
get_ctype(obj):
    return ContentType.objects.get_for_model(obj)
```

This could be overridden by a setting that takes a callable to return the appropriate ctype. What do you think? I'm open to other suggestions as well.
Never heard of Django Polymorphic before. It looks interesting.

Can somebody please explain to me how this helps Django Guardian? I don't think I understand the `get_ctype_from_polymorphic` function or what purpose it serve.

Thanks for the pull request.
django-polymorhpic allows models that inherit from a base model to be retrieved by using a query on the base model model. For example:

```
Project.objects.all()
    [ <Project:         id 1, topic "Department Party">,
      <ArtProject:      id 2, topic "Painting with Tim", artist "T. Turner">,
      <ResearchProject: id 3, topic "Swallow Aerodynamics", supervisor "Dr. Winter"> ]
```

Using a permission on the base model which needs to apply to all child models doesn't work because django-guardian uses the content type for the child model instead of the base model.

I picked up this patch from chrisglass/django_polymorphic#122 so I'm exploring a bit as well.

I tried to get the functionality I need without this patch by making wrapper functions to the various guardian shortcuts. My idea was to supply an instance of the base model instead of the child model when using these shortcut functions. Unfortunately this didn't work. 

Here's an example with `assign_perm`:

```
from guardian.shortcuts import assign_perm

def assign_polymorphic_perm(perm, user_or_group, obj=None):
    if obj:
        base_obj = get_base_polymorphic_instance(obj)
        return assign_perm(perm, user_or_group, base_obj)
    return assign_perm(perm, user_or_group)

assign_polymorphic_perm('projects.can_edit', <Group instance>, <ArtProject instance>)
```

This raises a `ValidationError` because of the way that content types are retrieved:
https://github.com/django-guardian/django-guardian/blob/f46f6702bfae48b46efff1bf1a06f19550699e21/guardian/models.py#L41

```
ValidationError: [u"Cannot persist permission not designed for this class (permission's type is <ContentType: Project> and object's type is <ContentType: ArtProject>)"]
```

I think the best way forward is the suggestion from my previous comment: retrieve the content type in a single place within guardian instead of using `ContentType.objects.get_for_model(obj)` directly everywhere. For example:

```
get_content_type_for_model(obj):
    return ContentType.objects.get_for_model(obj)
```

Third party applications or sites would need a way to override this default function with their custom version. The benefit to django-guardian is that it would allow a third party app to be created that integrates django-polymorphic (and may other libraries) with django-guardian without polluting django-guardian itself. This also allows people to consolidate around a shared solution for this problem instead of the current situation where there are a bunch of maintained forks that people are using and then forking again.

@brianmay Let me know if you like this idea and I'll make a PR for your to provide feedback on. If you're not interested, that's ok too. I'm ok with just using my patched version and closing this PR in this case. Thanks for your work on guardian and for your feedback.
So if I understand you correctly, you want to be able to assign permissions to `Project` and have them affect `ArtProject` and `ResearchProject` too?

The concept sounds good to me.

My understanding of the reading the code is that you will get exactly the same behaviour if the model does not get derived from `PolymorphicModel`. So it shouldn't break existing code.

It is possible I guess that there is existing code already using `PolymorphicModel` that breaks with this new behaviour - how likely is this? I suspect it might be unlikely - however really have no idea.

I guess my main (weak??) concern is that this is somewhat different semantics and people may not expect this significant change just by changing their models to use `PolymorphicModel`. I guess the way to counter this would be to make sure this is documented in the documentation and easy to find.
> So if I understand you correctly, you want to be able to assign permissions to Project and have them affect ArtProject and ResearchProject too?

Yeah, that's correct.

> It is possible I guess that there is existing code already using PolymorphicModel that breaks with this new behaviour - how likely is this? I suspect it might be unlikely - however really have no idea.

This is hard to know and leads into the concern you raised. This solution is definitely making a decision that affects the logic of the permissions when using guardian with django-polymorphic. While this solution works for my current project, I could see it being a problem in systems with other requirements. Documentation won't help solve this because there would be way to opt-out of using the base class for the permissions of the child classes (when using django-polymorhpic).

I'm going to implement the solution that I mentioned in a previous comment so that we can see if it's a better way forward for solving this problem. I hope to be able to get to it in the next week or so. Let's keep this PR open until we figure out which solution is best. Thanks for your feedback.
Closed in favour of #431.
Does this require testing?
Yeah. I was hoping to get general feedback on the approach before completing the full implementation with tests.
Merged in a2e2216864296cbb4de6df7053a8c370adf594e6.
Just wondering if there are any applications other then django-polymorphic for overriding the content type.

I guess the point of this change is to remove the django-polymorphic specific code from django-guardian however still allow django-guardian to be customized to support django-polymorphic. Which seems like a good idea to me.
Thanks for your feedback. The idea to separate out the code comes from @lukaszb's comment on #338:

> As to the second issue, regarding django-polymorphic - as a rule of thumb we are not supporting 3rd party packages that does something with your model, sorry. If someone would want to work on it, feel free to create another package that would bind guardian and polymorphic.

I'll move forward with this PR and close #421. I don't know if there are any other projects that would need to override the content type but I still think it's a good idea to have this code in the django-polymorphic project or in a 3rd-party module.
Ok, I've added the docs, added a test and removed the django-polymorphic code. I'm planning to make a pull request to django-polymorphic with the removed function once this is merged.

Let me know if you have any suggestions on how to improve the docs, tests and the code in general. Thanks.
I can rebase and squash this PR into one commit when it's ready to be merged.
Is this ready for merging? @ad-m what do you think?
It's ready by my account. I'm already using it. Any feedback is appreciated.
I just rebased this PR for the latest changes. Let me know if there's anything more I can do to help get this PR merged. Thanks.
I was hoping to get @ad-m's opinion before merging.

@benkonrath What do you think however? Is this ready for merging?
LGTM.
@brianmay I think it's ready but I'd still like to have it reviewed so that I can fix issues with style, documentation, etc. Thanks.
@benkonrath , so as maintainer I am waiting to that fixes before merging. Ping me when done, please.
@ad-m I've just rebased this PR and it's ready to be merged.
Thank you for your contribution.

![tumblr_lnmamsqqng1qlh1s6o1_500](https://cloud.githubusercontent.com/assets/3618479/17753687/3398c32a-64d1-11e6-9ef3-9dd50196f92c.gif)
@ad-m What do you think of this proposed change?
@brianmay , I look at it today. I have to consider using a `bulk_create`.
If you would prefer it to be in a separate function, I'd be happy to re-write it like that.
There is a lot of queries. Are they all necessary?

```
In [26]: assign_perm('posts.change_post', CustomUser.objects.last(), Post.objects.all()[:5])
(0.000) SELECT "posts_post"."id", "posts_post"."title", "posts_post"."slug", "posts_post"."content", "posts_post"."created_at" FROM "posts_post" LIMIT 5; args=()
(0.000) SELECT "posts_post"."id", "posts_post"."title", "posts_post"."slug", "posts_post"."content", "posts_post"."created_at" FROM "posts_post" LIMIT 5; args=()
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = 'post' AND "django_content_type"."app_label" = 'posts'); args=('post', 'posts')
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = 'post' AND "django_content_type"."app_label" = 'posts'); args=('post', 'posts')
(0.000) SELECT "auth_permission"."id", "auth_permission"."name", "auth_permission"."content_type_id", "auth_permission"."codename" FROM "auth_permission" WHERE ("auth_permission"."codename" = 'change_post' AND "auth_permission"."content_type_id" = 9); args=(u'change_post', 9)
(0.000) SELECT "auth_permission"."id", "auth_permission"."name", "auth_permission"."content_type_id", "auth_permission"."codename" FROM "auth_permission" WHERE ("auth_permission"."codename" = 'change_post' AND "auth_permission"."content_type_id" = 9); args=(u'change_post', 9)
(0.000) SELECT "guardian_userobjectpermission"."id", "guardian_userobjectpermission"."permission_id", "guardian_userobjectpermission"."content_type_id", "guardian_userobjectpermission"."object_pk", "guardian_userobjectpermission"."user_id" FROM "guardian_userobjectpermission" WHERE ("guardian_userobjectpermission"."object_pk" = '1' AND "guardian_userobjectpermission"."user_id" = 4 AND "guardian_userobjectpermission"."content_type_id" = 9 AND "guardian_userobjectpermission"."permission_id" = 26); args=(u'1', 4, 9, 26)
(0.000) SELECT "guardian_userobjectpermission"."id", "guardian_userobjectpermission"."permission_id", "guardian_userobjectpermission"."content_type_id", "guardian_userobjectpermission"."object_pk", "guardian_userobjectpermission"."user_id" FROM "guardian_userobjectpermission" WHERE ("guardian_userobjectpermission"."object_pk" = '1' AND "guardian_userobjectpermission"."user_id" = 4 AND "guardian_userobjectpermission"."content_type_id" = 9 AND "guardian_userobjectpermission"."permission_id" = 26); args=(u'1', 4, 9, 26)
(0.000) BEGIN; args=None
(0.000) BEGIN; args=None
(0.000) SELECT "posts_post"."id", "posts_post"."title", "posts_post"."slug", "posts_post"."content", "posts_post"."created_at" FROM "posts_post" WHERE "posts_post"."id" = 1; args=(1,)
(0.000) SELECT "posts_post"."id", "posts_post"."title", "posts_post"."slug", "posts_post"."content", "posts_post"."created_at" FROM "posts_post" WHERE "posts_post"."id" = 1; args=(1,)
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."id" = 9; args=(9,)
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."id" = 9; args=(9,)
(0.000) INSERT INTO "guardian_userobjectpermission" ("permission_id", "content_type_id", "object_pk", "user_id") VALUES (26, 9, '1', 4); args=[26, 9, u'1', 4]
(0.000) INSERT INTO "guardian_userobjectpermission" ("permission_id", "content_type_id", "object_pk", "user_id") VALUES (26, 9, '1', 4); args=[26, 9, u'1', 4]
(0.000) SELECT "auth_permission"."id", "auth_permission"."name", "auth_permission"."content_type_id", "auth_permission"."codename" FROM "auth_permission" WHERE ("auth_permission"."codename" = 'change_post' AND "auth_permission"."content_type_id" = 9); args=(u'change_post', 9)
(0.000) SELECT "auth_permission"."id", "auth_permission"."name", "auth_permission"."content_type_id", "auth_permission"."codename" FROM "auth_permission" WHERE ("auth_permission"."codename" = 'change_post' AND "auth_permission"."content_type_id" = 9); args=(u'change_post', 9)
(0.000) SELECT "guardian_userobjectpermission"."id", "guardian_userobjectpermission"."permission_id", "guardian_userobjectpermission"."content_type_id", "guardian_userobjectpermission"."object_pk", "guardian_userobjectpermission"."user_id" FROM "guardian_userobjectpermission" WHERE ("guardian_userobjectpermission"."object_pk" = '2' AND "guardian_userobjectpermission"."user_id" = 4 AND "guardian_userobjectpermission"."content_type_id" = 9 AND "guardian_userobjectpermission"."permission_id" = 26); args=(u'2', 4, 9, 26)
(0.000) SELECT "guardian_userobjectpermission"."id", "guardian_userobjectpermission"."permission_id", "guardian_userobjectpermission"."content_type_id", "guardian_userobjectpermission"."object_pk", "guardian_userobjectpermission"."user_id" FROM "guardian_userobjectpermission" WHERE ("guardian_userobjectpermission"."object_pk" = '2' AND "guardian_userobjectpermission"."user_id" = 4 AND "guardian_userobjectpermission"."content_type_id" = 9 AND "guardian_userobjectpermission"."permission_id" = 26); args=(u'2', 4, 9, 26)
(0.000) BEGIN; args=None
(0.000) BEGIN; args=None
(0.000) SELECT "posts_post"."id", "posts_post"."title", "posts_post"."slug", "posts_post"."content", "posts_post"."created_at" FROM "posts_post" WHERE "posts_post"."id" = 2; args=(2,)
(0.000) SELECT "posts_post"."id", "posts_post"."title", "posts_post"."slug", "posts_post"."content", "posts_post"."created_at" FROM "posts_post" WHERE "posts_post"."id" = 2; args=(2,)
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."id" = 9; args=(9,)
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."id" = 9; args=(9,)
(0.000) INSERT INTO "guardian_userobjectpermission" ("permission_id", "content_type_id", "object_pk", "user_id") VALUES (26, 9, '2', 4); args=[26, 9, u'2', 4]
(0.000) INSERT INTO "guardian_userobjectpermission" ("permission_id", "content_type_id", "object_pk", "user_id") VALUES (26, 9, '2', 4); args=[26, 9, u'2', 4]
(0.000) SELECT "auth_permission"."id", "auth_permission"."name", "auth_permission"."content_type_id", "auth_permission"."codename" FROM "auth_permission" WHERE ("auth_permission"."codename" = 'change_post' AND "auth_permission"."content_type_id" = 9); args=(u'change_post', 9)
(0.000) SELECT "auth_permission"."id", "auth_permission"."name", "auth_permission"."content_type_id", "auth_permission"."codename" FROM "auth_permission" WHERE ("auth_permission"."codename" = 'change_post' AND "auth_permission"."content_type_id" = 9); args=(u'change_post', 9)
(0.000) SELECT "guardian_userobjectpermission"."id", "guardian_userobjectpermission"."permission_id", "guardian_userobjectpermission"."content_type_id", "guardian_userobjectpermission"."object_pk", "guardian_userobjectpermission"."user_id" FROM "guardian_userobjectpermission" WHERE ("guardian_userobjectpermission"."object_pk" = '3' AND "guardian_userobjectpermission"."user_id" = 4 AND "guardian_userobjectpermission"."content_type_id" = 9 AND "guardian_userobjectpermission"."permission_id" = 26); args=(u'3', 4, 9, 26)
(0.000) SELECT "guardian_userobjectpermission"."id", "guardian_userobjectpermission"."permission_id", "guardian_userobjectpermission"."content_type_id", "guardian_userobjectpermission"."object_pk", "guardian_userobjectpermission"."user_id" FROM "guardian_userobjectpermission" WHERE ("guardian_userobjectpermission"."object_pk" = '3' AND "guardian_userobjectpermission"."user_id" = 4 AND "guardian_userobjectpermission"."content_type_id" = 9 AND "guardian_userobjectpermission"."permission_id" = 26); args=(u'3', 4, 9, 26)
(0.000) BEGIN; args=None
(0.000) BEGIN; args=None
(0.000) SELECT "posts_post"."id", "posts_post"."title", "posts_post"."slug", "posts_post"."content", "posts_post"."created_at" FROM "posts_post" WHERE "posts_post"."id" = 3; args=(3,)
(0.000) SELECT "posts_post"."id", "posts_post"."title", "posts_post"."slug", "posts_post"."content", "posts_post"."created_at" FROM "posts_post" WHERE "posts_post"."id" = 3; args=(3,)
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."id" = 9; args=(9,)
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."id" = 9; args=(9,)
(0.000) INSERT INTO "guardian_userobjectpermission" ("permission_id", "content_type_id", "object_pk", "user_id") VALUES (26, 9, '3', 4); args=[26, 9, u'3', 4]
(0.000) INSERT INTO "guardian_userobjectpermission" ("permission_id", "content_type_id", "object_pk", "user_id") VALUES (26, 9, '3', 4); args=[26, 9, u'3', 4]
(0.000) SELECT "auth_permission"."id", "auth_permission"."name", "auth_permission"."content_type_id", "auth_permission"."codename" FROM "auth_permission" WHERE ("auth_permission"."codename" = 'change_post' AND "auth_permission"."content_type_id" = 9); args=(u'change_post', 9)
(0.000) SELECT "auth_permission"."id", "auth_permission"."name", "auth_permission"."content_type_id", "auth_permission"."codename" FROM "auth_permission" WHERE ("auth_permission"."codename" = 'change_post' AND "auth_permission"."content_type_id" = 9); args=(u'change_post', 9)
(0.000) SELECT "guardian_userobjectpermission"."id", "guardian_userobjectpermission"."permission_id", "guardian_userobjectpermission"."content_type_id", "guardian_userobjectpermission"."object_pk", "guardian_userobjectpermission"."user_id" FROM "guardian_userobjectpermission" WHERE ("guardian_userobjectpermission"."object_pk" = '4' AND "guardian_userobjectpermission"."user_id" = 4 AND "guardian_userobjectpermission"."content_type_id" = 9 AND "guardian_userobjectpermission"."permission_id" = 26); args=(u'4', 4, 9, 26)
(0.000) SELECT "guardian_userobjectpermission"."id", "guardian_userobjectpermission"."permission_id", "guardian_userobjectpermission"."content_type_id", "guardian_userobjectpermission"."object_pk", "guardian_userobjectpermission"."user_id" FROM "guardian_userobjectpermission" WHERE ("guardian_userobjectpermission"."object_pk" = '4' AND "guardian_userobjectpermission"."user_id" = 4 AND "guardian_userobjectpermission"."content_type_id" = 9 AND "guardian_userobjectpermission"."permission_id" = 26); args=(u'4', 4, 9, 26)
(0.000) BEGIN; args=None
(0.000) BEGIN; args=None
(0.000) SELECT "posts_post"."id", "posts_post"."title", "posts_post"."slug", "posts_post"."content", "posts_post"."created_at" FROM "posts_post" WHERE "posts_post"."id" = 4; args=(4,)
(0.000) SELECT "posts_post"."id", "posts_post"."title", "posts_post"."slug", "posts_post"."content", "posts_post"."created_at" FROM "posts_post" WHERE "posts_post"."id" = 4; args=(4,)
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."id" = 9; args=(9,)
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."id" = 9; args=(9,)
(0.000) INSERT INTO "guardian_userobjectpermission" ("permission_id", "content_type_id", "object_pk", "user_id") VALUES (26, 9, '4', 4); args=[26, 9, u'4', 4]
(0.000) INSERT INTO "guardian_userobjectpermission" ("permission_id", "content_type_id", "object_pk", "user_id") VALUES (26, 9, '4', 4); args=[26, 9, u'4', 4]
(0.000) SELECT "auth_permission"."id", "auth_permission"."name", "auth_permission"."content_type_id", "auth_permission"."codename" FROM "auth_permission" WHERE ("auth_permission"."codename" = 'change_post' AND "auth_permission"."content_type_id" = 9); args=(u'change_post', 9)
(0.000) SELECT "auth_permission"."id", "auth_permission"."name", "auth_permission"."content_type_id", "auth_permission"."codename" FROM "auth_permission" WHERE ("auth_permission"."codename" = 'change_post' AND "auth_permission"."content_type_id" = 9); args=(u'change_post', 9)
(0.000) SELECT "guardian_userobjectpermission"."id", "guardian_userobjectpermission"."permission_id", "guardian_userobjectpermission"."content_type_id", "guardian_userobjectpermission"."object_pk", "guardian_userobjectpermission"."user_id" FROM "guardian_userobjectpermission" WHERE ("guardian_userobjectpermission"."object_pk" = '5' AND "guardian_userobjectpermission"."user_id" = 4 AND "guardian_userobjectpermission"."content_type_id" = 9 AND "guardian_userobjectpermission"."permission_id" = 26); args=(u'5', 4, 9, 26)
(0.000) SELECT "guardian_userobjectpermission"."id", "guardian_userobjectpermission"."permission_id", "guardian_userobjectpermission"."content_type_id", "guardian_userobjectpermission"."object_pk", "guardian_userobjectpermission"."user_id" FROM "guardian_userobjectpermission" WHERE ("guardian_userobjectpermission"."object_pk" = '5' AND "guardian_userobjectpermission"."user_id" = 4 AND "guardian_userobjectpermission"."content_type_id" = 9 AND "guardian_userobjectpermission"."permission_id" = 26); args=(u'5', 4, 9, 26)
(0.000) BEGIN; args=None
(0.000) BEGIN; args=None
(0.000) SELECT "posts_post"."id", "posts_post"."title", "posts_post"."slug", "posts_post"."content", "posts_post"."created_at" FROM "posts_post" WHERE "posts_post"."id" = 5; args=(5,)
(0.000) SELECT "posts_post"."id", "posts_post"."title", "posts_post"."slug", "posts_post"."content", "posts_post"."created_at" FROM "posts_post" WHERE "posts_post"."id" = 5; args=(5,)
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."id" = 9; args=(9,)
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE "django_content_type"."id" = 9; args=(9,)
(0.000) INSERT INTO "guardian_userobjectpermission" ("permission_id", "content_type_id", "object_pk", "user_id") VALUES (26, 9, '5', 4); args=[26, 9, u'5', 4]
(0.000) INSERT INTO "guardian_userobjectpermission" ("permission_id", "content_type_id", "object_pk", "user_id") VALUES (26, 9, '5', 4); args=[26, 9, u'5', 4]
```
I think it is a good idea to prepare a seperate function. There is a lot of job to fix performance issue. We should prefetch Permission object for QuerySet. It can be achieved easily eg.

``` diff
diff --git a/guardian/managers.py b/guardian/managers.py
index b441b75..f78acc2 100644
--- a/guardian/managers.py
+++ b/guardian/managers.py
@@ -31,8 +31,12 @@ class UserObjectPermissionManager(BaseObjectPermissionManager):
         if getattr(obj, 'pk', None) is None:
             raise ObjectNotPersisted("Object %s needs to be persisted first"
                                      % obj)
+
         ctype = ContentType.objects.get_for_model(obj)
-        permission = Permission.objects.get(content_type=ctype, codename=perm)
+        if not isinstance(perm, Permission):
+            permission = Permission.objects.get(content_type=ctype, codename=perm)
+        else:
+            permission = perm

         kwargs = {'permission': permission, 'user': user}
         if self.is_generic():
@@ -82,7 +86,11 @@ class GroupObjectPermissionManager(BaseObjectPermissionManager):
             raise ObjectNotPersisted("Object %s needs to be persisted first"
                                      % obj)
         ctype = ContentType.objects.get_for_model(obj)
-        permission = Permission.objects.get(content_type=ctype, codename=perm)
+        if not isinstance(perm, Permission):
+            ctype = ContentType.objects.get_for_model(obj)
+            permission = Permission.objects.get(content_type=ctype, codename=perm)
+        else:
+            permission = perm

         kwargs = {'permission': permission, 'group': group}
         if self.is_generic():
diff --git a/guardian/shortcuts.py b/guardian/shortcuts.py
index c2274b5..06c89e8 100644
--- a/guardian/shortcuts.py
+++ b/guardian/shortcuts.py
@@ -6,11 +6,11 @@ from __future__ import unicode_literals
 from django.contrib.auth.models import Group
 from django.contrib.auth.models import Permission
 from django.contrib.contenttypes.models import ContentType
-from django.db.models import Count, Q
+from django.db.models import Count, Q, QuerySet
 from django.apps import apps
 from django.shortcuts import _get_queryset
+from django.utils import six
 from itertools import groupby
-
 from guardian.compat import basestring
 from guardian.compat import get_user_model
 from guardian.core import ObjectPermissionChecker
@@ -28,8 +28,9 @@ def assign_perm(perm, user_or_group, obj=None):
     Assigns permission to user/group and object pair(s).

     :param perm: proper permission for given ``obj``, as string (in format:
-      ``app_label.codename`` or ``codename``). If ``obj`` is not given, must
-      be in format ``app_label.codename``.
+      ``app_label.codename`` or ``codename``) or ``Permission`` instance.
+      If ``obj`` is not given, must be in format ``app_label.codename`` or
+      ``Permission`` instance.

     :param user_or_group: instance of ``User``, ``AnonymousUser`` or ``Group``;
       passing any other object would raise
@@ -83,13 +84,15 @@ def assign_perm(perm, user_or_group, obj=None):
     user, group = get_identity(user_or_group)
     # If obj is None we try to operate on global permissions
     if obj is None:
-        try:
-            app_label, codename = perm.split('.', 1)
-        except ValueError:
-            raise ValueError("For global permissions, first argument must be in"
-                             " format: 'app_label.codename' (is %r)" % perm)
-        perm = Permission.objects.get(content_type__app_label=app_label,
-                                      codename=codename)
+        if not isinstance(perm, Permission):
+            try:
+                app_label, codename = perm.split('.', 1)
+            except ValueError:
+                raise ValueError("For global permissions, first argument must be in"
+                                 " format: 'app_label.codename' (is %r)" % perm)
+            perm = Permission.objects.get(content_type__app_label=app_label,
+                                          codename=codename)
+
         if user:
             user.user_permissions.add(perm)
             return perm
@@ -97,7 +100,14 @@ def assign_perm(perm, user_or_group, obj=None):
             group.permissions.add(perm)
             return perm

-    perm = perm.split('.')[-1]
+    if not isinstance(perm, Permission):
+        perm = perm.split('.')[-1]
+
+    if isinstance(obj, QuerySet) and not isinstance(perm, Permission):
+        ctype = ContentType.objects.get_for_model(obj.model)
+        perm = Permission.objects.get(content_type=ctype, codename=perm)
+        return assign_perm(perm, user_or_group, obj)
+
     try:
         assigned_perms = []
         for instance in obj:
```

But it might be a good idea to use a `bulk_create` for create `*_obj_perms_model` instance. If we use `bulk_create` we have hand some remove duplicates instead use `get_or_create`, so we have fetch permission for objects, then skip objects if exists. 

Operation of all these aspects in one function will greatly increase the complexity of `assign_perm`.
@ad-m I agree, the `assign_perm` and `remove_perm` functions would probably get very complex if we started optimizing like that. I moved the queryset functionality of those into separate functions with your permission optimization, which cuts down on queries a little bit.

I haven't started working on optimizing to use bulk_create to reduce queries yet, but is it necessary to optimize that right now? As it is, won't this function as well as (or better) than a manual for loop?
@phinjensen , in my opinion the code is correct and now brings something additional than manual loop, so it can be merged.
@brianmay Can you merge this?
I optimized `bulk_assign_perm`  and `bulk_remove_perm`.

``` diff
diff --git a/guardian/core.py b/guardian/core.py
index 53fb1c2..d9e8c4f 100644
--- a/guardian/core.py
+++ b/guardian/core.py
@@ -72,11 +72,14 @@ class ObjectPermissionChecker(object):
         :param obj: Django model instance for which permission should be checked

         """
-        perm = perm.split('.')[-1]
         if self.user and not self.user.is_active:
             return False
         elif self.user and self.user.is_superuser:
             return True
+        if isinstance(perm, Permission):
+            perm = perm.codename
+        else:
+            perm = perm.split('.')[-1]
         return perm in self.get_perms(obj)

     def get_group_filters(self, obj):
diff --git a/guardian/managers.py b/guardian/managers.py
index c16b313..e4c525f 100644
--- a/guardian/managers.py
+++ b/guardian/managers.py
@@ -23,7 +23,7 @@ class BaseObjectPermissionManager(models.Manager):

 class UserObjectPermissionManager(BaseObjectPermissionManager):

-    def assign_perm(self, perm, user, obj):
+    def assign_perm(self, perm, user, obj, save=True):
         """
         Assigns permission with given ``perm`` for an instance ``obj`` and
         ``user``.
@@ -44,8 +44,10 @@ class UserObjectPermissionManager(BaseObjectPermissionManager):
             kwargs['object_pk'] = obj.pk
         else:
             kwargs['content_object'] = obj
-        obj_perm, created = self.get_or_create(**kwargs)
-        return obj_perm
+        if save:
+            obj_perm, _ = self.get_or_create(**kwargs)
+            return obj_perm
+        return self.model(**kwargs)

     def assign(self, perm, user, obj):
         """ Depreciated function name left in for compatibility"""
@@ -77,7 +79,7 @@ class UserObjectPermissionManager(BaseObjectPermissionManager):

 class GroupObjectPermissionManager(BaseObjectPermissionManager):

-    def assign_perm(self, perm, group, obj):
+    def assign_perm(self, perm, group, obj, save=False):
         """
         Assigns permission with given ``perm`` for an instance ``obj`` and
         ``group``.
diff --git a/guardian/shortcuts.py b/guardian/shortcuts.py
index ec96676..bda856a 100644
--- a/guardian/shortcuts.py
+++ b/guardian/shortcuts.py
@@ -2,6 +2,7 @@
 Convenient shortcuts to manage or check object permissions.
 """
 from __future__ import unicode_literals
+from guardian.core import ObjectPermissionChecker

 from django.contrib.auth.models import Group
 from django.contrib.auth.models import Permission
@@ -124,9 +125,18 @@ def bulk_assign_perm(perm, user_or_group, queryset):
         ctype = ContentType.objects.get_for_model(queryset.model)
         perm = Permission.objects.get(content_type=ctype, codename=perm)

+    checker = ObjectPermissionChecker(user_or_group)
+    checker.prefetch_perms(queryset)
+
+    manager_kwargs = {('user' if user else 'group'): user or group,
+                      'perm': perm,
+                      'save': False}
+
     assigned_perms = []
     for instance in queryset:
-        assigned_perms.append(model.objects.assign_perm(perm, user or group, instance))
+        if not checker.has_perm(perm, instance):
+            assigned_perms.append(model.objects.assign_perm(obj=instance, **manager_kwargs))
+    model.objects.bulk_create(assigned_perms)
     return assigned_perms


@@ -195,13 +205,29 @@ def bulk_remove_perm(perm, user_or_group, queryset):
     user, group = get_identity(user_or_group)
     perm = perm.split('.')[-1]

+    ctype = None
+
     if user:
         model = get_user_obj_perms_model(queryset.model)
+        object_filter = Q(user=user_or_group)
     if group:
         model = get_group_obj_perms_model(queryset.model)
+        object_filter = object_filter & Q(group=user_or_group)

-    for instance in queryset:
-        model.objects.remove_perm(perm, user or group, instance)
+    if not isinstance(perm, Permission):
+        perm = perm.split('.')[-1]
+        ctype = ContentType.objects.get_for_model(queryset.model)
+        perm = Permission.objects.get(content_type=ctype, codename=perm)
+
+    if model.objects.is_generic():
+        ctype = ctype or ContentType.objects.get_for_model(queryset.model)
+        object_filter &= Q(content_type=ctype)
+        object_filter &= Q(object_pk__in=queryset)
+    else:
+        object_filter &= Q(content_object__in=queryset)
+
+    object_filter &= Q(permission=perm)
+    model.objects.filter(object_filter).delete()


 def get_perms(user_or_group, obj):
```

I feel added code should be moved to managers, so it don't merge ready yet. 

`bulk_assign_perm('view_post', u, Post.objects.all()[:10])` queries:

```
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" WHERE ("django_content_type"."model" = 'post' AND "django_content_type"."app_label" = 'posts'); args=('post', 'posts')
(0.000) SELECT "auth_permission"."id", "auth_permission"."name", "auth_permission"."content_type_id", "auth_permission"."codename" FROM "auth_permission" WHERE ("auth_permission"."codename" = 'view_post' AND "auth_permission"."content_type_id" = 9); args=(u'view_post', 9)
(0.000) SELECT "posts_post"."id" FROM "posts_post" LIMIT 10; args=()
(0.000) SELECT "posts_post"."id", "posts_post"."title", "posts_post"."slug", "posts_post"."content", "posts_post"."created_at" FROM "posts_post" LIMIT 10; args=()
(0.000) SELECT "guardian_userobjectpermission"."id", "guardian_userobjectpermission"."permission_id", "guardian_userobjectpermission"."content_type_id", "guardian_userobjectpermission"."object_pk", "guardian_userobjectpermission"."user_id", "auth_permission"."id", "auth_permission"."name", "auth_permission"."content_type_id", "auth_permission"."codename" FROM "guardian_userobjectpermission" INNER JOIN "auth_permission" ON ("guardian_userobjectpermission"."permission_id" = "auth_permission"."id") WHERE ("guardian_userobjectpermission"."object_pk" IN ('1', '2', '3', '4', '5', '6', '7', '8', '9', '10') AND "guardian_userobjectpermission"."user_id" = 32 AND "guardian_userobjectpermission"."content_type_id" = 9); args=(u'1', u'2', u'3', u'4', u'5', u'6', u'7', u'8', u'9', u'10', 32, 9)
(0.000) SELECT "guardian_groupobjectpermission"."id", "guardian_groupobjectpermission"."permission_id", "guardian_groupobjectpermission"."content_type_id", "guardian_groupobjectpermission"."object_pk", "guardian_groupobjectpermission"."group_id", "auth_permission"."id", "auth_permission"."name", "auth_permission"."content_type_id", "auth_permission"."codename" FROM "guardian_groupobjectpermission" INNER JOIN "auth_group" ON ("guardian_groupobjectpermission"."group_id" = "auth_group"."id") INNER JOIN "core_customuser_groups" ON ("auth_group"."id" = "core_customuser_groups"."group_id") INNER JOIN "auth_permission" ON ("guardian_groupobjectpermission"."permission_id" = "auth_permission"."id") WHERE ("core_customuser_groups"."customuser_id" = 32 AND "guardian_groupobjectpermission"."content_type_id" = 9 AND "guardian_groupobjectpermission"."object_pk" IN ('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')); args=(32, 9, u'1', u'2', u'3', u'4', u'5', u'6', u'7', u'8', u'9', u'10')
(0.000) BEGIN; args=None
(0.001) INSERT INTO "guardian_userobjectpermission" ("permission_id", "content_type_id", "object_pk", "user_id") SELECT 28, 9, '1', 32 UNION ALL SELECT 28, 9, '2', 32 UNION ALL SELECT 28, 9, '3', 32 UNION ALL SELECT 28, 9, '4', 32 UNION ALL SELECT 28, 9, '5', 32 UNION ALL SELECT 28, 9, '6', 32 UNION ALL SELECT 28, 9, '7', 32 UNION ALL SELECT 28, 9, '8', 32 UNION ALL SELECT 28, 9, '9', 32 UNION ALL SELECT 28, 9, '10', 32; args=(28, 9, u'1', 32, 28, 9, u'2', 32, 28, 9, u'3', 32, 28, 9, u'4', 32, 28, 9, u'5', 32, 28, 9, u'6', 32, 28, 9, u'7', 32, 28, 9, u'8', 32, 28, 9, u'9', 32, 28, 9, u'10', 32)
```

`bulk_remove_perm('view_post', u, Post.objects.all()[:10])` queries:

```
(0.000) SELECT "auth_permission"."id", "auth_permission"."name", "auth_permission"."content_type_id", "auth_permission"."codename" FROM "auth_permission" WHERE ("auth_permission"."codename" = 'view_post' AND "auth_permission"."content_type_id" = 9); args=(u'view_post', 9)
(0.000) BEGIN; args=None
(0.000) DELETE FROM "guardian_userobjectpermission" WHERE ("guardian_userobjectpermission"."user_id" = 32 AND "guardian_userobjectpermission"."content_type_id" = 9 AND "guardian_userobjectpermission"."object_pk" IN (SELECT "posts_post"."id" FROM "posts_post" LIMIT 10) AND "guardian_userobjectpermission"."permission_id" = 28); args=(32, 9, 28)
```

We have to consider #366 "regression" too.
I continue work https://github.com/ad-m/django-guardian/tree/pr-432 . I do pull requests when ready. I have to add tests for updated API for pass `Permission` instance as `perm` param.
@ad-m So are you saying I shouldn't merge this just yet? If so, let me know when you are ready.
Merged in #436. Closing.
Why comma added?
I added `PermissionListMixin`. I can add docs to them if useful.
Rebased and merged. ce241f3d87d098bfef5a8774924381ccc3e350bb and 9c00a6e3146ce4c67ca630c18a8c5894c1ba2940.

Thanks for the contribution.
Merged in a1b191834a3d233f3e6da0847981c9bc14850660.
So does this mean we can now close #432 and use this one instead?
@brianmay , yes. I made second pull requests to made changes without anyone's help.
Do you consider this ready for merging?
Yes.

Wysłano z urządzenia mobilnego.

4 lip 2016 10:36 AM "Brian May" notifications@github.com napisał(a):

> Do you consider this ready for merging?
> 
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> https://github.com/django-guardian/django-guardian/pull/436#issuecomment-230235803,
> or mute the thread
> https://github.com/notifications/unsubscribe/ADc2rxK26vHvTbaohhb3l7DX2oe2u9gbks5qSMXogaJpZM4I-hnG
> .
Sorry, can't apply this when it breaks _all_ the tests. Some sort of Syntax Error (that I can't actually see right now) in the migration:

```
E         File "/home/travis/build/django-guardian/django-guardian/guardian/migrations/0001_initial.py", line 24
E           ('content_type', models.ForeignKey(to='contenttypes.ContentType'), on_delete=models.CASCADE),
E                                                                                       ^
E       SyntaxError: invalid syntax
```

Also think it might be better to create new migrations instead of updating the existing migrations; existing installs won't see these changes otherwise.
Also looks like you have combined two very different changes into one commit. In future would be appreciated if you separate them into two distinct commits.

One that changes the sort order of the imports (why?) and the other that adds the on_delete parameter.
```
on_delete=models.CASCADE
```

is already default behavior and there isn't need to create a new migration for it (the warning highlights this, but it's mandatory to explicit state it in future releases of django.

Changing the order of imports appear to be good style; at least a lot of other big projects, e.g., django use this practice.

I can create a new PR for just the `on_delete` adjustment, and disregard the import sorting for now?
I agree with @atombrella . 

It's a good idea to update migrations than make a new migrations. No database update is required databases for current use, but migrations syntax update is required to Django 2 compatibility. @atombrella , do you can update migrations to remove syntax errors?

@brianmay, see django 1.9 releases note draft ( https://docs.djangoproject.com/en/dev/releases/1.9/#foreignkey-and-onetoonefield-on-delete-argument ):

> In order to increase awareness about cascading model deletion, the on_delete argument of ForeignKey and OneToOneField will be required in Django 2.0.
> 
> Update models and existing migrations to explicitly set the argument. Since the default is models.CASCADE, add on_delete=models.CASCADE to all ForeignKey and OneToOneFields that don’t use a different option. You can also pass it as the second positional argument if you don’t care about compatibility with older versions of Django.

It's a good idea to sort imports too. The code is a more predictable what's important for merge (add import to two side, but in different line make double import after merge, so it's import to add in predictable line every time), easier to read and verify import existing etc.). 

We have to consider use in `isort` settings "set force_single_line to True (-sl on the command line) and every import will appear on its own line". It is current practice in this project and I think that there is no reason to change this now. I might be better to specify project level configuration simply by placing a `.isort.cfg` file at the root of our project with that settings.

@brianmay , it's a good idea to update your editor to use `isort` if you like. There is a lot of plugins.
Ok, I am going to merge this. In future however it would be better if you could keep distinct changes as distinct commits. Thanks.
Merged as f37746a11a451ca72890ca1ca826eaff940ae8a8.
I made the same change for the GroupManage form for much the same reasons.
+1 for this, very clean and useful change!

@julianandrews would you mind to add the request object in the `get_obj_perms_manage_user_form` and`get_obj_perms_user_select_form()` method parameters?
The same way it's provided in django `ModelAdmin.get_form()`, this would allow, when needed, all kind of form customization using values from the request object.

```
def get_obj_perms_user_select_form(self, request):
    [...]

def get_obj_perms_group_select_form(self, request): 
    [...]
```

Thanks again for your contribution :)
@tdruez That seems like a reasonable change to me. For consistency, I made the same change in the `get_obj_perms_manage_user_form` and `get_obj_perms_manage_group_form`.
@julianandrews thanks! 
Your changes looks great, this is exactly the kind of flexibility I needed.
Looks like there's a couple tests to fix though ;)
@brianmay I've added the missing `request.POST` parameter. Yeah, I think there's no reason not to instantiate the form from the `POST` in these spots. It shouldn't have any effect on the default form, but is probably the appropriate behavior in the cases where it matters.
Merged in b82ead3ff61a5931e25a7a4d4e1db2e5760bf4d8.
Here you modified the `group_form` constructor call to pass the `request.POST` parameter - was this intended?
Here you didn't modify the `user_form` constructor call to pass the `request.POST` parameter. Guessing that this should be consistent with the above change?
Have no idea if this is correct, however it looks good, so I merged it.
@brianmay thanks for the merge!

See https://github.com/sehmaschine/django-grappelli/blob/master/grappelli/templates/admin/change_form.html#L143 
and https://github.com/django/django/blob/master/django/contrib/admin/templates/admin/change_form.html#L16

The URLs in those template are proper now URL reversing instead of old hardcoded "../../../../".
My changes are about being consistent with those new standards ;)
Yes, noted the urls. Very good. Thanks for the pull request.
breaking tests with postgres
@fgaudin , do you think it is a ready?
it is
@brianmay , do you can rebase and merge it?
Thank you for contributions.
Thanks for this. Probably should add Django 1.10 to the Travis tests at some stage too...
Thanks for merging this, would you mind to issue a new release as well?
The current setup.py (non explicit version) makes it hard to use a non-tagged commit.
Thanks ++
I am facing the same issue. My head was spinning while trying to figure out how a simple setup.py versions was guessed .... Could there be a simpler, more explicit way that would be friendly to forks and temp dev releases? like using `version="1.4.5"` in `setup.py` .... eventually using `bumpversion` to propagate that in multiple places explicitly?
To get an idea by what I mean see this branch here: https://github.com/pombredanne/django-guardian/tree/simple-setup and https://pypi.python.org/pypi/django-guardian-on-wheels
Hi. 

Getting a release for this would be great for those having Django 1.10. 

Thank you.
Version 1.4.5 has been released.
LGTM
@AGASS007, this might be interesting for you. Thank you for report that!
Thanks man!
All tests pass. LGTM.
Thank you @PierreF . Good job.
![giphy](https://cloud.githubusercontent.com/assets/3618479/18228703/10afea46-725a-11e6-8477-0957ce46c173.gif)
@brianmay , here is CHANGES after merge above commit:

```
- Improve performance of get_objects_for_user
- Add test-covered and documented guardian.mixins.PermissionListMixin
- Allow content type retrieval to be overridden fg. for django-polymorphic support
- PermissionRequiredMixin support CreateView-like (no object) view
- Add django 1.10 to TravisCI and tox
- Run tests for example_project in TravisCI
- Require django 1.9+ for example_project (django-guardian core support django 1.7+)
- Fix django versions compatibility in example_project
```

I skip no-feature changes like drop some warning in docs build etc. It need grammar checks too, so I don't put in repo.
Looks good to me. It really doesn't need to be perfect grammar wise, just as long as see what has been changed in each version at a glance.

The obsessed work colleague of mine would complain that the sentences don't end with a full stop.

Can you please add this to CHANGES and commit? Thanks.
@brianmay , well done. CHANGES updated. I am not sure how prepare pypi packages with setuptools_scm etc.
I can do that, probably tomorrow now. I can also list the steps I use if you want too.
I don't have permission and I like review, so I leave doing releases for you.
Done.
@rpkilby , thank you for your contribution.
`django.contrib.auth.validators` was introduced in django 1.10.1 (see https://github.com/django/django/commit/526575c64150e10dd8666d1ed3f86eedd00df2ed ). It's unacceptable to drop support for django<1.10.1. Support for django 1.9 from django foundation has not ended even. Mosts builds fails.
> It's unacceptable to drop support for django<1.10.1. Support for django 1.9 from django foundation has not ended even. 

Agreed - definitely not trying to drop supported versions of Django. The migrations are being difficult to update. On the one hand, you have deprecations which prevent you from using `python -W error` (~~errors are raised before the test suite even runs~~ was a separate issue, but still causing the test suite to fail). On the other hand, you have compatibility issues (such as the validators from `contrib.auth`).
Thanks, that definitely makes sense!
good catch, thanks
Oh, I see that tests are broken:( Tomorrow I will send new patchset
Some tests fail. I am unable to merge.
The issue is closed due to inactivity. Feel free to contact if you plan to continue working on this
Thanks!
Thanks @jfw ! 🎉
@caymard , thanks!
As mentioned in #478 I replace setuptools_scm to bumpversion. I am open to discuss that. It fix #445 . There is also some other issues related to setuptools_scm integration (see #425).
Looks fine to me.
@mikeengland , thanks!
Thanks!
Thanks, @adamn !
thanks
@michael-k , thank you.
I've updated the PR due to the release of Django 1.11
https://www.djangoproject.com/weblog/2017/apr/04/django-111-released/
@michael-k , thanks!
@brianmay , I prepared fix. I made a new commit due new build-in GitHub squash mechanism.
Generally looks good. Just some minor nitpicks. Sentences should end with a full stop. Also use "e.g." instead of "eg.". Maybe put a comma before the "e.g."
`consist` should be `includes`
`reflect` should be `reflects`
@michael-k , thanks!
@michael-k , thanks!
Thanks!
Thanks!
Oh...
I see. It fails on non sqlite engines
UPDATE:

In [Django 1.11.0](https://docs.djangoproject.com/en/1.11/releases/1.11/#models) added support for expressions in `QuerySet.values()` and `values_list()`

This PR switch `django-guardian` to use subqueries with casting for `get_objects_for_user`, `get_objects_for_group` and `bulk_remove_perm` when `django.VERSION >= (1, 11)`

Mysql `RemovePermTest.test_group_remove_perm_queryset` failed on query with `Illegal mix of collations (utf8_unicode_ci,IMPLICIT) and (utf8_general_ci,IMPLICIT) for operation '='` on travis for example query with casting `django_content_type.id` to `CharField`
```
SELECT `guardian_groupobjectpermission`.`id`,
       `guardian_groupobjectpermission`.`permission_id`,
       `guardian_groupobjectpermission`.`content_type_id`,
       `guardian_groupobjectpermission`.`object_pk`,
       `guardian_groupobjectpermission`.`group_id`
FROM `guardian_groupobjectpermission`
INNER JOIN `auth_permission` ON (`guardian_groupobjectpermission`.`permission_id` = `auth_permission`.`id`)
WHERE (`guardian_groupobjectpermission`.`group_id` = 1
       AND `auth_permission`.`codename` = change_contenttype
       AND `auth_permission`.`content_type_id` = 3
       AND `guardian_groupobjectpermission`.`object_pk` IN
         (SELECT CAST(U0.`id` AS char) AS `139863149604704`
          FROM `django_content_type` U0
          WHERE (U0.`model` = bar
                 AND U0.`app_label` = fake-Local on 
                 FOR-guardian-tests)))
```

As I know it was because table field `guardian_groupobjectpermission`.`object_pk` collation does not same as default mysql client collation.
And if rebuild & configure mysql database on travis to use one collation all tests will pass (passes on my local machine with mysql local setup)
Sorry, still trying to find time to look at this in detail. ``object_pk`` has always been a problem with other pull requests designed to optimise performance. We define it as a string, so in theory we can point to objects that have any type of pk. However this means that if we try to do certain join operations we typically end up trying to compare a string with an integer on the database. Which databases do not like. While I don't understand the error you are getting, I suspect it might be related.
Thanks.
It's too hard do smart queries when `object_pk` so "generic" )
But `django >= 1.11.0` allow us do casting on the database side.
I have not enough experience with mysql and don't know how fix `Illegal mix of collations` error. But on my local setup tests passed.
I hope to find any help to resolve bug with mysql.
UPDATE 2:

1) All tests passed now. `Illegal mix of collations` fixed by 

```
 if 'mysql' in DATABASES['default']['ENGINE']:
￼     DATABASES['default']['TEST'] = {
￼         'CHARSET': "utf8",
￼         'COLLATION': "utf8_general_ci",
￼     }
```

2) added test case for `get_objects_for_group` to check number of queries
This makes me nervous that everyone using this change with Mysql would require setting the ``CHARSET`` and ``COLLATION`` values.

However I still don't really understand - what is the default value of ``COLLATION`` - isn't it ``utf8_general_ci`` anyway?
> However I still don't really understand - what is the default value of COLLATION - isn't it utf8_general_ci anyway?

I don`t know ) May be in mysql config default COLLATION is defined.

And I agree with you about dangerous of this PR )

May be we must introduce new optional setting?
Something like `GUARDIAN_PREFER_SUBQUERY = False` and use subqueries only `if GUARDIAN_PREFER_SUBQUERY is True and django.version >= (1, 11)`
Is this really worth the effort?  I consider `object_pk` a good default to quickly get your code up and running, but nothing more. As soon as you start thinking about performance, you should use [foreign keys](https://django-guardian.readthedocs.io/en/stable/userguide/performance.html#direct-foreign-keys) instead and they are not affected by this PR.
I agree with performance tuning by "direct foreign keys".

In my opinion two ways are:
 - improving "default generic behaviour" by sub-queries (so easy maintenance)
 - improving "direct foreign key" way by some helpers to auto-declare direct relation with meta-programming method (so hard to maintenance) etc. to simplify maintance a ton of models

In my app I have less then 10 models worked with `django-guardian` and "direct foreign key" must solve any performance problems in future.
I am wondering if merging #637 has now solved the issues here?
Sorry ) Please wait some time.
I will try to check this PR and  #637 on demo project and show results.
Yes. #637 or may be another code do this job.

Now `get_objects_for_user` use one query with sub-queries and casting. 

```
(0.000) SELECT "posts_post"."id", "posts_post"."title", "posts_post"."slug", "posts_post"."content", "posts_post"."created_at" FROM "posts_post" WHERE ("posts_post"."id" IN (SELECT CAST(U0."object_pk" AS bigint)
AS "obj_pk" FROM "articles_biguserobjectpermission" U0 INNER JOIN "auth_permission" U2 ON (U0."permission_id" = U2."id") WHERE (U0."user_id" = 1 AND U2."content_type_id" = 9 AND U2."codename" IN ('view_post'))) O
R "posts_post"."id" IN (SELECT CAST(U0."object_pk" AS bigint) AS "obj_pk" FROM "articles_biggroupobjectpermission" U0 INNER JOIN "auth_group" U1 ON (U0."group_id" = U1."id") INNER JOIN "core_customuser_groups" U2
 ON (U1."id" = U2."group_id") INNER JOIN "auth_permission" U4 ON (U0."permission_id" = U4."id") WHERE (U2."customuser_id" = 1 AND U4."codename" IN ('view_post') AND U4."content_type_id" = 9)))  LIMIT 21; args=(1,
 9, 'view_post', 1, 'view_post', 9)
```

In `example_project`

```
>>> from core.models import CustomUser
>>> user = CustomUser.objects.get(username='AnonymousUser')
(0.001) SELECT "core_customuser"."id", "core_customuser"."password", "core_customuser"."last_login", "core_customuser"."is_superuser", "core_customuser"."username", "core_customuser"."first_name", "core_customuse
r"."last_name", "core_customuser"."email", "core_customuser"."is_staff", "core_customuser"."is_active", "core_customuser"."date_joined", "core_customuser"."birth_date" FROM "core_customuser" WHERE "core_customuse
r"."username" = 'AnonymousUser'; args=('AnonymousUser',)
>>> from guardian.shortcuts import get_objects_for_user
>>> get_objects_for_user(user, 'posts.view_post')
(0.000) SELECT "django_content_type"."id", "django_content_type"."app_label", "django_content_type"."model" FROM "django_content_type" INNER JOIN "auth_permission" ON ("django_content_type"."id" = "auth_permissio
n"."content_type_id") WHERE ("django_content_type"."app_label" = 'posts' AND "auth_permission"."codename" = 'view_post'); args=('posts', 'view_post')
(0.000) SELECT "django_content_type"."app_label", "auth_permission"."codename" FROM "auth_permission" INNER JOIN "core_customuser_user_permissions" ON ("auth_permission"."id" = "core_customuser_user_permissions".
"permission_id") INNER JOIN "django_content_type" ON ("auth_permission"."content_type_id" = "django_content_type"."id") WHERE "core_customuser_user_permissions"."customuser_id" = 1; args=(1,)
(0.000) SELECT "django_content_type"."app_label", "auth_permission"."codename" FROM "auth_permission" INNER JOIN "auth_group_permissions" ON ("auth_permission"."id" = "auth_group_permissions"."permission_id") INN
ER JOIN "auth_group" ON ("auth_group_permissions"."group_id" = "auth_group"."id") INNER JOIN "core_customuser_groups" ON ("auth_group"."id" = "core_customuser_groups"."group_id") INNER JOIN "django_content_type"
ON ("auth_permission"."content_type_id" = "django_content_type"."id") WHERE "core_customuser_groups"."customuser_id" = 1; args=(1,)
(0.000) SELECT "posts_post"."id", "posts_post"."title", "posts_post"."slug", "posts_post"."content", "posts_post"."created_at" FROM "posts_post" WHERE ("posts_post"."id" IN (SELECT CAST(U0."object_pk" AS bigint)
AS "obj_pk" FROM "articles_biguserobjectpermission" U0 INNER JOIN "auth_permission" U2 ON (U0."permission_id" = U2."id") WHERE (U0."user_id" = 1 AND U2."content_type_id" = 9 AND U2."codename" IN ('view_post'))) O
R "posts_post"."id" IN (SELECT CAST(U0."object_pk" AS bigint) AS "obj_pk" FROM "articles_biggroupobjectpermission" U0 INNER JOIN "auth_group" U1 ON (U0."group_id" = U1."id") INNER JOIN "core_customuser_groups" U2
 ON (U1."id" = U2."group_id") INNER JOIN "auth_permission" U4 ON (U0."permission_id" = U4."id") WHERE (U2."customuser_id" = 1 AND U4."codename" IN ('view_post') AND U4."content_type_id" = 9)))  LIMIT 21; args=(1,
 9, 'view_post', 1, 'view_post', 9)
<QuerySet [<Post: fgf>]>
```
Thanks for checking this.
Did you forget to add `flat=True` or did you leave it out on purpose?  (lines 34 + 36)
It would be safer to extend the introduced `django.VERSION >= (1, 11)` checks as follows:
```python
from django.conf import settings
if django.VERSION >= (1, 11) and all('mysql' not in db['ENGINE'] for db in settings.DATABASES.values()):
    pass
```
No. On 34+36 lines returned `QuerySet` not list.
As I know `values('id')` and `values_list('id')` and `values_list('id', flat=True)` have same effort when resulting `QuerySet` used as subquery.

```python
In [2]: print(Company.objects.values_list('id').query)
SELECT "company_company"."id" FROM "company_company"

In [3]: print(Company.objects.values('id').query)
SELECT "company_company"."id" FROM "company_company"

In [4]: print(Company.objects.values_list('id', flat=True).query)
SELECT "company_company"."id" FROM "company_company"
```

In my practice I use `values_list('id')` for subquery usage, this is way more logical for me.

But it is not principal for me.
You want `values_list(<some field>, flat=True)`?
> You want values_list(<some field>, flat=True)?

No, I was just wondering.
Thanks!
Thanks for merging this! When is the next release? I am excited to get this fix.
@taylor-cedar, there is no strict release cycle. There is no strict release cycle here. However, at this moment - in my opinion - there are [not so much changes](https://github.com/django-guardian/django-guardian/compare/v1.4.8...devel) to release new versions.I believe that we must consider that some people have pin library version, review all the changes, so too frequent release are undesirable.
@ad-m Thanks for responding. I definitely agree that too many releases would be undesirable (people have to download the new version, members have to create the release, etc.).

You control the repo, so I don't want to impose on how you want to run it, but my suggestion would be to release bug fixes every couple weeks (minor version changes) `*.*.<release_number>` if there are important bug fixes (ignore readme changes, test fixes, etc.). I would consider my fix important, but I understand you don't agree. I can't use the django-guardian admin right now because it doesn't work on django 1.11. I know I can fork the project, change it locally, etc., but I think django-guardian is a great project and would like to continue to get fixes/updates. I am totally fine waiting a couple weeks to get a new release, but there hasn't been a release in 2 months. I won't be able to use the library if I have to wait that long.

I hope this doesn't come off aggressive. I am happy to help in any way I can. I know you are doing this for free and I really appreciate all the work you have done.
I understand your point of view. I decided to develop a new release in the near future (today or tomorrow). Convincing was particularly a fragment of the lack of use of the application (" I can't use the django-guardian admin right now because it doesn't work on django 1.11."). I do not see anything aggressive in your comments. You gave me valuable arguments.
@taylor-cedar , there is it: https://github.com/django-guardian/django-guardian/releases/tag/v1.4.9 . Django guardian follows [Semantic Versioning 2.0](http://semver.org/).
Thanks! Really appreciate it.
@duvholt , thanks!
Thanks!
Thank you!
Looks good. Thanks!
While there is no official 2.0 release I think I should wait. As soon as django released version 2.0 I can merge that.
@michael-k , do you can fix Django version specification?
@michael-k , do you can fix django version classifiers in setup.py?
Fix in #537
Looks good. Thanks!
Do you can add test for that?
I've added a test that fails on master and passes in this pull request.
Your license scan is passing -- congrats!

Your badge status is now updated and ready to merge:

[![FOSSA Status](https://app.fossa.io/api/projects/git%2Bgithub.com%2Fdjango-guardian%2Fdjango-guardian.svg?type=shield)](https://app.fossa.io/projects/git%2Bgithub.com%2Fdjango-guardian%2Fdjango-guardian?ref=badge_shield)
License scan fail. License scan has status "not analyzed".
Since Django 2.0 is not available in Python 2.7, and django-environ automatically installs the latest version of Django, we must install all dependencies in one command to ensure correct version resolution by pip.
previous commit adds standalone cache for model level permissions even if directly accessed via `get_user_perms` and `get_group_perms`
I now more firmly believe that falling back to model permissions should be via falling back to django default backend, not within Guardian. While this is in the mean time (that was what it was meant to be) useful; should eventually be get rid of. I also have a pull request at Django to help this. Maybe it is better not to pull this in, in hopes that, that one will be.
Is there anything else needed for this to be merged? Just had my production database taken down because this query was taking more than 30s
@aaronmader , could you rebase?
I've rebased my pull request. 

I should maybe clarify the approach that I'm taking here (since it's changed from my original pull-request comment). 

Instead of performing a single query joining 5 tables; I perform one query to fetch all of the group_ids for the object from the group_permission_record table (no table joins needed), and then I fetch all of the users that belong to one of those groups (a join across 3 tables).

Unrelated to my pull-request, it looks like there's a bug here, regarding the new `only_with_perms_in` logic. The for-loop here will update the same key on every iteration, replacing any previous value. We should probably be fetching all of the Permission records at once, and then using an `__in` query.
@auvipy I'd be happy to whip something up, but I'll admit that I don't come from a unittesting background. Can you point me to a resource on how I'd write a unittest for a performance gain? Sorry that this is a bit of a naive question.

I assume I can't just set a time-value limit like: "It must run in under 200ms", because there'd be too much variability between different workstations and database backends (sqlite vs mysql).

So what would I be testing? Just that the new code runs faster than the old code?
I think the unit test doesn't need to test the performance gain. Rather it should demonstrate that the function call still works as required (assuming there isn't already such a unit test), e.g. by doing some sample queries for different cases.
It looks like the get_users_with_perms shortcut method is well tested in [testapp/tests/test_shortcuts.py:GetUsersWithPermsTest](https://github.com/django-guardian/django-guardian/blob/cea980c5ddb1907e891734de45992b15651bf689/guardian/testapp/tests/test_shortcuts.py#L284)
I checked this in my project. Big performance benefit on big user pools. Code works with both, group and user permissions.
some related tests would be appropriate.
There is some more requirements for tests: https://github.com/django-guardian/django-guardian/blob/devel/tox.ini#L24 
Do you can cleanup them?
@ad-m can you elaborate on what needs to be cleaned up?
I thought about referring to requirements.txt in tox.ini, but let it stay as it is.
May I get an update on when/if this will be merged?
Can someone review if the code looks okay?
I do not have comments, but let us make a statement to the others who are entitled to approval.
May I get an update on this?
Can someone merge this?
@satyanash so it looks cool but please provide update to the docs too. I've merged it before realising it so please create another PR
@lukaszb I thought changes to the docstring would've been sufficient. Please let me know where else the documentation needs to be updated?
Allright, yeah, after second thought, docstring should be enough here. Thanks again!
Sorry, I'm not sure where best to post my comment.. 

It looks like there's a bug here: 
```
            if only_with_perms_in is not None:
                for permission in only_with_perms_in:
                    group_filters.update({
                            'groups__%s__permission' % group_rel_name: Permission.objects.get(
                                content_type=ctype, codename=permission)
                            })
```

The for-loop here will update the same dictionary key on every iteration, replacing any previous value. 

Also, performance-wise, I'm thinking we should probably fetch all of the Permission records in a single query, and then apply it to group_filters using an __in query.
> The for-loop here will update the same dictionary key on every iteration, replacing any previous value.

Could you write test case for that as proof and as regression protection?
I've pushed some additional commits.  Now (pending) deprecation warnings are shown, see [this test run](https://travis-ci.org/michael-k/django-guardian/jobs/365488658#L590-L612) for an example, and fixed.

Since everything that will be removed in Django 2.1 was deprecated since at least Django 1.11, even the tests against Django master are now green.
Can someone merge this?  I'd like to add official Django 2.1 support, but not before support for Django < 1.11 was dropped.
@ad-m You already reviewed most of the changes.  Can you give the remaining 4 commits a review and pull them in?  They are fairly small, should be easy to review and do not touch the core implementation.
@michael-k , thank for you work. I will release new version of django-guardian at end of the week.
@ad-m Do you know when you'll make the new release? I maintain a project that depends on django-guardian and would like to add Django 2.1 support too. Thanks!
@jmsmkn Release 1.4.9 should work with Django 2.1.  We're using it in production.

My PRs mostly included cleanups of the example/test code and updates to the test matrix.
Thanks!
Thanks!
I've updated this to 2.2.0 just now. Please notify me if there's anything I can do to help get this merged at some point.
In the case of this issue, I would like to wait for issue #675, because it fixes the current functionality and brings additional tests, in the area in which this code - in my opinion - may potentially require attention.
now that #675 is closed (superseded by #691), can we please get this merged in? We're seeing significant slowdowns on views where this is an issue.
Hey guys. Is this ever going to be merged?
For me ok to merge. I would like merge that as soon as rebased.

@TauPan could you rebase?
> For me ok to merge. I would like merge that as soon as rebased.
> 
> @TauPan could you rebase?

Done. github tells me that travis needs maintainer approval.
Approved on CI.
Sorry, my patch to silence the pytest collection warnings made the tests fail. I've removed that (and actually ran tox locally this time) sorry.
Don't worry. Approved on CI again.
Hey guys, thanks for merging this :)
Just to know, are there any ETA on the next release of django-guardian?
>  Just to know, are there any ETA on the next release of django-guardian?

No
I have ran into an integrity error (Duplicate entry) when assigning perm to user/group queryset that some of them has already been assigned that perm. For example, there is a queryset contains `group1`~`group4`. Yet `group1` has already been has assigned `perm1` on an object. Then if I do `assign_perm('perm1`, queryset, object)`, it will raise the integrity error.

Maybe a `has_perm` check before doing `bulk_create()` like what has done in [`bulk_assign_perm()`](https://github.com/django-guardian/django-guardian/blob/devel/guardian/managers.py#L67-L76) is necessary?

Sorry for replying here since I am not sure if this should be opened with a new issue. If this is not appropriate, plz let me know.
Where is the position of "操作"? Why don't you comment in "Files changed"?
@lintingbin2009 (author #591), could you review that pull request? I do not know Chinese, so it is difficult to judge whether pull request is correct, if users do not discuss and do not accept.
@ad-m This PR is good, I think you should merge it.
@ad-m rebased
Looks good for me.There is conflict. 

Ping me after rebase to merge.
@Jay54520 (author #578), could you review that pull request?
@ad-m Ok, I'll review now.
@lintingbin2009 How do you generate the `django.po`, there are some missing such as 

```
#: guardian/admin.py:462
msgid "Enter a value compatible with User.USERNAME_FIELD"
```

And I think this PR is duplicate with https://github.com/django-guardian/django-guardian/pull/578/files.
> @lintingbin2009 How do you generate the `django.po`, there are some missing such as
> 
> ```
> #: guardian/admin.py:462
> msgid "Enter a value compatible with User.USERNAME_FIELD"
> ```
> And I think this PR is duplicate with https://github.com/django-guardian/django-guardian/pull/578/files.

Not, I copy "django.po" from the other language.
PR is not possible to merge because it contains everything. @lukewiwa , can you rebase? Users in issue #611 awaiting for that PR
@ad-m Looks like this has been resolved in the latest devel branch by changing the urls to paths anyway. Should I still rebase then? Thinking it might not be worth it.
@lukewiwa , 10 hour ago I implemented that by self (see #634). 6 hour ago I released new version which includes that changes. Any feedback welcome!
BTW. Do you have still any needs to keep own fork?
@ad-m nah will delete
why not make the move to path while were at it ?
I don't think you should drop support for django 1.11. It's still used by a lot of developers and it's the current LTS version. Django 2.2 is not stable yet
It's in beta. It will be released in April. Guardian 1.4.9 will not cease to work.
As this breaks backward compatibility, if you want to comply with [semantic versioning](https://semver.org/), this would mean:

* You should release a version 1.5.1 that restores compatibility with Python 2.7 - even if it means simply reverting the patch.
* You should release the new version that breaks Python 2.7 with a new major version number of 2.0.0.

This means that:

* It is possible to continue releasing fixes - including security fixes (in the unlikely event this will be required) for the 1.5.x branch without forcing everyone to upgrade the Python release.
* The major version increase is a warning for people doing upgrades that upgrading might cause breakage.

Apart from that, happy with this change.
> version 1.5.1 that restores compatibility with Python 2.7

I've opened PR django-guardian/django-guardian#605 for that :)
I've included the drop of Django 2.0 support.  It reached its EOL one month ago with the release of Django 2.2 and django-guardian 1.5.x supports Django 1.11-2.2 which should be sufficient enough for users who are upgrading from one LTS to the next.

> in the case of wheel abandonment, an instruction of release update is required in `docs/develop/overview.rst`

Wheels are not abandoned, just no longer universal, ie. python 3 only.

> in the case of abandoning old versions of Django - updated information on supported versions in `docs/develop/supported-versions.rst` and `README.rst` is required

Should be the case.

> in the case of abandoning old versions of Django - updating the documentation in `docs/userguide` is recommended.

I'm not aware of anything else¹ that needs to be updated.

¹ This PR will remove: `from django.utils.six import python_2_unicode_compatible`
> Wheels are not abandoned, just no longer universal, ie. python 3 only.

Yup, I agree. If you want to change anything about `docs/develop/overview.rst`, perhaps change:

```
Push a new release to PyPI - python setup.py sdist bdist_wheel upload.
```

To


```
Push a new release to PyPI - python3 setup.py sdist bdist_wheel upload.
```

To execute as Python 3.
I don't see it mentioned anywhere, however if you want to be [semver](https://semver.org/) compliant, the next release after merging this should be a major version release, because it breaks backward comparability. Doing so indicates to users that compatibility might be broken, and also allows doing patch updates to the old version (e.g. for security updates).
@michael-k is there anything what do you want to add or I can merge & update changelog & release new version?
I've added `python_requires` to setup.py.  That should help users who are still using Python 2.7 in combination with recent versions of pip/setuptools.

Other than that, I'm not aware of anything that should be added. :)
Done: https://github.com/django-guardian/django-guardian/releases/tag/v2.0.0 :shipit:
What a nice clean-up. Lovely. 👍
You can add the `'Programming Language :: Python :: 3 :: Only'` trove classifier to `setup.py`.
I am asking for the following changes:
- in the case of wheel abandonment, an instruction of release update is required in ```docs/develop/overview.rst```
- in the case of abandoning old versions of Django - updated information on supported versions in ```docs/develop/supported-versions.rst``` and ```README.rst``` is required
- in the case of abandoning old versions of Django - updating the documentation in ```docs/userguide``` is recommended.
You can remove these encoding cookies. Python 3 defaults to reading source files as utf-8.
The wheel is no longer universal, you should drop the `[wheel]` section entirely.
Django 2.2 has been released, can drop the `b1`.
Normally I would and in this case I simply forgot.

About a month ago it was brought to my attention that this might be unrelated to Python 2/3 why I wonder if there are any downsides to removing them.  I started with Python 3 and never really used Python 2.  If anyone could enlighten me, I would really appreciate it. :)
ref https://github.com/celery/celery/pull/5288#pullrequestreview-221080631 and https://www.python.org/dev/peps/pep-0263/
hi guys,

what's preventing us from merging?

cheers
Fellas?
\o/
Why not combined index (```index_together```) on ```object_id``` and ```content_type```?
Good point! I've updated the pull request.
Currently a supported version of Django by django-guardian is 2.1+. Since 1.11 ```index_together``` is deprecated, use ```indexes``` instead to avoid introducing technical debt. See Django docs https://docs.djangoproject.com/en/2.2/ref/models/options/#index-together also.
Thanks for pointing this out. Fixed.
Thank you for your cooperation and project development.
@ad-m You merged my other PR so quickly, that this PR looked like it tried to revert it 🤣.

Feel free to squash this PR when you merge into a single commit.
I think it would be a good idea to shape the example project and insert the right comments so that examples in the documentation can be obtained using ```literalinclude```. See for works of @mik-laj in Apache Airflow ( https://airflow.readthedocs.io/en/latest/howto/operator/bash.html , https://github.com/apache/airflow/blob/master/docs/howto/operator/bash.rst ). It allows us to automatically tests & lint examples of codes.
Could that be a separate PR?
Yes of course. I share the idea, because I noticed that you want to develop the documentation of this project. The project does not have large human resources, so I think how to avoid errors and to reduce human effort to maintain.
I've checked the Django code and as far as I can tell it always provides the `using` argument to the signal. I've also verified that this change fixes the issue I was having in my own code (caused by a blank `default` database config).
Is there any generic way to identify other bugs like that?
Not as far as I know. Basically any query or `save()` call can specify which database to use. Generally, the default DB is used most of the time, but any time the user is doing something specific for one database you might need to specify the DB. I don't know enough about the django-guardian internals to know when it's appropriate to specify the DB config to use.
Could you add the documentation indicating the use case of new feature, the benefits of the solution and its limitations, when its use is recommended and when it should definitely not be used?
Added to configuration docs, although would deserve a mention in performance tuning if merged.

The need for this patch internally is that we check object permissions across many different contenttypes in many different locations in the code. It's not always possible to pass a prefetched permissions checker object into these functions, and even if we were able to, each prefetch requires its own query so for N contenttypes you have N queries. The above patch resolves all permissions available to a user in 2 queries (one for groups, one for users).

Per the docs this should not be used in non-standard deployments (our setup is fairly vanilla when it comes to perms and contenttypes) and as with any prefetching, it should not be used when the ratio of total number of rules (objects * permissions) is orders of magnitude greater than the number of saved queries (i.e. it does not make sense to prefetch 1mm permissions to save 5 queries).
There is still a lack of testing to ensure that the code will work with future versions of Django. Could you add any tests?
I can add some tests to verify that the caching is actually working, but the only Django compatibility issue would be namespace on the User model (i.e. being able to setattr and delattr _guardian_perms_cache)

Do you think testing the above two conditions would suffice? Or can you think of a better way to test Django compatibility?
I've added some tests, as well as branches to ensure this only activates against User objects. I'm happy to add functionality for Groups as well (not something we do in current project) if this PR is something worth merging
I think that this is an element worth incorporating into the project, which is why I am cooperate to bring the change to a level acceptable by the project.
I added Group support and some tests. All of the tests mimic the existing prefetch tests except they add a few more checks.
Looks good to me. Do you want to add anything else, can I merge it?
@ad-m fire at will Commander
@woakas, le'ts look #366 and CI tests results, especially for psql. I am not able to accept PR if tests fail.
@ad-m Done, I fixed the test, let me know your thoughts about this PR.
@ad-m I just verified that with this change, `pip` can properly install `django-guardian` in an offline environment (because `pip` is then in control of how everything is installed).
It looks that tests fail. Non-mergable in that state.
What should I do now?
Making all necessary changes to make the tests pass. See at https://travis-ci.org/django-guardian/django-guardian/builds/588877851 for logs.
Closed by #667
Use ```django~=3.0```  instead.
It seems that this is not correct until version 3.0.0 is released. Let him stay that way for now.
> Django 3.0 supports Python 3.6, 3.7, and 3.8. We highly recommend and only officially support the latest release of each series.
> The Django 2.2.x series is the last to support Python 3.5.

https://docs.djangoproject.com/en/dev/releases/3.0/
ERROR: No matching distribution found for Django==3.0.*, could you try 3.0a1 instead?
`django~=3.0` won't be correct after the release of 3.0.0 as well.  It's equivalent to `>=3.0, ==3.*`.  https://www.python.org/dev/peps/pep-0440/#compatible-release

`django~=3.0.0` is what you were looking for. :)
Why has no test detected this?
We merged this just few days ago on Sep 24, 2019.
Ok, merged! As I understand, there is no urgent reason to create a new release due to this patch.
Not really :smile:
Bumpversion is not requried to install django-guardian. It's only for development management purpose like eg. CI configuration.

Django was removed from ```install_requires``` ( https://github.com/django-guardian/django-guardian/commit/2eefc7b4c325028d42b28a4d52d5c6ac6a4891e3#diff-2eeaed663bd0d25b7e608891384b7298 ) for purpose. See  #423 .
@ad-m I pushed a new commit that doesn't include `bumpversion`.

Respectfully, I disagree with the conclusion of #423. The point of putting Django in setup.py isn't to transitively install Django... of course everyone using Django Guardian already requires Django. The point is to codify the Django version constraint (>=2.1, currently) so that package managers like pip and upgrade managers like [pip-tools](https://github.com/jazzband/pip-tools/) can correctly select a version of Django Guardian version of install/pin that is compatible with the installed/pinned Django version.

Our project (https://github.com/edx/registrar) uses `pip-tools`, and our upgrade pipeline was thwarted when it selected Django Guardian 2.1, which doesn't support our current Django version (1.11). None of the other packages that our project requires have this issue.

This request is not specific to my use case; it is specified in the official Python documentation, and is widely used by most packages. _Not_ wanting to have requirements defined in `setup.py` is the special case.
One of the complaints in #423 was that “one doesn't expect `pip install django-guardian -U` to upgrade Django.”.  But nowadays¹ we have pip-tools and pipenv and one should use those in combination with full pinning.  If a specific version of Django is desired, it should be pinned (eg. by using an upper bound like  `django<3.0` in `requirements.in` (pip-tools)/`Pipfile` (pipenv)).

¹ Even back in 2016  one could have used a requirements.txt instead of `pip install -U <package_name>`.  Related: https://github.com/django-import-export/django-import-export/issues/710#issuecomment-351740662).
I was never particularly happy having this removed; I guess it makes sense that I should support adding it again :+1:
I will fix the failing tests
https://github.com/encode/django-rest-framework/pull/7012 is related to this
Missing changes in envlist in tox.ini.
Missing changes for TravisCI ( https://github.com/django-guardian/django-guardian/blob/devel/contrib/travis/test.sh#L12 ). Propably we can test example project on all tested Django version.
i will be back soon
NameError: name 'force_text' is not defined, it should be force_str?
can you check the remaining two failing tests? a new release is needed for django-rest and django 3rc1 compat
```
guardian/testapp/tests/test_mixins.py:30

  /home/travis/build/django-guardian/django-guardian/guardian/testapp/tests/test_mixins.py:30: PytestCollectionWarning: cannot collect test class 'TestView' because it has a __init__ constructor (from: guardian/testapp/tests/test_mixins.py)

    class TestView(PermissionRequiredMixin, RemoveDatabaseView):
```
This seems to be a problem only with the Mixin class naming so that it is not detected as a test (it is a view).
OK will check
Does this PR supersede #642?
yes
Closed by #667
is this template part really necessary?
It simplify syntax, so I recommend keep it.
How do other Django projects usually approach the "ID" field?
Missing migration...
id AutoField is automatically created by django Model -- if it is not overridden

So this is likely the most typical for many projects.

Keeping under 2^31 aggregate lifetime instantiations per model is pretty typical.  However,  UPO and GPO are potential aggregates of other model instantiations. Thus it becomes less likely to stay comfortably away from 2^31.
It looks like this change will require applications to be updated also, when they have foreign keys that point to this ID. This includes the demo app, included with Guardian. As per travis logs:

```
Migrations for 'articles':
  articles/migrations/0002_auto_20191106_1221.py
    - Alter field id on articlegroupobjectpermission
    - Alter field id on articleuserobjectpermission
The command "./contrib/travis/test.sh" exited with 1.
```
Is the Travis failure because it auto generated a migration?
We have tests for missing migration in TravisCI. Any migration generated on TravisCI make tests fail as missing migration in commit.
See https://github.com/django-guardian/django-guardian/blob/devel/contrib/travis/test.sh#L12 .
I wonder if we should make such a change in this way. This will affect all projects that use our library. The migration process itself will require considerable attention from users. I am not sure how this change will affect a number of database engines that we support, because this is not the default behavior of Django (probably for a reason).
I would hope that all databases support BigAutoField. Although I can't be sure of this. It could be legacy reasons however why it isn't the default. Changing the default would break every deployed Django application.

I am not fond of the way Django encourages libraries (such as Guardian) to come with their own database tables (yes, I use to like this). It means if you want to make any changes to the supplied tables for your own application (no matter how simple or complicated), you have limited options,  all of them generally bad:

* Get change in upstream library.
* Fork upstream library.
* Add config options in upstream library.
* Add ability to substitute db model class for another class (similar to Django user).
* Monkey patch upstream library (no idea if this is possible; don't want to think about it)
* In this case, manually adjusting the database outside migrations might work.
* In other cases adding a one-to-one relationship with another table can help add extra fields.
* Probably others I can't think of right now.

(as an example of another approach, there is a Guardian library for Elixir, that does token based authorization, but instead of providing its own database tables it requires 2 hooks (functions) that retrieves the data from the database on its behalf)

Another solution here might be to use BigAutoField if and only if there is some setting, e.g. settings.GUARDIAN_USE_BIG_ID that is defined. Not sure I really like adding even more settings, but something to thing about. It should be simple to implement, and preserves backward compatibility with existing applications.
@partimer, are you use direct foreign key?
Not at the moment.  And may not work (well) for particular cases where Models are dependent on permission of GenericKey reference where the permission is compared against the content_type_id+object_pk in both tables.

Having a configurable GUARDIAN_USE_BIG_ID is probably the safest approach.
How to manage migrations when having a configurable GUARDIAN_USE_BIG_ID?
If GUARDIAN_USE_BIG_ID=True, then adding a migration to guardian later would likely require "./manage.py makemigrations --merge".

Definitely not clean or smooth....

Is it feasible to switch to a different model similar to get_user_model()/AUTH_USER_MODEL?
i.e. BigUserObjectPermission or BigGroupObjectPermission
- This type approach would avoid the de-serialized migrations.
- Potentially allow overriding of the ObjectPermission Model

What potential pitfalls am I not seeing with this approach?
I am a bit nervous about using something like AUTH_USER_MODEL, but it probably is an option worth exploring all the same. Need to make sure that the migrations under Guardian do not change even if the model changes. It is OK for the applications migrations to change, not the Guardian migrations. I can't remember how this works for `AUTH_USER_MODEL` right now.
`AUTH_USER_MODEL` is only automatically supported (and encouraged) when set at the start of a project.  There is an explicit not supported disclaimer after the start of a project.
https://docs.djangoproject.com/en/2.2/topics/auth/customizing/#auth-custom-user

Then internally or externally get_user_model() is used to obtain the project's current User model. 
```
from django.contrib.auth import get_user_model
User = get_user_model()
User.objects.all()
```

Instead of the current:
```
from guardian.models import UserObjectPermission, GroupObjectPermission
```
Something like:
```
from guardian.models import get_group_obj_perm_model,  get_user_obj_perm_model
UserObjectPermission = get_user_obj_perm_model()
GroupObjectPermission = get_group_obj_perm_model()
```
It could also be mandated sub-classes must be derived from the guardian obj perm classes: For example in 'myapp.models':
```
class BigUserObjectPermission(UserObjectPermission):
    id = models.BigAutoField(editable=False, unique=True, primary_key=True)
    class Meta(UserObjectPermission.Meta):
        pass

class BigGroupObjectPermission(GroupObjectPermission):
    id = models.BigAutoField(editable=False, unique=True, primary_key=True)
    class Meta(GroupObjectPermission.Meta):
        pass
```
In settings:
```
GUARDIAN_USER_OBJ_PERM_USE = 'myapp.BigUserObjectPermission'
GUARDIAN_GROUP_OBJ_PERM_USE = 'myapp.BigGroupObjectPermission'
```

-No migration files in guardian (only in 'myapp')
-Downstream libraries not affected (can still just directly access)
-Downstream libraries that do support would just call `get_user_obj_perm_model() `and `get_group_obj_perm_model()`
- Customized Object Permission Models (to a reasonable extent)

_Any caveats I am missing with this approach?_
It is worth noting that in the case of django-guardian we have two types of models available:
- built-in
- external, used for DFK.

Definitely introducing the ability to swap the built-in model requires careful consideration & testing. The PR presented here modifies both of these models due to the default class hierarchy. I am not sure if the currently proposed change will work properly for full django-guardian public API, if the configuration option is enabled and the built-in model is used.

In the case of the built-in model, we manage migration. For the external model, the external application manages migrations.  

Regardless of the method of change currently proposed, I see great potential in the way ```AUTH_USER_MODEL``` works:

> ```AUTH_USER_MODEL``` is only automatically supported (and encouraged) when set at the start of a project.

The authors of Django have adopted a reasonable limitation that certain configuration options must be set at the beginning of the project and cannot be easily changed in the future. For django-guardian, it is an acceptable limit for me so that settings ```GUARDIAN_USE_BIG_ID``` can also be set at the beginning of the project.

Therefore, we must now consider how to provide the model and relevant migrations, only at the beginning of the project's life. We must consider each approach through the prism of both types of models that django-guardian currently supports.

We can introduce another way to inject an external model, which is currently proposed. However, I wonder if it is safer (in the sense of simplicity of maintenance) only to introduce a field in build-in model depending on the configuration option (which was proposed at some stage), and thus create a migration that will be sensitive to this configuration option (not proposed at any stage yet).
In other words:

>  Even if we add a migration and make it do nothing if the GUARDIAN_USE_BIG_ID is not set, this will break if somebody enables the setting after running the migration. 

I think this is not the case that we must support, at least not automatically. In this case for ```AUTH_USER_MODEL```, Django documentation refers to manual changes to the scheme, which is acceptable to me for ```GUARDIAN_USE_BIG_ID``` as a very edge case. We can resolve this case through documentation too.
My current understanding is `GUARDIAN_USE_BIG_ID` cannot satisfy automatic/smooth migrations (future compatibility).  I would consider this approach dead.

The current approach `GUARDIAN_USER_OBJ_PERMS_USE` and `GUARDIAN_GROUP_OBJ_PERMS_USE` can satisfy automatic/smooth migrations.  This is effectively the same approach as `AUTH_USER_MODEL`  in django.

- Maintains backwards compatibility with existing libraries (backwards compatible)
- Keeps migration changes with the user's application (future compatible)
- Allows users to provided their own generic object permissions (solves user specific cases)

But this approach is far more invasive and effectively adds a new feature.
How approach ```GUARDIAN_USER_OBJ_PERMS_USE``` and ```GUARDIAN_GROUP_OBJ_PERMS_USE``` can satisfy automatic/smooth migrations when ```AUTH_USER_MODEL``` in django cannot satisfy automatic/smooth migrations and approach ```GUARDIAN_USER_OBJ_PERMS_USE``` and ```GUARDIAN_GROUP_OBJ_PERMS_USE```  is effectively the same approach as ```AUTH_USER_MODEL``` in django?
`AUTH_USER_MODEL` does have automatic/smooth migrations _when set at the start of a project_.
1. Data is preserved
2. django automatically creates migrations and manual merges are not necessary (i.e. changes to the custom user model)

This is because `AUTH_USER_MODEL` must be set prior to the start of a project (no data to preserve/convert)

When changes to the custom user model are made that generate migrations, these migrations exist in the application containing the custom user model.  Since the custom user migrations are serialized within that application, there is no migration dependency for django.contrib.auth.model.User.


Under the same conditions `GUARDIAN_USER_OBJ_PERMS_USE` and `GUARDIAN_GROUP_OBJ_PERMS_USE` is expected to behave similarly:
- Only set at the beginning of a project (No initial data migration/conversion)
- Custom generic object permission migrations are contained in the user's application, not guardian
- Guardian's object permission migrations are not altered

As far the dynamic determination of the Model `get_user_model()` underneath uses 
`
django_apps.get_model('app_label.ModelName')
`
This requires django applications using a custom user model to call ' User = get_user_model()' to obtain the correct model.

Guardian is 50% of the way there in `guardian.utils` `get_user_obj_perms_model()` and `get_group_obj_perms_model()` when dealing with Direct Foreign Key object permissions.

To get the remaining 50% guardian needs to call `guardian.utils` `get_user_obj_perms_model()` and `get_group_obj_perms_model()` to determine the generic object permission model. (Note: internal to `guardian.utils` `django_apps.get_model()` would need to be called)

Any dependent library that wants to support custom generic object permissions would also need to `guardian.utils` `get_user_obj_perms_model()` and `get_group_obj_perms_model()`.
Who is the change targeted for? Do we expect new projects to benefit or existing projects? I would have existing projects was prime target audience - that is people who have suddenly discovered that the existing id field is not big enough for their needs.

Unfortunately it is existing projects that are hardest to deal with if we attempt to make this change optional.
Not sure I follow.  I needed to alter the id field to a BigSerial and additionally add an additional indexes to speed up some SQL queries (but was doing that via direct SQL).  However as @ad-m pointed out, altering the guardian generic object permission models broke future compatibility.

As for the other guardian users, if they have a case where they would need a custom functionality from generic object permissions, `GUARDIAN_USER_OBJ_PERMS_USE` and `GUARDIAN_GROUP_OBJ_PERMS_USE` approach permits it.
@brianmay Change [36f3bfa](https://github.com/django-guardian/django-guardian/pull/653/commits/36f3bfa0b09bd00249fa51bef405a923398a4faa) enables custom generic object permission models for all cases.  So, `from guardian.models import UserObjectPermission, GroupObjectPermission` now works dynamically and shouldn't.  If `GUARDIAN_USER_OBJ_PERMS_USE` or `GUARDIAN_GROUP_OBJ_PERMS_USE` are set, then the new model is picked up automatically.
If not set, nothing changes and default generic permission models are used.


@ad-m If `GUARDIAN_USER_OBJ_PERMS_USE` or `GUARDIAN_GROUP_OBJ_PERMS_USE` were set after project start, the underlying table data would have to be manually migrated. For example
```
INSERT INTO articles_biguserobjectpermission (object_pk, content_type_id, user_id)
SELECT object_pk, content_type_id, user_id
FROM guardian_userobjectpermission;
```

- [X] Maintains backwards compatibility with existing libraries (backwards compatible)
- [X] Keeps migration changes with the user's application (future compatible)
- [X] Allows users to provided their own generic object permissions (solves user specific cases)
- [X] Public API unchanged, feature enabled for existing libraries (universally enabled)

_What else should be added to the check list?_
Closing for #657 

Created another branch that only has `GUARDIAN_USER_OBJ_PERMS_USE` and `GUARDIAN_GROUP_OBJ_PERMS_USE` related changes

This way the request changes can be more clearly seen
When I previously reviewed this, I was forgetting that BigAutoField requires a migration in *Guardian*. Which is now an optional migration depending on the state of `GUARDIAN_USE_BIG_ID`. This is a huge problem. Currently we don't provide such a migration, so this will mean one will get created if the user runs makemigrations. However this will get lost on a deploy or new checkout, because it will go to the 3rd party code base. Even if we add a migration and make it do nothing if the `GUARDIAN_USE_BIG_ID` is not set, this will break if somebody enables the setting after running the migration. Revoking my previous approval (lets see if I can do that...) as we have a worse situation then what we started of with.
I am aware that this change is incompatible with Python 2.7. In #604 we drop support for Python 2.7. This PR is continuation of clean up of that PR.

I prepared it because I discovered tool ```pyupgrade``` that allows us to easily use the new syntax and simplify our code.
Looks good to me. Some of these changes might break Python 2.7 or earlier, but looks like we don't support Python 2 anymore anyway.
@michael-k , I noticed that you have a long history of cooperation with this project. All your changes to the project are just done correctly. Will you allow me to give you direct write access to the repository? In this regard, I have obtained the approval of all other persons with such permissions.

I am writing here because this is your last contribution to the project and you have not published any contact details in your GitHub profile.
> Will you allow me to give you direct write access to the repository?

Yeah, sure. :)

I saw django-guardian/django-guardian#603 and thought about the “commit bit” for some time, but my contributions were mostly pull requests. Since I value code reviews, the difference between having write access or not might not be significant.
@michael-k Permissions granted. You now have the permissions, among others to accept others' changes, even if you don't want to be a judge in your own case.
Is it possible to have this merged in?  That way it can be apart of @auvipy django 3.0 support changes.
Or
Is there a larger plan to merge plan?
Mostly looks good to me, except one small issue as mentioned.
Some small comments, otherwise LGTM.
I would think this should be conditional, same as the `monkey_patch_user` below... Yes, I know this wasn't the case before...
Making `monkey_patch_group()` call dependent on `GUARDIAN_MONKEY_PATCH = True` breaks the use case of `GuardianUserMixin` since `add_obj_perm()` and `del_obj_perm()` would not be defined on `django.contrib.auth.model.Group`.

To clarify `GuardianUserMixin` use case:
- custom user model
- custom user model is dependent on guardian library
- `GUARDIAN_MONKEY_PATCH = False` 
- `GuardianUserMixin` is mixed in with the custom user model
For example:
```
class CustomUser(GuardianUserMixin, AbstractUser):
    # Custom added fields  etc ....
    pass
```

_TL;DR My current understanding, not always calling monkey_patch_group() will break guardian._
Wouldn't there be the same breakage not calling `monkey_patch_user()`? Or is that different?
would be great if you could try this with django 2.2+
Yes it is different.  When `monkey_user_patch()` is not called then custom user model must subclass `guardian.mixins.GuardianUserMixin`.

[Guardian Docs - Custom User Model](https://django-guardian.readthedocs.io/en/stable/userguide/custom-user-model.html#custom-user-model)
I would expect Django 2.1 support to break and TravisCI to fail.

Generating on 2.2 would make the example project migrations dependent `auth.0011_update_proxy_permissions` (Django >= 2.2) rather than `auth.0009_alter_user_last_name_max_length` (Django ~2.1).
Also note the CI tests do  test Django 2.2.
It would be nice to use [explicit exception chaining](https://www.python.org/dev/peps/pep-3134/#explicit-exception-chaining).
```suggestion
Configure guardian to use the custom model in ``settings.py``
```
Please add `__all__ = […]` to silence unused-import warnings.
Why not `GUARDIAN_USER_OBJ_PERMS_MODEL`?
Good idea.  _MODEL would be clearer than _USE.
Updated names in commit 15eb65d95fa50c23761d0343812b598553b1c0ee
Added explicit exception chaining in 803a26cd87d3767be835947dc11f08406052a0c7

I can't think of any issues with the chaining the exception which is different than [django.contrib.auth.get_user_model()](https://github.com/django/django/blob/abc51d44afcb8482c64c0bb8c1022f11e7eb2bbb/django/contrib/auth/__init__.py#L151-L162)  (but that might just be left over from prior Python2 compatibility)
added in 72c71f05caae667de69a66925608e140fcbe34fc

Also, note Permission and Group are included only because some files within guardian were importing these from guardian.models rather than from django.contrib.auth.models.  They have been left in just in case some downstream library was doing the same.
Resolving conversation since requiring Django 2.2 would fail the current configuration of Travis CI
Is there any way to convert warnings to errors for our CI?
> Is there any way to convert warnings to errors for our CI?

I'm unsure how this relates to this issue? If django3 is added to the CI these kind of things should error in tests.
Since version 3.0, ```staticfiles``` will trigger an error without additional action.  Since version 2.1 it trigger deprecation warning.

I am thinking about test-driven-development (failing test first, then fix it) approach to lead the current project to error first (we test on Django 2.1, so when deprecation warning convert to error somehow we should notice it as failing test) and then fix it.

I do not consider this a requirement for acceptance, which is why I accepted the change, but a nice, closely related element to prevent such problems in the future.
Happy to oblige. All warnings are now exceptions. Which of course makes the CI fail.
@ad-m It most definitely is possible to automatically turn warnings into exceptions. Have seen this on production, drives me crazy...

CI and tests is a really good place to use this however. Any warnings generated is probably something you want to try to avoid.

Not tested, but I think the two main ways are:

```
import warnings
warnings.filterwarnings("error")
```

And:

```
python -W error foobar.py
```

See https://stackoverflow.com/questions/5644836/in-python-how-does-one-catch-warnings-as-if-they-were-exceptions
The one problem with turning all warnings into errors for tests is that this will cause tests to fail for warnings caused by 3rd party packages. I have a suspicion this might be why tests are failing now (but I haven't verified this).
I have not considered that third-party libraries will generate problems for us (In NodeJS it usually just works). I think @brianmay have more experience in this area and I trust that @brianmay will make the right decision. If we could detect such problems in advance - it would be easier to maintain the library. However, if our ecosystem is not in good shape - we will have to abandon this idea.
I have reverted the commit that turned warnings into errors. It just makes all pipelines fail for reasons unrelated to the code in the PR. It's probably best to just try and always fix warnings.

Edit: can this be merge so that devel will be usable in django3 admin-site?
@l0rb , merged. I created #663 to track proactive detection of deprecation warnings.
@brianmay done
I wasn't able to find a better solution or a good explanation. :/
I would suggest looking at merging #548 first. Unless there are any concerns with #548.
I've reviewed and merged #548.
@michael-k is there a timeline for the release? In particular, I am interested in https://github.com/django-guardian/django-guardian/pull/651
Done. :fireworks: 
New release available at:
https://github.com/django-guardian/django-guardian/releases/tag/v2.2.0
https://pypi.org/project/django-guardian/2.2.0/
We are having the same problem.
@richarddewit , tests fail for MySQL. We can not accept PR which break tests for MySQL. Could you fix that?
@tarikozket , pull requests that eliminate the problem and work on all supported database engines with valid tests are welcome.
> @tarikozket , pull requests that eliminate the problem and work on all supported database engines with valid tests are welcome.

@ad-m don't get me wrong, I just didn't know how to show that there is more people affected by this. Thank you for your great effort on the library!
Despite this, pull requests in the project are welcome, as well as comments about the code (review) of others :)
@ad-m unfortunately MySQL doesn't support UUID fields (I wasn't aware) any good way I can check for this?
We can skip tests in this situation. As I remember we have some tests conditional already
Here is example of skipped tests: https://github.com/django-guardian/django-guardian/search?q=%22unittest.skipIf%22&unscoped_q=%22unittest.skipIf%22
@ad-m thanks, I will try it on Monday
Please verify if MySQL supports UUID. The UUIDField field in Django (https://docs.djangoproject.com/en/3.0/ref/models/fields/#uuidfield) has no limit that it is only available in PostgreSQL, however the implementation differs from the database engine. 

I think the problem should be eliminated at source (if apply) rather than ignored by skipping the test.
Ok I have no idea why it's going wrong on MySQL. When it's getting the UUID value back from the database, it's calling `convert_uuidfield_value` which passes back a 28-length string (like `b18d6e2c94184f90979f845ff39d`) to the UUID class which results in this error, because it expects a 32-length string (a UUID with the hyphens removed). I need to install MySQL to further investigate.
Can you explain if you need community support or are you going to solve the problem yourself in the near future? I make sure because in #688 users repeat status queries, and I don't see other parallel works to solve this issue.
@ad-m - Yes sorry. I need the tests on MySQL to complete. We're using this fix for PostgreSQL in production, so it's stable. It's just the MySQL tests that are failing because it's doing something odd with UUID conversion.
Superseded by PR #691
Why are you evaluating the queryset here and in line 643?
Related import: `from django.db import connection`

```suggestion
    if isinstance(queryset.model._meta.pk, UUIDField) and connection.features.has_native_uuid_field:
        return UUIDField
```
@woakas as contributor of changes of source of issue #676, could you provide feedback for that PR?
@woakas / @ad-m is there anything that can help move this along? I would like to upgrade to 2.2 but this prevents us from doing so in our project.
@nikbora , rebase please to make tests pass due ```pyupgrade``` auto-update, please. Immediately, when I see lights up green - I'm okay to merge the changes.
@jonnyarnold would be easier if you rebase on this PR branch rather than me fork again.
Hey, relatively new to the community. Might be overstepping here(my bad if I am) seems like we have an extra line here ? Not sure if there is any linting standards that are forced onto the codebase... but this kinda looks weird when compared with the rest of the code....

_Once again.. my bad if I'm overstepping._
@ad-m Please re-review, tried to find and fix up all the typos.
```suggestion
      ``Model`` instances or list of Django ``Model`` instances or ``None``
```
Changed in the latest commits.
@ad-m Anything else you'd like to see to get this merged?
No, I think I can merge it alone. We just don't have clear policy regarding accept number & merge.
Thanks! Merged.
@michael-k , do you have a plan to create a new release? What do you need for that?
No concrete plans.  We could do a 2.2.1 release since all commits except PR #686 are fixes or documentation updates.

If we do a 2.3.0 release, I'd like to drop support for Django 2.1 (EOL since December) as announces in the release notes of 2.2.0.  Even 1.11 LTS has now reached its EOL (on April 1st) and there's no reason to support anything < 2.2 LTS.
https://www.djangoproject.com/download
Hey @michael-k - how could I help in getting a 2.2.1 release tagged?

The reason I'm asking is that I deployed an upgrade to Django 3.0 yesterday for a bigger project and we're stuck on 2.1.0 for the time being, but the admin views are not Django 3.0 compatible.
@lnagel , first step for any release is update changelog. See for example #670 . When everything in CHANGELOG I see no obstacles to create even small release. See also #694, which would allow us to further increase the frequency of releases.
I tried something, please see #695
@michael-k Thanks for this PR - confirmed fixed for my Django 3.0 app as well!
Clean, test covered, test pass. Looks good to me.
@ad-m @michael-k What is the current situation with this PR? Is there any remaining work to be done or can it be merged so 2.3.0 could be released?
It requires reviewing, assessing whether something has not been overlooked, e.g. through comments from the community. At GitHub, anyone can review and accept changes. This PR has not gained any acceptance from anybody so far.

Do you see any remaining work to be done?
I have read through the code and checked that the builds pass. The contents of the PR are rather straightforward to me personally, so in my eyes there is no remaining work to be done here.
Django 2.2 supports Python 3.5, 3.6, 3.7, and 3.8 - so in my eyes also the test versions matrix is accurately set up.
Thank you for your opinion. Any comments of this kind help to ensure that the proposed change is correct and should be merged. If you feel like it - you can also help and review other PRs in this project, which often require a bit of support to improve their quality to an acceptable level. The project is based on community work and community communication is essential for its development.
No objection in 3 weeks; since the next release we're doing is 2.3, I'm merging this
I kindly ask you to take into account all significant changes between the last release and the branch "devel" instead of just interesting for you. As a rule, the release is a snapshot of the "devel" branch. You can see also what pull requests was merged in meantime.
I'm sorry, I must have misunderstood. I assumed you were preparing for a 2.3.0 release in the devel branch and for that reason I did not include the django and documentation related changes.
For example PR #686 is also a change that has been merge in the "devel" branch since the last release, so it should be in the next django-guardian release, so it should be included in the CHANGELOG.
@ad-m Could you clarify whether your intention is to release everything in devel as 2.2.1 or as 2.3.0?
Definitely as to the next version symbol depends on the type of changes that have been made, which requires analyzing what changes have been made. Basically, we follow https://semver.org/, so we are open to suggestions after updating the changelog.
In this case there is new functionality: Modify 'assign_perm' shortcut to treat lists as a queryset

So this would mean that we go with 2.3.0?
It make sense. Regarding 2.3.0 @michael-k mention:

> If we do a 2.3.0 release, I'd like to drop support for Django 2.1 (EOL since December) as announces in the release notes of 2.2.0. 

In that situation release django-guardian 2.3.0 is blocked by #693.
I see. Then in this case would you either consider (a) releasing as 2.2.1; or (b) I could cherry-pick the commits to exclude "Modify 'assign_perm' shortcut to treat lists as a queryset" feature ?
Why not focus on completing the changes in #693 and just release version 2.3.0? We do not have enormous pressure (for example, due to security issue) to disrupt the linearity of the software development process.
All clear. I renamed the version in this PR to 2.3.0. Let's discuss further in the #693 thread
If anyone else wants a release desperately, then please try to find time to follow @ad-m 's suggestion and review the PR #693 please.

I had to revert to using a custom built package with these commits cherry picked since I was not able to keep my customers waiting, they needed the fix to continue using the app.
@ad-m Please check also https://github.com/django-guardian/django-guardian/pull/700
@ad-m Are there any blockers to the release currently?
No, I haven't noticed your changes. Everything looks ready. In the evening I will release a new version.
Can we sort / group it in some way so that minor issues (formatting changes, minor documentation updates) do not cover the expected patches (fixing a bug in the UUID listed at the very end of the list)?
Could you update date? I am ok to release that today / tomorrow.
Can you update that PR to reflect latest changes?
moved "Fix compatibility with UUIDField primary keys" up
added "Drop support for Django 2.1"
Why not adjust ```get_40x_or_None```? 

Missing tests.
> Why not adjust get_40x_or_None?

Just have tried to "Keep It Stupid Simple".

> Missing tests.

Yeap. If it could be potential merged, I'll write them.
I understand that it was easy to make such a change without analyzing the whole thing, but it is more difficult to trace the code and maintain it in such a way, because similar logic is spread in two places.
Ok! I'll rewrite to adjust `get_40x_or_None`
@ad-m what about this build?
```suggestion
            has_permissions = any(request.user.has_perm(perm, obj)
                                  for perm in perms)
        else:
            has_permissions = all(request.user.has_perm(perm, obj)
                                  for perm in perms)
```
@inagel What do you think?
> Are those lists ever huge? Since the generator returned by `chain`/`chain.from_iterable` is directly passed to `list()`, I don't think this could save any memory.

That's mostly true, it'll save memory only in the short interval when the list is being built and the `*args` tuple hasn't been deallocated yet. It's more of a general best practice thing than an optimization in this case. I have no reason to think these lists are huge.
> (…) never stored as a huge list. This can save on both runtime and memory space.

Are those lists ever huge?  Since the generator returned by `chain`/`chain.from_iterable` is directly passed to `list()`, I don't think this could save any memory.
LGTM
The simpler solution is to pass `flat=True` to `values_list`.
```suggestion
                perms = list(
                    Permission.objects.filter(content_type=ctype).values_list("codename", flat=True)
                )
```
```suggestion
            perms = list(
                Permission.objects.filter(content_type=ctype).values_list("codename", flat=True)
            )
```
Nice catch!
LGTM
It's not a typo, it's just very old and hasn't been touched in 3 years.  I think the whole paragraph should be adjusted.
> It's not a typo, it's just very old and hasn't been touched in 3 years. I think the whole paragraph should be adjusted.

Hm, then it's a bit confusing in combination with the following sentence in `installation.rst`:

> This application requires Django 2.2 or higher

So what the docs try to say is that django-guardian requires Django 2.2+, while some other libraries require a Django version before 1.2, which might be a major selling point to some people?
This sentence has not been updated in years. It requires a general review to see if it still provides relevant information. I think the reference to 1.2+ is no longer relevant to anybody. We can remove this sentence. Perhaps, however, it is worth considering changing the entire paragraph, because alternative libraries have also appeared.
I propose to close this due to inactivity.
Can we see a release? This warning is now breaking the django-rest-framework CI since elevate warnings to errors there (experimentally, to see if we can avoid passing warnings on to users).
LGTM
have you try to use `django.utils.decorators.method_decorator` ?
like in https://docs.djangoproject.com/zh-hans/3.1/topics/class-based-views/intro/#id1, use method_decorator with permission_required may work
As #723 is solved and has been closed by author, I think this PR should also be closed. 😊
Superseded by #737
Thank you; the team at my day-job has a vested interest in this PR.
Which other Django project perform something like that? In my project usually - if needed other project settings - I import that setting from that project.
@ad-m actually none but IMO this is really helpful, and issue #726 need this.
I believe there is now a better solution (see my comment in #726) than modifying the global object, which can have unpredictable and difficult to debug consequences. 

However, I am open to discussions. This is a popular need in Django libraries, so I'd like us to follow the ecosystem rather than come up with a new approach. So the easiest way to convince me is with examples of a solution that is widely adopted.
> `tox.ini` should also be adjusted

done
`tox.ini` should also be adjusted
LGTM
Superseded by django-guardian/django-guardian#736
I accept the change. Please consider pinning an image of the environment so we don't have big unexpected changes. After considering (positive or not), merge please.
Using `2b1` here isn't ideal because we need to update it once 3.2.0 has been released.  But I'd say it's good enough for the initial version and important enough due to 3.2 being a LTS release.
mock 1.0.1 is a bit outdated and the pin should be updated/removed in a follow-up PR.  The pin on psycopg2-binary can probably be loosened to `psycopg2-binary~=2.8.6`
I wonder if it is worth moving it to `requirements-ci.txt` so that various bots can inform us about the need to update these libraries. In this form it is completely incomprehensible to them.-
I've removed the pins and the tests are still green.  ¯\\_(ツ)_/¯

Having no pins on test dependencies has one downside: Consider one of them introduces something that breaks our test setup.  Since there's low number of commits per time on `master` we won't notice it.  Then someone opens a PR and the tests fail.  This makes it harder to figure out if the tests were broken on `master` in the first place or if the PR introduced something breaking.

Pinning everything also won't work without problems.  There's a constant overhead of PR from dependabot (or similar).  And maybe one of the test requirements needs to be installed in different versions depending on django's version.

Keeping the test requirements unpinned as much as possible together with scheduled test runs on master (once per week maybe?) might be a good tradeoff.  `pip` has a dependency resolver by now and can take of installing the correct version of any dependency that depends on a specific version of django.  And we should notice failing tests on master early enough.
```suggestion
    django32: django>=3.2b1,<4.0
```
Only if we'd change `django22: django>=2.2,<2.3` too. ;)
yes we should
```suggestion
    runs-on: ubuntu-18.04
```
I've missed `devel` :/
This is fixed now and GitHub Actions are running :)
```suggestion
We have support for `GitHub Actions`_ to make it easy to follow
```

Documentation should be time independent to be maintainable. Nobody will remember to replace "Recently" with a better word after a few weeks.
I presume this is to fix the following warnings when run in Django 3.2:

```
WARNINGS:
guardian.GroupObjectPermission: (models.W042) Auto-created primary key used when not defining a primary key type, by default 'django.db.models.AutoField'.
	HINT: Configure the DEFAULT_AUTO_FIELD setting or the GuardianConfig.default_auto_field attribute to point to a subclass of AutoField, e.g. 'django.db.models.BigAutoField'.
guardian.UserObjectPermission: (models.W042) Auto-created primary key used when not defining a primary key type, by 
```
Yep, this also prevents a new migration being created when running `python manage.py makemigrations` with django 3.2.

Looks good to go to me...
Thank you all for review! Merged based on positive community reviews.

I am not actively developing Django projects and I do not follow its development.
@ad-m Thanks. Do you have permissions to release to PyPI?

Also, given `django-guardian`'s important state in the Django ecosystem, have you considered having the project join jazzband? https://jazzband.co/
@johnthagen I have permission to PyPI. I have plan to make a new release in weekend.
@ad-m Would you be able to review this? It ensures that we are testing on a final release of Django 3.2.
This is a bit more than what #746 requested.  The lower bounds for Django 2.2 to 3.1 are only there to ensure compatibility with Python 3.9.  `django~=2.2.17` etc. already installs the latest 2.2 release (at least on GitHub Actions because we don't use a cache there).

I'm :+1: for a bump of `django~=3.2rc1` to `django~=3.2.0`.  But I don't see the necessity to constantly bump the minimal patch release.
Good point, I should have noticed the `~=`. I've reverted all but the 3.2.0 bump.

If this is accepted, please squash the commit while merging.
Should this PR also have updated the documentation?
> Should this PR also have updated the documentation?

Don't think so since it's just a fix
@johnthagen some tests fail. Could you take a look? A friendly inquiry if you missed your CI test results.
@ad-m Yep, looks like this project is using something deprecated in Python 3.10.

```
___________________ AssignPermTest.test_deprecation_warning ____________________

self = <guardian.testapp.tests.test_shortcuts.AssignPermTest testMethod=test_deprecation_warning>

    def test_deprecation_warning(self):
        with warnings.catch_warnings(record=True) as warns:
            warnings.simplefilter('always')
            assign("contenttypes.change_contenttype", self.group)
>           self.assertEqual(len(warns), 1)
E           AssertionError: 7 != 1
=============================== warnings summary ===============================
../../../../../opt/hostedtoolcache/Python/3.10.0/x64/lib/python3.10/site-packages/django/utils/version.py:6
  /opt/hostedtoolcache/Python/3.10.0/x64/lib/python3.10/site-packages/django/utils/version.py:6: DeprecationWarning: The distutils package is deprecated and slated for removal in Python 3.12. Use setuptools or check PEP 632 for potential alternatives
    from distutils.version import LooseVersion

guardian/testapp/tests/test_mixins.py:30
  /home/runner/work/django-guardian/django-guardian/guardian/testapp/tests/test_mixins.py:30: PytestCollectionWarning: cannot collect test class 'TestView' because it has a __init__ constructor (from: guardian/testapp/tests/test_mixins.py)
    class TestView(PermissionRequiredMixin, RemoveDatabaseView):
  /opt/hostedtoolcache/Python/3.10.0/x64/lib/python3.10/site-packages/django/utils/asyncio.py:19: DeprecationWarning: There is no current event loop
    event_loop = asyncio.get_event_loop()

guardian/testapp/tests/test_management.py::TestGetAnonymousUser::test_non_migrated_db
  /opt/hostedtoolcache/Python/3.10.0/x64/lib/python3.10/site-packages/django/test/utils.py:384: UserWarning: Overriding setting DATABASES can lead to unexpected behavior.
    with self as context:

-- Docs: https://docs.pytest.org/en/stable/warnings.html
```

It looks as though this may be because Django is still using `distutils` (now deprecated in 3.10). I'll check out later what can be done about this.
Commit into the Django 3.2 branch to fix the `distutils` `DeprecationWarning`: https://github.com/django/django/commit/8bebb1c04a40a8bb45368415cd01ccbf32fd3236#diff-e547d740a4b59802918acad9febcf50f064a453091632adad638b98c3f0de70b
@ad-m This PR is ready now. Django 3.2.9 has been released, which fixed the 3.10 issue that was causing CI to fail before.
@johnthagen thank you for keeping that project healthy.
Actually that's not required since we can easily override `get_obj_perms_manage_template()`
Those methods may be overriden, but this require further changes and may cause backward compatibility issues. By default those methods returns an empty set, this is the same as do not implement them at all (like `ObjectPermissionBackend` is doing as of now).

https://docs.djangoproject.com/en/3.2/topics/auth/customizing/#handling-authorization-in-custom-backends
I found that this may cause problems with test-client `.force-login` method, which is going to use the first backend with a `.get_user` method: https://github.com/django/django/pull/7634


So this should not be merged.
@sevdog 

`django.contrib.auth.backends.BaseBackend`   has    `get_user_permissions` and
`get_group_permissions` methods. Aren't they called in any other places? 
shouldn't they be implemented (maybe simply by calling guardian shortcuts)?
It looks like Django `main` requires a newer MariaDB version:

```
django.db.utils.NotSupportedError: MariaDB 10.2 or later is required (found 10.1.48).
```
@ad-m Can this PR be merged?
Merged 🚀
LGTM
This patch looks great, thanks a lot :)

I have doubts about the changes to MPTTModel.get_root() and TreeManager.get_query_set(), maybe you can explain those bits?

Thanks, looks good overall, I'll get some time to test and pull tonight.
Scratch that, I should clearly read your description more carefully next time since you already explained the things I wondered about :)
seniorquico,

Thanks for the code, it's good :)

I've tried out the proposed changes. I'm pretty sure Student.tree.all(), filter() etc should return a Student queryset (that's what the default django Manager implementation does).

To make that work but keep the other public methods using Persons, I made these changes:

django-mptt/django-mptt@889fc9df0a3e82bbcbcd0754a7156b5d7cb6314a

Can you try that out and let me know if I'm missing the point somehow, thanks. When I hear back I'll merge to master.
I've tested out your changes, and I think that's a better response. The return of the methods seem to just make sense now.

Only last thing that I think is needed is a blurb in the docs about multi-table inheritance that makes clear which methods return an instance of the base model instead of the current model (e.g. calling `get_ancestors` on a `Student` returns a list of `Person`'s even if all the ancestors are `Student`'s). I'll try to free up a bit of time today to get something started.

Thanks so much for the speedy review and your help!
The behaviour is probably the expected behaviour, so I wouldn't worry about adding it to the docs. Merged to master, thanks again.

As a side note, this is probably the last feature to make it into 0.4. I'll be tagging the release tomorrow. If you have any other bugfixes or necessary improvements, now's the time to fix them...
The Django team seems to use the term "list" quite loosely. Most places in the docs say a list is required but a tuple may be specified. (See the options that accept "lists" at http://docs.djangoproject.com/en/dev/ref/models/options/).

Following my bad habit, I provided a tuple for the "order_insertion_by" MPTT meta option. This causes a "'tuple' object has no attribute 'append'" in "_get_ordered_insertion_target" in "mptt\signals.py".
Hi Vanessa

Thanks for the heads up. I think rather than adding yet another attribute, a better fix would be to keep order_insertion_by the same, and use model._meta.get_field(...).db_column where needed.

However as you pointed out:
- recent changes have greatly reduced the amount of custom sql we're using, so this shouldn't be necessary in master / 0.4
- 0.4 is pretty much ready (I'll tag the release in about 12 hours, assuming no critical bugs show up) so it doesn't seem worth the effort to fix this for 0.3.x at this point.
Hmm... I didn't know that this would also include the patch from #10. Sorry for the "duplicate" request.
Pulled, thanks
Whoops ;) Thanks for the fix
Fixed simultaneously in parent tree.
dupe of #126
Turns out 1.3.X doesn't have 16144 in it yet, so this fix is only valid for django trunk.
Looks good. How does this affect django 1.2?
Good point. This would be most probably backwards incompatible. I'll check.
got round to trying it on 1.2; looks fine
Super, I never had a chance. Cheers
Clean enough patch, but I don't really like the idea... I expect a method called "get_siblings" to always get some siblings. If you don't want to get siblings for a root node, you probably shouldn't call the method.

I realise this is backwards compatible, but it's still a feature that doesn't really make sense so I'm gonna say no to this one.
I think it makes sense in the same way as 'include_self' - it is useful in some use cases, but not others. For my particular use case (multiple trees which are not related to one another), it saves me from having to sprinkle my code with "is this node the root" checks before getting siblings.

No probs though, thanks for the quick response!
I agree it should be a queryset, but this solution is kind of naff.

A nicer solution would be to create a queryset from a list of nodes and prepopulate the result cache. Something like this:

```
_cached_children = Node.objects.filter(pk__in=children_list)
_cached_children._result_cache = children_list
```
Yeah, I couldn't agree more.
Might be more along the lines of what you were thinking. Let me know what you think.
better, but the cache_tree_children function to do this stuff, get_children() shouldn't really be changing state. cache_tree_children should produce a queryset rather than a list.

Also the queryset's result cache _must_ be prepopulated, otherwise there's no benefit in doing cache_tree_children at all. i.e. doing 

```
list(node.get_children())
```

must not execute a query if node is from a queryset which has been produced by cache_tree_children.
Good point. The only reason I thought not to put it into cache_tree_children was I didn't think it would be wise to query N more times (IE: turn each list into a QS before you demand it).

Not sure if that is a valid concern or not.
There's an opposite bug to this with the `TreeNodeChoiceField` caused by the same piece of code.

```
if kwargs.get('required', True) and not 'empty_label' in kwargs:
    kwargs['empty_label'] = None
```

This means that if a field is required you have to explicitly set `empty_label` in order for it to appear, which is not how any of the default Django fields work.

I don't think these two lines of code are needed at all. The situation they try to cover is already handled better in `django.forms.ModelChoiceField` which `TreeNodeChoiceField` runs through `super()` anyway.

The same is true for `TreeNodeMultipleChoiceField` and I don't think that carlospalol's diff is the best solution. The two lines should just be deleted entirely because `django.forms.ModelMultipleChoiceField` already handles it better.
While this does need a fix, I agree with @kylemacfarlane, this empty_label overriding is unnecessary. I'm not sure why it got added but I've been meaning to remove it for a while.
@henrikalmer and @chrisdpratt appreciate feedback on this, I'll release as 0.5.3 soon if you can give me a thumbs-up
Looks good! Good idea to scan for a local TreeManager no matter what name its given.

EDIT: I've updated my fork of MPTT and verified that your solution works in my environment.
seems this one slipped through the cracks. looks mostly good, except that this line does an extra query per save(): https://github.com/django-mptt/django-mptt/pull/181/files#L0R667

It needs to not do that query, because that will slow things down a lot.
So to avoid the extra query ... would this be acceptable instead?:
- if self._parent_cache is set, update self._parent_cache.rght.
- otherwise do nothing.
cancel that. I looked harder. That extra query already happens anyway, you just moved it a bit earlier.
Actually, looks like in 1.4+ we should be using `STATIC_URL`, if it's set, and falling back to `ADMIN_MEDIA_PREFIX` if not:

https://docs.djangoproject.com/en/dev/releases/1.4/#django-contrib-admin
Came to the same conclusion some time after :-) just had to revert to django 1.3 for Grappelli + FeinCMS compatibilty, so ended up reverting to your pip package, but i can update my pull request with that change.

EDIT:

as a note., not that's your project's problem but, with Grappelli the images you use on the admin (the add and search) are sprites or something ... i worked around it by making copies of those django's admin app default images to my project's static folder. I wonder if the link's can use CSS classes ... i'll check it out later
I have an update for this, including a test case; see [this PR](https://github.com/zemanel/django-mptt/pull/1).
Thanks, i'll take a look
Hi Matthias

I came across this admin class recently and wasn't sure why I put it in mptt in the first place. Seems like it should be in FeinCMS if anything.

Could it be added to feincms, or does feincms perhaps have a similar standalone admin class people could use instead?

Then I could add a PendingDeprecationWarning to usage of this class, and when the new feincms is in wide use I would upgrade that to a DeprecationWarning and eventually remove it altogether.
didn't mean to close that, whoops
Hi Craig

I think that most of the code of `FeinCMSModelAdmin` could be added to the `TreeEditor` directly so that everyone would benefit from it. I'm planning to release FeinCMS v1.6 soonish, this would be a nice addition.

Removing this class from django-mptt would make lots of sense then.
Thanks, that would be good. Merging this for the meantime
Thanks!

https://github.com/feincms/feincms/pull/303

I haven't added the `_actions_column` implementation to the TreeEditor base class. Apart from that the behavior should be identical now.
Note this was originally #200. 

The speed increase is very minor. My testing shows less than 0.1s is gained over a 16s runtime. It certainly pales in comparison to the query execution time. But the code looks slightly cleaner, so we'll merge it anyway :)
That wasn't supposed to be an outstanding performance improvement :o)
@craigds, Any chance you could merge this in?
merged to 0.5.x branch in af9cac8e343a85eb2751366f4c548c35882fc13f
+1, but see comments in diff
I think the word "house" is attached to royal families. If I remember correctly, I got it from dictionary.com thesaurus or some other dictionary site. But anyway, `get_family()` sounds fine to me.
would like to merge this but it needs a couple of issues addressed (`get_house` --> `get_family`, and hardcoded `tree_id` attr name)
It's been a while since I touched this code... So, should it be like this:

```
opts.tree_id_attr: self._mpttfield(opts.tree_id_attr),
```
Since we're already using `tree_id`, why not call the method `get_tree()`? Bikeshedding, I know, but I still think it makes sense to refrain from introducing new terminology into mptt.
I've now updated the code.
Nice, thanks. However, isn't the code much too complicated for what it actually is doing? Shouldn't that simply be:

```
def get_tree(self):
    opts = self._mptt_meta
    return self._tree_manager.filter(**{
        opts.tree_id_attr: self._mpttfield('tree_id'),
    })
```

@craigds I think adding `get_tree` might still be useful even though this method is really really simple.
If that does the trick, then my code is overly complicated. I'm not too familiar with the data structure, so I did my version by combining get_ancestors and get_descendants.
Uh. I think @matthiask and @roxeteer are talking about two different things. And I don't think this as implemented should be called `get_tree()`

`tree_id` refers to 'trees' i.e. distinct root nodes (where the table is the forest). It's a bit of a hack, I don't think we should be exposing it too much.

```
A   # (tree_id = 1)
   -Aa
       -Aa1
       -Aa2
   -Ab
       -Ab1

B   # (tree_id = 2)
   -Ba
```

Aa.get_family() should return [A, Aa, Aa1, Aa2] but not Ab or Ab1. That's what @roxeteer's implementation does.

@matthiask's suggestion (filter on tree_id) will return [A, Aa, Aa1, Aa2, Ab, Ab1]. I don't know if that's really that useful. If someone really wants it they can just filter on tree_id themselves but I don't think it's necessary to have a method that does it.

The `get_tree` name seems bad if it's actually returning only ancestors and descendants. `get_family` seems better to me.

The code looks good. I'll merge this with the name changed to `get_family` if we can get consensus on that?
Also, sorry for not replying to this earlier. Thanks for the effort you've put into this, much appreciated :)
Not sure what I was thinking yesterday, you're of course both correct. I think `get_family` is a good name for that.
`tree_id` here should be opts.tree_id_attr
Did you get the word 'house' from anywhere? I wonder if this method should be called `get_family()`. To me that seems a little clearer than house or branch.
Also, the two main commits (13a6d3e) and (df10b52) are totally independant, they can work without the other.

The later commits (d9a31ff, 478a332 and e0b85fe) are fixes for 13a6d3e. Sorry about splitting my work in little commits, but I made a mistake just before committing and managed to fail fixing it... thrice.
I'm not too keen on this:
- The `up_to`/`down_to` kwargs seem unnecessary, since you can already do `n.get_descendants().filter(level__lte=n.level + 3)` etc. It's not much more code and seems at least as readable.
- The template filter _might_ be useful, but it's basically just a way of adding a queryset filter in at template rendering time, and ideally that stuff belongs in a view rather than a template.
Okay, thanks for the explainations.

For the template filter, I found it useful when having the list of descendants of a node, to be able to show the path of each descendant up to that node and not up the root, while still being able to use a DetailView.
Looks great! One tweak and I'll happily merge it :) Thanks
Oops, good catch.
this line will break the function for non-queryset iterables, so it needs to go back in the ordering code below
closing in favour of #241
This particular change seems to be wasteful. `values()` returns a `ValueQuerySet` which knows about indexing (unlike generators).
Note that the last released version of mptt (0.5.4) supports python 2.4. As of this PR, mptt will only support python 2.6+, so that's two python versions dropped in one mptt version.

But it's not really possible to support python 3 and 2.5, and I'd wager 3.3 probably has at least as much usage nowdays as 2.5. If you're still using 2.5, you'll have to stick to mptt 0.5.4 until you can upgrade your python.
+1 for supporting Python 3!
The template tags need a major update. Adding this as a keyword argument should be much more possible after #359.
Thanks. Please resubmit with resolved conflicts if you're still interested.
![Snip20130416_4](https://f.cloud.github.com/assets/123598/384655/ddd1648e-a65f-11e2-96aa-02660ace8e9a.png)
Cool. However I don't think this needs to go in django-mptt, it belongs in a separate mini-app.
The install_requires looks good, but I don't understand why `python_2_unicode_compatible` backport is needed. That was added in django 1.4.2, so we don't need the backport.
fixed via cherry-pick of 9fb26276
@craigds You're right... At first I tried to make mptt run with 1.4.0 and then forgot to remove the backport after switching to 1.4.2
Opinions, @craigds ? I like the approach of embedding additional attributes _inside_ a field much better, especially because this still works if we remove the copy-pasted code in `mptt_admin.py` in the future.

(Example: https://github.com/matthiask/django-mptt/blob/mk/treeeditor/mptt/admin.py#L118)

Please reopen if you disagree (@xrmx too, please)
The idea is good but the implementation isn't very efficient. A better way would use the left and right fields to avoid doing any db queries. Something like this:

```
        q = Q(**{
            '%s__lt' % opts.left_attr : getattr(instance, opts.left_attr),
            '%s__gt' % opts.right_attr : getattr(instance, opts.right_attr),
        })
        qs = qs.filter(q)
```
@craigds, do you want that I will do another pull request with your change?
Sure, or just add a commit to this one :)
@craigds I'm sorry but your implementation does not work. If you have something like this:

```
node1
    node1.1
        node1.1.1
        node1.1.2
    node1.2
        node1.2.1
node2
```

And I'm editing node1.1, at the parent field (select) should have the next nodes (with my implementation, I get it):

```
node1
    node1.2
        node1.2.1
node2
```

And with your change I get it:

```
node1

```

My implementation is very similar than the [clean method](https://github.com/goinnn/django-mptt/blob/7769c931fea7dcbca3975a655b8bfbfc59fb4524/mptt/forms.py#L172). Are you sure that you can do it more efficiently? I'm sorry but I don't have sufficient knowledge about mptt
Right... my comment is incorrect (it only selects ancestors). Sorry for misleading. It just occured to me that this should actually work:

```
qs = qs.exclude(instance.get_descendants(include_self=True))
```

Because get_descendants() returns a queryset, and django will inline it as a subquery rather than evaluate it. A test that checks that (via `assertNumQueries`) would be good.
@craigds I don't understand the test that you want that I have to do....
@craigds Thanks!
Sorry for closing, need to do some branching and will resubmit a new pull request when done.
was #263
Thanks! Just in time to prevent a buggy 0.6 release :)
Changed it so that `node_moved` is sent when parent has changed. 
Also added test cases for the signal.
Looks good to me. Any reason why this wasn't merged back then, @craigds ?
no reason I can think of. Probably because I was busy at the time :(

This looks good, let's merge it
I made some minor changes:
- fixed merge conflicts
- updated the mock_django dependency to >= 0.6.7 because otherwise we get errors on Python 3.
- made the dependency optional; tests that depend on it will just get skipped if it's not installed

Thanks :smile:
:+1: nice!
Under which circumstance would `self._base_manager` be set? The signal might be sent several times:
- `TreeManager.move_node` calls `TreeManager._move_node`
- `_move_node` calls `_base_manager.move_node`, which again calls `_base_manager._move_node`

`move_node` itself is called several times, therefore `node_moved` emitted several times. Shouldn't `_move_node` call `_base_manager._move_node` instead?

(Sorry — I'm don't know manager behavior too well.)
Complicated. Yes, I think you're right.

To clarify, I think `_base_manager` is only set if the model is a subclass of a base which contains the tree fields (in multi-table inheritance)

Thanks for the heads up
That's all it takes? Colour me surprised :) Thanks for looking into this
![mptt-inline](https://f.cloud.github.com/assets/874479/968517/458582b0-05a4-11e3-9816-3ccbe1a0d1c2.png)

Yes, well. You get nothing more then what is in the picture above. Meaning you can set the parent. I'm not really sure if the forms show up in the right order and things like indentation aren't there at all. But at least you get some very basic form of editing.
Sorry for the late answer -- can you please resubmit a request against current master, and include a simple test? Would be great!

Thanks in advance.
Closing because of inactivity — please resubmit against current master, and include a simple test.
I wish the master supported InlineAdmins.
Can you add a minimal test that demonstrates the problem? Would be great.

Thanks in advance!
@matthiask I have added a test for this fix. I hope it won't break the existing tests.
Closing this for now, just realised this doesn't take care of children.
Could you link to somewhere describing the bug? The fix looks like it
should have no effect since its just casting str () on a str.
On 14/02/2014 6:54 AM, "Giovanni Bajo" notifications@github.com wrote:

> This workarounds a bug in Python 2.6.1 that has been fixed in later
> versions. Since this version is the default one in Snow Leopard system, it
> 
> ## makes sense to add a simple, non-invasive workaround.
> 
> You can merge this Pull Request by running
> 
>   git pull https://github.com/rasky/django-mptt master
> 
> Or view, comment on, or merge it at:
> 
>   https://github.com/django-mptt/django-mptt/pull/292
> Commit Summary
> - Fix compatibility with Python 2.6.1 (Snow Leopard)
> 
> File Changes
> - _M_ setup.pyhttps://github.com/django-mptt/django-mptt/pull/292/files#diff-0(6)
> 
> Patch Links:
> - https://github.com/django-mptt/django-mptt/pull/292.patch
> - https://github.com/django-mptt/django-mptt/pull/292.diff
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/django-mptt/django-mptt/pull/292
> .
There's a future `unicode_literals` at the top of the file, so the literal is actually a unicode string.

The bug is that `**kwargs` wouldn't work with unicode literals, and it's been fixed in Python 2.6.5:
http://bugs.python.org/issue4978
Ah, gotcha. Thanks for the explanation :)
On 14/02/2014 8:18 AM, "Giovanni Bajo" notifications@github.com wrote:

> There's a future unicode_literals at the top of the file, so the literal
> is actually a unicode string.
> 
> The bug is that **kwargs wouldn't work with unicode literals, and it's
> been fixed in Python 2.6.5:
> http://bugs.python.org/issue4978
> 
> ## 
> 
> Reply to this email directly or view it on GitHubhttps://github.com/django-mptt/django-mptt/pull/292#issuecomment-35014707
> .
Merged, added python bug link to commit msg: django-mptt/django-mptt@8f379b00e6f47ca53465374401693872264a4b54 . Thanks!
I've found that you had solved the issue in managers.py by redefining get_query_set/get_queryset. But unfortunately i cannot find out how to cancel my request ;(( Sorry
Thanks!
The idea is great and I understand the use case, but the implementation needs a bit of work.

It's doing one `node.get_ancestors()` call for each node, so it's going to do N+2 queries for N nodes.

If you use the tree_id, left, and right fields to filter instead of the node IDs, it should be easy enough to do this function in 2 queries instead of N+2. See the implementation of `get_queryset_descendants` where it uses those three fields to get all the descendants in two queries.

At least one test case would be good too. There's one for `get_queryset_descendants` there already.

Cheers!
Done and done. Please review and let me know what you think.
See that commit ^ which fixes this without breaking things for those using older djangos.
`node.get_children()` shouldn't generate a query in this case anyway - it returns a populated queryset. At least that's the intention; it's possible there's some bug. See https://github.com/django-mptt/django-mptt/blob/master/mptt/models.py#L525

What Django version are you running?
It's possible. As i see from the code there should not be any SQL queries. But it generates queries like:

``` sql
SELECT ... from ... where id=...
```

I'm using django 1.5
The current code _should_ not run queries on the database because `qs._result_cache` is already populated. It's still possible that queries happen of course, but we would need more information to confirm.

This pull request would change documented API though: `get_children` is documented as returning a `QuerySet`, we should not silently return a `list()`.
generates SQL query to get children
Do not generates SQL query to get children
Well, everything is in order. Please merge. PyPy3 is not available on travis yet as far as I know.
Awesome, thanks!
Closing this pull request; I found something that needs a bit more polish before merging. Stay tuned.
Just an update. I've been using this in a project (... that is still in development) for a couple of months and it works great. It's fast and it has solved a huge problem for us -- specifically, this project uses SQLite in development, and due to SQLite's limitation on the number of variables in a single query, there are some things that end up crashing with sufficiently large sets of data.
It is a very good patch. The best part is that it does not fail for py3k. Current build is actually failing.
The failing tests on python 3 are since this PR was submitted, so that's not relevant here.

I think the implementation looks quite good, but just curious: Do you anticipate any downside to using aggregate=True always? I don't see a need for an extra kwarg here. It seems the return value should be a queryset containing the same nodes as before, but it just generates a simpler SQL query. Is that right?
You are right @craigds 
my bad.
> Do you anticipate any downside to using aggregate=True always?

No, but I wanted to achieve consensus on this before I went ahead and did it :-)
> It seems the return value should be a queryset containing the same nodes as before, but it just generates a simpler SQL query. Is that right?

That is exactly the case.
The intent here is great. If we can get this merged I'd like to just replace the current approach as I don't see a need to have both implementations.

Just been reading the code properly, and I think there's probably a bug.

Seems like it groups the nodes by `tree_id` and `parent_id` and then uses the min-left and max-right to do the query. Won't that potentially find nodes it shouldn't? i.e.

```
a
    b
    c
        d
    e

>>> treemanager.get_queryset_descendants([b, e])
[d]
```

Haven't actually tried it, but that's how I read the code
**EDIT:** I ~~misunderstood~~ misread, read too quickly, etc. your question; I'll take a closer look and get back to you.
**EDIT#2:** You are absolutely correct. I missed this because in the project I'm working on, whenever I use  `get_queryset_descendants` I filter the queryset further. Admittedly, my focus has primarily been on `get_queryset_ancestors` as I use that functionality quite heavily. I'll get to work on fixing this. Thanks!
**EDIT#3 (3 Oct 2014):** Leaving this explanation intact because it demonstrates the basics of this technique -- grouping the nodes by their common tree_id and parent_id attrs. It also (subtly) demonstrates the problem with retrieving descendant nodes in this manner. Progress on fixing this situation is moving along (you should see the whiteboard in my office), though I won't have much time to work on it today.

**Selecting for ancestor nodes**

```
if direction == 'asc':
    if include_self:
        lft += 1
        rght -= 1
```

Find the **highest** `lft` value in the group

```
    if lft > trees[tree][parent_id]['lft']:
        trees[tree][parent_id]['lft'] = lft
```

Find the **lowest** `rght` value in the group

```
    if rght < trees[tree][parent_id]['rght']:
        trees[tree][parent_id]['rght'] = rght
```

To find _ancestors_, our SQL needs to select nodes whose `lft` value is _lesser_ than (`lt`) the _highest_ `lft` value in the group, and whose `rght` value is _greater_ than (`gt`) the lowest `rght` value in the group.

```
    trees[tree][parent_id]['lft_op'] = 'lt'
    trees[tree][parent_id]['rght_op'] = 'gt'
```

**Selecting for descendant nodes**

```
elif direction == 'desc':
    if include_self:
        lft -= 1 
        rght += 1 
```

Find the **lowest** `lft` value in the group

```
    if lft < trees[tree][parent_id]['lft']:
        trees[tree][parent_id]['lft'] = lft 
```

Find the **highest** `rght` value in the group

```
    if rght > trees[tree][parent_id]['rght']:
        trees[tree][parent_id]['rght'] = rght 
```

To find _descendants_, our SQL needs to select nodes whose `lft` value is _greater_ than (`gt`) the _lowest_ `lft` value in the group, and whose `rght` value is _lesser_ than (`lt`) the _highest_ `rght` value in the tree.

```
    trees[tree][parent_id]['lft_op'] = 'gt' 
    trees[tree][parent_id]['rght_op'] = 'lt' 

    [content removed for brevity]

if aggregate:
    for tree in trees:
        for parent_id in trees[tree]:
            q = Q(**{
                opts.tree_id_attr: tree,
```

If `aggregate == 'asc'` then these dict values would be:

`lft__lt: [highest_lft_in_group]`
`rght__gt: [lowest_rght_in_group]`

If `aggregate == 'desc'` then these dict values would be:

`lft__gt: [lowest_lft_in_group]`
`rght__lt: [highest_rght_in_group]`

```
                '%s__%s' % (opts.left_attr, trees[tree][parent_id]['lft_op']): trees[tree][parent_id]['lft'],
                '%s__%s' % (opts.right_attr, trees[tree][parent_id]['rght_op']): trees[tree][parent_id]['rght']
            })
            if filters is None:
                filters = q
            else:
                filters |= q
```
I just wanted to post an update: I'm still working on this but I haven't had as much time to devote to it as I would like.
Just an update: I'm pretty sure that this PR breaks get_queryset_ancestors as well, in much the same way. I've made progress on fixing the problem but the code still needs work.
So here's what I've done:

https://github.com/musashiXXX/django-mptt/blob/01c58e986d98d4d136bd247b5382fa07c291de54/mptt/managers.py

Basically, `_get_queryset_relatives` now groups the nodes in the queryset passed to it according to tree, parent, and then by contiguous siblings. This still produces simpler SQL while also correcting the previous concerns about using ranges of lft/rght values. However, I haven't had the chance to test it as thoroughly as I'd like to, but I just wanted to share the progress that has been made, and solicit some input on this approach.
Looks mostly good. I've commented on a few things that need fixing.

I'm not sure why you're storing a list of integers, then calling min/max on them. It seems like that's an unnecessary use of memory. Could you just store the cumulative min and max values as you go?

Also if you could squash this all into one commit before merging it'd be helpful.
Thanks a ton for the feedback! I'll review all of this and get back to 
you as soon as I can.

-c

On 11/17/2014 03:19 PM, Craig de Stigter wrote:

> Looks mostly good. I've commented on a few things that need fixing.
> 
> I'm not sure why you're storing a list of integers, then calling 
> min/max on them. It seems like that's an unnecessary use of memory. 
> Could you just store the cumulative min and max values as you go?
> 
> Also if you could squash this all into one commit before merging it'd 
> be helpful.
> 
> —
> Reply to this email directly or view it on GitHub 
> https://github.com/django-mptt/django-mptt/pull/315#issuecomment-63368715.

## 

---

Charles Hamilton

## Nefaria.com
@craigds I've squashed a bunch of commits but this still shouldn't be considered "complete" by any means. I've still got some cleanup to do in managers.py. I've also made some changes in tests.py so that we are now specifically testing the condition you pointed out earlier:

```
a
    b
    c
        d
    e

>>> treemanager.get_queryset_descendants([b, e])
[d]
```

Anywho... progress is being made. The main issue I'm having now is the repetition of this block of code:

```
filters |= Q(**{
    opts.tree_id_attr: tree,
    '%s__%s' % (opts.left_attr, lft_op): contiguous_siblings['lft'],
    '%s__%s' % (opts.right_attr, rght_op): contiguous_siblings['rght']})
```

I'd _really_ like to tidy that up a bit; also, I am planning on shortening the name `contiguous_siblings`, I'm aware that it's long and ugly :-)

As always, your feedback is most appreciated!
@craigds : I believe I'm finished making adjustments to managers.py. I've committed and pushed my changes. Let me know what you think, thanks!
... actually, disregard. I've found a bug in this implementation, but I've also found a new use case to test for (i.e., the use case that breaks the implementation in this latest commit.) I've got a preliminary fix en route however. I just have to modify the tests and then I'll commit/push.
I believe this is about as good as it's going to get. Tests are passing -- I've even added some new test cases... I think we're good. Happy holidays everyone!
@craigds: good catch. Fixed.
Looks great, thanks!
Thank you!
this needs to use `opts.parent_attr`
please don't wrap these, it's way harder to read :)
nitpick, but `if tree not in trees:` would be clearer
(same here)
I think `next_lft` could potentially be 0 here, so maybe this should be 

```
                    if next_lft is None or node.lft == next_lft:
```
again, not sure why these things got wrapped, they weren't that long ;)
you shouldn't use `is` to compare integers, since it means 'are these the same object', not 'do these have the same value'. `==` is better. `is` usually works, but if one of the values is a long and one isn't it won't work.

```
>>> 1L is 1
False
>>> 1L == 1
True
```
Thanks. I really need to get python 3 installed on my mac somehow :)
I am going to check/test your translation since I am Brazilian portuguese native speaker and django-mptt user as well.
Despite that "já" mistake (imho) it is good.
Nice job. :+1:
Note about this patch: Travis building is failing for unkown reasons (only for py3k).
It should not be a obstacle to merge this patch.
I would add "já" before "foi".
Final result: O modelo %s já foi registrado.
Reason: phrases are in different times.
rebased against master
Hi, is there is any chance to have this feature landing in next release ?
Thanks, looks like a good idea.

Since UUIDs are stored as inside charfields on every database except PostgreSQL, am I right in assuming that the test only really tests relevant behavior on PostgreSQL?

On sqlite3, the commit does not seem to be strictly necessary (testing with datetimes and strings as primary key.)
`django_extensions` support several kind of UUIDField,
`UUIDField` is always a CharField, and it exists for postgres a `PostgreSQLUUIDField` that use built-in `UUID` as column type.
Do you think it worth to test with PostgreSQLUUIDField explicitely ? 
Because even if it is just a CharField then the SQL statement will fail.

Currently the SQL statement will produce a query like this:

``` sql
SELECT * from model where uuid = 0123-abcd
```

with my changes, the query will look like

``` sql
SELECT * from model where uuid = "0123-abcd"
```

that become valid SQL statement.
So the test already cover the feature I'm adding. Even without using PostgreSQLUUIDField.

Regarding sqlite3, I do not understand your concern. Can you explain in details please ?
I'm sorry for not being clear enough.

I can cherry pick your commit f7b30ad5f0697d261b72ff60f9d3647533695070 on top of current `master`, and **not** cherry pick 35c74bc348181506bfabfe2e71a1abec14af62ef (the commit containing the `get_pk_db_prep_value` calls) and the test suite succeeds, on sqlite3 and also on postgresql. It even succeeds when changing `UUIDField` to `PostgreSQLUUIDField`.

So why is it necessary at all to introduce those `get_db_prep_value` calls?
Alright I understand now thank you.
The test must fails. So I'm going to fix that.
As an aside: The primary key field is always available as `Model._meta.pk`. This also probably will not change with the meta API formalization according to https://github.com/django/django/pull/2894/
I didn't know for `Model._meta.pk`, Thanks. it simplifies a lot.
I'm unable to make the test fail with sqlite3.
I need to run this test with at least postgresql I guess.
I'm unable to reproduce the problem I'm trying to solve even with postgres.
I'm closing, and eventually re-open later if I find the root cause.
Thank you!
@matthiask asked:

> So why is it necessary at all to introduce those get_db_prep_value calls?

django-extensions [PostgreSQLUUIDField](https://github.com/django-extensions/django-extensions/blob/1.4.9/django_extensions/db/fields/__init__.py#L343) inherits from Django's `CharField.to_python` method, so that when you call `node.pk` or `parent.pk`, it returns a string. Django's [`UUIDField.to_python`](https://github.com/django/django/blob/1.8a1/django/db/models/fields/__init__.py#L2378-L2388) returns a `uuid.UUID` instance. This is why the results above were inconsistent with @ticosax's tests. They would always pass because the test's `node.pk` and `parent.pk` would be cast to a string by django-extensions' `PostgreSQLUUIDField`.

When you pass a `uuid.UUID` instance as an argument to the `connection.cursor` as a list of params, it blows up, as outlined in #357. I have coded a fix [HERE](https://github.com/michaeljohnbarr/django-mptt/blob/master/mptt/managers.py) which should address the issue, but I am trying to play nice and write some tests then commit a pull request. 

By utilizing the `node._meta.pk.get_db_prep_value(node.pk, connection)` and `parent._meta.pk.get_db_prep_value(parent.pk, connection)`,  django-mptt can be released of responsibility from future bugs, as any [custom model fields](https://docs.djangoproject.com/en/1.7/howto/custom-model-fields/) used as primary keys should utilize the [`Field.get_db_prep_value`](https://docs.djangoproject.com/en/1.7/ref/models/fields/#django.db.models.Field.get_db_prep_value).

This ~~(nearly)~~ exact fix is running in my company's application right now (which uses a PostGres database) without any issues, as MPTT is a critical piece of our application (thanks!).
:+1:
Thanks for the clear explanation and the testcase!

You'll have to reload items from the database if you want this to work _right now_. The important statement is `g3 = Genre.objects.get(pk=g3.pk)`.

This is also a duplicate of #257. Code is added here: https://github.com/matthiask/django-mptt/compare/issue257
It is a silly pull request. :)
Closing; I'm working on a branch with more tested Django and Python versions; I'll reconsider submitting a pull request when I have green lights everywhere.
Great Job ! I would love to see this merged.
I'm maybe bias since I do not care about removing get_query_?set compatibility code.
Awesome!

Couple comments:

There's a couple backward-incompatible changes here (`get_queryset` and `FeinCMSModelAdmin`), which is awesome but it means some of these changes can't go in 0.6.x. Let's aim to have a 0.7 soon.

If I'm understanding the `get_queryset` changes correctly, it seems like the only backwards-incompatible effect here is that people who've overridden or called `get_queryset` on Django <1.6 will start getting `NameError`s, because it's not defined anymore. We're no longer calling `get_queryset` or `get_query_set` ourselves anywhere.
Regarding `get_queryset`: Yes, that would be my understanding too.

And yes, let's aim for a 0.7 release.

Thank you!
Here, to preserve indentation, you can use `textwrap.dedent`
Thanks for the hint! Instead of `dedent` I used a regex to strip all whitespace from the beginning of the line in f4e5f0e4b6142016f9ebc196172e874f6e6b5125.
@matthiask #330 was not as green as we thought :)
Thanks!
@ticosax d9f8e4f09f93c9eb5eb53bf82668905eac814d40 was the culprit. Fixed now.
Great ! thank you for fixing so quickly
Invalid. See #352 for explanation.
This looks awesome, probably fixes most of the concurrent-update issues people are having. Thanks!
This won't fix 1.8 issue I guess. See https://github.com/django-mptt/django-mptt/issues/356
will this be merged soon?
0.7 has django 1.8 support
This should allow for .get_ancestors() and .get_descendants() on query sets.

eg:

```
Category.objects.filter(...).filter(...).get_ancestors()
```

is now possible, as opposed to:

```
my_company.get_ancestors().filter(...)
```

This is beneficial, atleast to me, because now i do not need to iterate over my multiple objects if i want the ancestors of multiple objects. I can get all the ancestors/descendants in one query

thanks
Just curious, but have you tried `get_queryset_ancestors` and/or `get_queryset_descendants`? For example:

```
qs = Category.objects.filter(...).filter(...)
Category.objects.get_queryset_ancestors(qs)
Category.objects.get_queryset_descendants(qs)
Category.objects.get_queryset_ancestors(qs, include_self = True)
Category.objects.get_queryset_descendants(qs, include_self = True)
```
ah, @musashiXXX thank you for that. that does help.

however, i believe that having the method in the queryset object would be nice...
is there a reason this isnt currently implemented?
Thanks for the PR!

I don't have a concrete reason this isn't implemented. It does indeed make sense to have those methods in the queryset. I think the main reason is merely that I got the impression that the Django community seemed to frown upon custom querysets [until recently](https://docs.djangoproject.com/en/1.7/topics/db/managers/#creating-manager-with-queryset-methods), and all the queryset-ish logic was meant to go in the manager.

The implementation needs a bit of tweaking - it should probably do what `TreeManager.get_queryset_[descendants|ancestors]` does at the moment, and those manager functions should just call the queryset version.
@craigds i agree, had i known about TreeManager.get_queryset_[descendants|ancestors] i would have actually just literally called that method

i will do that then push up again
thanks
closed opened to trigger rebuild

the fail was anamolous, connection reset by peer when attempting to install a pip package.

@craigds i just did what you recommended, what do you think?
sorry for the close reopen nonsense, but the travisci thing keeps saying its failing when its really passing...
I think this should use `TreeQuerySet(self.model, using=self._db)`... for multi-db support.
same here
decided this isn't really that important, mostly aethestic changes, and it will cause backwards incompatibilities so I'm going to abandon it.
Not sure why the doctests are only failing on some django versions? I've added a fix to a problem that ideally would have made all tests fail :)
Sorry that this is getting confusing, just that I can't build all the environments locally, so having travis do the work is gr8 :+1:
np, I do that too, since I still haven't managed to get homebrew to compile _any_ version of python 3 on my laptop :(
Okay after having uncommented the `_default_manager` part, it seems that the test that asserts this:

```
self.assertTrue(isinstance(Person.objects.all()[0].get_children().none(), CustomTreeQueryset))
```

...which is a new test... is failing because of something different... I'll leave it out for this PR and then maybe we can find the separate cause of that?

Would that be okay?
I mean, it's only failing in Django 1.4 so it's kind of not the end of the world :)
I was under the impression that Django changed the behaviour of `.none()` recently? But I can't see that noted in [the docs](https://docs.djangoproject.com/en/1.8/ref/models/querysets/#django.db.models.query.QuerySet.none).

The docs say it should return an `EmptyQuerySet` so I don't really understand why you're asserting it's a `CustomTreeQueryset`.
Adding issue #371 for the django 1.4 test failure which has then just been removed from the tests for now until further decision is made.

\* Also hoping that Travis will confirm that what I'm saying is correct :)
Oh yes, you're right @craigds -- maybe we should create a test that asserts that it just has the custom methods of the custom queryset instead of looking at the type? Because AFAIK in Django 1.4, the approach would have been to create a `CustomEmptyQuerySet` as a separate type.
okay now we're at it, I'll just add the modification in here with the other things... so it's like:
1. Fix stuff in case someone was using `_default_manager`
2. Optimize stuff by not iterating everything to find a TreeManager on a Model, just look at `objects`
3. Create more tests for checking out custom manager stuff
4. Create a test for the .none() method
5. Alterate the test application class CustomTreeManager to reflect the way that managers are written differently depending on Django 1.4/1.5 og Django 1.6+
Oh for crying out loud Travis, these tests work locally *sigh*
I can't seem to get the last part to work, namely to make Django 1.4 find custom methods on a customized EmptyQuerySet returned by a custom Manager's `get_empty_query_set()` method... hence the failures.

So well okay, maybe it's not that important? Let me just remove `_default_manager = objects` again to see if that's the cause although I really doubt it...
Yeah, I didn't think the empty queryset was guaranteed to have any custom methods on it. Maybe it does nowdays, but it doesn't surprise me that it doesn't in django 1.4.

It's probably fine to merge without that assert.
Probably a bit late for this, but you can run `tox` to run the tests in a bunch of different environments. Or `tox -e py27-14` specifically for django 1.4
Looks good. So this does what's required for django-wiki now? Do you mind squashing these into one commit? Cheers
@craigds yeah that's what I did but everything just passed here locally, also the `.none()` on Django 1.4.
Squashing and making new PR...
thanks!
This was merged in 891f1ec647c36305a1c3c31672eeaaa65d0e4339, not sure how this PR stayed open
Yeah, I've had numerous issues with this over the last couple years. Someone didn't think through that `get_query_set` rename very clearly...

I've decided to drop support for django 1.4/1.5 in the next release (0.8, which is probably a while off) but this change can go into the next 0.7.x minor release. I'll remove this thing from master though.

Thanks for your input, very helpful :)
cherry-picked into 0.7.x. cheers!
That is ... awesome
merged via #403, thanks :)
wow, django versions are crazy. I've barely got to grips with 1.8 being released :/
Any status update on this?
sorry, thanks, merged :)
Relevant issue #391 

For the sake of searchability, the rendered error message is:

> Invalid template library specified. ImportError raised when trying to load `mptt.templatetags.mptt_admin`: cannot import name `EMPTY_CHANGELIST_VALUE`
Hey craigds, nice job mate. Any plans on a new release+pip version out of curiosity?
Hi! Pease upload this fix to pypi.
yes, please upload this fix to pypi
There might still be a new bug around blocking the next release. Help would be very much appreciated here: https://github.com/django-mptt/django-mptt/issues/424

Thanks in advance!
Could you explain this a bit? I don't really know what I'm looking at here
TBH, I exactly don't know, but it really works.
We should probably switch to `escapejs()` instead of abusing `repr()` — Django did the same in 2013: https://github.com/django/django/commit/534ced5aadf964eca4cf29a689dc70185f582772
Thinking some more about this, the current code probably tries stripping the leading `u` from unicode strings. The proposed code strips quotation marks or something. 

This does not change the fact that using `escapejs` would still be better.
#429 instead. Thanks!
Thanks. Seems like the test failures are legitimate, so this'll need some fixing before I can merge it
Done via 05e908d97b1fd3d1b563d18c4f95b58313b3fc27
Thanks, awesome work! A couple of tweaks to the tests (as noted) and then I think I can merge this :smile:
Looks great. One more thing: should probably add this method to the docs :)
@craigds The latest commit has some docs. I also lightly filled in some bits that were missing elsewhere.
was this meant to iterate over the children of `child` instead of `category`?
Looks like this only tests `get_children()` but the comment says ancestors
Does this test a different edge case than the other test?

If not, maybe just have one of them :)
thanks, this is awesome
@craigds Anything you want me to add, change, document, test? Would be great if you find the time for a review. I'm quite happy with things as they are now.
This looks amazing, thanks so much :) :trophy:
Thanks (not only but right now especially) for the review! I hope I addressed all your comments — certainly things are much clearer for it now.
Now with even less hardcoded values and even better documentation.
@craigds Any comments? Ready to go?
Looks awesome, thanks again for doing this.

I think we still need a note about browser support. I'll give it a spin in a few things on Saucelabs today. What browsers/versions have you tried it in?
Thanks for reminding me twice!  :-(

Everything works fine in IE9 and better. I don't have a working MS Edge installation unfortunately, but since things work fine in Firefox, Chrome, Safari and IE9 I think we are safe.

IE7 fails because it does not know about `JSON.parse`. I don't think polyfilling is worth it given the following support matrix: http://caniuse.com/#search=json
Two polyfills were required for the following screen:

![ie7-mptt](https://cloud.githubusercontent.com/assets/2627/12629817/c9fadbaa-c549-11e5-8e2a-f51abb9873c3.png)

JSON: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON#Polyfill
sessionStorage: https://gist.github.com/tagawa/2880273

Looks a bit ugly but works fine. What do you think?
This branch https://github.com/matthiask/django-mptt/tree/mk/treeeditor-polyfills includes the polyfill commit https://github.com/matthiask/django-mptt/commit/70a2094b6fed764f8c56f0e5c8f319bd37f09ac6
One more thing concerning browser support: Django 1.9 does not support IE8 and below anymore — https://docs.djangoproject.com/en/1.9/releases/1.9/#contrib-admin-browser-support
@matthiask I'm not particularly fussed about supporting old browsers. I just wanted a note in the docs to say which ones work :) IE9+ is fine. Definitely let's not support IE7, especially if it already looks like that. I haven't supported IE7 for anything for a while, and I don't particularly miss it ;)
Go ahead and merge this if you're happy with it. Thanks a lot!
Thank you! Let's go :-)
:+1: Great work here ! I'm looking forward for the next release.
@matthiask Thank you for this.
I'd change this example to 'name' rather than `__str__` since I think the meaning would be clearer. (since models don't have a meaningful `__str__` method by default)
So this sets the header of the first column to the name of the model?

It seems wrong to be changing `self.__class__...` in an `__init__` method. There must be a way to decorate the instance-bound method instead of the unbound function?

I think it should use the `short_description` of the first column name from `list_display`, rather than the name of the model. Then subclasses can override it easily.
One thing that'd be useful to add here: what browsers does the javascript work on? I see a compat fix for IE<9 down there, does that mean it works in IE8?
Thanks — the magic mechanism here was really hard to explain. Therefore I removed the magic in  https://github.com/django-mptt/django-mptt/commit/690e48d46ef92ef07b3b760f3fd60f51f9ad7d6d
I added an example to the docs of how `indented_title` might be overridden/replaced.
TBH I'm not sure myself. Will have to do some testing :-)
Thanks, these should definitely be `_tree_manager`.

Are you saying that you think there should be a way to explicitly access a tree manager from a third-party app (ie a public version of `_tree_manager`)?
I had the impression that Django documented the presence of `_default_manager` and that we could do the same with `_tree_manager`. That is not the case though — `_default_manager` is only mentioned once in the 1.8 release notes. Everything's fine :-)
Sorry, I must have missed this a month ago.

This looks great. I'm having a bit of trouble wrapping my head around it though. Could you add some docs? I think a partial screenshot showing the filter would be particularly helpful.
That's ok. I updated my PR with current master.
Please take a look at [screenshot](http://i.imgur.com/7dadec6.png).
I provided some inline docs:

```
class TreeRelatedFieldListFilter(RelatedFieldListFilter):
    """
    Admin filter class which filters models related to parent model with all it's descendants.

     Usage:

    from mptt.filters import TreeRelatedFieldListFilter

    @admin.register(models.MyModel)
    class MyModelAdmin(admin.ModelAdmin):
        model = models.MyModel
        list_filter = (
            ('my_related_model', TreeRelatedFieldListFilter),
                    )
    """
```

Since I just reuse django `RelatedFieldListFilter` and usage of `list_filter` is described in django [documentation](https://docs.djangoproject.com/en/1.9/ref/contrib/admin/#django.contrib.admin.ModelAdmin.list_filter) I thought that would be enough. Should I provide more information in documentation?
Thanks :)
- I'd put it in `admin.py` since it's admin-related. That makes it clearer this is an admin filter, not some kind of database filter etc.
- The doc file isn't getting included in the docs build (`cd docs ; make html`), probably because it's not mentioned in `docs/mptt.rst`. Though if you move the code into `admin.py` it'll fix that anyway.
- I think a very brief description in `admin.rst` along a cropped version of that screenshot would be really helpful. Admin list filters are an advanced enough concept that having an image would really help to explain this. See existing image refs I've just added in admin.rst
Thanks a lot for this. I've just taken the time to actually figure out whats going on (I'm not very familiar with custom admin filters), and the code looks excellent. The tests in particular look very detailed :)
Thank you for detailed review. I think that I fixed all the issues. I am not sure I could explain it well in documentation so constructive criticism would be appreciated.
I don't think this is required as a setting. Maybe just put it as a class attribute, and if anyone _really_ needs to override it they can subclass?
Could this method just call super(...) and then override (`lookup_kwarg`, `lookup_kwarg_isnull`, `lookup_val`, `lookup_val_isnull`), rather than copying the rest of the method?
Since this is using `get_descendants`, does this mean that when you click on 'ChildMaterial1' the filter will _only_ show 'ChildMaterial1' ?

Would using `get_family` be better? Then it would show 'ParentMaterial' too so you could traverse back up the tree easily.
Ah, ignore this. This method produces the filtered queryset of related models, not the choices of the tree model
:+1: cheers, merge away when ready
Can you add a comment with an example of the output of this?
Of course! 9dafd7686c729bf36b49f22231ea7cd55bc01ba3

This hack should work really well also with prehistoric versions of Django, back to https://github.com/django/django/commit/a19ed8aea395e8e07164ff7d85bd7dff2f24edca (the newforms-admin merge). The behavior of returning `TemplateResponse` instances from `changelist_view` was introduced with https://github.com/django/django/commit/c8092b840b4151724a6babdbeb84cf3138057c6a in 2011. 

(Adding data attributes to script tags is not my own idea btw, I got it here: https://github.com/django/django/blob/master/django/contrib/admin/templates/admin/popup_response.html)
Thank you! I'm not completely sure what this change achieves. Can you provide some justification and/or an use case?

We already have ordering information, and if this is purely a different way of saying `order_insertion_by` I'm against it, but I suspect there's a good reason I'm not seeing (yet!)
@matthiask, thank you. Please take a look at the [docs](https://docs.djangoproject.com/en/dev/ref/models/options/#order-with-respect-to). That's really not much to read and I don't think it's necessary to copy it here.
That's not just the different way of saying `order_insertion_by`.
As example, this django feature provides `set_RELATED_order` and `get_RELATED_order` methods.
It allows to explicitly set ordering of related children.
I suppose this feature should be added for two reasons:
1) It sometimes may be useful;
2) It's django feature, so I guess there's no reason for django-mptt to not support it.
Closing because of conflicts. Please resubmit if you still want to pursue this.

That being said, just because Django supports a particular feature does not mean that django-mptt necessarily also has to submit every variant too (limited maintainer time and attention etc.)
Ping--let me know if you're interested in this feature. Feedback welcome!
I like it. The code looks fine, the tests sufficient (== good, not "barely enough").
This sounds great :) Though I have a few questions:
- should `bulk_load` be on the manager instead of the model class?
- The items in the tests have `id` values already. Do the nodes have to have known IDs?
- The nodes in the tests are all related to each other. Could I use this to create completely unrelated nodes, sprinkled arbitrarily across my forest?
- is there a way we can use existing django interfaces for this (`Manager.bulk_create`, specifically) instead of a new method with new semantics? 

Re that last point, do you think there's a way we could make this interface work?

```
a = MyNode(name='a')
b = MyNode(name='b', parent=a)
c  = MyNode(name='c')
MyNode.objects.bulk_create([a, b, c])
```

Thanks for the effort you've put into this :)
> should bulk_load be on the manager instead of the model class?

Now that you mention it, that sounds like the right place for it. Will move.

> The items in the tests have id values already. Do the nodes have to have known IDs?

The nodes don't have to have primary keys, but if a user wants to use `bulk_create` with foreign keys, primary keys should be pre-populated before save. If we need to use auto-incrementing keys, we need to run multiple `INSERT` queries, so `bulk_create` becomes less useful.

> Could I use this to create completely unrelated nodes, sprinkled arbitrarily across my forest?

My intention was to speed up the specific use case of inserting a tree of related nodes. For inserting a bunch of unrelated nodes, I think turning off MPTT updates, running `bulk_create`, and rebuilding is probably the best option.

> is there a way we can use existing django interfaces for this (Manager.bulk_create, specifically)

Not sure--I don't think overriding `bulk_create` is right, since `bulk_load` doesn't actually run an `INSERT`, and since I think we still want to expose the original `bulk_create` method, as in the use case above when we're inserting unrelated nodes.

Basically, the proposed interface works because it's constrained. I haven't figured out how to write an generic and efficient `bulk_create` that's better than `disable_mptt_updates` and `rebuild`.
@jmcarp Are you still interested resp. do you still have the time to work on this?
@matthiask: sorry, this fell off my radar, but I'm definitely still interested in getting this in good shape. I just moved the `bulk_load` method from `MPTTModel` to `TreeManager` as suggested, and fixed the merge conflict. Let me know if this needs more revisions.
Any update on when this will make it in? Even with disable_mptt_updates() importing very large trees takes hours (nine hours and counting on my current import)
Bump. I'm happy to revise if there's anything missing.
Dear All, 
What is the status of this great/lovely/excellent bulk_load?
@craigds when do you program to merge it?

Thanks!
Hi @jmcarp @craigds,

I am definitively interested to get this merged. As I need to be able to `bulk_create` efficiently for my project, I will fork and apply the patch from @jmcarp on my branch. 

As this PR seems stalled, I can do  the changes asked by @craigds and open a new PR
Just discovered this project - looks awesome! I think this feature is a must, Any status on when this will be looked at/considered again for merge?
Closed in favour of https://github.com/django-mptt/django-mptt/pull/575
Sorry this took me forever. This is actually a really good addition and I'm looking forward to merging it 😄
Should this just be `self._get_next_tree_id()`
`cursor += 1`
This function doesn't appear to use any of the variables from the enclosing scope, so maybe it could be a method (ie `self._treeify_recursive(...)`)
From a cursory glance this method doesn't appear to support trees that use `order_insertion_by`, since it always appends nodes to the next available `tree_id`. Is that correct?

I imagine doing that would be much trickier. At a minimum I think this method should throw an error if you try to call it when using `order_insertion_by`
Not convinced about the name - I think it's too close to `bulk_create` and it's not obvious that this is a special tree-related thing. If I was tab-completing in a shell I'd be unsure which one to pick.

Maybe something like:
- `build_tree_nodes`
- `load_tree_nodes`
- `tree_bulk_load`
Actually the `treeify` function uses the `stack` and `opts` variables from the enclosing scope so it should stay as it.
Sorry, I did not look at get_descendant_count method.
Hmm. The docstring of disable_mptt_updates recommends/mentions running rebuild inside a transaction (https://github.com/django-mptt/django-mptt/blob/ef523ad4162171e3bacca8ac5ab85ac1881b0d85/mptt/managers.py#L263)

If people followed the docs and there's an additional atomic() somewhere, I fear that if the rebuild fails people are left with a silently corrupted tree. I've added the recommendation to run rebuild inside atomic to the docs (d1c00a68cb06594b7a6e93af50f88e0c65a32c57).

(@craigds No objection from my side if you think this change is a good idea.)

Still, thanks for the suggestion!
+1, the failures of the PR already caused a fix in Django (https://github.com/django/django/commit/3204bc8e5e4845cf9fbd12246f83ae851081870e)!
Looks like this runs tests on python 3.2 & 3.3, which django master isn't compatible with. Can you add excludes for those (as with 1.9)?
Changed as you expect.
Why's this removed?
ah, duplicate. 👍
Fixes #459.
I had a superfluous space...
@craigds Any hurdle for this patch to be committed?
No hurdles :) thanks for helping out!
Thanks for merging, Craig. The follow-up would be to merge #458. It never ends :-)
The fix is here : https://github.com/django-mptt/django-mptt/pull/548
Thanks. I've never used UUIDField myself, is the implication that `obj.pk` doesn't work for UUIDField for some reason? Do you know why that would be?
I should read the linked things before replying. #357 describes the issue pretty well. It's interesting that django's UUIDField returns an object which doesn't adapt in psycopg2 😞
Thanks for the patch and tests :)

I'm pondering where we should go with this. IMHO this is a less-than-ideal solution since it scatters the fix in several places in the codebase. It does work though :)

One alternative would be to rewrite the custom-SQL queries in django-mptt using the ORM. That wasn't possible back in the early days, but now we're supporting django 1.8+ we should be able to do it. Django 1.8 adds [Case/When](https://docs.djangoproject.com/en/1.9/ref/models/conditional-expressions/#conditional-expressions), more powerful F expressions, etc.

It looks like the methods that would need modifications are:
- `TreeManager._inter_tree_move_and_close_gap`
- `TreeManager._move_child_within_tree`
- `TreeManager._move_root_node`

It might make the huge queries even less readable, but it would solve this problem. I'm assuming of course that the ORM will be able to adapt its own UUID objects before passing them to the database backend. (Probably worth checking that before rewriting those huge SQL queries)

I'm leaning toward that solution since avoiding custom SQL will make the code more robust in general. Thoughts?
Also see #466 which is an unrelated issue with the same query
@craigds I agree with refactoring to using Django's ORM will be great for future developments, it's hard to accomplish all Django ORM's benefits with hand made SQL queries. But it should be done separately from this bug-fix. I have interest in the refactoring but do not have enough time recently.
@craigds I think we should merge this since this pull request simply makes django-mptt's code consistent. The improvement might still happen, but this pull request works and solves real problems right now.
@xyb Great work! Thanks for taking this and running with it. @matthiask thanks for the merge!
Thanks @michaeljohnbarr , but you have to thank @craigds for the merge :)
It does not require the addition of the test?
Sorry about that, I've added a test :)
Please treat this as a suggestion to be discussed: What about renaming the `all` argument to the template tag to `all_descendants` too? It adds verbosity but also clarity.

Apart from that: Looks good, thanks!
Given that's what I called it in the code bits, I'd certainly be happy with that! Changed..
Nice, thanks!
Please add tests.
Thanks so much for fixing this! We were facing the same issues.

@craigds Just wondering if you know when this is going to be included in a 0.8.5 release, so we can depend on the PyPI version in [Kolibri](https://github.com/learningequality/kolibri). Thanks!!
@jamalex my pleasure :)
@jamalex: 0.8.5 is now tagged and on PyPI 😄
Awesome, thanks so much!

On Jul 20, 2016 11:28 PM, "Craig de Stigter" notifications@github.com
wrote:

> @jamalex https://github.com/jamalex: 0.8.5 is now tagged and on PyPI 😄
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/django-mptt/django-mptt/pull/478#issuecomment-234167994,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/AAlvsDv6-dRlOwibu2D0zhMXtmEsYVbQks5qXxFygaJpZM4I6YuR
> .
Thanks!
Agreed that that line does actually look wrong - it's making a copy of the manager during `__init__` (i.e. per model instance), though managers are normally a class attribute. So yes I'm inclined to remove that line (not comment it out though)

cc @TheDeadOne, can you comment on why that line's there?
@craigds I didn't find another way to support `using` method and `using` keyword (https://docs.djangoproject.com/en/dev/topics/db/multi-db/#manually-selecting-a-database).
It occurred to me that `TreeManager.disable_mptt_updates` doesn't really add any magic; it just turns off recalculation of fields. Perhaps we could keep that even though we're dropping `delay_mptt_updates`

I'll ask the mailing list for further feedback on the changes. Thanks again
I've cleaned up the PR a bit, and removed the addition of bulk_load to keep the diff clean(er): (https://github.com/matthiask/django-mptt/tree/mk/nomagic-bulk-load)
While chasing down a surprising (at least in the beginning) crash I found a behavior change in the new code which must be documented, and I'm not yet clear on how to resolve all edge cases best.

The current code in django-mptt does NOT run `model.save()` within `TreeManager.move_node()`. The new code obviously has to run `model.save()` because the tree maintenance operations never touch the `parent` field, a consequence of the fix for https://github.com/django-mptt/django-mptt/issues/466.

Completely obvious in hindsight, but at first I was dumbfounded (we had crashes in [feincms3](https://github.com/matthiask/feincms3)'s pages administration and a [reproducible test failure](https://travis-ci.org/matthiask/feincms3/jobs/149103192) — more fixes forthcoming)
I have a few doubts regarding transaction isolation levels and reading MPTT values from the database. Not sure whether this approach is even viable. We should be alright with READ COMMITTED, but that's not the default on MySQL. 

(OTOH who even cares about correctness on MySQL. Sorry, could not resist.)
can this move forward?
I'm now quite sure that this PR does not work with transaction isolation levels SERIALIZABLE and REPEATABLE READ. 

I read initial values, send a big UPDATE over the wire and read the same row again in the same transaction. We still had problems with MPTT attributes getting out of sync with the code in this PR. So maybe there are some good ideas in here, but I wouldn't recommend merging this as it is.
certainly this will need more works
Perhaps we should split it up into more manageable chunks? Less magic is certainly a good thing to strive for, there seems to be a fair bit here that can be made into separate MRs and reviewed/merged independently?
Needs a bit of work put into bringing this up to date with master. Some commits are no longer relevant and others need a bit of refactoring.

I've started rebasing some of the commits here onto #567. That one will stay up-to-date with any master changes until it's merged.

I've started with the initial stable things that are obvious and I understand well, and I'll create some individual pull requests for the rest.
These should all have a 400 status code to go with them IMO.
Maybe raise a deprecation warning here? It seems senseless to keep them around forever if they are defunct.
I'm no expert on the internals of django-mptt, but why is raw sql needed here? Could you do:

```python
Model.objects.update(
    level=Case(When(lft__gte=x, then=F('level') - ....))),
    tree_id=Case(When(lft__gte=y...
)
```

Using the Case/When classes built into Django?
Same for this?
And this?
The reason is simple: The code is a bit older than Django's support for Case/When :)

Case/When should work too.
Yes.
Thanks!
Looks good, @craigds! So you did find a minimal patch after all. I'm surprised that no more invasive changes were necessary, very nice.
Can someone confirm that they can run a `makemigrations` after getting this change?

I am still getting the `AttributeError: can't set attribute` error ...

```
(.venv) [velodrome][bump-django] λ pip freeze | grep -E "(mptt|Django)"                                                                                               [node-5.5.0][ruby-2.2.1]
Django==1.10
-e git+git@github.com:django-mptt/django-mptt.git@1cea66990f272dc911e106ba7e43d62e8164fc8a#egg=django_mptt
```
@lwm: can you post a traceback of that error in `makemigrations` ?
@craigds 

```
(.venv) [velodrome][bump-django] λ python manage.py makemigrations                                                                                                    [node-5.5.0][ruby-2.2.1]
INFO:root:settings.ENVIRONMENT: dev
Traceback (most recent call last):
  File "manage.py", line 8, in <module>
    execute_from_command_line(sys.argv)
  File "/home/lwm/work/noa/velodrome/.venv/lib/python3.5/site-packages/django/core/management/__init__.py", line 367, in execute_from_command_line
    utility.execute()
  File "/home/lwm/work/noa/velodrome/.venv/lib/python3.5/site-packages/django/core/management/__init__.py", line 359, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/home/lwm/work/noa/velodrome/.venv/lib/python3.5/site-packages/django/core/management/base.py", line 305, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/home/lwm/work/noa/velodrome/.venv/lib/python3.5/site-packages/django/core/management/base.py", line 356, in execute
    output = self.handle(*args, **options)
  File "/home/lwm/work/noa/velodrome/.venv/lib/python3.5/site-packages/django/core/management/commands/makemigrations.py", line 140, in handle
    loader.project_state(),
  File "/home/lwm/work/noa/velodrome/.venv/lib/python3.5/site-packages/django/db/migrations/loader.py", line 310, in project_state
    return self.graph.make_state(nodes=nodes, at_end=at_end, real_apps=list(self.unmigrated_apps))
  File "/home/lwm/work/noa/velodrome/.venv/lib/python3.5/site-packages/django/db/migrations/graph.py", line 409, in make_state
    project_state = self.nodes[node].mutate_state(project_state, preserve=False)
  File "/home/lwm/work/noa/velodrome/.venv/lib/python3.5/site-packages/django/db/migrations/migration.py", line 92, in mutate_state
    operation.state_forwards(self.app_label, new_state)
  File "/home/lwm/work/noa/velodrome/.venv/lib/python3.5/site-packages/django/db/migrations/operations/models.py", line 90, in state_forwards
    list(self.managers),
  File "/home/lwm/work/noa/velodrome/.venv/lib/python3.5/site-packages/django/db/migrations/state.py", line 93, in add_model
    self.reload_model(app_label, model_name)
  File "/home/lwm/work/noa/velodrome/.venv/lib/python3.5/site-packages/django/db/migrations/state.py", line 162, in reload_model
    self.apps.render_multiple(states_to_be_rendered)
  File "/home/lwm/work/noa/velodrome/.venv/lib/python3.5/site-packages/django/db/migrations/state.py", line 277, in render_multiple
    model.render(self)
  File "/home/lwm/work/noa/velodrome/.venv/lib/python3.5/site-packages/django/db/migrations/state.py", line 559, in render
    body,
  File "/home/lwm/work/noa/velodrome/.venv/lib/python3.5/site-packages/django/db/models/base.py", line 157, in __new__
    new_class.add_to_class(obj_name, obj)
  File "/home/lwm/work/noa/velodrome/.venv/lib/python3.5/site-packages/django/db/models/base.py", line 316, in add_to_class
    value.contribute_to_class(cls, name)
  File "/home/lwm/work/noa/velodrome/.venv/lib/python3.5/site-packages/django/db/models/manager.py", line 120, in contribute_to_class
    setattr(model, name, ManagerDescriptor(self))
AttributeError: can't set attribute
(.venv) [velodrome][bump-django] λ pip freeze | grep -E "(mptt|Django)"                                                                                               [node-5.5.0][ruby-2.2.1]
Django==1.10
-e git+git@github.com:django-mptt/django-mptt.git@1cea66990f272dc911e106ba7e43d62e8164fc8a#egg=django_mptt
```
@lwm My test with the version at `1cea669` worked for me. Tested adding a field on to my `MPTTModel` model, ran `makemigrations` and subsequently ran `migrate` without issue.
@jamesbeith Thanks. I think it could be some lurking `.pyc` files ... not sure.
I know this may be a little bit too odd, but can we get an update on the pip channels? Thanks in advance...
@lwm 
What is `model` and `name` in your traceback?
Well, the problem will still show for old migrations. I just had to regenerate a migration as well (thanks, sed -e s/_default_manager/objects/) when upgrading to Django 1.10. There's no way to fix broken migrations (caused by mptt) in users' code unfortunately.
Thanks for this. 
I have a similar issue: http://stackoverflow.com/questions/42053691/drf-and-django-mptt-pagination

D
It has been too long since I submitted the fix for me to remember the details, and I don't have any projects handy anymore to test if the issue has been resolved, sorry. Happy to just abandon this.
I understand perfectly. Thanks for your work!
There has been a similar change in this area (is_filtered vs allow_filtered) -- please check and resubmit if you still want to pursue this. Thanks!
@Aramgutang , tests fails. Do you can fix that?
Yes, writing a slightly better solution now, will discuss in #420 when I'm done.
Thank you!
Thanks!
Thank you!
Thank you!
Thanks!
Thank you!
Thanks. Not sure about pypy builds. They've been doing that for a while though, not related to this change.
Please make sure the "dk" folder is deleted so only the "da" folder remains.
Thanks for the PR

Can you link to something explaining why to use DA instead of DK? AFAIK these are normally labelled with ISO-3166-1 codes, but I can't seem to actually find a citation for that at the moment.
https://www.gnu.org/software/gettext/manual/gettext.html#Header-Entry

Reason why i wrote is because i found a few packages using it "dk":
https://www.debian.org/international/l10n/po/dk

Comare that will how many use "da" and "da_DK":
https://www.debian.org/international/l10n/po/da
https://www.debian.org/international/l10n/po/da_DK

"dk" is short for denmark. A country.
"da" is short for danish. A language.

If the translation is placed in /usr/share/locale/dk/LC_MESSAGES/ it is not used at all i believe.
I can confirm the language code for Danish is `da`, not `dk`.
Thanks. My mistake :)
Confirmed!
thanks 😄
@craigds could you check if it's an acceptable fix for the issue? If so, I'll check the tests and I will make this mergeable
Thanks! Since you asked, I'd prefer a simple version check than the feature-checking check. Something like:

```python
if django.VERSION < (1, 10):
    opener = ...
```
@craigds will comply and I will bring this in shape for merge. thanks for answering!
@craigds fixed, thanks for the review
Thanks!
Cheers (whoops!)
In Django 1.11, the move to template-based form widgets will lead to small HTML layout differences which will be hard to account for in doctests. That's why I suggest to move to standard unit tests for all form tests.
👍 those doctests are real pain, I'd get rid of them all if I had the time. Thanks for this!
Yeah, I'm happy to remove `pypy` altogether. I doubt many people use it. In any case it behaves pretty much the same as CPython 2.7 from mptt's perspective, so no need to have it tested separately.
but this change is good without that anyway. thanks!
Small typo `1.11a` -> `1.11a1`
Small typo `1.11a` -> `1.11a1`
Django 2.0 doesn't support `pypy`. Maybe you can add it to exclude matrix in this PR.
Looks like it depends on the pip version… Thanks for the fix.
I don't know enough about pypy to change anything related. I noticed though there is a pypy3 option to use on Travis.
Despite the correction, it continues to fail (sometimes?).
https://travis-ci.org/django-mptt/django-mptt/jobs/203252723
super strange. Latest build worked. I'm hoping it stays that way. Possibly travis had cached something oddly. ¯\\\_(ツ)\_/¯
I had some trouble getting it to work properly on Python 2 and Python 3 because of the big changes about how encoding is handled in the csv module. According to http://python3porting.com/problems.html#csv-api-changes Python 2 expects a byte stream, while Python 3 expects a text stream. My new attempt reflects this, and works on both Python 2 and Python 3. There might be a cleaner way to do it, maybe through things like `TextIOWrapper` but I couldn't figure out a solution that would work on both Python 2 and Python 3 with the exact same code.
@sephii , see https://github.com/jdunck/python-unicodecsv . I hope it will be helpful.
test failure is unrelated. thanks :)
Otherwise 👍 thanks :)
this `.decode` is failing the tests on py3
Thanks!

According to https://www.w3.org/TR/html5/grouping-content.html#the-ul-element , only `li`, `script` and `template` are allowed as children of the `ul` element, which means that this change would promote invalid usage of HTML.
`pip>=8.0` doesn't support `python==3.2`. IMO we can drop python 3.2 support (see [[1]](https://docs.djangoproject.com/en/1.10/releases/1.8/#python-compatibility)).
yes, can drop python 3.2 support. Honestly I don't think anyone has used python 3.2 for ages :)
what's the old pip issue this fixes? Is that the bug causing travis to not find django 1.11a1 _sometimes_ ?
Yes, I think that `pip` upgrade should help.
https://github.com/pypa/pip/issues/3511 suggests that pip 8 handles alpha versions _differently_ ¯\\\_(ツ)\_/¯

I don't understand why the tests were passing _sometimes_. Do you know?
It's a mystery for me. I thought that it is a old<7 pip issue, but it's hard do say.
Thanks 😄
We can't merge code that we don't understand. I think this needs a comment properly explaining what it's actually doing.
`==` already results in a boolean, so the `bool()` here is unnecessary. Also, pep8 has spaces either side of the `==`.

I think nulls sort first (in all databases? not sure - can you check?). So probably what this is doing is finding this index:

`null, null, <<insert new null node here>>, 'A', 'A1'`
`'A1', 'A', <<insert new null node here>>, null, null`

i.e.

* if sorting the attribute in ascending order, find the index of the first node that's _not_ null, and insert there.
* if sorting the attribute in ascending order, find the index of the first node that _is_ null, and insert there.

need some more comments, and probably a test for both sort cases I think.
Ok I changed the comment
I added a test case for this.

From superficial googling, it seems nulls sort first for postgres, sqlite, mysql, but [last on oracle](http://docs.oracle.com/cd/E11882_01/server.112/e41084/statements_10002.htm#SQLRF55368)...

So I'm not sure how django-mptt should behave ? Should it A. be consistent with the database provider (have nulls at the end for oracle), or B. give always the same result (nulls at the top for all) ?

I'm in favor of B (which should be the case with the PR).
Good question. Thanks for researching that. I _think_ that's the right approach - it doesn't matter in most circumstances, but doing it this way means that if you switch between oracle and another database you don't need to rebuild your tree 👍
Thanks for PRing this. I think I'm okay with merging this, but unsure why move_node() now needs a save(). Seems unrelated?

@matthiask are you aware of any reason why this can't be merged, separately to your branch? It doesn't look  like it would introduce incompatibilities and fixes a real bug.
I'm unsure why this is here. Doesn't `_move_node()` handle writing the changes to the db?
The commit removes the `parent` updating from `_move_node`, that's why a separate `save()` is necessary.

The reason for this is that `parent` should be updated at the same time as other fields, not at the same time as the MPTT fields if we want to support unique constraints containing parent-related data.
Yes, also it's more logical, as `parent` is really a model field, and not part of the MPTT optimisation.
true, that makes sense.
👍  cheers
Thanks!
As far as I can see, the test failures are not caused by my changes. Also, for your information:

https://code.djangoproject.com/ticket/27534

Even if `CSRF_COOKIE_HTTPONLY` is off, apparently, getting the token from the hidden field will be also necessary if `CSRF_USE_SESSIONS` is on.
The test failures are probably fixed by this: https://github.com/django/django/commit/216bb2e8fbc3cb37615bbd70edaa73287acdca81 -- the fix is also backported to `stable/1.11.x`, but unfortunately not contained in 1.11rc1, so we'll have to wait until 1.11rc2 or 1.11 final for a clean test run.

Anyway, I think the changes look good. I'm not 100% sure, but I think that as long as there are any actions on the model admin (not `actions = None`, https://docs.djangoproject.com/en/1.10/ref/contrib/admin/actions/#disabling-all-actions-for-a-particular-modeladmin) the proposed code should work just as good or even better as the current implementation.
Sounds good to me. Thanks :)
Thank you guys for maintaining `django-mptt`!
Thanks!
I don't think the expandTree call is necessary in this case since the tree should be fully expanded by default.

Maybe you could rename the feature to `collapse_tree_by_default = True` and simply do `DraggableMPTTAdmin.collapseTreeByDefault && collapseTree()` or something.

I don't care much either way though, I just think that since we have to do a thing for collapsing the tree and nothing for expanding it, using "collapse" to name the feature might be clearer.
You are right. I will remove the `expandTree()` clause.

The other point is that I thought you would not like to change the default behaviour of the class so that one have to decide to use this new feature to expand the tree on first visit. But then I recommend to use a flag that defaults to `False` so that one feels like opting in to a feature instead of opting out to a feature which is activated by default. I would always recommend to use flags that defaults to `False` in every programming context because doing this consequently reduces misunderstandings and silly bugs (a wise men thaught me once). Of course here it would not be a bug if we use `collapse_tree_by_default = True` instead of `expand_tree_by_default = False`. What about `dont_collapse_tree_on_first_visit = False`? (No problem if you don't like this ... :-))

So your project -> your choice ... ;-)
not a fan of `dont_collapse_tree_on_first_visit` - it's always better to minimise the number of negatives in var names to make them easier to understand.

Otherwise not concerned about collapse vs expand. This seems fine to me 👍
Thanks! I'm not sure about the change from github to readthedocs for the documentation -- I'll leave the final decision to @craigds.
I never set up RTD. It looks like that RTD project is owned by @jbochi.

Since we'd need to potentially change the RTD config etc in future, I'd prefer not to change these unless we can get access to that.

@jbochi, how would you feel about surrendering the RTD project?
i should note: gh-pages is a bit of a pain, so RTD would be better :)
I am not sure if gh-pages is updated by default, rtd is.
@craigds @jbochi Surrendering the project completely isn't necessary. You could also add additional maintainers to the project (https://readthedocs.org/profiles/craigds/ and https://readthedocs.org/profiles/mk/ would be nice)
Still think we should update to ReadTheDocs. It's automatically done on post-hook and other python docs have a home there
Sorry for the late reply. I've added @craigds and mk as maintainers. Should I add someone else?  I don't mind deleting the project from RTD if you want to recreate it too.
This may be a good idea, but let's run with only the `tree_id` index for now. Thanks!
I don't think you need `getattr()` here. `cls._mptt_meta.tree_id_attr` should do.
With recent changes, you can drop this guard. django-mptt now only suppors 1.11+.
Hi ! 

Why the function in this PR is not documented here  https://django-mptt.readthedocs.io/en/latest/mptt.managers.html ?
@craigds I've got the tests to pass now. If you have some time could you take a look? This gives a *huge* performance boost to django-mptt applications. Like, really really really huge - we saw a 150% reduction in query time for almost all operations. Would be good to share and push a new release so everyone else can benefit!
ping @craigds, do you have any time to have a look at this? The changes are pretty small?
@craigds bump
I have been trying so solve a related problem in the same time but failed -- I had the suspicion that re-reading the values still produces invalid values under some transaction isolation levels. 

I'm sure the change does not make things worse though :)
Thanks!

Not sure it is worth it, since you're not removing or simplifying any code here?
Closing this for now. We can revisit this later (not much later though) when considering dropping support for 1.8.
Thanks!
Thanks!
Thank you! It is a requirement, but it seems customary to not include the Django requirement in Django packages to make it easier to upgrade the package in a project without necessarily also updating Django itself (e.g. `pip install -U django-mptt`).

I'd like to keep it that way.
Thanks!
Hi,

Thanks for your contribution!

I'm no fan of tox-travis. It hides the combination of versions with which tests fail, and only shows the Python version (which is most often less interesting when maintaining Django packages than the Django version)

Also, I really really like testing against the master branch as well (with `allow_failures`). 

Is there no way around this when using tox-travis?
Just personal opinion, but I've found the Travis CI configuration style used by django-debug-toolbar to be preferable:

https://github.com/jazzband/django-debug-toolbar/blob/c7e79ade99d3c540896389ef86d1acf522c588f2/.travis.yml

Things I like:

- Uses same testing infrastructure as `tox.ini`, so local tests are the same as Travis tests
- There isn't a complex `exclude:` section in the configuration
- It is very explicit and easy to follow/modify
- It doesn't have any tox-travis magic

If others agree, I can open a PR that makes such a change.
Why is this necessary? The `static()` method is already applied to relative paths:

https://github.com/django/django/blob/stable/1.11.x/django/forms/widgets.py#L92
I'm closing this for now, but you can still provide a rationale for this change and reopen :)

Thanks!
Hi, any plans to merge?
Thanks!
Thank you!
Renaming `nodes` to `genres` is fine, but you should also do this on the new line 113. Also, please add a single space after the `:` when creating the context dictionary while you're at it :)

Thanks!
Applied! :)
"btn btn-info" - it will work only with bootstrap, no?
Yes, i tested it with django-suit django-mptt and django-reversion in one..
so what the point to add those classes if it will not works without additional packages or css?
I suggested it because it looks ugly with the reversion based buttons and these are links wrapped in a LI in one row..  Django admin is bt3..
Thank you for your contribution! There are various problems with this pull request:

- The nl translation you added mostly has german strings, which isn't correct.
- The default Django admin templates wrap object actions with `<li>` tags. The removal of the `<li>` wrapping in your pull request breaks the HTML structure.

I might accept a pull request which makes the button addition a little bit smarter by maybe implementing variants for the default admin, grappelli and django-suit. However, the pull request in its current form introduces unacceptable regressions.
Hmm, what for? We do not have any models and therefore no section in the Django admin panel so I don't immediately see how the appconfig class might be useful?
AppConfig is the _modern_ way to tell django that the python package is a django application, not only for models or admin panel.
There is no deprecation path from using `models.py` as a way to declare a django application, but django docs encourage to have an explicit AppConfig, and internally django create an AppConfig for you anyway.
Using the `default_app_config` there is no need to replace `mptt` to `mptt.apps.MpttConfig` in `INSTALLED_APP`, so backward compatibility is preserved.
I like to be explicit whenever I can.
Thanks!
Thanks!
Thanks!
That was quick thanks to you.
Should it trigger an automatic build on rtd? http://readthedocs.org/projects/django-mptt/builds/
It should, now :)
Thank you! I think that's fair to say. django-mptt is a tool with sharp edges, but that does not mean it's not production ready.
I think this doesn't really even need a mention in the upgrade notes - South didn't work on Django 1.8, and we haven't supported 1.7 for ages. So that stuff should have just been removed when we removed 1.7 support really.
@jdufresne Feel free to merge :)
Thanks!
This comment is now irrelevant. Can you remove it as well?
Done; I also removed the method `get_empty_query_set` which is no longer needed.
What does .values().first() return when the queryset is empty? A dictionary, too? Right now it would crash with an IndexError if fetching the object fails. Would a silent failure be preferable, and why?

The addition of using() is certainly correct.
It returns `None` if the filter isn't met so it'll crash with 

```
AttributeError: 'NoneType' object has no attribute 'items'
```

Perhaps a change to simply using the `.get` method will work? Then it'll fail with a more appropriate `DoesNotExist` error. Or we can manually raise a DoesNotExist if the result `is None`. What do you think? Alternatively, I can just put the __getitem__ call back in. I'll make whichever change and update the PR.
I've edited it to only add the `.using` method call for now.
Thank you!
Hi, would it be a possibility to get this bug fix tagged - I have to keep the fix in my models until I can pull it from PyPi. 

Many thanks!
Dom
Nice, thank you!
Thanks!
It could indeed be much smaller. As I didn't know what was really relevant, I only took commit messages and tried to do my best with it. If you want to purge it to make it smaller (and maybe clearer), I don't mind at all. Thanks for reviewing this.
Thanks! The list of changes is thorough, I'm sure it could be reduced to a more manageable set somehow by not mentioning every single change. 

A format I've grown to like is a changelog where important points are mentioned in the changelog itself, and the full list of changes can be reviewed e.g. on Github (as used in [feincms3](https://github.com/matthiask/feincms3/blob/master/CHANGELOG.rst), [django-imagefield](https://github.com/matthiask/django-imagefield/blob/master/CHANGELOG.rst) etc)

I'm not opposed to merging the PR as it presents itself right now though :)
That should be "coercion"
Django please (the Django project itself also always uses an uppercase D)
Would be nice to use double backticks (``db_index=True``) so that code is formatted as such.
Indeed, I did not pay close attention to the commit messages typo
Of course, well spotted
And... done !
LGTM, Thanks!
Many tests are failing. 

I'm neutral but tests would certainly have to be fixed.
Thanks! I'm not completely sure what other improvements dropping Python 3.4 support enables, but I'm still fine with that :)
Also re. dropping 2.7 support: Adding `six` to `install_requires` would work too (and probably wouldn't lead to more requirements)

Things *are* made harder by the removals in `django.utils.*` though (and Django@master compatibility made me drop 2.7 in other projects too) so if it's either too hard or if you just want to drop 2.7 then feel free :)
I haven't reviewed the code changes, but no objections to this in principle. It's time.
Thanks @michael-k!
Already merged but no objection either.
I generally agree with this but would like to hear whether @jdufresne @craigds or @goodtune want to veto this change.
I'm :+1:. I think this should come with a major version bump so as to communicate the backwards compatibility breakage.
Is the temporary file even necessary at all now?
No, it's not :)
You can drop these coding cookies as well. Python 3 defaults to decoding source files as utf-8.
Thanks!
@brosner @matthiask @gaqzi @dokterbob
@matthiask What do you think about this change? I think using subqueries is big leap forward for `django-mptt`.
I think this looks really good! Thank you.

It would be great if someone else could also review this though. I don't know the `Subquery` / `OuterRef` objects that well and worry a bit about breakage. The tests are all passing though so I'm already quite confident.
@matthiask I rebased to current master. Can I somehow raise your confidence :-)?
Let's trust the test suite :-) thank you!
Do you have an idea when the next release will include this?
Unfortunately I do not have an idea. Each time I release a new package several people complain that the changelog is missing but nobody steps in to help.

This is a bit demotivating. It does not help either that I'm no heavy user of django-mptt anymore.

Maybe someone else finds the time and energy to do this?
Thanks Matt. I'm an definitely an amateur here but will look into what this entails. I did test the updated managers.py file on my development site and it's working exactly as I had hoped.
Is there anything what I can do to help merge that PR?
Thanks for the reminder. This is fine already.
Thanks!
All tests have passed.
Awesome, thanks!
Thanks, I think the direction you're going is good here.

Tests are failing and a few other problems have to be fixed before merging this.
Is there a reason for making this optional?
Lines 6 and 7 import from the same module.
The fields' names aren't necessarily `lft`, `rght` etc. -- they can be overridden unfortunately.

You should inspect `cut_item._mptt_meta`. Also, `mptt_level` isn't even the default name.
Backward compatibility only. If you think it's not necessary, I'll remove it. let me know
I thought you wanted like this, since there were already 2 imports from 2 modules in separate lines :
`from django.contrib.admin.options import ModelAdmin` (line 6) and 
`from django.contrib.admin.options import IncorrectLookupParameters` (line 16) 
and
`from django.utils.encoding import force_text` (line 11) and 
`from django.utils.encoding import smart_text` (line 19).

Do you want me to put all 5 imports (lines 6, 7 and 16) in 2 different lines (since we have 3 imports from one module and 2 from another)?
Really sorry, I completely missed this. We'll correct it and re-submit it.
My opinion is that it's better to avoid branches if possible -- if someone later objects they can still introduce the conditional.
Ah right, I didn't see that; in my own projects I'm using black and isort so that I don't even have to think about formatting and sorting imports. 

I prefer one import per module, but you don't have to fix the code around it. I generally prefer one change per pull request but given that django-mptt does not see many changes these days the chance of conflicts is really small, so feel free to fix the surrounding code as well :)
Don't worry, that's exactly what unittests and reviews are for :) 

Thanks!
Just pushed all the corrections. Let me know if something else is missing.
Shouldn't this be `get_move_node_change_message`? move, not mode; also, `_log` seems unnecessary.

Looks good apart from that!
I missed that typo. thanks!
Thanks!
Just spotted that I missed adding the Python 3.8 classifier and pushed a commit to add that. (Happy to squash it into the first commit where it belongs.)
Both changes do the trick for me.
Are there anything more blocking this from being merged (and a new release containing it)?
I think it's fine with the additional testing this PR received.

Thanks all!
This looks much simpler than expected! 

I always had a hard time understanding all aspects of the `save()` implementation, but the change looks correct to me.
I assume this could cause a query, hence skipping it if `opts.order_insertion_by or parent_id is not None` is falsey might be an optimisation, but I'm not sure it's worth it.
Well wait... It's still incorrect...
Replaced by #830
Many unrelated changes (string quotes, reformatting) in there. Maybe reformatting the code with Black first (in a separate pull request) would have helped.

We are >=3.5 only, depending on Python 3.5 is fine.

Please remove the .idea folder again. You may want to ignore it locally using `echo .idea >> .git/info/exclude`.

Also, a failing test which is fixed by your change would be awesome.
https://github.com/django-mptt/django-mptt/blob/master/.travis.yml
These seem to be unused? Typing may be a good idea but this should happen in a different PR/issue.
... this seems unused too.
Thank you!
Ok, done! Thank you for reviewing the PR.
Great thanks!
Thank you! Yes, please add the .mo file too. Most Django apps also bundle their .mo files (because otherwise you'd have to compile the message catalogs inside the virtualenv too)
Maybe `settings` was used earlier, it certainly isn't used now.
LGTM
Thanks!
this could be a good addition IMHO
Thanks!
Thanks!
@matthiask It looks like this is not yet included in the release. Could you please release a new version?
@Mogost Thanks for the reminder. Yes, I'd like to do that. 

Please don't take it personally because it isn't meant that way. The idea of getting even more complaints about missing release notes makes it really hard to just put out another release. See e.g. https://github.com/django-mptt/django-mptt/issues/698, https://github.com/django-mptt/django-mptt/issues/775
So, I pushed another release without release notes and at the same time proposed a pull request marking this project as unmaintained. See https://github.com/django-mptt/django-mptt/pull/776
LGTM
Thanks!
Thanks, makes sense!
Hi @jaap3 

Thank you for your contribution!

I don't like tox-travis very much because when using it, the build jobs list is strictly worse than without it. 
https://travis-ci.org/github/django-mptt/django-mptt/builds/735406794 only shows Python versions, https://travis-ci.org/github/django-mptt/django-mptt/builds/724939226 shows Python AND Django versions.

Personally, I don't find it enormously useful to run all tests in all version combinations locally. I'm happy with running only "extreme" combinations locally and let Travis CI do the rest, e.g. https://github.com/matthiask/django-js-asset/blob/master/tox.ini

What do you think?
I agree, the output on Travis is less useful. The reason I did it this way is that most projects I've looked at try to keep Tox and Travis in sync. I'll close this PR and might open a new one with the approach you suggested if I have the time.
Thanks!
@matthiask can you help me out a bit with achieving my [hacktoberfest](https://hacktoberfest.digitalocean.com/) goals and apply a `hacktoberfest-accepted` label to this PR? Alternatively, if you want to participate in hacktoberfest, you could apply a `hacktoberfest` topic to the repository :)
@ErwinJunge Done! 

(I received a few spammy pull requests at the beginning of october, so I don't know whether I want to add the label to the repository. )
Awesome, thanks :) 

Sorry to hear about people spamming, I understand that's the reason for the explicit approval process now. Probably better to leave the label off then, it might be more trouble than it's worth.
Thanks!
Thanks!
I think suggesting replacement packages should be very nice!
> I think suggesting replacement packages should be very nice!

Thanks, that's an excellent suggestion!
Awesome, thanks! And many thanks also for all the energy you put in this package until now. It is appreciated!!
Great call. I think the alternative projects do a better job these days anyway. I came to the realisation at some point that MPTT can't really be managed correctly in the app layer, doing it in the db or just using CTEs seems like the way to go.

Thanks so much for putting in all the work to maintain this project. Hope 2021 improves for you
Thanks, this is great!
LGTM.
Why are so many Django Libraries so complex 😆 ... But yes, there wouldn't be an issue if it was not trying to reimplement so many Django methods.

If you feel like writing an article on why (I got it) and how to shift from django-mptt to django-tree-queries, you'll have a very interested reader ;-)
Here's an issue with an outline but it's definitely not an article yet... :) 
https://github.com/matthiask/django-tree-queries/issues/3
Looks good to me. At the same time I'm left wondering, why does the code of django-mptt have to be this complex 😅
Apparently the idea is that setuptools does pattern matching of every package against the `exclude` list.

Alternatively, a similar effect can be achieved via:

```
exclude=
    tests*
```

instead of the two entries (because `tests*` matches both `tests` and `tests.myapp`). But it's kinda ugly-ish since it would also match `testsfoo` and stuff like that (not that it's going to exist).

I can adjust it either way, it's a matter of your preference.
Yeah, I somehow assumed that adding `tests` would make `find_packages` not even descend into this package/directory.

I agree with you, `tests` and `tests.*` as separate entries seems safer to me.
Oh wow, excluding `tests` isn't sufficient then? I always assumed that this is enough.
```suggestion
```

This can probably be removed now?
You are correct. Updated now.
Thanks, looks good! 

It would be even better if the colors were taken from the new CSS variables, see https://github.com/django/django/blob/main/django/contrib/admin/static/admin/css/base.css (with the appropriate fallbacks for older but still supported versions of Django) but that can be done in a separate PR.
Wow that was fast, thanks a lot! You're right about the CSS variables. I'll create a new PR for that.
Hey there, when using firefox, the dark theme is used even though firefox isn't in dark mode. Probably linked to this commit.
![image](https://user-images.githubusercontent.com/75339002/131719902-16390b18-597c-407f-897f-06dfaa6d8fc5.png)
That's strange! Which OS  / FF version are you on?
Hmm. @OliverSieberling Maybe you're not on Django 3.2? Older Django versions do not support a dark mode yet (I think). This also means that this change introduced a minimum Django version of 3.2 for the draggable MPTT admin for anyone using dark mode.
Hey all, I've got the same issue using Django 3.2.7 and FF 91.0.2 . It works great with Crome however.
I submitted a PR which should fix this problem. Please test 👍 #799
Nice, thanks!
Oops :) Looks good, thanks!
Refer to https://github.com/django-mptt/django-mptt/issues/779#issue-826832449
Thank you!

(Incrementing the version number yourself is a bit unusual.)
@matthiask Thank for approving my pull request and for allowing me to contribute.
@elarroba You're welcome! :)
Thanks!
Thanks!
Thank you!
This is conceptual proposal how to solve #694. @clarkmoody If you agree with this approach, I will polish this and add also some documentation.

This uses a bit hacky approach to detect how the model was generated through `inspect` module. I don't know if there is any better way to do this.
Thank you. I'm not happy with inspecting frames every time a MPTT model is instantiated. 

I think I'd prefer an addition to the docs, something like "Run Node.objects.rebuild() to fix the MPTT attributes in your testsuite if those attributes may be out of sync.", or maybe people should just use a [different library](https://406.ch/writing/django-tree-queries/) when they don't understand the details of how MPTT works at all. Unfixed (or maybe unfixable) problems with django-mptt exist, but as long as you follow the rules (and avoid concurrent updates) you should be good, generally.
@matthiask Applications like `django-hordak` are already using MPTT, so people might use it and not be avare of it.

This PR is trying to solve big trap (described in #694) when MPTT model is created by `model_bakery`. I would like to avoid running into this exact issue in the future, because it could cause me several hours once again.

Just writing this in docs is not enough, because people would not remember at the moment they are trying to create some model through `model_bakery`.

I don't like inspecting frames either, but I didn't find any better solution.
@matthiask I have an idea: If you think that checking frames can be somehow heavy on resources, I can run that condition only if it is called in testing environment (detected by `TESTING = sys.argv[1:2] == ['test']` https://stackoverflow.com/questions/6957016/detect-django-testing-mode).
> @matthiask I have an idea: If you think that checking frames can be somehow heavy on resources, I can run that condition only if it is called in testing environment (detected by `TESTING = sys.argv[1:2] == ['test']` https://stackoverflow.com/questions/6957016/detect-django-testing-mode).

Yes, I think that would be better. Or maybe add a new module-level function `_check_no_testing_generators()` (or something, naming is hard) which is a no-op if `model_mommy` or `model_bakery` isn't importable?
@matthiask OK, I changed the PR to use both mentioned conditions. I am not sure, if it will work in all testing scenarios, but I am sure, that it will not have negative effect in non-testing environments.
LGTM, thanks!
Now I have added some docs and I think it is ready for review and pull.
Thanks!
Thanks!
Wow that's unfortunate. Thanks for the PR, it's certainly a good idea to point this out. 

I'm a bit surprised though since django-cms uses django-treebeard and I'd think that such a high profile project would keep their dependencies more up to date.
I hope that the failed test with `Network is unreachable` error message would run on the second attempt.
Yeah, the error is certainly unrelated. Thank you!
Thanks!

The change isn't correct though. The expression is "to whet one's appetite", not "to what one's appetite".
Done 👍. 
I also optimized the partial_rebuild method.
Thank you!
Thanks! I didn't read the code too closely but it does look like it does the right thing.

Is there a reason to add a whole new manager method though? Can't you modify the existing rebuild functionality instead? This would also mean that existing tests (if there are any) can be reused.
Thanks, this is looking good! I have a doubt re. the naming of model fields but apart from that I think it's good to go. Nice to see the improvements in the testsuite.
I'm wondering. Is it guaranteed that those two fields are named `id` and `parent_id`? Shouldn't you use `pk` and `_mptt_meta.parent_attr` or something?
Yes, that's a good idea.
When I upgrade to version 0.15 i run into problem when the name of related is not "parent". Why not use opts.parent_attr?
There won't be a 4.3 according to Django's versioning policy, this should say `>=4.2,<5.0`.
`get_random_string` already exists in `django.utils.crypto`. But I think it's not a good fit here. Won't this regenerate migrations over and over?
even doesn't know about that policy.
Interesting... i do the migrations for the test app and no `AddIndex` Object is part of the migrations. So currently there are no indexes build from...

But back to the naming problem. The name of an index is limited by 30 characters and needs to be unique. The common way from django is to use [name='%(app_label)s_%(class)s_default_mptt_index')](https://docs.djangoproject.com/en/4.2/ref/models/indexes/#django.db.models.Index.name). But in our test app there will be names which are longer than 30 characters. So i made the workaround with a random string (12 chars) followed by the '_default_mptt_idx'. 

So we got two problems here. 

* No Index objects are part of migrations. For now i don't know why.
* dirty index naming; maybe they will reproduce migrations over and over.
Yeah, I think Django has a way of creating reproducible alphanumeric suffixes for some of the database object names where it needs them. I'm not sure how it works (I didn't do any research) but I have seen some of those names in dumps etc.

> Interesting... i do the migrations for the test app and no AddIndex Object is part of the migrations. So currently there are no indexes build from...

Does that mean that the indexes themselves aren't actually created? I'm sorry for the dumb question. 

(I have marked the django-mptt package as unmaintained since maintaining it was honestly thankless, so I'm sorry for not putting more energy into the review. I hope you understand where I'm coming from.)
> Does that mean that the indexes themselves aren't actually created?

Yes; the index operations such as creating altering shall be part of the generated migration files

> (I have marked the django-mptt package as unmaintained since maintaining it was honestly thankless, so I'm sorry for not putting more energy into the review. I hope you understand where I'm coming from.)

I understand that. It is very hard to maintain well. I think there are some overengineered parts such as the renaming mptt attribute stuff. That's also why we can't do this issue easily.

However; I will look again at the django-treebeard package if it is even possible to implement a simple parent foreignkey for me
i started with a new implementation of [django-mptt2](https://github.com/jokiefer/django-mptt2) cause no other project fits my use cases fully.
Thanks!
Appologies I was making pr on local fork.
Thanks!
OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`.

If you change your mind, just re-open this PR and I'll resolve any conflicts on it.
# [Codecov](https://codecov.io/gh/vitalik/django-ninja/pull/18?src=pr&el=h1) Report
> Merging [#18](https://codecov.io/gh/vitalik/django-ninja/pull/18?src=pr&el=desc) into [master](https://codecov.io/gh/vitalik/django-ninja/commit/c6f21f3cef418e23d2f92212f2009b5198d6f8e3?el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/vitalik/django-ninja/pull/18/graphs/tree.svg?width=650&height=150&src=pr&token=WK1UWU4JSG)](https://codecov.io/gh/vitalik/django-ninja/pull/18?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##            master       #18   +/-   ##
=========================================
  Coverage   100.00%   100.00%           
=========================================
  Files           18        18           
  Lines          570       570           
=========================================
  Hits           570       570           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/vitalik/django-ninja/pull/18?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/vitalik/django-ninja/pull/18?src=pr&el=footer). Last update [c6f21f3...ac7ab4a](https://codecov.io/gh/vitalik/django-ninja/pull/18?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
@mwesterhof  thanks! do not forget to star this repo :D
# [Codecov](https://codecov.io/gh/vitalik/django-ninja/pull/22?src=pr&el=h1) Report
> Merging [#22](https://codecov.io/gh/vitalik/django-ninja/pull/22?src=pr&el=desc) into [master](https://codecov.io/gh/vitalik/django-ninja/commit/d34a042c2b5672aaa887cee7267101a108b836de?el=desc) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/vitalik/django-ninja/pull/22/graphs/tree.svg?width=650&height=150&src=pr&token=WK1UWU4JSG)](https://codecov.io/gh/vitalik/django-ninja/pull/22?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##            master       #22   +/-   ##
=========================================
  Coverage   100.00%   100.00%           
=========================================
  Files           18        18           
  Lines          587       592    +5     
=========================================
+ Hits           587       592    +5     
```


| [Impacted Files](https://codecov.io/gh/vitalik/django-ninja/pull/22?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [ninja/openapi/schema.py](https://codecov.io/gh/vitalik/django-ninja/pull/22/diff?src=pr&el=tree#diff-bmluamEvb3BlbmFwaS9zY2hlbWEucHk=) | `100.00% <100.00%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/vitalik/django-ninja/pull/22?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/vitalik/django-ninja/pull/22?src=pr&el=footer). Last update [d34a042...427c830](https://codecov.io/gh/vitalik/django-ninja/pull/22?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
@vitalik
Hi @fojetin 

Unfortunately I will not have much time coming week, would you be able to add few test cases for this PR ?
(like create operation with response model and then check if openapi schema resulted expected details)

Thanks
(this is a terrific piece of software, by the way—I'm very much looking forward to using it for our site. thanks!)
# [Codecov](https://codecov.io/gh/vitalik/django-ninja/pull/24?src=pr&el=h1) Report
> Merging [#24](https://codecov.io/gh/vitalik/django-ninja/pull/24?src=pr&el=desc) into [master](https://codecov.io/gh/vitalik/django-ninja/commit/d34a042c2b5672aaa887cee7267101a108b836de?el=desc) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/vitalik/django-ninja/pull/24/graphs/tree.svg?width=650&height=150&src=pr&token=WK1UWU4JSG)](https://codecov.io/gh/vitalik/django-ninja/pull/24?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##            master       #24   +/-   ##
=========================================
  Coverage   100.00%   100.00%           
=========================================
  Files           18        18           
  Lines          587       587           
=========================================
  Hits           587       587           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/vitalik/django-ninja/pull/24?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/vitalik/django-ninja/pull/24?src=pr&el=footer). Last update [d34a042...5ac37e4](https://codecov.io/gh/vitalik/django-ninja/pull/24?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
@joelburton 
Great job, many thanks 🙏 !
# [Codecov](https://codecov.io/gh/vitalik/django-ninja/pull/25?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@3bb3e96`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/vitalik/django-ninja/pull/25/graphs/tree.svg?width=650&height=150&src=pr&token=WK1UWU4JSG)](https://codecov.io/gh/vitalik/django-ninja/pull/25?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##             master       #25   +/-   ##
==========================================
  Coverage          ?   100.00%           
==========================================
  Files             ?        18           
  Lines             ?       587           
  Branches          ?         0           
==========================================
  Hits              ?       587           
  Misses            ?         0           
  Partials          ?         0           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/vitalik/django-ninja/pull/25?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/vitalik/django-ninja/pull/25?src=pr&el=footer). Last update [3bb3e96...024834a](https://codecov.io/gh/vitalik/django-ninja/pull/25?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
Thank you, @hbutau  !
🙏
Your are welcome @vitalik ! Making FastApi work with Django is such a great idea too.
Thank you, I really appreciate your help
# [Codecov](https://codecov.io/gh/vitalik/django-ninja/pull/37?src=pr&el=h1) Report
> Merging [#37](https://codecov.io/gh/vitalik/django-ninja/pull/37?src=pr&el=desc) (4e2b8ce) into [master](https://codecov.io/gh/vitalik/django-ninja/commit/e9cf1dedfab245019642d1ea049a104f0d6b7bb0?el=desc) (e9cf1de) will **decrease** coverage by `0.78%`.
> The diff coverage is `81.48%`.

[![Impacted file tree graph](https://codecov.io/gh/vitalik/django-ninja/pull/37/graphs/tree.svg?width=650&height=150&src=pr&token=WK1UWU4JSG)](https://codecov.io/gh/vitalik/django-ninja/pull/37?src=pr&el=tree)

```diff
@@             Coverage Diff             @@
##            master      #37      +/-   ##
===========================================
- Coverage   100.00%   99.21%   -0.79%     
===========================================
  Files           19       19              
  Lines          620      641      +21     
===========================================
+ Hits           620      636      +16     
- Misses           0        5       +5     
```


| [Impacted Files](https://codecov.io/gh/vitalik/django-ninja/pull/37?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [ninja/openapi/schema.py](https://codecov.io/gh/vitalik/django-ninja/pull/37/diff?src=pr&el=tree#diff-bmluamEvb3BlbmFwaS9zY2hlbWEucHk=) | `94.94% <37.50%> (-5.06%)` | :arrow_down: |
| [ninja/operation.py](https://codecov.io/gh/vitalik/django-ninja/pull/37/diff?src=pr&el=tree#diff-bmluamEvb3BlcmF0aW9uLnB5) | `100.00% <100.00%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/vitalik/django-ninja/pull/37?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/vitalik/django-ninja/pull/37?src=pr&el=footer). Last update [e9cf1de...4e2b8ce](https://codecov.io/gh/vitalik/django-ninja/pull/37?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
# [Codecov](https://codecov.io/gh/vitalik/django-ninja/pull/39?src=pr&el=h1) Report
> Merging [#39](https://codecov.io/gh/vitalik/django-ninja/pull/39?src=pr&el=desc) (3203dda) into [master](https://codecov.io/gh/vitalik/django-ninja/commit/7dfddcaac2732095eb18eb0288ce0552b270ec2f?el=desc) (7dfddca) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/vitalik/django-ninja/pull/39/graphs/tree.svg?width=650&height=150&src=pr&token=WK1UWU4JSG)](https://codecov.io/gh/vitalik/django-ninja/pull/39?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##            master       #39   +/-   ##
=========================================
  Coverage   100.00%   100.00%           
=========================================
  Files           19        19           
  Lines          642       642           
=========================================
  Hits           642       642           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/vitalik/django-ninja/pull/39?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/vitalik/django-ninja/pull/39?src=pr&el=footer). Last update [7dfddca...3203dda](https://codecov.io/gh/vitalik/django-ninja/pull/39?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
thanks for the patch

but have to refuse it...

basically there is a development for the response class parameter (like the issue in #6 )

where you will be able to set this type of logic as well


as for temporary solution you can use meanwhile a middleware that will check - if path is in /api/* and response-code == 422 - it will return some custom response message
# [Codecov](https://codecov.io/gh/vitalik/django-ninja/pull/50?src=pr&el=h1) Report
> Merging [#50](https://codecov.io/gh/vitalik/django-ninja/pull/50?src=pr&el=desc) (0471c3d) into [master](https://codecov.io/gh/vitalik/django-ninja/commit/27fe8c2195d92cdd023f8e504b1df8ca044bd715?el=desc) (27fe8c2) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/vitalik/django-ninja/pull/50/graphs/tree.svg?width=650&height=150&src=pr&token=WK1UWU4JSG)](https://codecov.io/gh/vitalik/django-ninja/pull/50?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##            master       #50   +/-   ##
=========================================
  Coverage   100.00%   100.00%           
=========================================
  Files           19        19           
  Lines          642       642           
=========================================
  Hits           642       642           
```


| [Impacted Files](https://codecov.io/gh/vitalik/django-ninja/pull/50?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [ninja/openapi/schema.py](https://codecov.io/gh/vitalik/django-ninja/pull/50/diff?src=pr&el=tree#diff-bmluamEvb3BlbmFwaS9zY2hlbWEucHk=) | `100.00% <ø> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/vitalik/django-ninja/pull/50?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/vitalik/django-ninja/pull/50?src=pr&el=footer). Last update [27fe8c2...0471c3d](https://codecov.io/gh/vitalik/django-ninja/pull/50?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
That's a great job 
but unfortunately I already made it over the weekend and was working meanwhile on documentations 

just released in 0.9.2

https://django-ninja.rest-framework.com/tutorial/operation_params/
# [Codecov](https://codecov.io/gh/vitalik/django-ninja/pull/52?src=pr&el=h1) Report
> Merging [#52](https://codecov.io/gh/vitalik/django-ninja/pull/52?src=pr&el=desc) (22e499e) into [master](https://codecov.io/gh/vitalik/django-ninja/commit/891e9d4d5b1e697e19c473d30461e8e233e2f792?el=desc) (891e9d4) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/vitalik/django-ninja/pull/52/graphs/tree.svg?width=650&height=150&src=pr&token=WK1UWU4JSG)](https://codecov.io/gh/vitalik/django-ninja/pull/52?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##            master       #52   +/-   ##
=========================================
  Coverage   100.00%   100.00%           
=========================================
  Files           19        19           
  Lines          657       668   +11     
=========================================
+ Hits           657       668   +11     
```


| [Impacted Files](https://codecov.io/gh/vitalik/django-ninja/pull/52?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [ninja/router.py](https://codecov.io/gh/vitalik/django-ninja/pull/52/diff?src=pr&el=tree#diff-bmluamEvcm91dGVyLnB5) | `100.00% <100.00%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/vitalik/django-ninja/pull/52?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/vitalik/django-ninja/pull/52?src=pr&el=footer). Last update [891e9d4...22e499e](https://codecov.io/gh/vitalik/django-ninja/pull/52?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
Great, could you please add few more tests to cover this functionality (coverage seems to fell a bit in router.py )
Ok, I plan to add tests and improve coverage this weekend
Show lines of coverage errors
Thank you

how do I reproduce the error you got before this fix?
I create a django demo app to reproduce the error.

repo link: https://github.com/valbendan/django-ninja-demo
@valbendan 
thank you
Hi @hannseman 

thank for pull request, but unfortunately there is a big chunk of new functionality coming in `development` branch, that should land on master any day now


![CleanShot 2021-01-12 at 12 40 05](https://user-images.githubusercontent.com/95222/104303971-71dbe080-54d3-11eb-9d01-ce963dc3a5dd.png)

your patch seems not compatible anymore

but I will check and apply it on the dev branch

Thank your for your effort
Your comment disappeared after my force push but I see your point. I've reverted back to catching `Exception` on the body parser.
this is now done in separate functionality
# [Codecov](https://codecov.io/gh/vitalik/django-ninja/pull/67?src=pr&el=h1) Report
> Merging [#67](https://codecov.io/gh/vitalik/django-ninja/pull/67?src=pr&el=desc) (9c7af26) into [master](https://codecov.io/gh/vitalik/django-ninja/commit/6c3c3a1bf02fb99097c79a02b7578599fbb543bc?el=desc) (6c3c3a1) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/vitalik/django-ninja/pull/67/graphs/tree.svg?width=650&height=150&src=pr&token=WK1UWU4JSG)](https://codecov.io/gh/vitalik/django-ninja/pull/67?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##            master       #67   +/-   ##
=========================================
  Coverage   100.00%   100.00%           
=========================================
  Files           22        22           
  Lines          735       735           
=========================================
  Hits           735       735           
```


| [Impacted Files](https://codecov.io/gh/vitalik/django-ninja/pull/67?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [ninja/router.py](https://codecov.io/gh/vitalik/django-ninja/pull/67/diff?src=pr&el=tree#diff-bmluamEvcm91dGVyLnB5) | `100.00% <100.00%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/vitalik/django-ninja/pull/67?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/vitalik/django-ninja/pull/67?src=pr&el=footer). Last update [6c3c3a1...9c7af26](https://codecov.io/gh/vitalik/django-ninja/pull/67?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
how to reproduce this bug on old version ?
I added a test for this case
@duplxey Thank you
Nice! We began using Ninja about 3 weeks ago and I went looking for exactly this feature (`exclude_unset`) yesterday.
Hi @Stamper 

Thank you
well there is development going for this issue https://github.com/vitalik/django-ninja/issues/61 
which actually does the same, but I will try to add as well your approach for the Router `__init__` argument for auth as well 

will keep this PR open for now...
done in 0.12
Hi 

Thank you for PR
Will take a look, but on very first glance I see that you removed public NinjaApi.get_operation_id

Which is used in some projects..
in 0.12.3  django-ninja is show a warning 
in 0.13+ will throw ConfigError
Hi @jairhenrique 

Thank you for PR
Well... methods done explicitly so that editors can autocomplete all arguments...

but I think `VSCode + Pylance` now should be able to discover this - will give it a try later...
will keep this open for now...
Hi @vitalik, I didn't thought about that! 
With a simple test here, I saw the problem. 

I will close this PR.
Hi @wimolivier 

This is awesome
Thank you
Thank you, @antonrh
thank you
@uriyyo 
Thank you I'll review it for the upcoming release
Thank you
Thanks for your feedback. I've incorporated it in an updated push.

Additionally, I had to make some typing changes because the mypy test failed. I had to insert 2 `# type: ignore` statements though, because mypy was complaining about things that I didn't know how to tell it weren't actually a problem (missing `streaming_content` from `HttpResponse`, but it's inside a conditional).

Can you re-evaluate?
@vitalik thanks for merging so quickly :)
I think you can use here django.http.HttpResponseBase ?
Tests should now be fixed, sorry I didn't see the CONTRIBUTING.md. I must be blind!
Thank you
This looks nice and clean.

A suggestion could be to also add the ability to override the `per_page` parameter with a GET variable. I know some APIs like to include this as an option. If this suggestion does get added, there will have to be the option to set minimum and maximum values. I'd like to see what @vitalik thinks.
hi

Well I'm keeping this open for now
basically the high-level idea is to provide first some decorator that would allow to add custom parameters to openapi schema 
(like some might want `page` argument, some like `limit` + `offset` argument)

(same for results - same want total results, some next/prev pages)

so my idea is to have some decorator that you can path input and output schemas and it will expose everything to schema and will do the logic
This is nice, but I would also like to be able to choose `Paginator` class. That way you can paginate elasticsearch results, for example with custom paginator.
this is already implemented https://django-ninja.rest-framework.com/tutorial/pagination/
@vitalik Hello, I'm waiting for this PR to be released. It hasn't been released since June 6th(0.13.2). Could I know when it will be released?
@stephenrauch  Thank you
Well I'll take a look into this closer - I think there is a chance to use multiple pydantic models for query params
Awesome
So i've talk with a few companies who uses django-ninja about this PR

and the conclusion is that changing the type of the argument to the type in the path is somewhat unexpected for the users

I think I will first merge this partly - only the path types (and untayped argument will still be processed as string as it is now for the rest of the framework)
@vitalik I will gladly make changes for whatever spec is desired.  I however am a little lost.

If I am reading the above correctly, the desire is NOT to support [Django Path Conveters](https://docs.djangoproject.com/en/3.1/topics/http/urls/#path-converters), as requested in the ticket, the ask is to ONLY support the "path" variant of Django Path convertors?  Is that the correct reading of the above?

The other variants are redundant with the functionality already provided via typing in the handler signature, except for "feature" inherent in the potential resolution to #203, which is the resolver not matching paths which cannot be coerced into the requested type.

In addition I was interested in supporting Django Path Converters, because my team has a use for the Custom Converters.
@stephenrauch 

Sure.. let me make this a bit more clear


so let's say you have view with argument where you did not annotate the type
```Python
@api.get("/foo/{int:arg}")
def view1(request, arg):
     return {'arg_type', str(type(arg))}  # returns "int" !!!
```

this is the part that conflicts with other parts of the framework  where if you did not annotate type you should expect a `str` type

So I guess the least breaking change would be only to pass path-converted to django url, but do not modify the annotation of the argument
@vitalik  So, how about leaving the changes I have now, but adding a check to verify that the view signature type matches the path type?  That would avoid surprises.
hm.. still not sure why you need to care about what user annotated ?

I can imagine a pretty usable case like this:
```Python
@api.get("/foo/{uuid:id_arg}")
def my_view(request, id_arg: str):
     return id_arg
```

so here I specifically want that django-url-resolver handles this url only if UUID is passed, but inside my function I'm fine working with id as string
@vitalik One minor kink, the data returned by the resolver when using the Django converters is of the type indicated.  EG: UUID has been already converted to a UUID.  Pydantic was not happy to convert that to a str (hmm..) Wasn't sure how best to deal with that, so added a conversion in `PathModel::get_request_data()`

Thoughts?
@vitalik So I think this now resolves the unneeded path type conversion/checking and properly handles the UUID.
Hey again, Stephen! I enjoy reading your code lines.

In these cases, is there a special explanation of `Union[T, None]` usage instead of `Optional[T]`?
I am very new to typing, so my ignorance is the only explanation.
Hi, @vitalik 

Is there something this PR is missing, or other changes that should be made?

Thanks.
I'm preparing/testing new release (just waiting feedback from few companies)
after that will start processing next PRs
Note: it's impossible to unite `typing.Callable` and `AuthBase`. That's, and in order of compatibility, why the "old" way is kept as it was before. I've just added some tests, there were none of them testing the sequence in `auth=...`.
Hi @mawassk

Thank you for collaboration, I really appreciate it !

there is one issue with this approach that may be broken at v1

https://github.com/vitalik/django-ninja/issues/146 


Baiscially authentication currently has a bummer - not allowing to use it in async context

so in v1 this will be most likely changed (Most likely authentication will be a subclassisng some base class and implementing some method in both sync and async modes)
> Hi @mawassk
> 
> Thank you for collaboration, I really appreciate it !
> 
> there is one issue with this approach that may be broken at v1
> 
> #146
> 
> Baiscially authentication currently has a bummer - not allowing to use it in async context
> 
> so in v1 this will be most likely changed (Most likely authentication will be a subclassisng some base class and implementing some method in both sync and async modes)

@vitalik thank you for the feedback!

I experimented a bit with `async_to_sync` function and found a simple way to add async support to my feature by adding an extra async base class:
```python
# ...

class BaseAsyncPermission(BasePermission, ABC):
    def __call__(self, request: HttpRequest) -> Optional[Any]:
        sync_has_permission = async_to_sync(self.has_permission)  # type: ignore
        return sync_has_permission(request, self.permission)

    @abstractmethod
    async def has_permission(
        self, request: HttpRequest, permission: str
    ) -> Optional[Any]:
        pass  # pragma: no cover
```
This works really well, but I don't know if it's satisfying enough.
@mawassk Hi! Was there any particular reason why you chose to withdraw this PR? We are considering using Django Ninja for a project, but the lack of permission handling might be an issue.
The main problem is that  you can combine both sync and async callbacks...

so you cannot just await all in a loop and need to determine if callback is async - then await it, otherwise run normally (and if in sync mode you got async authentication - need to run async_to_sync adapter)
Do recent commits fix the problem?
@vitalik sorry for pushing you, is there any hope to solve the issue?
Agreed with @vitalik, I think it should be separated logic for async and sync views. I mean that you should NOT use sync_to_async at all, and handle such cases outside from the regular Operation class, only in the AsyncOperation.

@ETretyakov so, i think the best solution is when you write the same methods in async, instead of trying to combine them together and use inheritance for that.
I just stumbled upon this when I was trying to create async auth for my API. It seems that right now, there is no way to have an async auth callback for the `NinjaAPI` or `Router` objects. Even the synchronous `django_auth` suggested in documentation does not work for my async views, because it accesses the database. That could be solved by decorating `django_auth` by `sync_to_async` if async auth callbacks were possible. Obviously, router can have both sync and async views and it needs to handle the authentication properly in both cases.

I'm willing to chip in and help this change to happen, but I'd need to know what's wrong with this PR and why it hasn't been moved forward.
@vitalik Hey, so I had the PR open, and you separately implemented a chunk of what this PR addressed, but you didn't ping me or otherwise comment on the PR.  Am I overstepping my bounds here? Or more generally, how would you like me to contribute here?
Hi @stephenrauch 
Yeah, sorry - just quickly dropped few updates here and there - had not much time left go over all comments

So first of all thank you for your contribution - I really appreciate it!

For this PR i basically tried it - and for my case the limitation for only **one** file is a bit of a bummer

Like I see a pretty ofthen case like this:

```Python

@api.post('/upload')
def upload(request, title: str = Form(...), image: UploadedFile, mask: UploadedFile):
     ...
```

on the other hand - tried few adaptations to schema and it seems worked with just few changes 

so for now closing this one

Thank you
Hi @stephenrauch 

I've been thinking about this for some time...
I like it - but I would add more flexibility by allowing also (`request=2` or `request = Body(...)` type of cases)

I merged your request into separate branch and adapted it to cover these as well see #282
Please let me know what you think
Hi @stephenrauch 

Thank you for contribution - but this cannot be introduced - there are lot of existing django ecosystem decorators that people use along with django-ninja - and all those decorators expect 1st param to be always a `request` object
Looks like actions/setup-python is up-to-date now, so this is no longer needed.
Good idea!
This looks good 👍🏻
This cannot be introduced - there are lot of existing django ecosystem decorators that people use along with django-ninja - and all those decorators expect 1st param to be always a `request` object
@vitalik maybe need something like this?
```python
class PaginationBase(ABC):
    name_param: str = "pagination"
    pass_to_parameters = False
    ...
    def __init__(self, pass_to_parameters: bool = None, **kwargs: DictStrAny) -> None:
        if pass_to_parameters is not None:
            self.pass_to_parameters = pass_to_parameters
```
```python
def view_with_pagination(*args: Tuple[Any], **kwargs: DictStrAny) -> Any:
    paginate_param = kwargs.get(paginator.name_param)
    if not paginator.pass_to_parameters:
        paginate_param = kwargs.pop(paginator.name_param)
    items = func(*args, **kwargs)
        return paginator.paginate_queryset(
            items, **{paginator.name_param: paginate_param}, **kwargs
    )
```
Hi @mom1 
Yeah, I'm still thinking for the best approach here...

I like what you did with `**kwrags` being not required

I think the final can be something like this

 - by default pagination argument maby not be passed to view function
 - and let user a way to pass it with something like:

```Python
@paginate(PageNumberPagination, per_page=50, pass_parameter='pagination')
def my_view(request, pagination):
       return queryset
     
```
@vitalik I changed code according to your comment 😉
I wonder if it'd be better that the view requests the parameter, rather than the paginate decorator deciding on it. Something like:

```python
@paginate(PageNumberPagination, per_page=50)
def my_view(request, pagination: PageNumberPagination.Input):
       return queryset
```
Yeah, in my practise I never actually used to access kwargs for pagination, and forcing to add it is annoying
@mom1 - this is merged, I just adapted few things and a bit simplified, thank you

----

@SmileyChris
> I wonder if it'd be better that the view requests the parameter, rather than the paginate decorator deciding on it. Something like:
> 
> def my_view(request, pagination: PageNumberPagination.Input):

 yeah, that would be nice, but seems it will involve too much code reshaping
Yes, for me it would also be relevant.
Hi @stefanitsky 

Looks good

just few  notes:

1) I think all this you can replace with [import_string](https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.module_loading.import_string):
```Python

        path_list = options["api"].split(".")

        if len(path_list) < 2:
            raise CommandError(
                "Module should contains at least package and api instance name attribute!"
            )

        module_path, api_attr = ".".join(path_list[:-1]), path_list[-1]
        try:
            api_module = importlib.import_module(module_path)
        except ModuleNotFoundError as e:
            raise CommandError(f"Module {module_path} not found!")

        api = getattr(api_module, api_attr, None)
```

2) 99% of the cases - people have just one api instance

in that case you can just url-reverse api root module to make `--api` not required (if multiple is defined - you can just throw an error to force user to pick)
> Hi @stefanitsky
> 
> Looks good
> 
> just few notes:
> 
> 1. I think all this you can replace with [import_string](https://docs.djangoproject.com/en/3.2/ref/utils/#django.utils.module_loading.import_string):
> 
> ```python
>         path_list = options["api"].split(".")
> 
>         if len(path_list) < 2:
>             raise CommandError(
>                 "Module should contains at least package and api instance name attribute!"
>             )
> 
>         module_path, api_attr = ".".join(path_list[:-1]), path_list[-1]
>         try:
>             api_module = importlib.import_module(module_path)
>         except ModuleNotFoundError as e:
>             raise CommandError(f"Module {module_path} not found!")
> 
>         api = getattr(api_module, api_attr, None)
> ```
> 
> 2. 99% of the cases - people have just one api instance
> 
> in that case you can just url-reverse api root module to make `--api` not required (if multiple is defined - you can just throw an error to force user to pick)

Good notes! I'll fix it, thanks!
@vitalik i cant figure out how to fix a problem with a default router, seems to be a problem with a multiple router register on each import, so, i think, it can be fixed by specifying some function / class inside `demo_project.demo.urls` and call it just one time (like singleton). What do you think? Any ideas?

![image](https://user-images.githubusercontent.com/22547214/143272798-c1a8e9f0-7a50-4fa9-8b41-e68d0e661ce2.png)

And also, what do you think now about that implementation with your notes, is it right?
thank you
Hi @AkeemMcLennon 

you need to to use get_origin from ninja/compatibility/util.py 
(to support python 3.6, 3.7 etc)
@vitalik Ah, thanks. Updated
@vitalik Just fixed codestyle linting errors as well
Hello 😄 

You can delete useless `[]` for list comprehension on using all()

```suggestion
            return all(issubclass(arg, pydantic.BaseModel) for arg in get_args(cls))
```


```python
In [1]: l = [1, 2, 3]

In [2]: all(ele for ele in l)
Out[2]: True

In [3]: all([ele for ele in l])
Out[3]: True
```
Thank you
Hello, could we get a release for this? Python 3.10 support only came with pydantic 1.9, so somewhat stuck on this upper version limit @vitalik.
@MartinNowak 
just release in 0.16.2
Should this not be <1.10.0 ?
I bumped the pydantic version to 1.9 to support the fancier `DjangoGetter` method being used. The alternative is to backport the pydantic fix to a method on the ninja `Schema` class: 
```Python
    @classmethod
    def _decompose_class(cls, obj: Any) -> GetterDict:
        if isinstance(obj, GetterDict):
            return obj
        return super()._decompose_class(obj)
```
> I bumped the pydantic version to 1.9
well this cannot be merged - there ALOT projects that depends on it 
I would keep minimum 1.6 pydantic while it still not breakable
> well this cannot be merged - there ALOT projects that depends on it
> I would keep minimum 1.6 pydantic while it still not breakable

Sure, I backported that little bit of logic from Pydantic into the `Schema._decompose_class` method and reverted the changes bumping the minimum version. Then I squashed everything to keep things tidier :)
Hi @SmileyChris 

I have one concern about this PR

Basically it's the performance penalty here:
```Python
    def __getitem__(self, key: str) -> Any:
        resolve_func = getattr(self._cls, f"resolve_{key}", None) if self._cls else None
        if resolve_func and callable(resolve_func):
            item = resolve_func(self._obj)
        else:
            try:
                item = attrgetter(key)(self._obj)
            except AttributeError as e:
                raise KeyError(key) from e
        return self.format_result(item)
```

Every attribute will call for getattr, callable check, attrgetter, etc

but in 99% of the cases schemas are just generally pulling existing atrs...

maybe solution here would be first try to get attr default way and if attr is not there try to resolve it with attrgetter/resolve_func:


```Python
try:
    return getattr(self._obj)
except AttributeError:
    if resolve_func and callable(resolve_func):
           return resolve_func(self._obj) 
    else:
        return attrgetter(key)(self._obj)
```
At first glance, that looked like a fine solution. But it'll get in the way allowing for `resolve_<attr>` functions if it's shadowing an existing attribute.

Doing some basic `%timeit` tests, it looks like it only adds about 400ns to each attr call, so 0.0000004s. 

```Python
# Old class
In [8]: %timeit old_django_getter['name']
455 ns ± 2.44 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)

# New class
In [8]: %timeit new_django_getter['name']
875 ns ± 15.7 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)
```

The repr of setting that up, showing an example of using a resolver over an existing attribute:
```Python
In [1]: from django.conf import settings

In [2]: settings.configure()

In [3]: from ninja.schema import DjangoGetter, Schema

In [4]: class PersonSchema(Schema):
   ...:     name: str
   ...:     age: int
   ...:     @staticmethod
   ...:     def resolve_name(obj):
   ...:         return obj.name.title()
   ...: 

In [5]: class Person:
   ...:     name = 'chris beaven'
   ...:     age = 99
   ...: 

In [6]: new_django_getter = DjangoGetter(Person(), PersonSchema)

In [7]: new_django_getter['name']
Out[7]: 'Chris Beaven'
```

The only extra check for the 99% will be a check for the resolve method, then the use of `attrgetter` rather than `getattr` which looks like it's about 70ns slower. I'll optimize it to try a standard getattr first.
Ok, now the only overhead for the 99% case is a getattr for a resolve attr first. Python logic means it won't check if it's callable unless the resolve attr is found.
@SmileyChris great, looks promising

I guess the only small design issue is this part:
```Python
    @staticmethod
    def resolve_owner(obj):
```
that you have to to mark method as static... I guess generally people will forget it and will use `self` as first argument (maybe need some validation on top to force it never forgotten)


or maybe just pass `self` somehow  anyway ?

```Python
def resolve_owner(self, obj):
```


also would be nice to have access to `self` dict to cover long awaited [feature #935](https://github.com/samuelcolvin/pydantic/issues/935) from pydantic: 

```Python
class Rectangle(BaseModel):
    width: int
    length: int
    area: int

    def resolve_area(self) -> int:
        return self.width * self.length
```
Technically it doesn't need to be a static method, that's just me being a
bit pedantic in the documentation. Since it's not being called as a bound
method on an instance of the class, the first argument will be passed
in, it just won't be an instance of the class itself, which is slightly
confusing...

But the method is being called from the class object, and expects one
parameter, so a normal method like `def resolve_area(self) -> int:` already
also works fine.

On Sun, 23 Jan 2022 at 02:27, Vitaliy Kucheryaviy ***@***.***>
wrote:

> @SmileyChris <https://github.com/SmileyChris> great, looks promising
>
> I guess the only small design issue is this part:
>
>     @staticmethod
>     def resolve_owner(obj):
>
> that you have to to mark method as static... I guess generally people will
> forget it and will use self as first argument (maybe need some validation
> on top to force it never forgotten)
>
> or maybe just pass self somehow anyway ?
>
> def resolve_owner(self, obj):
>
> also would be nice to have access to self dict to cover long awaited feature
> #935 <https://github.com/samuelcolvin/pydantic/issues/935> from pydantic:
>
> class Rectangle(BaseModel):
>     width: int
>     length: int
>     area: int
>
>     def resolve_area(self) -> int:
>         return self.width * self.length
>
> —
> Reply to this email directly, view it on GitHub
> <https://github.com/vitalik/django-ninja/pull/317#issuecomment-1019264309>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAA2275ASYUUAYQ5YBT7FFTUXKWE7ANCNFSM5LRLRVVA>
> .
> Triage notifications on the go with GitHub Mobile for iOS
> <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>
> or Android
> <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.
>
> You are receiving this because you were mentioned.Message ID:
> ***@***.***>
>
Ok, now resolvers can be standard methods, giving you access to `self` like you want (it has to be a bit magic, because the real schema instance is only created _after_ all the fields are resolved fully).
Hi @SmileyChris 

I've been running some test - so far looks good except the perfomance for `from_orm`

example - 50k executions for from_orm takes 10 seconds on my machine (while it's only 1 second before)

So I basically moved the function to find `resolve_*` attributes to one time call and cache on class level

see - https://github.com/vitalik/django-ninja/pull/339/commits/da28fa1fb65902c48ffdc0e750aa7754aa9b8d1c

It still in progress - there are few coverage missing lines, but so far looks promising
That's nice caching speedup. How about this metaclass approach to keep resolver data on their own classes rather than one mega dictionary?
@SmileyChris 
Thank you! Works perfect
@vitalik I rebased against latest master, fixing conflicts and ensuring everything lives under the new layout (my recently merged temporal response docs aren't even in the current live docs index page, oops)
Hey @vitalik -- I keep this branch updated, but if it's too big of a change or you don't like the direction I went in then just let me know so I can close the branch rather than updating it in futility ;)
Hi @SmileyChris 

Yes, I like the structure
but most likely will improve the tutorial section

Thank you
🥳 Yay for the merge!

I agree that the tutorial section can use some more love. Now with the better structure, it's easier to start thinking about the documentation in each section with a bit more purpose.

As the diataxis framework explains it:

![documentiation sections](https://diataxis.fr/_images/diataxis.png)
Have you had a chance to look at the idea here, @vitalik ? I can write some docs up if it's something you want to proceed with.
Hi @SmileyChris 
Yes, this will likely land in the next release
I'll write some docs up then. It'd be nice to avoid conflicts by getting my docs branch in first ;)
The only additional thing I've been thinking about in regards to this is having the status code set in the temporal response be used, rather than overwritten. We could deprecate the 2-part tuple behaviour of passing `(status_code, body)` and just use this new response object as the canonical way of specifying the response status code.

This doesn't have to happen as part of this initial pull, just wanted to bring this up as a related idea.
LGTM
There is still an error with codestyle: https://github.com/areski/django-ninja/actions/runs/1813501165

Related issue: https://github.com/typeddjango/django-stubs/issues/402
* https://github.com/typeddjango/django-stubs#how-can-i-create-a-httprequest-thats-guaranteed-to-have-an-authenticated-user

Any hints how to fix this, I'm not super familiar with mypy?
Well, mypy is correct -- `AbstractBaseUser` doesn't provide an `is_superuser` attribute. You're making the assumption that all user backends need to provide is_superuser (inferred from the base class, they don't).

I'd just do:
```python
if request.user.is_authenticated and getattr(request.user, 'is_superuser', None):
```
Thanks for the pointer @SmileyChris 

All tests are now passing: https://github.com/areski/django-ninja/actions/runs/1847443859
Hi @SmileyChris 

Just wondering what would be the best approach when url is the same for get/post methods 

```Python

@api.post('/tasks')
def create_task(request):
     pass

@api.get('/tasks')
def list_tasks(request):
     pass

```

As I understand the last added name ("list_tasks") will be the name for that path (while some users might expect it to be create_task)

also there might be conflicts - if users have the same function name (like `list_items`) in multiple modules/routers...

maybe the best approach is to generarate url name (and open api operation_id) based on tags and function name

f.e. 
```
@router.get('/')
def list_tasks(request):
    return ...


....

api.add_router('/tasks/', router, tags=['tasks'])
```

the resulting url name should be `api-1.0.0:tasks:list_tasks`  (the "`tasks`" taken from the first tag assigned to router)
Django runs through each URL pattern, in order, and stops at the first one
that matches the requested URL.

I don't think conflicts matter for the automatic name generation. If you
are at a size where you encounter this, you should probably not rely on the
automatic names and specify them explicitly.
The idea about having routers which have their own namespace is probably a
good addition, but I don't think it's anything that should block this. I
don't think it should piggyback on tags, just have the same urls_namespace
option at the router level.

Either way, this should be merged soon or the currently incorrect url
documentation should be altered, since when I wrote those docs I assumed
that this was how it already worked.

On Tue, 14 Jun 2022 at 20:27, Vitaliy Kucheryaviy ***@***.***>
wrote:

> Hi @SmileyChris <https://github.com/SmileyChris>
>
> Just wondering what would be the best approach when url is the same for
> get/post methods
>
> @api.post('/tasks')def create_task(request):
>      pass
> @api.get('/tasks')def list_tasks(request):
>      pass
>
> As I understand the last added name ("list_tasks") will be the name for
> that path (while some users might expect it to be create_task)
>
> also there might be conflicts - if users have the same function name (like
> list_items) in multiple modules/routers...
>
> maybe the best approach is to generarate url name (and open api
> operation_id) based on tags and function name
>
> f.e.
>
> @router.get('/')
> def list_tasks(request):
>     return ...
>
>
> ....
>
> api.add_router('/tasks/', router, tags=['tasks'])
>
> the resulting url name should be api-1.0.0:tasks:list_tasks (the "tasks"
> taken from the first tag assigned to router)
>
> —
> Reply to this email directly, view it on GitHub
> <https://github.com/vitalik/django-ninja/pull/361#issuecomment-1154875231>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAA2272ZNS56UXJSD4AGCATVPA66NANCNFSM5OMZMV6Q>
> .
> You are receiving this because you were mentioned.Message ID:
> ***@***.***>
>
thank you!
Superseded by #493.
+1 on this, currently hitting the same bug as described in https://github.com/vitalik/django-ninja/issues/353

Any idea when this might be merged & released?

Love django-ninja BTW, thanks a lot for all your work on it!
Merged in separate PR
LGTM.

The way you get the internal type of the items of the array seems clean to me.
Tested with success on real project.
Missing type hint fixed.

Running mypy was not in `CONTRIBUTING.md`, so I'll add that in a separate PR.
It was ⚡ 
Thank you.
I don't know why `mypy` check failed, I didn't touch the concerned file and it doesn't fail on my env:

```
❯ mypy ninja
Success: no issues found in 44 source files
```
So what's the inconsistent behaviour that works currently? According to the docstring (and my interpretation of the code), a single int should _always_ be just the body:

> The protocol for results
>  - if HttpResponse - returns as is
>  - if tuple with 2 elements - means http_code + body
>  - otherwise it's a body
@stephane 
I think this overcomplicates the logic 

and I think it will also break when you want to return just integer number

```Python
@api.get('/hello', result=int)
def number(request):
    return 42
```
You're right!
I misinterpreted the API by using the return of the view as a status code instead of body (I was thinking scalar value should be interpreted as status code).

A unit test with a unique int in body could help me to detect my mistake (PR to follow...) ;)
Hi @baijifeilong 
do you have some example to how to reproduce your error ?
Changes here are probably superseded by #434
Hi @hslim8888 
Thank you for PR
Would you be able to make a test case that covers this functionality ?
Sure. Happy to do that.
this one gets conflicts, and I'm not sure yet for the status codes...
I'm not sure about this one - only GET method
Technically you can return paginated response on any method GET/POST/etc...
I just assume people usually use pagination on GET method and thought it's more efficient not to inject other methods to pagination.
But you're right. No need to limit possibilities.
I will rollback that thing.
thank you!
All passed! 😉
Thank you
Superseded by #577.
Thank you
Thank you
Well, it does not really work for arbitrary responses:


```Python
api = NinjaAPI()


class PictureSchema(ModelSchema):
    class Config:
        model = Picture
        model_fields = ("id", "title", "image")


class ResultsPaginator(PaginationBase):
    class Input(Schema):
        skip: int

    class Output(Schema):
        results: list
        count: int
        skip: int

    def paginate_queryset(self, items, pagination: Input, **params):
        skip = pagination.skip
        return {
            "results": list(items[skip : skip + 5]),
            "count": self._items_count(items),
            "skip": skip,
        }


@api.get("/pics", response=list[PictureSchema])
@paginate(ResultsPaginator)
def pics(request):
    return Picture.objects.all()
```
throws a 

```
  File "json/encoder.py", line 179, in default
    raise TypeError(f'Object of type {o.__class__.__name__} '
TypeError: Object of type Picture is not JSON serializable

```

this is actually an important part:

<img width="718" alt="CleanShot 2022-06-25 at 17 15 13@2x" src="https://user-images.githubusercontent.com/95222/175777435-174baaf5-7c23-4b9d-b962-53d613b4ecdc.png">


that let's pydantic know full schema and convert it during evaluation
@rafonseca 
I think this one should do the expected

https://github.com/vitalik/django-ninja/pull/483/files#diff-feb8cae3c400ac0b90e421ea784871ac389894df1e7db50cfa253ccb8ee89ff2R58
Hi @vitalik . 
Indeed, my solution was working for me only because I was returning list of pydantic objects. However, we do want to deal with a queryset here. Sorry for the mistake.
Note: this is also a small logical improvement.
@vitalik Could I bother you by asking for a review of this? :)
Hey there,

I dont think having `PyYaml` as a hard dependency is good for this project. ( because `django-ninja` should be minimal by default  ) 

( maybe add yaml as an extra dependency? )
I've made some changes to this, making the PyYAML dependency optional/extra, but I haven't been able to test it yet due to some issues related to my Python environment setup. As soon as I've fixed that, I'll update the PR.
I also have another suggestion. In the case `PyYaml` is not installed and user tries to dump. Show a message telling the user to install `PyYaml`
@baseplate-admin OK, the changes that I had planned make it so that the `--format` argument only exists if `yaml` is importable, otherwise it's just silently always JSON. But I can follow your suggestion, no problem 👍
In my opinion it improves DX a whole lot to show the developer why things are not working instead of silently failing :)

We might get a ton of PR on why YAML dump doesn’t work in the future if we take the silent fail route.

Just my 0.02$
Try modifying the code in [here](https://github.com/vitalik/django-ninja/blob/3e9c10d5c8915a2ef76b08de8cdff98b45ca55f8/.github/workflows/test_full.yml#L22) to install `PyYAML`
@baseplate-admin Thanks, I will check it out tomorrow. Getting late now :) I have some more work to do `ninja.yaml.NinjaSafeDumper` still.
@baseplate-admin Alright, so I think it's ready for a new review. I had to stop myself from doing too much with the unit tests. I think the test suites could really benefit from using [Hypothesis](https://hypothesis.readthedocs.io/en/latest/) and [Faker](https://faker.readthedocs.io/en/master/).

Anyways, let me know what you think!
@baseplate-admin Phew, okay, I hope I didn't misunderstand your latest feedback. When you have time, please take another look and let me know if there's any other issues!
@baseplate-admin Thanks. Are you waiting for me for something regarding this PR?
Umm sadly i dont have merge access :}

So i will have to ping @vitalik for merging 

---
Hey @vitalik,

Do you think having `openapi.yaml` is a bad idea?  

[Swagger editor](https://editor.swagger.io/)  by default supports `yaml`
I do not like to add extra dependency for functionality that 99.99% users do not use

overall adding yaml is as simple as adding one extra method to NinjaAPI:

```Python

class NinjaWithYaml(NinjaAPI):

    def get_sechema_yaml(self, prefix=None):
          return yaml.dumps(self.get_openapi_schema(prefix))
         
```
I have some reviews. Please check :)
LGTM


Awesome work @denizdogan. 

This PR is ready for merging :)


Thanks for listening to my feedbacks
Why not directly load data here?

```python
result = yaml.dump(schema, indent=options["indent"])
```
@baseplate-admin Good question! I don't remember the exact details, but it has to do with the order of the YAML output. When loaded via `json` first, the order of the underlying data structure is preserved somehow, so that when PyYAML does its thing, the order of the YAML looks better. Obviously, the order technically doesn't matter, but I personally think it's worth it. Do you think I should add a comment about it?
If you need sorting [maybe sort the dictionary](https://realpython.com/sort-python-dictionary/)?

Doing JSON → YAML takes a lot of unnecessary processing.


~I actually didnt work with YAML that much. So umm a small example might help me understand it better :)~


[Maybe YAML sorts keys by default](https://stackoverflow.com/questions/16782112/can-pyyaml-dump-dict-items-in-non-alphabetical-order/55171433#55171433). Did you try turning the switch to false?
:)
I will double-check what the exact issue was before I update the PR! 👍
We dont need 
```python
from ninja.yaml import NinjaSafeDumper
```

The 
```python
import yaml

```
 will raise the error.
Do we need this else statement if argparse already raises an error?🤔


( keep the comment and remove the else statement?)
Wrap this in a try except
We need `NinjaSafeDumper` for the `yaml.dump` call after
Yeah, I wasn't sure what to do with this part. I can remove the else and keep the comment. 👍
I tried with try/except before, but realized that the rest of the module makes no sense if `yaml` cannot be imported. What should we do in the `except` clause?
Lets assume someone wants to access this internal module. But he doesnt have `PyYAML` installed. 

So i think we should remove try except from the parser and move this logic into here. With same error message.
Lets move this try...except into NinjaSafeDumper.
Thank you!
Thank you
Hi @esc5221 would be able to add test cases that covers the issue you described ?
added new test in `test_openapi_schema.py`,  and edited existing tests, as `PagedResponse` schema is added in the test scope.
@vitalik Do tests just need fixed for this to be merged?
yes, looks like it's safe to merge if tests are working
Eagerly waiting for this PR to be merged... @esc5221 @vitalik
Merged in a separate PR

Thank you for contribution !
Thank you
~Hey @vitalik ( sorry for the ping ) ,~

~[The test is failing](https://github.com/vitalik/django-ninja/runs/8264707295?check_suite_focus=true)~

~I have copied the key from [poetry github repo](https://github.com/python-poetry/poetry/blob/c4b2253793cd6b41a99e25e479e40b776cca0a0e/pyproject.toml#L30) and then modified it~

~Did i miss something ?~

---

I found the error. Sorry i am dumb 

Sorry i didn't think that poetry and flit were using different keys to do the same task

Followup on 
* #564
Changing the MyPy version to target python 3.7 fixes the [codestyle ](https://github.com/vitalik/django-ninja/runs/8265469846?check_suite_focus=true)issue.

But we have to drop python 3.6 support entirely

( [note that pydantic is 3.7+](https://github.com/pydantic/pydantic/blob/ee52496101f7d2b69ccfad61b89f985af52ad0e6/pyproject.toml#L40) )

Is this acceptable to you ?
Missing:
~~Unit tests~~
~~Documentation/Example~~
Superseded by #758.
This should be linked to #596
Hi @tykling 
Thank you for PR
Would you be able to add a unit test for this case ?
absolutely, will look at it this evening
Welp, that was more of a faff than I suspected. Spent all evening yesterday and got nowhere. Writing a unittest for something this involved requires a deeper understanding of the django-ninja codebase than I currently have. 

I might give it another go in the weekend with fresh eyes.
But for now I can say this: 

The issue was encountered with these enums https://github.com/bornhack/bma/blob/develop/src/files/models.py#L11-L37 when used in this filter class https://github.com/bornhack/bma/blob/develop/src/files/schema.py#L136-L147 used as filters in this api  https://github.com/bornhack/bma/blob/develop/src/files/api.py#L385

One of the enums is used in the model https://github.com/bornhack/bma/blob/develop/src/files/models.py#L91-L96 and the others are only used in the filter. The one used in the model shows up in the schema, the other two do not show up in the schema.

With this PR all three show up in the schema. The code is deployed _without_ the fix in this PR here https://media.bornhack.dk/api/v1/json/docs and you can see in the Schemas section that only `LicenseChoices` is included, but `StatusChoices` and `FileTypeChoices` are both missing.
fixed in #679
Thank you
@sunboy123 there is something werid with your PR - there are like 187 files changed ?
@vitalik  no.  maybe i write the pr in wrong position. i just wanna to submit pr for adding haystack in ninja
Hi @sunboy123, 

Can you rebase your PR on top of `master`? 


At this current stage you are recommitting a lot of old Pull Requests. Rebasing it on top of master will help us to have only the part that you modified.
@baseplate-admin  ok,got it
@vitalik is there anything else I need to add to get this merged? I was hoping to see it in the v0.20 release.
Hi @OtherBarry

yeah - there was an open question:

```
        else:
            raise ConfigError(f"{func} has an invalid _ninja_contribute_args value")
````
Why would this case ever happen if inject function always initialies a list ? I think it does not need this extra check...
The intent was so that you'd get a nicer error message than `object has no attribute 'append'` if the `_ninja_contribute_args` variable had been incorrectly modified by some other function/decorator, but I guess that's a pretty unlikely scenario. I'll remove it shortly.
@vitalik removed, after a slight delay
...and now passing - serves me right for thinking I could get away with using the github web ui for a quick fix.
@vitalik is this also covered by the changes in v1.0 mentioned in #779 ?
@OtherBarry - yes, it now always appends instead of overwrite
On weekend reflection, I think the lib is wrong and having a charset is fine. The commit about the media type being a string I think still stands, but it's the most minor of minor things. Apologies for the timewasting!
depends on #438 to be merged
Thanks @vitalik !

can we also merge #438 in order to get the ci system working again?
Oh! Just saw that you fixed it already! Thanks!

that way #438 is obsolete :)
thanks for approving the CI run here!

there was a failing step that complained about missing code coverage. i fixed this with an additional test -- not a super elegant one, but it keeps the code coverage at 100%.
> i fixed this with an additional test -- not a super elegant one, but it keeps the code coverage at 100%.

Hi @taobojlen - I do not see this test in PR ? are you sure it's pushed ?
@vitalik 🤦 sorry, my mistake, it's pushed now!
Hi @barseghyanartur 

Thank you
I think you can simplify saving:

```Python
from ninja import UploadedFile, File

@api.post("/employees")
def create_employee(request, payload: EmployeeIn, cv: UploadedFile = File(...)):
    payload_dict = payload.dict()
    employee = Employee(**payload_dict)
    employee.cv.save(cv.name, cv) # will save model instance as well
    return {"id": employee.id}
```
@vitalik:

Will do.
P.S.

Shall I, perhaps, add a second recipe for when you don't work with models, but still want to upload files?
> Shall I, perhaps, add a second recipe for when you don't work with models, but still want to upload files?

yes - makes sense
@vitalik:

Ready.
Thank you
Thanks for approving the CI run. Fixed the lint errors, it shouldn't be failing now.
@vitalik Could you please rerun the CI checks and take a pass on this if it's not an issue? 😃
@vitalik, I checked why black in codestyle was breaking for untouched files, turns out black released a new version [23.1.0](https://pypi.org/project/black/23.1.0/) 10 hours back and that was used for my last CI run. So I have updated the PR by formatting those files with the new version and updated the version of black in pre-commit-config yaml file as well.

Confirmed the checks in my forked repo in a PR over [here](https://github.com/aasiffaizal/django-ninja/pull/2), the checks are passing.
Thank you
Hi @l1b3r 

Thank you for contribution
Looks promising

Could you check tests for earlier python versions (<3.9)
@vitalik Fixed something in the tests, requesting CI re-run.
Hi @l1b3r 

1) I like the idea, just for now sitting on it thinking if the naming is fine (like here `filters.filter(books)` - mabye `filter_queryset` or `apply`... not sure..)

2) Also - looks like `q` argument is required:
```Python
name: Optional[str] = Field(q='name__icontains')
```

```Python
name: Optional[str] = Field(...)
```
maybe it's better to make it optional - in this case ^ it will run `.filter(name=value)`


3) Last - I see often case where I need to run search on multiple fields... maybe `q` should accept list of fields: 


```Python
class BookFilterSchema(FilterSchema):
    query: Optional[str] = Field(q=['name__icontains', 'author__name__icontains'])
```
Hey @vitalik,

First of all, Thank you for having a look in this PR. Let me address your feedback one by one:

1. In regards to the naming, the current names were picked in an attempt to align with the conventions of Django:
    * `FilterSchema.filter` is named `.filter` since all it does essentially is invoke Django's `QuerySet.filter`. My assumption is that the developer used to Django should have an immediate expectation of what the method does and returns when it's called `.filter`. However I do acknowledge a slight inconsistency: `QuerySet.filter` is a method of the queryset that takes in filter arguments, while `FilterSet.filter` is the other way around a method of the filter arguments that takes a queryset. So, my assumption may not be entirely correct.
    * kwarg `q` is named `q` since the string value provided to it goes straight into Django's `Q` expression as a keyword argument;
    * setting `expression_connector` is called this way since Django's Q refers to the `"AND"`, `"OR"` and `"XOR"` as [connectors](https://github.com/django/django/blob/main/django/db/models/query_utils.py#L48). However, I am not so fond of this name myself as albeit its descriptiveness it's too long IMO, especially when provided in a Filed definition (see declaration of field `search` in point 3 below);

    Having that said, I am not holding on to any of those names and will not object you willing to change them into something else.

2. That makes sense, will do.

3. With the current state of the PR you'd be able to achieve your goal with a custom expression. Though I see that this may be too verbose for such not-so-complex cases and it should be more declarative. So I agree with your suggestion and propose some additions to it. Consider the following filter declaration:
    ```python
    class BookFilterSchema(FilterSchema):
        tag: Optional[str]
        name: Optional[str] = Field(q='name__icontains')
        search: Optional[str] = Field(q=['name__icontains', 'author_name__icontains'], expression_connector='OR')
        popular: Optional[bool]

        def filter_popular(self, value) -> Q:
            return Q(view_count__gt=1000) if value else Q()
    ```
    * For `tag`, the query would be `Q(tag=...)` (where `...` is whatever value the user provided). This is what you are suggesting in point 2.
    * For `name` the query would be `Q(name__icontains=...)`;
    * For `search` the query would be `Q(name__icontains=...) | Q(author_name__icontains=...)`. This is what you are suggesting in point 3. In this example Qs are combined using `|` (or) due to `expression_connector` kwarg specified in the Field declaration. I have come hesitations on what the Field-level `expression_connector` default should be, but I'm slightly inclining towards `OR`.
    * For `popular` `FilterSchema` would search for `filter_<field_name>` method and invoke `filter_popular` to use the custom expression it returns. This should symantically align to what you do with `resolve_<field_name>` in `Schema`.

    Then, all Qs will be combined together using a class-level `expression_connector`.

    What do you think of it? If there are no objections, I will implement it shortly in the PR and fix the tests & docs accordingly.
Hi @l1b3r 
I'm planning to make release somewhere coming week - would you be able to make p2 ?
Hi @vitalik,
I have implemented the following changes:

* When no `Field()` is specified for the field, the field's name is taken as a lookup
* "q" kwarg now supports not only a string, but a list of strings.
  * List items are combined using OR by default, but that can be overridden on a field basis.
* It is now possible to define a method `filter_<fieldname>` for a field, which must return a Q expression that will be used for that field.

Adjusted the tests and the docs accordingly. Could you launch the CI please?
@vitalik, apologies, I have fixed the tests again. Didn't realize that Django added `XOR` connector for `Q` only in 4.1.


As a side note, I seem to be unable to run the matrix tests locally on a Windows + (WSL + Docker) setup due to a Docker build failure:
```
...\django-ninja\tests\env-matrix>docker-compose up --build

Step 14/31 : RUN /install_env.sh 3.6.10  2.1.15  env-36-21
 ---> Running in e49b1d95bb24
/bin/sh: 1: /install_env.sh: not found
The command '/bin/sh -c /install_env.sh 3.6.10  2.1.15  env-36-21' returned a non-zero code: 127
```
But I suppose that's out of scope of this PR.
@l1b3r  Thank you
Thank you for giving this PR a look and thanks for the framework in general!

Having used both Django+DRF and FastAPI extensively and having struggled with both in one way or the other, I find Django-Ninja a very solid middle ground that takes best from both worlds. It's awesome how Ninja combines lightweight Pydantic-powered FastAPI-like handlers (instead of that bulky and hard-to-tweak DRF) with the rest of Django's goodies such as the ORM (something that FastAPI is missing completely), admin interface, ecosystem etc.

Looking forward to the new releases <3
I did something very similar for orderable fields by query param. Ends up looking like:

```python
class OrderableFields(OrderableFieldsEnum):
    amount = "amount", "order__amount_gross"
    date = "date", "start"

class FiltersQuery(Schema):
    ordering: Optional[OrderableFields | List[OrderableFields]]

@api.get(...)
def list_orders(request, filters: FiltersQuery = Query(...)):
    qs = ...
    qs = order_queryset(qs, filters.ordering)
    return qs
```

The `OrderableFieldsEnum` takes the items in the enum and adds a descending option for them too. So in the schema the accepted values are `amount, -amount, date, -date`. Could quite easily modify it to allow F() field descriptors for more complex orderings. 

Here's the enum def:
https://gist.github.com/Jragon/d7acabb05238f040fed86c44652c4658
I could tidy it up and add some docs if you thinks it's something worth adding? Seems relevant if we're adding a way to filter schemas.
@Jragon yeah, sure - if you see some issues with the docs feel free to add PRs
I think the CI workflow should pass now
Would be awesome of this gets merged and released!
Merged, thank you
@gvangool you should be able to only run the test if the version is 3.10+ using pytest skipif [(docs)](https://docs.pytest.org/en/7.1.x/how-to/skipping.html#id1).

You can then get a union value using eval:
```python
example_union = eval("str | int")
```

Or define a function with union types using exec:
```python
exec("""def example_func(something: int | str) -> int | str:\n    return something""")
```

These should both stop earlier python versions from complaining about the | operator. There might be a cleaner way to do it, but it's a difficult problem to google.
Hi @gvangool 
thank you for contribution, would you be able to add tests for this ?
@OtherBarry thanks for that pointer!
I realized after pushing that version that we can also use strings there.
So this version works on Python 3.10 and throws errors on 3.9:
```
TypeError: unsupported operand type(s) for |: 'ResolverMetaclass' and 'ResolverMetaclass'
```
@gvangool @vitalik might need to look into using some `pragma: no cover` comments in this PR.

I tried bumping the coverage CI job python version to 3.10, but naturally it just fails on the other side of the try-except.
Thank you
hi there ,, 

do you have any particular reasons for this change?


In my opinion this makes the code harder not easier
Yes I created an issue:
https://github.com/vitalik/django-ninja/issues/693
It is for CSP.
This would be good to get in to deal with strict `Content-Security-Policy` headers. :+1:
@vitalik What do you think about this PR?
Hi @chenatlas 

Thank you for PR, but unfortunately it cannot pass

 - You can achieve icon by adding 'ninja` to INSTALLED_APPS and override a template
 - There are plans to make docs engines pluggable (as there is already 4+ libraries that requested) 

so extending NinjaAPI arguments for docs does not make sense anymore
Hey @SunsetOrange, shouldn’t the upstream be `master` branch?
> Hey @SunsetOrange, shouldn’t the upstream be `master` branch?

Possibly, but CONTRIBUTING.md doesn't mention any particular branches to merge to and as this is a documentation amendment, I figured the docs branch was most appropriate.
A nice simple addition. Bikeshedding the name, potentially this should be something like `openapi_info` to indicate that it's openAPI related.

Looks good, but could do with a test and docs. 👍🏻
@baseplate-admin / @SmileyChris done both, added testing, renamed to openapi_info and added docs.
@SmileyChris fixed, moved openapi_info to last and reverted the emitted line.
Hi @chenatlas thank you for contribution, this is merged, but I extended functionality to support other extra open api attributes (not just `info`)

this is how updating info should work now:
```PY
api = NinjaAPI(
   openapi_extra={
            "info": {
                "termsOfService": "https://example.com/terms/",
            }
        }
       
   },
```
Hello @vitalik!

Is it possible to include extra schemas (not related to a specific route)? For example, as below?

```python
api = NinjaAPI(
    openapi_extra={
        "components": {
            "schemas": {
                "TestSchema": {
                    "title": "TestSchema",
                    "type": "object",
                    "properties": {
                        "cod_test": {"title": "Cód. test", "type": "integer"},
                        "test": {
                            "title": "Test",
                            "maxLength": 30,
                            "type": "string",
                        },
                    },
                    "required": ["cod_test", "test"],
                },
            }
        }
    }
)
```

Or using Schemas/model Schemas directly:

```python
api = NinjaAPI(
    openapi_extra={
        "components": {
            "schemas": {
                "TestSchema": TestSchema().dict(),
            }
        }
    }
)
```

Thanks in advance for the help!
LGTM, Please add test and documentation
I think this should stay, it's showing the output of the reverse
(And this comment got left out of my review?)

This should technically go last in case anyone is crazy enough to be using positional arguments. It makes more sense here though, so the better fix is enforcing these to be keyword arguments by adding `*,` on the previous line.
Hi @vitalik ,

we have run into an error. [Async middlewares are only supported in 3.1 and upwards](https://docs.djangoproject.com/en/4.1/topics/http/middleware/#asynchronous-support). Do you want me to drop the async middleware to keep compatibility or do you want me to bump django version to 3.1 and upwards.

the problematic import is 
`from django.utils.decorators import sync_and_async_middleware`

This class isn't available in django 3.1 and earlier.

---

My opinion on this matter is that make a repository that will have this specific code and then link to the docs about this middleware and when we finally drop django 3.1 support we will merge this into main branch

---

Or maybe look into core and see how we can patch it without using a middleware. ( like how `django-rest-framework` does things )
Django 2 is EOL.

In my opinion we should target 3.2 and upwards
Hey @vitalik ,

I have skipped coverage on middleware as the middleware works as expected :)
merge this after #720
Hi @vitalik,

Due to the lack of input on this Pull Request i have made [`ninja-put-patch-file-upload-middleware`](https://pypi.org/project/ninja-put-patch-file-upload-middleware/)

Feel free to open this pull request again to continue the progress here.

Thank you again for creating `django-ninja` .
well, docs are meant to be more compact - now that you sorted - it made lot of gaps (and highlighted lines in markdown are now not matching)
> well, docs are meant to be more compact - now that you sorted - it made lot of gaps (and highlighted lines in markdown are now not matching)


Oops i will have a look
@baseplate-admin well leave it - I do not see a point doing this in docs examples, as it will just blur readers attention, I prefer it to be more compact for reading
> @baseplate-admin well leave it - I do not see a point doing this in docs examples, as it will just blur readers attention, I prefer it to be more compact for reading

Fair enough
Hi @jkeyes 

Thank you for PR - do you have any test case for this ? as I'm not able to reproduce the issue described in the ticket
Hey @vitalik

This unit test exhibits the behaviour:

```Python
def test_all_paths_typed_params_rendered():
    api = NinjaAPI(renderer=TestRenderer)

    class EmployeeOut(Schema):
        id: int
        first_name: str
        last_name: str

    class CustomPagination(PaginationBase):
        class Output(Schema):
            data: List[Any] # `items` is a default attribute
            detail: str
            total: int

        items_attribute: str = "data"

        def paginate_queryset(self, queryset, pagination, **params):
            pass

    @api.get(
        "/employees",
        auth=["OAuth"],
        response=List[EmployeeOut],
    )
    @paginate(CustomPagination)
    def get_employees(request):
        pass

    schema = api.get_openapi_schema()

    paged_employee_out = schema["components"]["schemas"]["PagedEmployeeOut"]
    # a default value shouldn't be specified automatically
    assert "default" not in paged_employee_out["properties"]["data"]
```

Passing `paginator.items_attribute: [],` in the `new_schema = type(` is setting a default value for the object.

These gifs show the differences in the swagger docs.

First the current behaviour:
![example_and_schema_without_change](https://user-images.githubusercontent.com/64932/230687472-d8dc8605-ed7f-44bb-ba34-145f6aa16dd3.gif)

and now the behaviour when no default is specified in `pagination.py`:
![example_and_schema_with_change](https://user-images.githubusercontent.com/64932/230687474-19ca4d20-de16-4298-a257-e08f31c46d66.gif)

I made a mistake by not branching from my fork when creating the original PR. I can redo that and include this unit test if you'd like me to resubmit.
> This unit test exhibits the behaviour:

Include this unit test in this PR please
Thank you
Please remove hyperlinks.  Using git blame we can see why THIS was added
Same
Same
I've added some missing tests for CSRF and authentication errors. Note that I did not add any tests for CSRF exemption for async views, since that's [not yet supported](https://code.djangoproject.com/ticket/31949) in Django.
Great, Thank you
@vitalik , This is just a typo fix ( i think we can merge this so it shows up correctly on the docs )
Thank you
LGTM
If code changes in PR seems good, I want help about testing for this code change 🙏
Sorry, I realized this PR fix is not make sense and does not resolve the problem.
close this and let me try again
I've checked it again, so re-open this PR.
https://github.com/vitalik/django-ninja/issues/658#issuecomment-1529668899
Hi mantainers,
This PR is ready for preview so please check and give me some feedbacks
@vitalik Are there any async auth fix foreseen for the next release?
This looks like it makes #735 obsolete, but that pr has some docs you might want to steal :)
This also fixes #44
https://github.com/vitalik/django-ninja/pull/756#issuecomment-1532398780

@SmileyChris Thank you!
I will update the document about this to steal from PR you mentioned 😎
Thank you reviewers !
I hope this PR will be merged and reflected in next release.
@skokado 

to check for async - use [signature.utils.is_async](https://github.com/vitalik/django-ninja/blob/3e46804bce183b022c5116220de232ccafbd8dff/ninja/signature/utils.py#L55-L56) which should be compatible with 3.7
> to check for async - use [signature.utils.is_async](https://github.com/vitalik/django-ninja/blob/3e46804bce183b022c5116220de232ccafbd8dff/ninja/signature/utils.py#L55-L56) which should be compatible with 3.7

Is it not better to use a asgiref function ?

well it break tests :)

btw - check #735 as well - this seems already all tests covered
Besides @vitalik,  your function is deprecated. Check : https://github.com/python/cpython/issues/94912  ( maybe we should switch to asgiref one everywhere ? )
@baseplate-admin @vitalik 
How about switch function dynamically like this ?

```python
try:
    import asgiref
    iscoroutinefunction = asgiref.sync.iscoroutinefunction
except ModuleNotFoundError:
    # For Django 2.x
    import asyncio
    iscoroutinefunction = asyncio.iscoroutinefunction
```
> Besides @vitalik, your function is deprecated. Check : [python/cpython#94912](https://github.com/python/cpython/issues/94912) ( maybe we should switch to asgiref one everywhere ? )

well utils.is_async should be then adapted anyway - as this function is used in multiple places it just good practice to reuse the same code
> How about switch function dynamically like this ?

Thats exactly what asgiref is doing. Except it imports from inspect. 

> well utils.is_async should be then adapted anyway

Would you like a PR to remove asyncio.iscoroutinefunction?
So then it's better to use `signature.utils.is_async` here as in the rest of the code, right ?
Oops, didn't notice this https://github.com/vitalik/django-ninja/pull/756#issuecomment-1536232307
> So then it's better to use signature.utils.is_async here as in the rest of the code, right ?

Right
updated https://github.com/vitalik/django-ninja/pull/756/commits/15274a098fa4a84e091ebb9afad5ff2992a58cbe
@skokado looks ninja.pagination is broken

class PaginationBase contains a queryset sync method called _items_count()
Maybe the best pratice would be to rewrite a @async_paginate()


Any sugestions?
https://github.com/vitalik/django-ninja/pull/756#issuecomment-1537036447

> looks ninja.pagination is broken

@luizfelipevbll How can I see the behavior of that?
I ran unit tests locally and all cases have succeeded

<details><summary>pytest</summary>
<p>

```
$ pytest tests/
================================================================================= test session starts ==================================================================================
platform linux -- Python 3.11.2, pytest-7.3.1, pluggy-1.0.0
rootdir: /home/skokado/workspace/django-ninja/tests
configfile: pytest.ini
plugins: anyio-3.6.2, django-4.5.2, cov-4.0.0, asyncio-0.21.0
asyncio: mode=Mode.STRICT
collected 476 items                                                                                                                                                                    

tests/test_django_models.py .                                                                                                                                                    [  0%]
tests/test_orm_schemas.py .                                                                                                                                                      [  0%]
tests/test_docs/test_auth.py .                                                                                                                                                   [  0%]
tests/test_alias.py .                                                                                                                                                            [  0%]
tests/test_api_instance.py ..                                                                                                                                                    [  1%]
tests/test_app.py ............                                                                                                                                                   [  3%]
tests/test_async.py .                                                                                                                                                            [  3%]
tests/test_auth.py ...................................                                                                                                                           [ 11%]
tests/test_auth_global.py ..                                                                                                                                                     [ 11%]
tests/test_auth_inheritance_routers.py ............                                                                                                                              [ 14%]
tests/test_auth_routers.py ........                                                                                                                                              [ 15%]
tests/test_body.py ..                                                                                                                                                            [ 16%]
tests/test_conf.py .                                                                                                                                                             [ 16%]
tests/test_csrf.py ...                                                                                                                                                           [ 17%]
tests/test_django_models.py ..                                                                                                                                                   [ 17%]
tests/test_enum.py ..                                                                                                                                                            [ 18%]
tests/test_exceptions.py .....                                                                                                                                                   [ 19%]
tests/test_export_openapi_schema.py .....                                                                                                                                        [ 20%]
tests/test_files.py ...                                                                                                                                                          [ 20%]
tests/test_filter_schema.py ..............                                                                                                                                       [ 23%]
tests/test_forms.py ...                                                                                                                                                          [ 24%]
tests/test_forms_and_files.py .                                                                                                                                                  [ 24%]
tests/test_inheritance_routers.py ........                                                                                                                                       [ 26%]
tests/test_lists.py ..........                                                                                                                                                   [ 28%]
tests/test_misc.py .....                                                                                                                                                         [ 29%]
tests/test_models.py ..........                                                                                                                                                  [ 31%]
tests/test_openapi_params.py ..                                                                                                                                                  [ 31%]
tests/test_openapi_schema.py .........................                                                                                                                           [ 37%]
tests/test_orm_metaclass.py .....                                                                                                                                                [ 38%]
tests/test_orm_relations.py .                                                                                                                                                    [ 38%]
tests/test_orm_schemas.py ............                                                                                                                                           [ 40%]
tests/test_pagination.py ..........                                                                                                                                              [ 43%]
tests/test_pagination_router.py ..                                                                                                                                               [ 43%]
tests/test_parser.py .                                                                                                                                                           [ 43%]
tests/test_path.py ......................................................................................................                                                        [ 65%]
tests/test_query.py .........................                                                                                                                                    [ 70%]
tests/test_query_schema.py ....                                                                                                                                                  [ 71%]
tests/test_renderer.py ...                                                                                                                                                       [ 71%]
tests/test_request.py .......                                                                                                                                                    [ 73%]
tests/test_response.py ...........                                                                                                                                               [ 75%]
tests/test_response_cookies.py .                                                                                                                                                 [ 75%]
tests/test_response_multiple.py ..................                                                                                                                               [ 79%]
tests/test_response_params.py .                                                                                                                                                  [ 79%]
tests/test_reverse.py ...                                                                                                                                                        [ 80%]
tests/test_router_path_params.py .................                                                                                                                               [ 84%]
tests/test_schema.py ......                                                                                                                                                      [ 85%]
tests/test_server.py ...                                                                                                                                                         [ 85%]
tests/test_signature_details.py ............                                                                                                                                     [ 88%]
tests/test_test_client.py ........                                                                                                                                               [ 90%]
tests/test_union.py .                                                                                                                                                            [ 90%]
tests/test_utils.py ......                                                                                                                                                       [ 91%]
tests/test_wraps.py ........                                                                                                                                                     [ 93%]
tests/test_docs/test_auth.py ..                                                                                                                                                  [ 93%]
tests/test_docs/test_body.py .                                                                                                                                                   [ 93%]
tests/test_docs/test_form.py .                                                                                                                                                   [ 94%]
tests/test_docs/test_index.py .                                                                                                                                                  [ 94%]
tests/test_docs/test_path.py .                                                                                                                                                   [ 94%]
tests/test_docs/test_query.py .                                                                                                                                                  [ 94%]
tests/test_with_django/test_multi_param_parsing.py .........................                                                                                                     [100%]

=================================================================================== warnings summary ===================================================================================
test_auth.py::test_auth[/async_apikeyquery-kwargs11-401-expected_body11]
test_auth.py::test_auth[/async_apikeyquery?key=keyquerysecret-kwargs12-200-expected_body12]
test_auth.py::test_auth[/async_apikeyheader-kwargs15-401-expected_body15]
test_auth.py::test_auth[/async_apikeyheader-kwargs16-200-expected_body16]
test_auth.py::test_auth[/async_apikeycookie-kwargs19-401-expected_body19]
test_auth.py::test_auth[/async_apikeycookie-kwargs20-200-expected_body20]
test_auth.py::test_auth[/async_customexception-kwargs31-401-expected_body31]
test_auth.py::test_auth[/async_customexception-kwargs32-200-expected_body32]
  /home/skokado/workspace/django-ninja/ninja/operation.py:155: UserWarning: async_to_sync was passed a non-async-marked callable
    result = async_to_sync(callback)(request)

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================================================================== 476 passed, 8 warnings in 1.71s ============================================================================
```


</p>
</details>
Hi reviewers, on second thought, this update may be fundamentally misguided :(

https://github.com/vitalik/django-ninja/actions/runs/4894118600/jobs/8750675243?pr=756#step:6:30

it's used `import asgiref` at the beginning of the module `ninja.operation`, which is incompatible with the Django2.x case.
https://github.com/skokado/django-ninja/blob/dd181d96bd17dc293a7adbcc3f7ec1b663f4c317/ninja/operation.py#L15


Should I wait for Django 2 to drop? https://github.com/vitalik/django-ninja/issues/744
> Should I wait for Django 2 to drop? https://github.com/vitalik/django-ninja/issues/744

I thought of this too when i  closed my own PR. see https://github.com/vitalik/django-ninja/pull/719#issuecomment-1488086633 and i then made my own middleware package to extend `django-ninja`
Hi, thank you for contribution, but another PR with async auth merged, please test with latest master branch
I was using the decorator to workaround this issue:

```
def await_auth(f):
    @functools.wraps(f)
    async def decorator(*args, **kwargs):
        auth = await args[0].auth
        if not auth :
            raise AuthenticationError()
        args[0].auth = auth
        return await f(*args, **kwargs)
    return decorator
```


But it seems these PR fix this async auth issue, nice work!
use `asgiref.iscoroutinefunction` :) 

It provides a backport of this functionality
@baseplate-admin 
you mean `asgiref.sync.iscoroutinefunction` ?
Yes correct
Superseded by #770.
Thank you
thanks for the fast review and merge!
sure, thank you !
Thank you

this is now implemented in separate patch in upcoming release along with operation callback

https://github.com/vitalik/django-ninja/blob/e4c10ade3c59e162626e9291f4ca74a60ef9c553/ninja/utils.py#L53-L64
This is only a documentation update… (no checks should fail here)
Thank you
thank you
I'm not sure what the fail means - from what I see, it didn't originate with my PR or `isort`. Should it be addressed in this PR?
Hi @pawelngei 

thank you for PR

Overal for next release I migrated from flake8, isort to [ruff](https://github.com/vitalik/django-ninja/blob/a718d73c75dd49c1717389e05c1df69b6fa6ade5/.github/workflows/test_full.yml#L59-L60) which covers all of this like 10x faster

do you think it is possible to cahnge this pre-commit as well to ruff ?
Thank you @vitalik ! I could look into it in a spare moment. Which branch should I be testing with?
master should have latest
Replaced `flake8` and `isort` with `ruff` with automatic `--fix`. Would that be enough?
I think so, will see :)
@vitalik Ah, just realized -

> Ruff's pre-commit hook should be placed after other formatting tools, such as Black and isort, unless you enable autofix, in which case, Ruff's pre-commit hook should run before Black, isort, and other formatting tools, as Ruff's autofix behavior can output code changes that require reformatting.

One more commit, sorry for confusion.
@vitalik not meaning to push you to merge this immediately, are there any more tests / updates you'd like me to do for this to be viable?

I could really really use this in my daily work ;)
Hi @pawelngei 

sure thank you for PR - I'm still thinking/researching this - as docs viewer questions are popping up pretty often and I want to give pretty pluggable solution that should be east extendable


most probably the solution would be something like passing a Docs engine object to NinjaAPI class

```Python

api = NinjaAPI(docs=Swagger())

...

api = NinjaAPI(docs=Swagger(settings={'persistAuthorization': True}))

....

api = NinjaAPI(docs=Redocs(settings={'something': 'else'}))


....

api = NinjaAPI(docs=ThirdPartyPlugin())

```
So, do you take PRs for that, or would you like to write such a system yourself? 

I could really use this for my daily workflow ;)
@pawelngei the latest implemntation is in master

you can change settings like this:

```Python

swagger = Swagger(settings={"persistAuthorization": True})
api = NinjaAPI(docs=swagger)

```
Well, it looks like you implemented everything I wanted to do here! I tested it locally and it works well :) We can close the PR, I just can't wait until it gets released publicly!

Thank you once again!
Hi @Kristinus 
Thank you
could you also add a test case for this ?
I have now added a test @vitalik
Thank you
Minor nitpick, but it should be `picklable` and `unpicklable`, with an L, according to the python documentation.
@OtherBarry Oh my I didn't even notice... Thanks!

I also deleted `__reduce__` method as `super().__init__(...)` did the trick 👌
Thank you
Thank you
This PR actually fixes another issue as well:

when u have Schema as attribute for another schema:
```
class UserTokenType(Schema):
    meta_data: MetaDataSchema | None = None
```
and you send this json
```
{
    "meta_data": "xxx",
}
```
Django ninja reports that schema is correct, however after the change in this pr we get the correct error that we missed before
```
{
    "error": "validation_errors",
    "details": [
        {
            "field_name": "meta_data",
            "msg": "Input should be a valid dictionary or object to extract fields from",
            "type": "model_attributes_type"
        }
    ]
```
well it's not that easy (as you see from failed tests) 

I think there must be some trick so that pydantic thinks DjangoGetter is a dict
Hi @nofalx 

regarding - `from_orm` ? did you find this somewhere on pydantic code ? I think they deprecated this keyword in favour to "from_attributes"...
Hi, Please use black on your code
@vitalik  turns out the logic does not depend on the `from_attributes`  but more on if the source of validate if from from `model_validate` or somewhere else. 

I dont understand the inners of pydantic very well but I have tested the update code in a django projects and all scenarios seem to be working fine for root of the json and nested json shema we using for the API. The projects tests are all passing as well
Added new test cases to cover the issues this pr fixed.  Code now passes lint and tests
There might be also development on pydantic side for this: https://github.com/pydantic/pydantic/issues/5434 will check if that covers this case as well
Hi @nofalx 

I simplified a bit your approach (used class.model_config to find out if default validaion wrapper is needed) - see here for more details - #863 - let me know if that works ?
Hi @vitalik 

Looks like a better approach, hope this makes it to next beta
what's the logic for "from_attributes" here ? the signature module kinda works only on anayling function signatures...
You are right, it was needed when I based my logic on `from_attributes` but its not valid anymore. Reverting
Thank you
Thank you
Thank you @lilleswing
yeah, apparently 95% of docs uses `Python`, while other `python`(lower)

I guess  "Python"-capital it is :)
Could you please lowercase `python`?

`Python` -> `python`
Could you please lowercase `python`?

`Python` -> `python`
Could you please lowercase `python`?

`Python` -> `python`
Could you please lowercase `python`?

`Python` -> `python`
Could you please lowercase `python`?

`Python` -> `python`
Sure. But the current file is using `Python` instead of `python`. Should I keep the same format (`Python`) or not?
Hmm this is unusual. I think powercasing everything is better :)
Maybe merge this one and I can create another MR to harmonize everything?
Lower cased as discussed in #878.
Thank you
Great stuff, I'll release this on PyPI in a few minutes. Thanks!
Released version 0.1.1 https://pypi.python.org/pypi/djangorestframework-jwt/0.1.1
awesome, thanks!
@marccerrato thank you so much for this! I'll try and take a closer look today and see what I can come up with. Any other recommendations apart from using something other than "Bearer"?
@jpadilla I think the best and easier solution is to use another keyword, like "JWT", since in the draft (http://tools.ietf.org/html/draft-ietf-oauth-json-web-token-15) is not specified which term to use, and maybe "Bearer" should only be used for OAuth.

Another choice, it's to validate the token format to distinguish from the OAuth2 one, but it should require changing the DRF OAuth2Authentication class as well.
I agree with changing the header from "Bearer" to "JWT"
@marccerrato nice dude
@stanhu thanks!
@stanhu this looks good, thanks!
@theskumar thanks!
@spenthil great, thanks!
Hey @stanhu what exactly is the use case here? Why is this a good idea?
@ardydedase is it possible you could add a failing test that demonstrates the exception you were getting and your fix applied to it? We have Travis tests for Python 2.6 and Django 1.3.7 which were not failing before.
This fixes an error I had using Django 1.4 with Python 2.6 on CentOS (CentOS version as close to Amazon EC2 as possible)
@shapr was this with Python 2.6.6 as well?
I'm inclined to accept https://github.com/GetBlimp/django-rest-framework-jwt/pull/18 but I'd like to know if that might get rid of this bug.
@jpadilla Yes, Python 2.6.6 on CentOS
I go also this error. I solved the problem by changing get_username() to username.

I tested it with django 1.3.7
I think this should be fixed by #21.
@cborgolte this is awesome, thanks! Any way you can write a test or two to demonstrate a custom user model in use?
+1
FWIW I'm using this in a project (my custom username field is 'email') and it appears to be working. This is a much needed enhancement. If you're waiting on tests maybe I will try to write some.
@alvinchow86 if you could write one or two passing tests for this, I'll be glad to merge it quickly and release a new version.
I wrote some tests, here are the changes https://github.com/doordash/django-rest-framework-jwt/compare/gundl:master...custom-user-model

Also made a separate pull https://github.com/GetBlimp/django-rest-framework-jwt/pull/21
@alvinchow86 this looks great, will soon bump up version and release on pypi. Thanks!
Hey @alvinchow86 this seems great! Still have to take a look at it closely, but really appreciate the work you've put into this and no doubt we'll get this merged.

First thing, do you mind updating your fork with the latest from master which fixes failing tests from a recent change in DRF's compat module?

Second, we'd definitely need some tests for this before merging.
Cool, I'll definitely work on some tests.
@simonluijk before merging this PR it needs some tests.
@alvinchow86 any status on these?
sorry about the delay, I will try to push out some tests this week
Any news on this? If there is need for extra pair of hands, I could help with this as I need the functionality...
In the middle of writing tests, will push soon
I just looked over the code, LGTM.

A small nitpick is why are you using `timegm(datetime.utcnow().utctimetuple())` to get a timestamp `int(time.time())` should be fine.
Added tests, mainly for the refresh token API endpoint. I didn't write ones for the serializer (some of which would be redundant with the API tests, but let me know if they are needed).

Added a `simtime.py` module to help with mocking/fast-forwarding the current time. Basically I patch the datetime class with a custom class (however this needs to be done everywhere the datetime class is imported and used).

FYI I used `timegm(datetime.utcnow().utctimetuple())` because that's what python-jwt uses =), I agree it's pretty clunky though.. I have no problem with `int(time.time())` but I'll have to mock out the `time` class in addition to `datetime` for my simtime stuff to work.
Nice work. I didn't realize python-jwt used that. Ignore my nitpick then.
Ah tests are failing on Python 2.6 and 3.2 but passing on 2.7.. guess I got to make some compatibility fixes
@alvinchow86 very excited for this, you've done a tremendous job on it. I haven't checked the failing tests yet, but shouldn't be hard to get fixed.

At a quick glance, I'm thinking there should be something simpler we could do regarding the `simtime.py`, but I might be wrong. You could check out the tests on [pyjwt](https://github.com/progrium/pyjwt/) to see if we're using anything there that could help. As for tests, I think what you covered should be fine for now.

Will try to take a better look when tests are passing and give any additional feedback if any.
let me see if I can rewrite the tests without forcing the time
@alvinchow86 where are you with this? I've got some time and I'd like to help however I can.
was planning to wrap this up by today or tomorrow (sorry again for the delay)
@alvinchow86 no worries, if there's anything you need help with or would like to discuss, let me know.
I integrated @liamlin's Python 2.6 fix for total_seconds. The Python 3 issue had something to do with my overriding datetime with SimulationDateTime; I guess the isinstance() override doesn't work in Python 3. Anyway I rewrote the tests to not use the `simtime` stuff so this isn't a problem anymore.

Travis now passes, I think this PR is ready. If you want I can squash the commits a bit.
@alvinchow86 again, great work on this. Definitely looks good to me. I think before merging this PR we need to document the new settings as well as a usage example for it.
added documentation in README.

one thing I just noticed is I mix terminology (**refresh** in the code and **renew** in the settings), is this OK or should I just pick one?
@alvinchow86 we definitely should stick with only one, either refresh or renew. I'm more inclined towards probably using **refresh**. It'd also help to add a "scenario" in the Refresh Token part of the documentations. When would you want to use this and how might it fight into a real world scenario?

I'd also love to know how you're using this.
Fixed wording and added use case notes. The basic idea is to try to keep a user "logged in" while they are actively using a site, without having to necessarily make the token expiration too long either. You can have a web-app that periodically checks if the current token is close to expiring, and if it is, refresh the token to push out the "session"'s expiration
Thanks @alvinchow86
I'm thinking about using this shortly in an SPA. A combination of a timer that elapses close to when the token will expire and refresh if the application hasn't been idle past a threshold.
ie.
http://stackoverflow.com/questions/667555/detecting-idle-time-in-javascript-elegantly

I understand as the previous token will still be valid it is not necessary to suspend all requests while the new token is being fetched - the old token will still be valid (unless expired) after the new token is issued.
@alvinchow86 I think we have another wording problem with the `JWT_TOKEN_REFRESH_LIMIT` setting. It wasn't clear to me what exactly it meant after seeing that it's value was a time delta.

Would it help if it was called `JWT_REFRESH_EXPIRATION_DELTA`?

@gcollazo @slat do you have any input on this?
@jpadilla I agree the proposed name is better

:+1:  for `JWT_REFRESH_EXPIRATION_DELTA`
makes sense, I renamed to `JWT_REFRESH_EXPIRATION_DELTA`. Along those lines, should `JWT_ALLOW_TOKEN_REFRESH` just be `JWT_ALLOW_REFRESH` or something
@alvinchow86 I like `JWT_ALLOW_REFRESH`
done
@alvinchow86 Thanks again! This has been this project's biggest PR so far. I'll give it a try once again.

I'll also work on a Changelog and Contributors llist. Will update here when I release it to PyPI.
Great work everyone :+1:
Just released [v1.0.0](https://github.com/GetBlimp/django-rest-framework-jwt/releases/tag/1.0.0) which includes this and a couple other things. Thanks again to everyone that made this happen, specially @alvinchow86! :+1:
@alvinchow86 any reason why we used `orig_iat` here instead of `iat`? This seems to might have slipped by.
@cheerzorpo just got around release 0.1.6 with this. Thanks again!
Awsome! Thanks :)
Awesome, thanks for tackling these bugs! Definitely going to take a look at this and see if we can merge it into my PR (or other way around)
Closing this in favor of #23
Oops.  just noticed @vforgione beat me to it with #41
@astagi Thanks again for putting this together. A couple of notes for next steps.
- Add tests on Tox that uses https://github.com/tomchristie/django-rest-framework/tree/version-3.0
- Definitely need backward compatibility. Might be a good idea to do that within `compat.py`

Once the new(and current) tests on Tox pass we can go ahead and update `.travis.yml` to do the same.
Closed in favour of https://github.com/GetBlimp/django-rest-framework-jwt/pull/44

More elegant solution ;)
@astagi looks great! Mind modifying Travis setup to test against DRF3 as well?
Thanks! I hope the latest commit is ok, I've never used Travis for my projects! Anyway once DRF 3.0 will be released we won't need to switch between DRF versions anymore.
@astagi DRF's 3.0 will be merged to master next week. I'd like to wait until then to update this PR and merge it. Any thoughts/objections?
Oh that's a great news! yes, in that case you can wait or cherry pick only this: https://github.com/astagi/django-rest-framework-jwt/commit/315f3d26e82db3b07d491c0c5d084644ac901dda
Just wanted to let you know (because I need this package :) ) - DRF 3.0 has been merged to master!
@astagi you might want to update this to use the master branch. 3.0 is still not officially released, but that way we'll make sure everything still works.
@jpadilla to keep the history clean I suggest you to cherry pick only https://github.com/astagi/django-rest-framework-jwt/commit/315f3d26e82db3b07d491c0c5d084644ac901dda and close this PR or, if you prefer, I can open a new PR.
@astagi lets go with the new PR, feel free to close this one if you'd like.
@jpadilla here it is :) https://github.com/GetBlimp/django-rest-framework-jwt/pull/47

closing..
@astagi mind explaining what was the behavior you were encountering and why this is the correct fix?
During test I got user id == 0 and it's ok for me.. Anyway with user id 0 payload check failed.. I think that you should only check if it's None..
Do you guys have a plan for merging in 3.0 compatibility? 

I'd also note that `serializer.object` seems to be deprecated in favor of `serializer.validated_data` (see the ['Serializers' section in 3.0 release notes](https://github.com/tomchristie/django-rest-framework/blob/1aa58d16be0e96c7337b1d6bef928c9542c72741/docs/topics/3.0-announcement.md#serializers)).  This seems relevant in the JWT views defined in [`rest_framework_jwt/views.py`](https://github.com/GetBlimp/django-rest-framework-jwt/blob/master/rest_framework_jwt/views.py)

EDIT: I see now that @astagi 's commit handles `validated_data` vs `object`.  Nice!

Glad you guys are thinking so far ahead!
@DavidMuller We definitely are. I've been holding off since I know the official 3.0 release is landing soon.

Since it seems there are a couple users that'd like to try this out already I think it may be a good idea to do so now. @astagi would you mind checking if there's anything else we need to update with the latest 3.0-beta release?
Hi @jpadilla, seems that we don't need to update anything else, I use patched DRF-JWT with the latest 3.0 beta release in my projects everyday... And tests pass :)
Note: Still need to add travis/tox tests for 3.0-beta.
@jpadilla I have all the tests in these commits:

https://github.com/astagi/django-rest-framework-jwt/commit/a1a8387ebc8442ff42bf62aaea057f3719c102e5

https://github.com/astagi/django-rest-framework-jwt/commit/205d1f6f7336820c2ab04ddc79eb1dfd8b35c656

do you think that I should open a PR including these fixes? No problem for me, anyway as soon as 3.0 gets merged in the master all that stuff will be useless, because you already specify djangorestframework>=2.3.11.
@astagi now that I think about it, that approach of specifying a requirement for Django and REST Framework is a bit too much.

We should let anyone use this without imposing an upgrade for Django or REST Framework. I think with the current setup of having those requirements that would be an issue. I think I'd just keep PyJWT in there and remove the other two. Thoughts?

Don't worry about opening a PR. I want to cleanup tox and travis to use what we've been working on this [cookiecutter](https://github.com/jpadilla/cookiecutter-django-rest-framework).
@astagi just wanted to let you know that I updated `tox.ini` and `.travis.yml` to include those tests. Last [build](https://travis-ci.org/GetBlimp/django-rest-framework-jwt/builds/42305746) is failing.

Let me know if you can take a look at them, else I'll probably get to it during the weekend.
@astagi currently working on fixing those failing tests
Hi @jpadilla sorry for my late response! ouch ok, I'll give it a look tomorrow!
@astagi they're working now :)
oh ok @jpadilla thanks, I've just seen the fix between commits :)
Just published v1.1.0 with support for DRF v3
\o/ \o/
@tonyzhu this change breaks existing implementation. Feel free to to implement this on your side as a custom `JWT_PAYLOAD_HANDLER` [setting](https://github.com/GetBlimp/django-rest-framework-jwt#additional-settings).
@skolsuper yeah seems good. Note that the Travis CI build failed.

> rest_framework_jwt/serializers.py:74:17: E123 closing bracket does not match indentation of opening bracket's line
My bad. Fixed now.
@skolsuper also I think we can drop the substitution for password and do something like this instead.

``` python
msg = 'Must include "{0}" and "password"'.format(self.username_field)
```
If you want to fit this onto one line I could change it to
`msg = 'Must include "%s" and "password"' % self.username_field`
@skolsuper Nah don't care about fitting it onto one line. I think it's good as it is.
@erichonkanen 659a88e seems to be adding files all over the root of the project.

On another note, I'm not really sure this would actually work at all since [this line](https://github.com/GetBlimp/django-rest-framework-jwt/blob/master/rest_framework_jwt/views.py#L26) is what actually returns the response. I would expect people to just create a custom APIView from `ObtainJSONWebToken`.

If we were to use `jwt_response_payload` on our existing API views, our serializer must return a `user` as well as the already existing `token` in the `validate()` method, and then something like:

``` python
data = {'token': serializer.object['token']}
data.update(jwt_response_payload(user))
return Response(data)
```

Wonder how helpful it might be to pass the request as well to `jwt_response_payload`.
@jpadilla 

Sorry about the files, what happened is I just did an init in my virtualenv copy and then pulled down my fork which had newer changes than my working copy so it added those to the commit...

Also in the multiple commits it is fixed:

https://github.com/erichonkanen/django-rest-framework-jwt/commit/148daaaac61320a520c0b9cef0db6805b714e242#diff-5afafe00fb1f34cf237d8be61f350e1bR26

```
    return Response(serializer.object)
```

By default nothing is added to the normal response which just contains the token as usual, the utils.jwt_response_payload_handler just returns {}

https://github.com/erichonkanen/django-rest-framework-jwt/blob/705d64f2698f897865ec30c192206213080bf90b/rest_framework_jwt/serializers.py#L75

I have this tested and working locally, works nicely. I can resubmit the PR if you want to get cleaner look..  I think this would be really nice feature to have.. 

That said I just realized I need to also update the Refresh serializer/view so maybe I'll resubmit this when I can update those. Or if you don't think it should be added lmk... Again I know personally this would be a great feature so that instead of having to write a custom APIView, all I need to do is add a custom "jwt_response_payload()" function which follows the same convention as your other handlers which you can override.

This cleaned up the ember side of things nicely as you suggested in the other project repo thread :)
Ah I see what you mean about code being added, I'll resubmit this!
@jpadilla lmk if this looks better... I think it would be nice to only have to implement a custom jwt_response_payload_handler()" function like I put in the README example but if you think this should be left to a custom auth APIView let me know...

ps this fixed the issue I mentioned in the ember-simple-auth-token thread where if I refreshed it lost the session data... I'll update that thread later when I work on the JWTRefresh stuff in that
Failing test.

> rest_framework_jwt/serializers.py:65:1: W293 blank line contains whitespace

Also, I think I prefer to have anything related to additional response data handled in the views not in the serializer. So basically serializers stay as they were. Makes sense?
@jpadilla ah ok gotcha, do you like the idea of being able to attach additional response data w/o having to write a whole custom auth view though? To me it seems nice but maybe I'm biased... I'll move it to the view and check back later..
@jpadilla updated per conversation and cleaned up... Only thing that may be missing is any additional tests, if you have any ideas on that let me know otherwise it should be good to go! Thanks for the assistance
@erichonkanen I think we should have at least one test that shows custom response data in a view. Everything else looks good to me. Great job!
@jpadilla So I ran into some trouble bc the project I'm testing with uses a custom user model and it hiccup'd when I ran test.

That said is this the sort of test you wanted? Or something more involved? Also not sure if theres a better way to condense that decorator override_settings()

```
class ObtainJSONWebTokenTests(BaseTestCase):

    @override_settings(JWT_AUTH['JWT_RESPONSE_PAYLOAD_HANDLER']='tests.utils.jwt_response_payload_handler')
    def test_jwt_login_custom_response_json(self):
        """
        Ensure JWT login view using JSON POST works.
        """
        client = APIClient(enforce_csrf_checks=True)

        response = client.post('/auth-token/', self.data, format='json')

        decoded_payload = utils.jwt_decode_handler(response.data['token'])

        self.assertEqual(response.status_code, status.HTTP_200_OK)
        self.assertEqual(decoded_payload['username'], self.username)
        self.assertEqual(response.data['user'], self.user)
```
@erichonkanen yeah I think that's the idea.
@jpadilla Hey so I pushed up my latest with changes to test to a) fix User model issue, b) include test for custom response. However I can't test this as I'm having issues with testing for some reason.

What are your steps to test this package? I am (in active py3.4 virtualenv) "django-admin test" while in ~/.virtualenvs/project/src/djangorestframework-jwt/"

I am getting operational error saying no CustomUser model (from /tests/models.py).

I can try to resolve this or maybe you can test what I have? LMK.. I probably need to get testing resolved for future reference anyways
@erichonkanen try running tests with `./runtests.py` instead of `django-admin test`
@DavidMuller yeah this is what I thought would happen. If there's no sensible way around this without having users need to implement something specific to make it work, we probably shouldn't include it. Just doesn't feel right.

We're also forgetting about `JSONWebTokenAuthentication()` which also needs to decode the token.

We can definitely attempt to make it work, but only if user doesn't need to do so much work around it, otherwise I'd prefer to leave that implementation detail completely to whoever needs it.
Thanks for taking the time to read through the PR @jpadilla 

In the spirit of over-communication, I should clarify that my primary intention is _not_ to add support for per-user secret keys to the package.  

I think what I really had in mind is the following: improve encapsulation of functionality in the package so that someone who wanted to implement a custom encode/decode scheme (per-user secrets, for example) could subclass relevant classes, leverage the pre-existing class methods, and then supply custom `kwargs` to the encode/decode handlers.   This would allow them to take advantage of the views + tests + configuration settings of this package instead of starting from scratch and rolling their own solution completely!

In bullet points, I would clarify/update my goals to be the following: 
- Encode/decode handlers that accept arbitrary `**kwargs`
- Better separation of concerns in `JSONWebTokenAuthentication`, `RefreshJSONWebTokenSerializer`, etc. such that someone could easily subclass them, leverage their pre-existing methods, and supply custom `kwargs` to the encode/decode handlers

I totally understand if those goals fall outside of the scope of this package, but wanted to share nonetheless
@DavidMuller got ya. A couple of things that would then make sense for this would be:
- Add `**kwargs** instead of`user=None` to the handlers.
- Don't add user by default to the uses of the handlers. We'll just allow users that extend the package to be able to send arbitrary data to those handlers.

This is the least invasive and I'm still not sure why would someone still want to use the hooks for the handlers at that point of customizing so much, instead of using their own functions. Since they still would have to modify all the serializers and the authentication classes as well.

> This would allow them to take advantage of the views + tests + configuration settings of this package instead of starting from scratch and rolling their own solution completely!

True, but not sure to what extend, at least in the case of "per-user secrets". I think that at this point I'd need to see perhaps a simple prototype example for your use case and how this changes helped you accomplish that. Thoughts?
@jpadilla thanks again for the feedback.  

> [Add **kwargs** etc.] is the least invasive and I'm still not sure why would someone still want to use the hooks for the handlers at that point of customizing so much, instead of using their own functions. Since they still would have to modify all the serializers and the authentication classes as well.

Thinking about it a little more, I agree and understand that it might make more sense for someone to write their own wrappers around [PyJWT](https://github.com/progrium/pyjwt) instead of hacking around with this package as a 'white box.'   A case of diminishing returns for both the package maintainer (you), and someone implementing their own JWT solution.

I'll go ahead and close this pull request.
I need to correct the strings on the tests too.
@migonzalvar awesome, thanks again!
while starting application it reads first import part which doesnt loaded yet. because we use custom user.
Change in the installed_apps order doesnt fix the problem. If someone know how can pass this error without change import order it will be helpfull
@cenkbircanoglu was it also necessary to reorder the `from rest_framework_jwt.settings import api_settings`?
no it is not necessary i'm using Pycharm and it has "optimize imports" shorcuts and i have a practice(habit) that's all beacuse of it.
@cenkbircanoglu since it seems you're using a custom user model, can you check this [thread](https://github.com/GetBlimp/django-rest-framework-jwt/issues/36) out. Does this fix whatever might have been going on there?
This will fix that problem:
"Well the first problem is when AUTH_USER_MODEL is changed, because there is a problem with the imports. But that is not the main problem, it is easy to fix."

But i dont understand what his problem is exactly.
@cenkbircanoglu thanks!
@davideme thanks!
@semente seems reasonable. Mind checking those failing tests?
You are cool now :)
@semente yeah, looks good now. Thanks!
Also, a lot of the logic in the base serializer is the same as in the `JSONWebTokenAuthentication` class - apart from the errors raised. I wonder if it would be possible/desirable to abstract those out into shared functions.
@Jwpe thanks, checking this out. I think someone tried abstracting that logic from the `JSONWebTokenAuthentication` a while back. I wouldn't mind seeing it done. There might also be some logic in `JSONWebTokenAuthentication` that can be shared as well.
@Jwpe just to be clear, were you gonna tackle the base API view in this PR?
@jpadilla happy to do so, but I can also make a separate PR if you'd rather split it up.
@Jwpe seems right to me if it were part of this one.
@jpadilla refactored to add the base class. Rebased on the latest master - I can squash the commits if you like but otherwise this should be good to go.
@jpadilla fixed!
@Jwpe this looks perfect, thanks again for the great work! Only thing missing is adding a bit on it to the docs since we _are_ adding a new feature here.
@jpadilla added a section to the documentation. Let me know what you think!
@Jwpe looks great, thanks again!
@jpadilla no worries! Thanks for making an awesome library.
@cancan101 this is good, thanks! Could you update any docs with this new setting? Also, might be a good idea to include a simple test since this _is_ adding a new "feature".
How do I run tests locally? This `./runtests.py --fast` fails with:

```
E       OperationalError: no such table: auth_user
```
@cancan101 that's strange, still running into issues running tests?
This command still has the same error: `./runtests.py --fast` but the tox commands work fine: `tox -e py27-django1.7-drf3.0.0`
@cancan101 hmm weird, works fine here. I'll look into what might be going on. The only things I think is missing is the test case for this, everything else looks fine.
Suggestion where to put the test? https://github.com/GetBlimp/django-rest-framework-jwt/blob/master/tests/test_utils.py seems like the right place.

How do I test changing the settings?
Yeah that seems right.

There's an example [here](https://github.com/GetBlimp/django-rest-framework-jwt/blob/master/tests/test_views.py#L49)..
Tests uploaded.
@cancan101 thanks!
> (do not check `iss` on JWT)

Do you mean that if `JWT_ISSUER` is `None` and `iss` is present on the JWT it won't be checked? This bit could be a little more clearer.
I was just trying to interpret [this code](https://github.com/jpadilla/pyjwt/blob/78742f7bee089757839921d76604b6d24d6adc32/jwt/api.py#L184) which checks the iss on the token only if `issuer` is not None:

``` python
    if issuer is not None:
        if payload.get('iss') != issuer:
            raise InvalidIssuerError('Invalid issuer')
```
An alternative to the way I set it up with `JSONWebTokenAuthentication` extending `JSONWebTokenAuthenticationBase` would be to use a mixin and have three classes: `JSONWebTokenAuthenticationBase`, `JSONWebTokenAuthentication`, `JSONWebTokenFromHeader`.
@cancan101 yeah these seems ok. It perhaps might be a good idea to add something about this to the docs, perhaps with that `JSONWebTokenAuthenticationCreateQS` example you gave up top.
Are you okay with the name of the base class: `JSONWebTokenAuthenticationBase`?
@cancan101 hmmm how about `BaseJSONWebTokenAuthentication` like DRF's `BaseAuthentication`.
docs and rename done.
bump
@cancan101  looks great, thanks again!
@migonzalvar yeap, thanks! What do you run to update these?
I simply run:

``` console
$ cd rest_framework_jwt
$ django-admin makemessages -a
```
@fantastic001 yeap, good catch. Thanks!
@kvbik good catch, thanks!
thx for the merge ;)
Tested this in a local project by logging into my app with a distant expiring JWT_EXPIRATION_DATE, issuing a POST to /api/v1/auth-token-blacklist/ with the token, and then attempting to access the api (navigated to another page with api call). A 401 Unauthorized is issued and I am logged out of my ember app as expected... Let me know if anyone has input.. seems like nice feature
Should this package include an admin.py for the default black list token implementation? Should the JWTBlackListToken model include any other fields like the actual token value?
@erichonkanen nice work! 

I'd add the `exp` claim to the model, so that we can later clean-up the DB by removing all expired tokens.
@avimeir thanks! should the exp be a DateTimeField or CharField? I know the format it comes in as is seconds since epoch
```
def jwt_blacklist_set_handler(payload):
    """
    Default implementation that blacklists a jwt token.
    """
    jti = payload.get('jti')
    exp = datetime.fromtimestamp(payload.get('exp'))

    return models.JWTBlackListToken.objects.create(jti=jti, expires_at=exp)
```

Made it DateTimeField and just converted
Hmm ran into issue testing, I added pytz requirement but it seems the test environment doesn't pick it up? How can I configure the test environment to use it? Should the package use the requirements.txt at installation? Also, running ./runtests.py locally shows import error for rest_framework.authenticators import OAuth2Authentication
I ran into the same OAuth2Authentication issue, solved it by forcing an older version of DRF:
djangorestframework==2.4.3
I think that it happens because OAuth2Authentication was taken out of DRF and is now a separate package: http://jpadilla.github.io/django-rest-framework-oauth/
@jpadilla ran into issue with testing, it seems like this should have popped up before but the tests/test_authentication has a call to rest_framework.authentication.OAuth2Authentication and that was moved to your 3rd party package, I adjusted the repo to use that but when running tox locally and through git I get a non-obvious error:

```
Collecting setuptools==9.1
  Using cached setuptools-9.1-py2.py3-none-any.whl
Collecting Django==1.7.1
  Using cached Django-1.7.1-py2.py3-none-any.whl
Collecting djangorestframework-oauth==1.0.1
  Using cached djangorestframework_oauth-1.0.1-py2.py3-none-any.whl
Collecting djangorestframework==2.4.4
  Using cached djangorestframework-2.4.4.tar.gz
Collecting pytest-django==2.6.1
  Using cached pytest_django-2.6.1-py2.py3-none-any.whl
Collecting pytz==2014.10
  Using cached pytz-2014.10-py2.py3-none-any.whl
Collecting django-oauth2-provider>=0.2.4 (from djangorestframework-oauth==1.0.1)
  Using cached django-oauth2-provider-0.2.6.1.tar.gz
Collecting django-oauth-plus>=2.2.1 (from djangorestframework-oauth==1.0.1)
  Using cached django-oauth-plus-2.2.6.tar.gz
    /Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/distutils/dist.py:260: UserWarning: Unknown distribution option: 'test_requires'
      warnings.warn(msg)
Collecting oauth2>=1.5.211 (from djangorestframework-oauth==1.0.1)
  Using cached oauth2-1.5.211.tar.gz
    Traceback (most recent call last):
      File "<string>", line 20, in <module
    Complete output from command python setup.py egg_info:
    Traceback (most recent call last):

      File "<string>", line 20, in <module

    ----------------------------------------
    Command "python setup.py egg_info" failed with error code 1 in /private/var/folders/9r/gp7xyl_j0l3flcwp78j7mjcr0000gn/T/pip-build-2ki3xq96/oauth2
```

If you have any ideas on that or comments on the code updates (lots of incremental commits), let me know.. functionally this is all tested and working locally except for the tox build
Resolved tox error by making test oauth dependency for py27 only (didnt notice that lib doesnt support py3)...

If anyone wants to review this that'd be great, last piece is unit tests
hey Im running into issue with writing tests where I cant seem to load the JWTBlackListToken model into the test database and so I see:

```
OperationalError: no such table: rest_framework_jwt_jwtblacklisttoken
```

having read [this](https://docs.djangoproject.com/en/1.7/topics/testing/advanced/#using-the-django-test-runner-to-test-reusable-applications), the runtests.py file looks foreign to me and I can't figure out how to load that model? I tried copying it from rest_framework_jwt/models.py into tests/models.py, tried overriding the utiils handlers for jwt_blacklist_get/set_handler, tried adding tests/test_settings.py

any suggestions?

```
class BlacklistTokenAuthenticationTest(TestCase):
    urls = 'tests.test_authentication'

    def setUp(self):
        self.csrf_client = APIClient(enforce_csrf_checks=True)
        self.username = 'jpueblo'
        self.email = 'jpueblo@example.com'
        self.user = User.objects.create_user(self.username, self.email)

        api_settings.JWT_ENABLE_BLACKLIST = True
        api_settings.JWT_BLACKLIST_GET_HANDLER = test_utils.jwt_blacklist_get_handler
        api_settings.JWT_BLACKLIST_SET_HANDLER = test_utils.jwt_blacklist_set_handler

    def test_post_blacklisted_token_failing_jwt_auth(self):
        """
        Ensure POSTing over JWT auth with blacklisted token fails
        """
        payload = utils.jwt_payload_handler(self.user)
        token = utils.jwt_encode_handler(payload)

        auth = 'JWT {0}'.format(token)
        response = self.csrf_client.post(
            '/jwt/', {'example': 'example'},
            HTTP_AUTHORIZATION=auth, format='json')

        msg = 'Token is blacklisted.'

        print "RESPONSE: ",response
        self.assertEqual(response.data['detail'], msg)
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)
        self.assertEqual(response['WWW-Authenticate'], 'JWT realm="api"')
```
@erichonkanen I think you'll need to include `rest_framework_jwt` to INSTALLED_APPS in `tests/conftest.py`.
@jpadilla thanks that worked... another issue is when writing test for authentication, I was debating how to blacklist the token. I ended up just importing the default implementation's model and creating a token object for the test token which effectively blacklists it:

```
class BlacklistTokenAuthenticationTest(TestCase):
    urls = 'tests.test_authentication'

    def setUp(self):
        self.csrf_client = APIClient(enforce_csrf_checks=True)
        self.username = 'jpueblo'
        self.email = 'jpueblo@example.com'
        self.user = User.objects.create_user(self.username, self.email)

        api_settings.JWT_ENABLE_BLACKLIST = True

    def test_post_blacklisted_token_failing_jwt_auth(self):
        """
        Ensure POSTing over JWT auth with blacklisted token fails
        """
        payload = utils.jwt_payload_handler(self.user)
        token = utils.jwt_encode_handler(payload)

        # Create blacklist token which effectively blacklists the token.
        JWTBlackListToken.objects.create(jti=payload.get('jti'),
                                         created=now(), expires=now()) 

        auth = 'JWT {0}'.format(token)
        response = self.csrf_client.post(
            '/jwt/', {'example': 'example'},
            HTTP_AUTHORIZATION=auth, format='json')

        msg = 'Token is blacklisted.'

        self.assertEqual(response.data['detail'], msg)
        self.assertEqual(response.status_code, status.HTTP_401_UNAUTHORIZED)
        self.assertEqual(response['WWW-Authenticate'], 'JWT realm="api"')
```

However I also had thought of trying to just set e.g.:

```
api_settings.JWT_BLACKLIST_GET_HANDLER = True
```

but no matter if I put that line in setUp() or in the test method, it still uses the rest_framework_jwt.utils version.
@jpadilla added the rest of unit tests. if there are any other changes that need to be made let me know. I'll update docs tonight and then it should be finished
@jpadilla updated documentation, should be good to go unless you or anyone else watching has changes/suggestions.. thx
I'm by no means trying to discourage this PR. 

I just want to make on statement.. If you're using JWT's as SSO. If you have another service that's got a shared secret/cert/etc... and can validate the JWT without having to make a request back to the "auth service", you're going to have to create a way to centrally store these blacklisted JWT's, and then add the overhead of EVERY request needing to ask the central auth service, if this JWT is blacklisted or not. 

For single service sites, I have no problem with this, it's a fine idea. I just want anyone who's following along to know that this won't work/scale if you're doing SOA. 

That being said I'm going to try and implement the refresh token as outlined by Auth0. https://auth0.com/docs/refresh-token

Will hopefully have an initial bare bones PR ready to go in  a couple days and hoping for some strict and constructive criticism. 

**EDIT** PR is here: https://github.com/GetBlimp/django-rest-framework-jwt/pull/94
@fxdgear very interesting point you bring up... This PR was result of [this](https://github.com/GetBlimp/django-rest-framework-jwt/issues/89) discussion/issue that came up and it indeed tries to implement the concept of "jti" per the json spec ([another link](https://auth0.com/blog/2015/03/10/blacklist-json-web-token-api-keys/)).

I don't have experience with SOA's personally that's something new to me... I feel like having this as an optional feature in this lib with the ability to implement the get/set on your own as overall good. I'm wondering if there are any changes though other than clear statement on the docs regarding SOA? it seems like blacklisting an auth token could be a relatively common thing for sites with stricter auth rules
@erichonkanen I just think it's worth noting, for anyone who looks to implement this feature. Like I said, I don't think it's a bad idea. I am just in the situation where I need to be able to "invalidate" a JWT, but that same JWT is useable across a variety of services, and I don't want to have to make extra calls between services on every single request. 

So the route I'm gonig to take is:  
1. Submit a PR to create the ability to have "Long lived" refresh tokens
2. Change the expire time of my refresh tokens to be say 15 minutes. 
3. All consumers of my API will have to safely store the refresh tokens.
4. All consumers of my API will be able to get a new JWT without having to store the user/name password locally.
@fxdgear ok gotcha. I'll update the documentation to point that out... thanks for the input!
@erichonkanen hey question I'm trying to get the unittests to run. but I'm running in to errors about

```
There is no South database module 'south.db.sqlite3' for your database. Please either choose a supported database, check for SOUTH_DATABASE_ADAPTER[S] settings, or remove South from INSTALLED_APPS.
```

South isn't in the installed apps :( Did you run into this at all?

**EDIT** well I can run the tests in Tox... so there's that :/
@erichonkanen I made this suggestion in my PR: https://github.com/GetBlimp/django-rest-framework-jwt/pull/94#issuecomment-88949043

maybe move the blacklist into it's own "subapp" so that the creation of the DB table doesn't happen by default, and it's only created when the `rest_framework_jwt.blacklist` is added to installed apps.
@fxdgear regarding the south error, I'm not sure what would cause that? are you running the ./runtests.py from within a virtualenv in /django-rest-framework-jwt/ ?

Regarding moving it into a subapp, I think that could be an option but id like to hear feedback from a few others first... As it is right now, the blacklist feature (and therefore the default implementation with the JWTBlacklist model) aren't installed/activated unless a user sets `JWT_ENABLE_BLACKLIST` to True (default is False).

Def open to more input

https://github.com/GetBlimp/django-rest-framework-jwt/issues/89
I can run the tests in Tox so doesn't matter much :/ but yes I was running `./runtests.py` in the virtualenv. I ran `python setup.py develop` and `pip install -r requirements.txt` to make sure that any missing requirements were installed. 

And I'm open to suggestions too. I just think that, even if the `JWT_ENABLE_BLACKLIST` is False, the DB tables still get created.
@fxdgear hmm yeah that's weird about the south issue.. 

I see what you mean, for some reason I was thinking they weren't created unless you added "rest_framework_jwt" to installed apps but yeah django just detects the models file and installs them... I think that would be fine moving it to a subapp
@fxdgear I updated this PR to separate the blacklist token into a subapp as you advised.. seems to work nicely. I also added a note to the blacklist section of the docs but if you have more informative verbiage I can add regarding SOA let me know and I'll update it.

@jpadilla this is ready to go whenever you get a chance to run through it... thanks!
Made updates, separated all blacklist related and tests passing...
@jpadilla resolved issues/merge conflicts, should be good to go... thx
@jpadilla do you have an estimate if/when this will be merged?
@avimeir @erichonkanen I'll try to review this and other pending PRs during this and next week.
@erichonkanen mind rebasing this again?
Shouldn't we just use `timezone.now()`?
I'm not really excited about introducing an optional requirement here just for a UUIDField. I think we can just simplify this for built-in Django 1.8 UUIDField and CharField for anything less.
ah yes, forgot about that one :) gets rid of pytz req
sounds good.. less dependency
does this doc need to be updated to point to the view as belonging to the blacklist app?
Would add something about significant overhead to query the auth service on every request to check if the JWT is blacklisted. (Which defeats the purpose of using JWT's anyway)
same about all these utils... should they belong in the blacklist app as well?
yes I will update that to make it clear
hm they could, although it might be easier to keep them grouped with the other utils(?) would like @jpadilla input on this
I think it does make sense to separate the views and utils into the subapp as well so its completely decoupled
:+1:
Yea I guess it makes sense for these to be separate as well.
Do we really need to keep `JWT_ENABLE_BLACKLIST` around or would just adding `rest_framework_jwt.blacklist` to `INSTALLED_APPS` implicitly mean you want to enable blacklist?
well, it is used in rest_framework_jwt/authentication.py and serializers.py to conditionally check for blacklisted token... I could check instead that the blacklist app is in installed_apps.. what do you think?
Shouldn't `BlacklistJSONWebToken` be under the `rest_framework_jwt.blacklist`? I think I'd prefer just checking if the blacklist app is installed.
yes `BlacklistJSONWebToken` is under the blacklist app but the actual checks for blacklisted tokens still occur inside the authenticate method in authentication.py and inside _check_payload in serializers.VerificationSerializer.

I agree we can drop that setting but I ran into an issue where the unit tests break. I changed the check within above files to be:

```
        if 'rest_framework_jwt.blacklist' in settings.INSTALLED_APPS:
```

But in the unit tests previously I was settings `JWT_ENABLE_BLACKLIST = True` for the blacklist tests. I removed that line and get an error now saying the blacklist app is not installed (error message from check in blacklist.serializers.BlacklistJSONWebTokenSerializer)

The blacklist app is installed in tests/conftest.py, how can I get it to work with the unit test?

Previously this is what a test looked like but now removed line for `JWT_ENABLE_BLACKLIST`:

```
class BlacklistJSONWebTokenTests(TokenTestCase):

    def test_blacklist_jwt_successful_blacklist_enabled(self):
        api_settings.JWT_ENABLE_BLACKLIST = True

        client = APIClient(enforce_csrf_checks=True)

        user = User.objects.create_user(
            email='jsmith@example.com', username='jsmith', password='password')

        token = self.create_token(user)

        # Handle blacklisting the token.
        response = client.post('/auth-token-blacklist/', {'token': token},
                               format='json')

        msg = 'Token successfully blacklisted.'

        self.assertEqual(response.data['message'], msg)
```
@jpadilla I just uploaded the change (tests broken) so maybe you can take a look? Im not sure why it's saying its not installed
Why the need for `staticmethod` here?
using a static method there allows defining [custom response_payload_handler](https://github.com/erichonkanen/django-rest-framework-jwt/blob/jti/rest_framework_jwt/blacklist/views.py#L14) on a per-view basis w/o having to completely [rewrite](https://github.com/erichonkanen/django-rest-framework-jwt/blob/jti/rest_framework_jwt/views.py#L31) the post() method and not binding the method which would cause the view object to be passed into the method. Since the data being returned by that doesn't depend on the view object and lives in the utils file, using static method there seemed like good use case (ran that by #python as well)..

tldr - it didn't work w/o redefining entire post method if I didn't use static method, saves some repeat
Possible suggestion: Move this long running refresh token into it's own subdir/sub-app. Like how DRF has done with `authtoken`. This would make using the long running refresh token optional, and not create a DB table if not necessary.
@fxdgear how is this different or better than the already existing `RefreshJSONWebToken` that was implemented a while back?
If the JWT expires in the current implementation then you have to sign in again. 

This will allow an app to be signed in "forever" without having to a) store the username/password and b) be online 100% of the time to keep the JWt active.
@fxdgear haven't forgotten about this. I guess the only thing this might be need is docs and perhaps separating it into a subapp like #91.
@fxdgear This branch has conflicts that must be resolved
closing in favor of #123
Damn, I think it's time we cleaned up requirements/supported versions a bit. Thanks!
@JocelynDelalande thanks!
@JocelynDelalande true that, I'd prefer to actually remove that `email` by default instead of optionally adding it, but to do that I'm thinking we need to deprecate it properly, since possibly any token out there would be invalidated by this change. I'm also wondering if we still want that `username` there as well by default. I think we should go with the minimum possible which in this case would be that `user_id` which we need for actual authentication.

Thoughts?
Thanks for quick answer :)

> @JocelynDelalande true that, I'd prefer to actually remove that `email` by default instead of optionally adding it, but to do that I'm thinking we need to deprecate it properly, since possibly any token out there would be invalidated by this change.

Yep, another thing, if Im not wrong (but i'm quite new at JWT things) is that clients can expect email to be in the token, so better deprecate it properly ; meanwhile, I think that my patch may do the job meanwhile. Sadly, there is no way to display a deprecation warning cause we don't know if the email included is used or not.

> I'm also wondering if we still want that `username` there as well by default. I think we should go with the minimum possible which in this case would be that `user_id` which we need for actual authentication.

The minimum requirement is the username (or at least, the one defined in `USERNAME_FIELD`), not the user_id (which defaults to `user.pk` in drf-jwt code) :

> Django expects your custom User model to meet some minimum requirements. 
> Your model must have a single unique field that can be used for identification purposes. This can be a username, an email address, or any other unique attribute. 
> Your model must provide a way to address the user in a “short” and “long” form. The most common interpretation of this would be to use the user’s given name as the “short” identifier, and the user’s full name as the “long” identifier. However, there are no constraints on what these two methods return - if you want, they can return exactly the same value.

(from [django docs](https://docs.djangoproject.com/en/1.8/topics/auth/customizing/#specifying-a-custom-user-model))
@JocelynDelalande I think instead of introducing this we might be better off introducing the deprecation warnings about the payload not containing all the same fields like now in a future release. We currently only use `user_id` to actually fetch the user, but I'm inclining more to remove that as well and only keep the `username` and the `exp` in the payload. Will then fetch users with `User.objects. get_by_natural_key(username)` were appropriate.

I think a general DeprecationWarning in `jwt_payload_handler` will do.

Also, for anything else, providing a custom `jwt_payload_handler` is pretty easy.
@JocelynDelalande check out https://github.com/GetBlimp/django-rest-framework-jwt/commit/816ac03629c5eca495b692f2813ae694a3c277fb
@jpadilla Seems pretty fine to me, thanks :). I added a comment on the commit.
@ticosax yeah, this looks right. thanks!
-1

This idea is useless
Not sure if useless, but not sure why you'd want this. Definitely sounds insecure.
@ticosax what exactly is your goal here? I would consider this an insecure practice. By allowing tokens that have already expire, you'll end up with many tokens(that have already expired) to be valid. You might also be interested in checking #94 out.
I believed it was the intended behaviour by reading the documentation.
I didn't plan to introduce a new flow to refresh tokens.
So I'm closing.
@ticosax working on something that is a bit related to this on https://github.com/GetBlimp/django-rest-framework-jwt/commit/48b2c086d71d485b75f100a83179324b7feb1ece and #101.
Thanks I will give it a try
@jpadilla I tested you current dev branch.
While It technically works well, it doesn't serve my needs.
Let me explain in detail:
The field I'm relying to perform user lookup is a `UUIDField`.
Following the intentation of the patch in dev branch, I define `USERNAME_FIELD = 'uuid'` on my User model.
 It means that from now on, every django app that will consume the `User` model will use `uuid` instead of `username`. The problem is that it doesn't work quite well with all the third party libraries I'm using (`python-social-auth` for instance),  because most of the time, `username` field is assumed to be a `CharField`. It means some libraries will try to create a `User` by providing `username` that is not suitable for `UUIDField`.

To recap, while it is working fine with drf-jwt, it doesn't play well with other third party libraries.
After reading this again I think there's still room for improvement here, probably by introducing an overridable function/setting that can change the current behavior in `VerificationBaseSerializer._check_user` and `BaseJSONWebTokenAuthentication. authenticate_credentials`.
@jpadilla cleaned commit history ready to go
Based on original discussion at https://github.com/GetBlimp/django-rest-framework-jwt/issues/89
@jpadilla Sorry to bother, but any ETA on when/if you're going to merge this?
@jpadilla lmk if this needs anything else...
@erichonkanen hey I still haven't had a chance to try this out completely. I'm having trouble of figuring out what would a real world scenario look like when building an app with this. Let's talk a bit more to figure out next steps.
@jpadilla sounds good, you can ping me on aim or just continue this thread, @avimeir if you want to chime in feel free...

One use case I can see is where you are using JWT for authentication but you also want to provide a way to forcefully disable/log out/unauthenticate a user. As you mentioned you could rely on short JWT expire times, but that might not be enough. I was particularly interested in building a client-side (ember) enhancement that allowed activity based logout where if a user was idle for X seconds, their jwt token was revoked (blacklisted) and they would have to get a new one to log in.

That was my initial thought, not sure what/how others are using it...
Also, this was largely influenced by https://auth0.com/blog/2015/03/10/blacklist-json-web-token-api-keys/
@erichonkanen yeah that'd be great, maybe we can come up with a useful demo.
@jpadilla @avimeir 

finally got a demo up...

https://jwtdemo-frontend.herokuapp.com/login

you can log in and click the blacklist button which should blacklist your token (logged in user). if you reload the page youll be logged out.. in real world the user may be force logged out etc... also in other app I tested it in when you try to hit any new resource endpoint it will also log you out

ps [refresher](https://auth0.com/blog/2015/03/10/blacklist-json-web-token-api-keys/)
@jpadilla have you had chance to look at the demo? thoughts?
closing this until it ever comes up again if ever...
Hi guys @erichonkanen, @jpadilla,

Was this feature ever implemented? I need it to implement logout on my app.
@erichonkanen have you had a chance to battle-test it? 
I'm really leaning towards using your implementation whether or not this PR was ever merged.

Thanks in advance!
@erichonkanen @dheavy This is a good feature, i read the comments and came to know that this was turned into a seperate 3rd party app but i couldn't find it or any instructions on how to implement this. 
 @jpadilla  Will you consider blacklisting tokens as an optional feature in the main app ?
hey, it's been awhile so I don't remember where this left off but feel free to take it on, the code should still be up in a branch
I had a look through the pull request from @erichonkanen and think it should be a solid base for a separate app. I'm going to see what I can do with it.

@dheavy - curious if you'd made progress?

Looking at the detail changes made to existing drf-jwt classes to accommodate the blacklisting, there aren't exactly clean points from which to extend the new blacklist related logic. I'm pretty sure this can be worked around in the short-term by duplicating a few methods from the parent classes.

A more elegant solution would be to add some more points of extensibility to this drf-jwt project. Given there are already quite a few PRs / Issues on this project, I expect that may take some time to incorporate.

Still it would see to be a way forward.
needs #118 to be merged first.
Then I'll rebase it.
@ticosax thanks for taking this over. I got really busy with work and haven't had a chance to pick this back up.
@fxdgear thank you for the implementation ! :smile:
@fxdgear please can you tell me what is the reasoning behind the unicity of app field ?

``` python
class RefreshToken(models.Model):
   app = models.CharField(max_length=255, unique=True)
```

I think it should be:

``` python
class RefreshToken(models.Model):
    class Meta:
        unique_together = ('user', 'app')
```

instead.
@ticosax oh you're right. It should be `unique_together`
@fxdgear Thank you for your answer. I  updated the PR to reflect the change
:+1:
I will rebase now #118 is merged
will come back in a better shape
@ticosax what if instead we did something like what `GenericAPIView` does providing `get_serializer()`, `get_serializer_class()`, and `get_serializer_context()`?
Sounds good. I'll work on it from next Monday.
I'll keep you updated.
@jpadilla 
I almost copy pasted the code from GenericAPIView. and provided `request` and `view` entries in context. May be you prefer I keep it empty like it is today ?
@ticosax that's fine by me, thanks!
@jpadilla does this seem like something you'd want to add?
@Jwpe wouldn't just setting `DEFAULT_RENDERER_CLASSES` work? You can also do something like:

``` python
urlpatterns = [
    url(r'^api-token-auth/', ObtainJSONWebToken.as_view(renderer_classes=[CustomRenderer]),
]
```
@jpadilla the first suggestion wouldn't work, unfortunately, because the `render_classes` on the base view is hard-coded as `rest_framework.renderers.JSONRenderer`. It could be made to work if that was changed just to use DRF's `DEFAULT_RENDERER_CLASSES` - might be preferable to a specific setting just for this.

The second way does work, but in my mind it's less elegant than permitting a global setting. It requires importing the view and the custom renderer into your `urls.py`.

Maybe a good middle ground would just be changing the base class to have:

``` python
from rest_framework.settings import api_settings as drf_api_settings
...

class JSONWebTokenAPIView(APIView):
...
renderer_classes =  drf_api_settings.DEFAULT_RENDERER_CLASSES
```
@Jwpe I'm thinking `parser_classes` and `renderer_classes` are better off removed. It'll just default to whatever you set on your DRF settings. Thoughts?
@jpadilla that totally works. It would be a lot simpler. If you like I can change the PR to reflect that?
@Jwpe that'd be great, yeah!
@jpadilla modified this and rebased to take out the irrelevant changes I made before.
@Jwpe thanks!
@ticosax thanks!
This looks really good, guys. `api_type` and `grant_type` aren't used anywhere really. Wondering if that would actually introduce more confusion, thoughts?

Should we keep around our current refresh feature or should this simply replace that and be the preferred way for token refresh?

As with #123 it'd be great if we could chat and figure out if we can come up with a demo for this feature.
@jpadilla so I think that both have a usecase. 

In the sense of a browser, the refresh token that exists currently is a better option. 
In the sense of a native app this long running refresh token is a better option. 

The idea is that a browser shouldn't be storing the refresh tokens (imo). And similarly a native app should NOT be storing a users password.
I think the current refresh feature would still be useful for certain applications but we should make sure to distinguish the two in the documentation

One thing that's bugging me is, should we consider an option to set expiration time on these tokens? (e.g. 14 days or something). One application I was thinking this refresh token would solve (and the existing one does not) is emulating browser sessions and keeping a user logged in (even if they haven't checked in in a while). But storing an permanent refresh token isn't that appealing.
I would recommend NOT using this for browser sessions. This would require the browser to store long running refresh token. Which imo is a bad idea. 

This is more useful in the case of an iPhone app or a native app or some sort of CLI interface.
Yes that's true, XSS would be an issue. This would be indeed be very useful for mobile/native apps though. 

What do you think about an optional expiration time though?
@alvinchow86 Expiration can be implemented by deleting the `RefreshToken` with a celery-beat cronjob or any equivalent task scheduling system.
@jpadilla `api_type` and `grant_type` are not used, I agree. I blindly followed the spec https://auth0.com/docs/refresh-token .
To be honest I do not know what is better to do here, either we:
- use those fields, but how ?
- remove those fields.
- keep it like that.
Will this be merged soon?
hey btw I made a demo for the [blacklist](https://github.com/GetBlimp/django-rest-framework-jwt/pull/115) token feature, maybe it could be used as the general demo for this app if one doesn't exist already? lmk if anyone wants to access it (uses ember-cli on frontend) https://jwtdemo-frontend.herokuapp.com/login
I honestly think that this would make a great third party package on its own. It's more ambitious than what this package was meant to be. If @ticosax or anyone wants to pick this up go right ahead. Also living apart will help with maintenance. Thanks to everyone who worked hard on this.
Fair enough.
I will post here the link to the new project once it is done, for the record.
https://github.com/lock8/django-rest-framework-jwt-refresh-token
https://pypi.python.org/pypi/djangorestframework-jwt-refresh-token

Thanks again @fxdgear !
@ticosax awesome!
:+1:
On Thu, Jan 28, 2016 at 7:11 AM José Padilla notifications@github.com
wrote:

> @ticosax https://github.com/ticosax awesome!
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/GetBlimp/django-rest-framework-jwt/pull/123#issuecomment-176229367
> .
This project is pretty much the de facto standard when using JWTs with the Django rest framework. @jpadilla Can I ask why this was decided to be split into another project when refresh tokens seem to be a major part of using JWTs? Especially when most articles and stackoverflow answers recommend using them? I feel that this split will cause the new package to gain far less exposure, which is so critical with security applications.

Does anyone know if DRF is thinking about natively supporting JWTs?
I agree with @Darkman
Would probably be best to squash these migrations?
Yes, but I would like to do it once @jpadilla considers it ready for merging. Just in case some amendments are still necessary on the Model.
I will add it in the description as a reminder.
:+1:
@resalisbury not 100% sure about removing all of them. Setting `permission_classes` and `authentication_classes` to `()` seem sensible to the default use case. If you set your DRF default settings to require authentication, then you'd have to be authenticated beforehand to obtain a token.

Overriding `throttle_classes` and setting it to `()` on the other hand _could_ be dangerous as user might have expected their default throttling settings should affect this endpoint as well.

I'd accept just removing `throttle_classes`.
sounds good to me!
@resalisbury thanks
Now, how can i add a throttle class?
+1
+1
Closed via 6d8614268d60f894dad026b5603c8a2fefc35e2f.
Closed via 6d8614268d60f894dad026b5603c8a2fefc35e2f.
@soichih I think I'd prefer adding two different settings for this. Don't really like the idea that `JWT_SECRET_KEY` can be two different types. Perhaps adding `JWT_PUBLIC_KEY` and `JWT_PRIVATE_KEY`.

We'd also probably need to assert that the correct `JWT_SECRET_KEY` is used for symmetric algorithms and `JWT_PUBLIC_KEY`/`JWT_PRIVATE_KEY` are used for asymmetric algos. Thoughts?

Also, we'd definitely need some tests around this.
@jpadilla in lieu of keeping track of which algorithms are asymmetric, would it be acceptable to default to the public/private keys if they are set and fall back to the secret key?

``` python
jwt.decode(payload, api_settings.JWT_PUBLIC_KEY or api_settings.JWT_SECRET_KEY, ...)

jwt.ENcode(payload, api_settings.JWT_PRIVATE_KEY or api_settings.JWT_SECRET_KEY, ...)
```
I think #200 supersedes this.
@jsenecal thanks!
@mikebiglan thanks! I wonder if this would work as well.

``` python
from distutils.version import StrictVersion

import rest_framework
from django.forms import widgets
from rest_framework import serializers


if StrictVersion(rest_framework.VERSION) < StrictVersion('3.0.0'):
    class PasswordField(serializers.CharField):
        widget = widgets.PasswordInput
else:
    class Serializer(serializers.Serializer):
        @property
        def object(self):
            return self.validated_data

    class PasswordField(serializers.CharField):
        style = {
            'input_type': 'password'
        }
```
It's likely that would work fine and be cleaner. My only reason for putting the import mid-file like that was to prevent breaking compatibility with DRF versions older than 3.0.0. That said, it looks like the travis tests cover all the permutations of supported DRF versions, so if this is passing the tests, it would be much cleaner to move it up. I'll try that now and re-push!
@JocelynDelalande thanks!
Hey @chrisjones-brack3t, I'm just catching up with this now. Definitely looks like an interesting improvement and inline with keeping things flexible enough. Backwards compatibility would definitely be important to keep in mind.
This would be a welcome enhancement. Any update on this?
Closing this for now.
@diegueus9 thanks!
Ok I amended this commit to fix the rst formatting.
@Alex3917 thanks!
Not merging this since it might complicate maintenance a bit.
Instead of this, I'd consider adding a handler like `JWT_ENCODE_HANDLER` that was for extracting the token, defaulting to the current behavior.
@kumar303 thanks for this. I think we should just probably link to whatever Django REST framework's contributing guidelines are, as we follow those closely.

http://www.django-rest-framework.org/topics/contributing/
https://github.com/tomchristie/django-rest-framework/blob/master/CONTRIBUTING.md
Yes, a link to those docs would have been helpful to me.
While this seems to be a valid enhancement the idea for using Django's `authenticate()` was to allow you to use already known authentication backends to do things like allowing user's to authenticate with either an email or a username.
You could add a whole new authentication backend for your entire application, sure, but it seems a lot simpler and neater to handle it here. In my specific case I was going to lookup the user from their given email, then call super() with the users username and the password they gave.
Closing this for now.
This failed all the tests, and I think that is a better place emit the signal in the method authenticate of the authentication backend, like I did in PR #171 instead of the serializer like you did in this commit.
Closing in favor of #171
@diegueus9 thanks
@diegueus9 Excellent work.

@jpadilla Any idea as to when will this be included in the pypi package?
I do not think that the authenticator is the appropriate place to emit this signal.

If we take ordinary Django session authentication (e.g. Django admin), it looks like:

```
user logs in  ->  signal emitted
user access resource (page)
user access resource (page)...
user logs out
user logs in  ->  signal emitted
```

With this change, the module looks like this (unless I got it wrong):

```
user obtains token
user access resource   ->  signal emitted
user access resource   ->  signal emitted...
token expires
user obtains token
```

I would expect it to look like this:

```
user obtains token   ->  signal emitted
user access resource
user access resource
token expires
user obtains token   ->  signal emitted
```
I think @bluetech brings up a good point. Anyone else care to comment? Want to put a PR together?
@jpadilla I think it would be a better idea to emit the signal from the validate function of the JSONWebTokenSerializer class because there is where  the log in event occurs actually, what the current PR does is trigger the logged_in signal everytime the JWT token is verified (which is equivalent to trigger the signal for every request).
@georgerb want to put a PR together?
@jpadilla Of course, but right now the project tests fails by default, do you have a contributors document or something? Cause I faced another issue trying to install one of the requirements (oauth) on python 3.4, apparently they aren't compatible with Python 3 yet.
@georgerb oh yeah, let me get those fixed first.
@georgerb good to go https://travis-ci.org/GetBlimp/django-rest-framework-jwt/builds/99604454
Awesome, once I finish something in my job I will fix my tests and submit the PR with their proper tests. Thank you pal!
There's something that I don't understand. If the signal is emitted when django calls the authenticate method in the custom authentication backend why in this case is different from the normal django way?
@diegueus9 the `user_logged_in` signal is actually fired by Django on the login view not in an authentication backend. In our case we're currently(since this PR) emitting the `user_logged_in` signal every time our DRF authentication backend authenticates a request. To mimic what Django is doing we need to emit the signal once the user exchanges credentials for a token. Makes sense?
If I understand correctly, the right moment to emit the signal is in `JSONWebTokenSerializer.validate`, after the code calls the `authenticate` method from `django.contrib.auth` because in that moment the engine will use a pair username, password instead of the current line in this PR because that code it will be called everytime a token is validated, right?
@diegueus9 yup
Then it's make perfect sense.
@jpadilla I think, the signal should be put out of both the authentication classes and serializer. The serailizer can be used at various occasions and emitting user_logged_in signals during all those cases may not be always desired. Maybe it should be left to the developers to decide when to emit this signals. 

But if we had to emit a signal in the first place, ObtainJSONWebToken view maybe the right place. Comparing to any login view we generally use in Django, where the given credentials are verified and the user is logged in --> session created for further use + signals sent, the ObtainJSONWebToken can be a place where we send the signal: the credentials are verified and the user is logged in (not really)  --> token created for further use + signals sent. Still, I think leaving the user_logged_in signal usage in case of django-rest-jwt to the developers is the best.
@YX4iHsvP thanks
Thanks
@jpadilla can this be merged?
@blaklites thanks
:)
Hi, we are looking to implement this fairly soon. What is the likelihood that this (or another solution) can be merged soon?
@willseward looks good. I'd love a simple test mostly to demonstrate usage. It'd also be helpful to document what would happen if a symmetric algo is set, say we left the default, but added public/private keys.
No problem, I'll write up some tests. 

Good point about the symmetric algo. Do you think validating the settings would be sufficient?
@willseward Not sure if there's anything to do really, let's see if the underlying PyJWT library raises something useful in that case.
Looks like it throws a `TypeError: Expecting a string- or bytes-formatted key.` I'll put that in the docs.
Travis is failing because of a freezegun issue. I had to upgrade the library for it to run on 2.7, but it evidently doesn't like 3.3 or 3.4. I'm happy to revert that dep upgrade; I just need to ask if you have run into this before.
It appears that cffi from the crypto lib is interfering with freezegun. Any opposition to restructuring the tests to run the RSA tests last and without freezegun? I'll be sure to document why.
@willseward Sure, let's see what that looks like and see if it fixes the issue.
Tests are passing. How does that look to you?
What about merging it into master branch? I've done it in my fork and it works perfectly.
@willseward Any chance you could update this to the latest `master`? Thanks!
It's not my call.

@jpadilla How does that sounds to you?
@willseward @carltongibson let's move forward with this. thanks!
@willseward We can't merge it unless it's updated. (There are conflicts, probably small)
I saw conflicts only in `tox.ini` file.
Oh, sorry @carltongibson, I misread your comment. I'll rebase to master
@willseward Nice addition. Great work. Thanks!
Hi,
I'm still getting this error:
TypeError('Expecting a string- or bytes-formatted key.')
It seems that the key is getting to the def prepare_key(self, key)
in a tuple form: ('KEY',). and not as string as it should be.
@SagiMedina Can you post the relevant section of your `settings.py`?
@SagiMedina do you use package from `master` branch? Public/private keys support is not released in PyPi yet.
Sorry, My key var was not saved properly in the env config file.
Thanks anyway 👍
When it will be released on PyPi? Milestone for 1.9 is not contain any another issues for this moment.
@jpadilla what do you think about this fix? Can we merge this?
@blaklites I don't think this is quite right yet. We'd need to handle both cases in the authentication and serializer. If using `JWT_PAYLOAD_GET_USER_ID_HANDLER` do left, if using `JWT_PAYLOAD_GET_USERNAME_HANDLER` do right in [this](https://github.com/GetBlimp/django-rest-framework-jwt/commit/a3b4d44d2fc34d7752793ccbade2684707bf41da) diff. Makes sense?
Ah ok, got it....I will try to come up with the needed solution
@dfeinzeig while this seems like a nice addition, it's too specific, I'm gonna have to pass for now.
The emailusernames package was a de facto standard before custom user
models. I suspect others can benefit from this as well, particularly for
projects that have been around for a while.
On Feb 20, 2016 4:49 PM, "José Padilla" notifications@github.com wrote:

> Closed #206
> https://github.com/GetBlimp/django-rest-framework-jwt/pull/206.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/GetBlimp/django-rest-framework-jwt/pull/206#event-557830789
> .
@cancan101 thanks!
I'm not sure what happened in this discussion, but is it possible to apply the enhancement already?
Trying to revamp this, @hugobrilhante would you mind to rebase from this git master and update the branch github shows "unknown repository" ?
@angvp I somehow deleted the repository I tried to revert but I could not.
@hugobrilhante 
https://help.github.com/articles/checking-out-pull-requests-locally/
We can rewrite this section as:

``` python
serializer = self.get_serializer(
  data=get_request_data(request)
)

serializer.is_valid(raise_exception=True)
user = serializer.object.get('user') or request.user
token = serializer.object.get('token')
response_data = jwt_response_payload_handler(token, user, request)

return Response(response_data)
```
@marsam ace, thanks!
fixed by https://github.com/GetBlimp/django-rest-framework-jwt/pull/224
I'm still not sure about this. I keep thinking there's a possible security issue allowing this. @tleguijt where was the original discussion, can't seem to find it.
+1 about security issue. If the user attempts to refresh with an expired token that should result in a forced re-login (invalid refresh); they should be forced to resend their credentials to obtain a new token. Else the whole idea of refresh becomes pointless.
@jpadilla I've linked the discussion in my first comment.

I share your doubts about security, still, I tend to think this should be the intended implementation;

> A refresh token allows the application to request Auth0 to issue a new id_token directly, without needing to reauthenticate. This works as long as the refresh token has not been revoked.

from https://auth0.com/docs/refresh-token
and

> IMPORTANT ADVICE: obtaining new tokens using the refresh_token should happen only if the id_token has expired. For example, it is a bad practice to call the endpoint to get a new token every time you do an API call. There are rate limits in Auth0 that will throttle the amount of requests that can be done using the same token from a certain IP to this endpoint.
That documentation is talking about long-time refresh tokens, a special extra token. To make it more secure a long time refresh token should be generated to allow a user to refresh and fetch a new short-time token after it has expired but checks the expiration of the long time refresh token instead
I'm jumping to advertise the existence of such application. https://github.com/lock8/django-rest-framework-jwt-refresh-token
typo : `expiratoin` -> `expiration`
@mkozmin thanks!
Any update ? Is there anything missing that I could do to make progress on this PR ?
Thanks
Dropped support for Django < 1.8 in tests since master will no longer support Django < 1.8 ( #224 )
@PierreF Can ou update this to latest `master` please? (#224 is merged). Thanks!
Rebase on master done
you can drop this as master branch is dropping django <1.8 an a PR is open
I'm all for this. I'd say you can be bolder, dropping support for Django 1.6 and 1.7 — and remove those from travis. 

What about DRF 2.x? Anyone still on that can stick to the existing version of JWT. Discuss.

After that it's just ripping out the unneeded stuff from compat.

@mblayman: are you up for adding those further changes?
Sure, it's be happy to make changes. Anything that helps get:

```
-e git+https://github.com/GetBlimp/django-rest-framework-jwt@master#egg=djangorestframework_jwt
```

out of my `requirements.txt` file is good news for me.

I agree with dropping Django 1.6 and 1.7 since they are no longer supported by the Django project itself. I'm fairly new to DRF so I can't really speak to dropping DRF 2.X or not.
@jpadilla What say you sir? 

Shhhh... I think [he already said yes to this](https://github.com/GetBlimp/django-rest-framework-jwt/issues/216#issuecomment-194245923) 🙄
Yeah, I'm all for dropping Django 1.6 and 1.7 as well as dropping DRF 2.X.

@mblayman @carltongibson thank you!

![yeah](https://media.giphy.com/media/RrVzUOXldFe8M/giphy.gif)
I think this PR is ready for review now. I cleaned out the `tox.ini` and `.travis.yml`, removed the unneeded stuff from `compat.py`, and updated the documentation to drop references to Django 1.6, Django 1.7, and DRF 2.4.
looks good to me. but should drf 3.0 and 3.1 needed to be supported ?or should be kept for some time more?
Did I make a mistake? The only 3.0 and 3.1 stuff that I removed in the test matrix was when it overlapped with Django 1.6 or Django 1.7.
Good work! Thanks!
Ah, i see. I will have to follow up on this tomorrow.
I think this PR can be closed now.
Yep. Great.
@shanemgrey Sorry `dev` is a stale branch. Can I ask you to make this against `master`. Thanks!
@shanemgrey thanks!
Small nitpick in all three cases. `UserSerializer(user, context={'request': request}).data`
Sorry.  I should have looked at the convention you were using for trailing comma before using my convention.  Thanks for taking the PR!
Awesome. Thanks fir the effort. And the persistence! 😃
@glarrain sure, thanks! There are some tests that are failing, other than that, this lgtm.
Fixed in 7080014.
@mathiasose thanks!
This looks great. +1

Not sure what's going on with the `response.data['user']` check. Doesn't seem relevant. @jpadilla?
@mblayman great stuff! What do you mean "That data did not exist under 1.10..."? That assert is just to make sure what's expected after setting a custom `JWT_RESPONSE_PAYLOAD_HANDLER` in that test's `setUp()`.

@carltongibson thanks for checking this out.
I see what you mean now with that assert failing after seeing this https://travis-ci.org/GetBlimp/django-rest-framework-jwt/jobs/156378076
@jpadilla I looked more closely based on your comments and can now see that deleting the assert for that custom payload handler test was the wrong thing to do. That user data should be there. I'll check if DRF is somehow ignoring the settings change that is done in the `setUp` and add the assert back.

I'm traveling tomorrow so I might not get to this for a couple of days.
I couldn't sleep so I found the problem. The custom handler function is stored in `views.py` at module level scope. Since the module is already imported, the `jwt_response_payload_handler` in `views.py` is basically locked to whatever the value of `api_settings.JWT_RESPONSE_PAYLOAD_HANDLER` was at module load time.

The `setUp` method changed `api_settings` and that had no effect on the value of `jwt_response_payload_handler`.

My guess is that `APIClient` changed something about how it loads the views so that it no longer worked when settings were changed (it smells like a caching change to me).

My fix works by hotswapping the module level variable in `setUp` and restoring it in `tearDown`. I chose this route because the project does not use `mock`, and I didn't want to pull that in as a dependency.
I think using [override_settings](https://docs.djangoproject.com/en/1.10/topics/testing/tools/#overriding-settings) is the right approach here.
@carltongibson I'm not clear how `override_settings` could work in this case. Here's the sequence I see:
1. The `views.py` module is loaded when testing starts and sets the handler function to the function defined in `api_settings` (https://github.com/GetBlimp/django-rest-framework-jwt/blob/master/rest_framework_jwt/views.py#L11)
2. The customer payload test `setUp` changes the settings value (https://github.com/GetBlimp/django-rest-framework-jwt/blob/master/tests/test_views.py#L56).
3. The test executes a POST and hits the view's `post` method which invokes the handler (https://github.com/GetBlimp/django-rest-framework-jwt/blob/master/rest_framework_jwt/views.py#L59).

In that sequence, I can't see how changing the setting with `override_settings` would solve the problem. Am I missing something? Is there something inappropriate with hotswapping the module variable?
Argh.  You're right. It's setting the value at import time that does it.

It would need a bit of a jiggle round.
With the tests passing, I'm not sure there's anything left to do for this PR. Any chance of getting it merged and cutting a release? I'd love to get my projects upgraded to 1.10.
@mblayman @carltongibson awesome, glad you figured it out! I'll do a final review on Tuesday to cut a release early in the week. Thanks again for the great work.
Reason why I haven't released this yet, Travis is reporting some errors. Any help debugging those would be amazing.
@jpadilla That's really odd considering the build was green before the merge. The broken builds seem to be related to Python 3.3 and a `cryptography` import error. Did you try a rebuild of master on Travis already? Seems to me like a busted tox environment.
@jpadilla Did you get a chance to try a rebuild of master on Travis?
So I'd like a new release with 1.10 support as well. That being said, when I look at 
https://travis-ci.org/GetBlimp/django-rest-framework-jwt/jobs/160398572
it says it fails because there are too many blank lines
When I look at the failing commit
https://github.com/GetBlimp/django-rest-framework-jwt/commit/4c8140e687ea535d1304d3bab9966912e7fe22c3
I see there are 2 blank lines at line 30-31. Probably line 31 needs to be deleted. Line 33, which is also blank, could probably be dropped as well.
@nicholashughes the job you referenced is for a recent Pull Request, not for the latest master build. The last master build is failing for the reasons I documented earlier related to `cryptography` (see https://travis-ci.org/GetBlimp/django-rest-framework-jwt/builds/158195937 and https://travis-ci.org/GetBlimp/django-rest-framework-jwt/builds).

My guess is still that the problem is a bad virtualenv and would work with rebuild. Unfortunately, I do not have permissions to trigger that rebuild to confirm or deny my theory.
Oh! Dang. Yeah I just clicked on the Build Failing link in the docs and that's what I saw.
Test is failing for the same reason as in #256
I see that but I didn't have time to investigate why it is happening. I see that my PR and #256 at the end will do probably the same except that in #256 Django 1.10 is also tested and there are some specific fixes for it.

Probably I need to open new PR only for documentation fix (remove `patterns()` from there) and leave other changes to be implemented in #256.

In my opinion #252 is not a good approach for fixing it and #256 need to be way to go.
Closing it because it got no interest from the maintainers.

Note to the maintainers: Please drop some feedback to ALL the PR that you have open, merge, reject them or whatever but give feedback, the standby status is the worst part.
@angvp definitely interested, just a bit caught up in work. Should be able to catch up with issues and pull requests for this project soon. Thanks for the reminder.

As a note, anyone that wants to step up and help out with maintenance will be greatly welcome.
Count me in!
@angvp awesome, thanks! just sent out an invite. Unfortunately Travis CI is still having issues after AWS outage so I can't see what's failing now here after my resolve. Will wait it out.
@jpadilla Can you re run travis on this pr? thanks!
@angvp green :)
Just released this under [v1.10](https://github.com/GetBlimp/django-rest-framework-jwt/releases/tag/1.10.0). Thank you @angvp!
JWT_EXPIRATION_DELTA - 5 mins
JWT_REFRESH_EXPIRATION_DELTA - one week

I got the token and after 20 mins I tried to refresh the token I got this error.
 {
    "non_field_errors": [
        "Signature has expired."
    ]
}
**In general we should be able to refresh the token upto one week.**
What is the issue ?
@karesh only **non-expired** tokens can be "refreshed" so you should refresh your token before JWT_EXPIRATION_DELTA. So every 4 minutes for example.

And you could refresh the same token during JWT_REFRESH_EXPIRATION_DELTA  (one week). After even if you refresh every 4 minutes, it wont works.

get token -- refresh 4 min after -- refresh 4 min after -- .... -- one week -- :boom:  need a new token
I don't know why this PR is not still merged
@jpadilla thank you
Hey there, just a ping, can these changes be merged?
Hey @shanx thanks for this PR, sorry it took to long to review it, seems reasonable and useful to me.

@jpadilla since this PR is old want you to have the last word before merge it, :).
@jpadilla, I think this branch helps confirm my theory that master was breaking because of some weird transient error with `cryptography`. This branch makes no changes to any code and tests _more_ than master so I think it's reasonable that the broken master problem is "solved."
@mblayman thank you so much for looking into this and getting it done!
Sweet! Glad to help.
+1 for this
any idea when this will be merged?
@jorrit-wehelp i've tried your repo with this pull request. but i am still getting `Refresh has expired.` error.
Following is my setting.

```
'JWT_EXPIRATION_DELTA': datetime.timedelta(seconds=7200),
'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=7),
```
👍
@kodeine This pull only avoids the 'Error decoding signature.' error.
With this pull request the 'Refresh has expired.' is only thrown when 'orig_iat' field (original issued at timestamp) is expired. 
But do note that the 'orig_iat' field is not updated/changed when a new token is generated during refresh...
so orig_iat field functions as a kind of maximum reuse bound for the session...
Not what many people would expect from 'refresh tokens functionality', but it's another issue that I left out of this pull request.
This would solve issue #92
:+1:
https://github.com/GetBlimp/django-rest-framework-jwt/pull/348 is meant to update this.

Do you agree?
Yeah, agree. This pull is old and now has merge conflicts. Superseded by #348
Any plans for this to be included in a release?
@jpadilla ^ ?
I'm personally against including this, as storing a JWT in a cookie kind of defeats the point of using a JWT. It's usually an either-or situation, JWT's get around some of the limitations of cookies.
@orf As mentioned by someone else on issue #120, the JWT spec doesn't mandate a specific transport for the token, and it's left open so you can use whatever transport makes sense for your application. Yes, the most common way to transmit the token is in the Authorization header, but JWT's are way more about signing and validating the claims than the transport used. The transport is largely irrelevant (hence, barely mentioned in the spec as a secondary matter), and supporting cookies as a transport makes sense for applications that have to interface with other backends that only support cookies  but support some sort of auth gateway plugin (such as nginx http auth). I've described my use case in detail on issue #120 that I won't repeat the specifics here.
@orf Heh, re-reading issue #120 I see on April last year you seemed to have a clear use case for this (similar-ish to mine). If this were a largely invasive PR I think it'd make more sense to have it as a separate package, but I don't think we want to end up as the nodejs community with 3 line packages, do we? ;)
That's a good point, I forgot about that! We worked around that issue, but I guess the use case is valid in some cases. @jpadilla what do you think?
Thanks for bumping this and the reminder. After reading through #120 I think we can just merge this in.

@moises-silva thanks for putting this together. The only thing we're probably missing here are a few tests to avoid breaking support in the future.

As a quick note, anyone that wants to step up and help out with maintenance will be greatly appreciated.
@jpadilla Thanks, I'll see if I can put some tests together next week and submit a new PR for those.
@moises-silva sounds good, will merge this now, thanks again!
Awesome! thanks @jpadilla and @moises-silva
Just released this under [v1.10](https://github.com/GetBlimp/django-rest-framework-jwt/releases/tag/1.10.0). Thank you all!
@jpadilla what do you think about this?
Thank you!
@leonardoarroyo thanks!
I like the idea of passing in `request`, but there might be a better way to support both function signatures?!

Also: needs to be rebased.
Thanks for considering my pull request. I've rebased it with the latest master. I also changed the signature check method from catching the TypeError exception to actually inspecting the code object to see how many args it takes.

I initially wrote it to support both signatures because I'm sensitive to the fact that it's a breaking change. But maybe it's best to take the breaking change?
I may reopen this once I get legal ok from my employer.
@matthewhegarty thanks!
Just released this under [v1.10](https://github.com/GetBlimp/django-rest-framework-jwt/releases/tag/1.10.0). Thank you @matthewhegarty!
@rriehle thanks!
Just released this under [v1.10](https://github.com/GetBlimp/django-rest-framework-jwt/releases/tag/1.10.0). Thank you @rriehle !
@sumittada thanks
Just released this under [v1.10](https://github.com/GetBlimp/django-rest-framework-jwt/releases/tag/1.10.0). Thank you @sumittada!
Ooook, so there's a problem with travis, you can either have a 3.5 or a 3.6 environment. But then again I didn't work with it extensively.

The good news is that the tests pass with 3.6, but please don't merge until we figure out how to set up travis (I'll check DRF again).
This was the DRF PR that added Python 3.6: https://github.com/tomchristie/django-rest-framework/pull/4811 — you basically have to specifically `include` the extra environments. 

Personally I don't like this: you end up duplicating the `tox` config in the travis config, so every time you make a change you need to make it in both places. 

For https://github.com/carltongibson/django-filter/pull/631 I'm looking at using docker with the required Python versions pre-installed so I can just use tox (as we have been doing until hitting this problem). It's a little bit slower currently, because the caching needs tweaking, but it works. You might want to look at it.
Any updates here?
Been way to far from this recently. Won't have time to dive back in for a couple of weeks, feel free to take over.
For reference, tox-travis might be an option: https://github.com/carltongibson/django-filter/pull/651/files.
Thanks, continued in https://github.com/GetBlimp/django-rest-framework-jwt/pull/371.
Goal is to allow secret to be kept on user level, so in case of user token being compromised I don't have to logout everybody by changing secret, I can only change secret on this one person. It also allows to force logout on all devices (by user) or to log out when changing password.
Is there any advantage to using a secret over a DateTime field, and just not accepting tokens issued before the stored date if there is one?
@Alex3917 that would be also a  pretty good way to solve the issue however in my use case the date or the token needs to be stored in the user model because I want to simply invalidate one user tokens. 
Also, using a date that human can edit would be a bit dangerous. A mistake in changing the date could result in setting in future so the user would not be able to use the app until that date passes - debugging that could be a real pain. Probably to implement this safely it would require some button on user profile in admin, like reset JWT tokens or sth, that would set this DateTime to now(), instead just simple field with string.
I'll give it thought. Glad you like it.
@angvp thoughts on this?
@jacoor 

Yeah that's how I do it currently, in terms of storing a datetime field on the user model and just setting it to timezone.now() whenever a user changes their password. Then I just validate it like this:

```class CustomJSONWebTokenAuthentication(JSONWebTokenAuthentication):
    """ Expire token on password change and force user to re-authenticate. """

    def authenticate_credentials(self, payload):
        user = super().authenticate_credentials(payload)

        orig_iat = int(payload['orig_iat'])
        password_last_changed = int(format(user.password_last_changed, 'U'))

        if orig_iat < password_last_changed:
            msg = 'Users must re-authenticate after changing password.'
            raise exceptions.AuthenticationFailed(msg)

        return user
```

I haven't run into any bugs with this, although I guess if this is part of a library that's going to be deployed in environments where server times could be out of sync or whatever then a uuid is probably more robust. (I personally like having the data about when users last changed/reset their passwords though.)
I agree with @jpadilla here, if you can get rid of that duplicated settings for auth model and use the method get_user_model [0] instead would be better.

[0] https://docs.djangoproject.com/en/1.10/topics/auth/customizing/#django.contrib.auth.get_user_model
@jpadilla @angvp thank you for pointing me to the fix. Updated, tests passed.
@remik please keep an eye on this too. We can remove our fork from projects when this is merged.
@jpadilla @angvp any chance of merging this to master soon?
Thanks!
@jpadilla I've reviewed and I'm ok to merge it, wanna do it and create the release on PyPI as well? :-) Thanks!.
Merged, please @jpadilla let us know when you build a new release :D
Great! thanks!
Just released this under [v1.10](https://github.com/GetBlimp/django-rest-framework-jwt/releases/tag/1.10.0). Thank you all!
I like this a lot. I'm wondering if we could get rid of `JWT_AUTH_USER_MODEL` and just use `get_user_model()` where possible like we're already doing. Thoughts?
Any reason as to why remove this?
Thoughts on sending `unverified_payload` completely to `jwt_get_secret_key` instead of just the `user_id`?
Ee should not it be only mentioned in line 276? it is above.
@jacoor you're right, thanks!
good one. I'll fix.
Fix implemented, @jpadilla.
Thanks for pointing this out.
@brianrower this looks good to me, thanks! 🎉 🎆
@orf ace, thank you very much!
This PR is breaking the tests, would you mind to fix it?
Sure.

But it looks like `verify` is not actually deprecated for `PyJWT.decode`, but only `PyJWS.decode`.
Let's wait on the outcome of https://github.com/jpadilla/pyjwt/pull/271.
@blueyed can you still check this out, if not I can take over. Looking to release a new version today.
With https://github.com/jpadilla/pyjwt/pull/271 there are no more deprecation warning here, so this can be closed.
Ace, thanks!
forget it.
@jacoor 
Looks like you have accidentally pushed this here instead of your private repo?

In case you are still using it yourself, you might actually want to bring it upstream after all?!
Well, owner of the library decided they don't want to use permanent tokens. Instead, we created our own lib which extends functionality of this library using it as dependency. 
The PR here is a test PR that's why it was closed.
If you are interested in our lib: https://github.com/ArabellaTech/drf-jwt-devices
Thank you.

I can be rebased now since tests in master are fixed.

And it should have a test by itself then.
changes are in: 
https://github.com/GetBlimp/django-rest-framework-jwt/pull/374
1. s/you'd/you/ ?
2. use https for the link?!
@blueyed thank you so much for getting to this! How do you feel about write access to repo? Always welcome as a collaborator 😃
@jpadilla 
Sure.. :)
@jpadilla 
Thanks!
btw: I do not have permissions to restart Travis jobs - maybe you should create / use an organisation to handle this across different services?!
@blueyed thank you dude! Check on the Travis thing now. Will update in a bit.
@jpadilla 
Thanks, I could restart https://travis-ci.org/GetBlimp/django-rest-framework-jwt/jobs/275972482.
Should I go forward with adding a test here?
@jpadilla 
Added a test, please review.

Should this be documented?  Where (in general, and for the changelog)?
@blueyed I failed earlier on keeping an updated changelog so I've been just doing so on each release https://github.com/GetBlimp/django-rest-framework-jwt/releases
👍 Some tests for this would be a good idea.
See the report at: https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/382/tree

I would like to have this before doing any other cleanup.
Regarding those oauth tests and what not, I'd say we get rid of them. If I recall we just had those after #4.
@jpadilla 
Can you please activate/install the codecov integration on https://codecov.io/gh/GetBlimp/django-rest-framework-jwt?
@blueyed done!
# [Codecov](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/382?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@6b01b47`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/382/graphs/tree.svg?width=650&height=150&src=pr&token=P4NPsfXL4a)](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/382?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #382   +/-   ##
=========================================
  Coverage          ?   90.62%           
=========================================
  Files             ?       14           
  Lines             ?      843           
  Branches          ?       29           
=========================================
  Hits              ?      764           
  Misses            ?       66           
  Partials          ?       13
```

| Flag | Coverage Δ | |
|---|---|---|
| #codecov | `90.62% <ø> (?)` | |
| #dj110 | `87.42% <ø> (?)` | |
| #dj111 | `87.42% <ø> (?)` | |
| #dj18 | `89.79% <ø> (?)` | |
| #dj19 | `89.79% <ø> (?)` | |
| #drf31 | `89.79% <ø> (?)` | |
| #drf32 | `89.79% <ø> (?)` | |
| #drf33 | `89.79% <ø> (?)` | |
| #drf34 | `90.62% <ø> (?)` | |
| #drf35 | `90.27% <ø> (?)` | |
| #drf36 | `90.27% <ø> (?)` | |
| #py27 | `90.62% <ø> (?)` | |
| #py33 | `89.44% <ø> (?)` | |
| #py34 | `89.44% <ø> (?)` | |


------

[Continue to review full report at Codecov](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/382?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/382?src=pr&el=footer). Last update [6b01b47...5fed46e](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/382?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
Great work! This looks good.
Well, the serializer tests dont fill the request context in the same way as the JSONWebTokenAPIView is initializing its serializer .. BUT not sending a request object in the authenticate call is deprecated since Django 1.11. 
Sadly i dont know how to fake the request that easily otherwise i would fix the failing serializer test. 
Please somebody help me out here!?
Addressed https://github.com/GetBlimp/django-rest-framework-jwt/pull/412
# [Codecov](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/416?src=pr&el=h1) Report
> Merging [#416](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/416?src=pr&el=desc) into [master](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/commit/0a0bd402ec21fd6b9a5f715d114411836fbb2923?src=pr&el=desc) will **decrease** coverage by `0.33%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/416/graphs/tree.svg?height=150&width=650&token=P4NPsfXL4a&src=pr)](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/416?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #416      +/-   ##
==========================================
- Coverage   90.67%   90.34%   -0.34%     
==========================================
  Files          14       12       -2     
  Lines         847      818      -29     
  Branches       29       29              
==========================================
- Hits          768      739      -29     
  Misses         66       66              
  Partials       13       13
```

| Flag | Coverage Δ | |
|---|---|---|
| #codecov | `90.34% <ø> (-0.34%)` | :arrow_down: |
| #dj110 | `87.04% <ø> (-0.45%)` | :arrow_down: |
| #dj111 | `87.04% <ø> (-0.45%)` | :arrow_down: |
| #dj18 | `89.48% <ø> (-0.36%)` | :arrow_down: |
| #dj19 | `89.48% <ø> (-0.36%)` | :arrow_down: |
| #drf31 | `89.48% <ø> (-0.36%)` | :arrow_down: |
| #drf32 | `89.48% <ø> (-0.36%)` | :arrow_down: |
| #drf33 | `89.48% <ø> (-0.36%)` | :arrow_down: |
| #drf34 | `90.34% <ø> (-0.34%)` | :arrow_down: |
| #drf35 | `89.97% <ø> (-0.35%)` | :arrow_down: |
| #drf36 | `89.97% <ø> (-0.35%)` | :arrow_down: |
| #py27 | `90.34% <ø> (-0.34%)` | :arrow_down: |
| #py33 | `89.11% <ø> (-0.38%)` | :arrow_down: |
| #py34 | `89.97% <ø> (+0.48%)` | :arrow_up: |
| #py35 | `87.04% <ø> (?)` | |
| #py36 | `87.04% <ø> (?)` | |

| [Impacted Files](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/416?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [rest\_framework\_jwt/models.py](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/416/diff?src=pr&el=tree#diff-cmVzdF9mcmFtZXdvcmtfand0L21vZGVscy5weQ==) | | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/416?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/416?src=pr&el=footer). Last update [0a0bd40...5d2896d](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/416?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
# [Codecov](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/423?src=pr&el=h1) Report
> Merging [#423](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/423?src=pr&el=desc) into [master](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/commit/0a0bd402ec21fd6b9a5f715d114411836fbb2923?src=pr&el=desc) will **decrease** coverage by `0.33%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/423/graphs/tree.svg?token=P4NPsfXL4a&src=pr&height=150&width=650)](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/423?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #423      +/-   ##
==========================================
- Coverage   90.67%   90.34%   -0.34%     
==========================================
  Files          14       12       -2     
  Lines         847      818      -29     
  Branches       29       29              
==========================================
- Hits          768      739      -29     
  Misses         66       66              
  Partials       13       13
```

| Flag | Coverage Δ | |
|---|---|---|
| #codecov | `90.34% <ø> (-0.34%)` | :arrow_down: |
| #dj110 | `87.04% <ø> (-0.45%)` | :arrow_down: |
| #dj111 | `87.04% <ø> (-0.45%)` | :arrow_down: |
| #dj18 | `89.48% <ø> (-0.36%)` | :arrow_down: |
| #dj19 | `89.48% <ø> (-0.36%)` | :arrow_down: |
| #drf31 | `89.48% <ø> (-0.36%)` | :arrow_down: |
| #drf32 | `89.48% <ø> (-0.36%)` | :arrow_down: |
| #drf33 | `89.48% <ø> (-0.36%)` | :arrow_down: |
| #drf34 | `90.34% <ø> (-0.34%)` | :arrow_down: |
| #drf35 | `89.97% <ø> (-0.35%)` | :arrow_down: |
| #drf36 | `89.97% <ø> (-0.35%)` | :arrow_down: |
| #py27 | `90.34% <ø> (-0.34%)` | :arrow_down: |
| #py33 | `89.11% <ø> (-0.38%)` | :arrow_down: |
| #py34 | `89.97% <ø> (+0.48%)` | :arrow_up: |
| #py35 | `87.04% <ø> (?)` | |
| #py36 | `87.04% <ø> (?)` | |

| [Impacted Files](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/423?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [rest\_framework\_jwt/utils.py](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/423/diff?src=pr&el=tree#diff-cmVzdF9mcmFtZXdvcmtfand0L3V0aWxzLnB5) | | |
| [rest\_framework\_jwt/models.py](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/423/diff?src=pr&el=tree#diff-cmVzdF9mcmFtZXdvcmtfand0L21vZGVscy5weQ==) | | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/423?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/423?src=pr&el=footer). Last update [0a0bd40...653dae5](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/423?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
# [Codecov](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/458?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@0a0bd40`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `83.33%`.

[![Impacted file tree graph](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/458/graphs/tree.svg?width=650&token=P4NPsfXL4a&height=150&src=pr)](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/458?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #458   +/-   ##
=========================================
  Coverage          ?   90.22%           
=========================================
  Files             ?       12           
  Lines             ?      829           
  Branches          ?       31           
=========================================
  Hits              ?      748           
  Misses            ?       67           
  Partials          ?       14
```

| Flag | Coverage Δ | |
|---|---|---|
| #codecov | `90.22% <83.33%> (?)` | |
| #dj110 | `86.97% <83.33%> (?)` | |
| #dj111 | `86.97% <83.33%> (?)` | |
| #dj18 | `89.38% <83.33%> (?)` | |
| #dj19 | `89.38% <83.33%> (?)` | |
| #drf33 | `89.38% <83.33%> (?)` | |
| #drf34 | `90.22% <83.33%> (?)` | |
| #drf35 | `89.86% <83.33%> (?)` | |
| #drf36 | `89.86% <83.33%> (?)` | |
| #py27 | `90.22% <83.33%> (?)` | |
| #py34 | `89.86% <83.33%> (?)` | |
| #py35 | `86.97% <83.33%> (?)` | |
| #py36 | `86.97% <83.33%> (?)` | |

| [Impacted Files](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/458?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [rest\_framework\_jwt/settings.py](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/458/diff?src=pr&el=tree#diff-cmVzdF9mcmFtZXdvcmtfand0L3NldHRpbmdzLnB5) | `88.88% <83.33%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/458?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/458?src=pr&el=footer). Last update [0a0bd40...7e0e806](https://codecov.io/gh/GetBlimp/django-rest-framework-jwt/pull/458?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
Eh, this doesn't seem like it's going to work anytime soon, so closing this for now.
Thanks. Just merged #489
Thanks
Nice catch !
Sweet! Thanks.
bump :+1:
:+1: just came here because of this bug
:+1: Same Here!!!
Hi guys, I'm sorry I haven't been checked in in several weeks. Will update shortly
It works for several apps now. Made test more sophisticated. Did not test the import over more than two levels yet.
thanks for this! sorry it took so long to check in... merged into a new release and will update shortyl
+1 for added tests :+1:
Hi Lukas,
Thank you for this and your interest in the project. I took a look at your suggestions and like many of them:
1. Description for serializer fields: :+1: 
2. Support file upload: :+1: 
3. Docstring parameters [required], [body] and [overwrite]. I like this idea, and the possibility of using multiple params at once. 
4. Request/Response serializers. I really like this idea, but think it is too specific to a particular implementation. In other words, your `request_serializer_class` and `response_serializer_class` are custom implementations outside the Django REST Framework default behaviour. I'd like to keep the documentation tool as close as possible to the framework's functionality and not introduce new opinions.
5. As for name spacing the URLs, this is determined by the `namespace` property of a URL pattern. The current implementation is exclusive, so by default, all APIViews are included unless excluded. Take a look a this [test case example](https://github.com/marcgibbons/django-rest-swagger/blob/master/rest_framework_swagger/tests.py#L80-87). I'm curious to know a bit more about your particular use case here.

Thanks a lot for reaching out and proposing these improvements. I await your pull requests! If you can included tests as well for the new features, this would be great.

Many thanks,

Marc
I made a separate pull request for every feature.
Can you provide a use case example for this and add a quick test? Many thanks!
Hi! I have a use case for this. To build complex objects with DRF you need to use more than one serializer, consider this http://petstore.swagger.wordnik.com/#!/pet/findPetsByStatus. A Pet contains a Category and a list of Tags.

In my case, I have namespaced objects like `{"book": {"id": 1, "title": "Some title"}}`. To build something like this with DRF, I need:

``` python
class BookSerializer(serializers.Serializer):
    id = serializers.IntegerField()
    title = serializer.CharField()

class NSBookSerializer(serializers.Serializer):
    book = BookSerializer()
```

And my docs will show the unhelpful:

```
NSBookSerializer {
  book (field)
}
```

Would you merge this PR if I contribute more code/tests?
Superseded by #116
This has been improved in the latest release.
I know you already said that you won't merge this, because this is a custom implementation and not supported by the REST framework - but I think it should be: There are more people out there that want different serializers for reading and writing (see for example this thread: https://groups.google.com/forum/#!topic/django-rest-framework/JrYdE3p6QZE ).

My proposition is to not merge this right now, but to work with the REST framework team to find a best practice method for this use case. In the meantime, this helps as a workaround.
Yes, thanks for this - great initiative. As you say, let's hold off until DRF supports multiple serializers per class. :+1:
Superseded by #115
feature-yaml is much, much better than this
Sorry, i have not latest version pulled :(
Thanks for the request! Oh boy, having HTML in the docstrings could sure turn into the wild west! You're not the first to suggest it, so let's add it.

Do you mind rebasing your pull request off the latest version? I fixed the imports for DRF 2.3.8 a few days ago (in version 0.1.8), so master has been updated.

Thank you!
Marc
I apologize for my previous dirty commit. I did some GIT magic, so now it looks cleaner.

Thanks!
Vítek
Now supported in 0.1.10
Thanks for this. Will merge this weekend
I'm also working on introducing a rst like doc block syntax (see https://github.com/boekkooi/django-rest-swagger/tree/documentation-parser) I will create a pull request for that if you are willing to merge this one and once it's done, documented and tested.
Hi Warnar, Thanks for this. I won't be able to look at your PRs for another week or so. Thanks for your help and interest! Marc

On Wednesday, December 4, 2013 5:47:02 AM, Warnar Boekkooi notifications@github.com wrote:

I'm also working on introducing a rst like doc block syntax (see https://github.com/boekkooi/django-rest-swagger/tree/documentation-parser) I will create a pull request for that if you are willing to merge this one and once it's done, documented and tested.
—
Reply to this email directly or view it on GitHub.
Closed since some bugs where found that are fixed in PR #48
Yes, this is a more elegant solution to a problem I encountered because it was rendering the swagger specs using the BrowseableAPI Renderer and not JSON so swagger-codegen couldn't parse the pages:

https://github.com/marcgibbons/django-rest-swagger/pull/47

I didn't actually see the problem you described. Unless you meant when JSONRenderer isn't specfied in DEFAULT_RENDERER_CLASSES.   I have the below and it works just fine.

 'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.BrowsableAPIRenderer',
        ),
Thanks for this !
Okee so i found some problem with Python 3 which have been solved now and I also added a travis-ci configuration.

I currently am also working on added response type and description and complex field support but i don't have time to finish that this year. You can find the working code on https://github.com/boekkooi/django-rest-swagger/tree/rst-response once i have written the needed tests i will add it to this PR if you haven't merged it already.

I hope you have sometime to comment. 
Merry Christmas and happy new year! (i'm on holiday starting now)
Really cool, I would love to use this (the rst-response branch, actually). Unfortunately, this is based off of v0.1.11 (right?) and I need some of the bugfixes between v0.1.11 and v0.1.14.

I tried to merge it into the current `marcgibbons:master`, but there's quite a lot of conflicts and I feel like I'm too new to `rest_framework_swagger` to resolve them right now. Is there an easy way to use this branch right now (including the latest bugfixes from the main release) that I'm missing? :(
could you rebase this on develop?
also, hi #126
Would also be interested in this.
Maybe I'm missing something, but would it not make sense to make use of the existing DRF view_description_function ? See my comment on the related issue here https://github.com/marcgibbons/django-rest-swagger/issues/126#issuecomment-69147551
I think it's better to

```
{% if swagger_settings.api_key %}
    window.authorizations.add("key", new ApiKeyAuthorization("Authorization", "Token " + "{{ swagger_settings.api_key }}", "header"));
    {% endif %}
```

than explicitly registering auth since its not required that api key should be defined... otherwise you will endup with 401 error - because your empty token would not validate, so you wont be able to even get a list of endpoints
Good job noticing that and providing a fix. Thanks I've pushed it to my fork.
Thanks for this. Including in next push
:+1: Thanks for this - I'm very behind on these issues and pull requests. Getting married this weekend... will be going through all the tickets later in Feb.
Congratulations from a happy user who was starting to worry about your well-being.
OK, congrats! I won't bother you then before a few weeks ;)
@galoo does `test_flatten_url_tree_with_filter` suppose to fail?

```
======================================================================
FAIL: test_flatten_url_tree_with_filter (rest_framework_swagger.tests.UrlParserTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/Users/Silver/Projects/django-rest-swagger/rest_framework_swagger/tests.py", line 82, in test_flatten_url_tree_with_filter
    self.assertEqual(1, len(apis))
AssertionError: 1 != 3

----------------------------------------------------------------------
Ran 27 tests in 0.015s

FAILED (failures=1)
```
Many thanks - I implemented this feature in the latest release.
I'll take a look at this for the next release. I like the idea of getting better control (I had been considering YAML as a nice & clean solution, you beat me to the punch!)

Would you mind rebasing this branch off the latest master?
Many thanks,
Marc
Yep, I can do this in a next few days. But I'm afraid url grouping of current master will not work as expected. The rest should be totally fine - we are using this branch in our development and yet had no problems, actually it helped us a lot. 

This still might be improved so one can get total control over documentation, but my goal was just to help introspectors so I've stopped once goal has been reached.
I've tried to merge but url grouping is not working as expected. 

![swagger ui 2014-02-28 11-45-58](https://f.cloud.github.com/assets/1113925/2293052/8ccdf7e0-a065-11e3-9777-0766808ef3e7.png)
I've improved custom serializer discovery.
From now on one can define it in many ways:

``` yaml
# Relative to current module
serializer: ...serializers.foo.SomeSerializer
# or (dots!)
serializer: ..serializers.foo.SomeSerializer

# Fully qualified path
serializer: app.serializers.foo.SomeSerialzer

# Serializer defined or imported into current module
serializer: SomeSerializer

# Serializer imported into current module as submodule
# from .serializers import subserializers
serializer: subserializers.SomeSerializer
```
Thanks for making these changes! Very useful.

However, these changes don't work for simple function-based views:

``` python
rom django.http import HttpResponse
from rest_framework.decorators import api_view

@api_view(['GET'])
def test(request):
    """Hello world                                                                                                                                                                                                                           

    ---                                                                                                                                                                                                                                      
    parameters:                                                                                                                                                                                                                              
      - name: interval                                                                                                                                                                                                                       
    """
    return HttpResponse("OK")
```

Before this worked because get_view_description() was called as a fallback. I think we will want to add another introspector that just looks at the callback's docstring.

Also, I think APIViewMethodIntrospector only looks at the docstrings inside the class methods (e.g. get(), post(), etc.). There is a comment that it should fallback to the class method itself, but it doesn't appear to do so.
Any chance this will be merged soon?
Would love to see this merged as well!
Working on it now. Thanks for your patience... been a bit negligent with maintenance...
Thanks again for this and helping to 
I fixed merge conflicts and merged into develop.

Couple of things:
- The original parameter definition no longer works. It would be good to maintain this for backwards compatibility

``` python
class MyView(APIView):
    """
    My wonderful view

    parameter1 -- My parameter
    """
    ...
```
- It would be great to have YAML parsing at the class docstring level as well, and provide the ability to override method docs from here, rather than defining individual methods.

Example:

``` python
class MyResource(RetrieveUpdateAPIView):
    """
    Beautiful YAML docs

    ---
    get:
     type:
      name:
        required: true
        type: string
      url:
        required: false
        type: url
    post:
     responseMessages:
      .... etc ....

    """
```

Is this something you would be able to add to this PR? I'd love to merge for the next release. You can checkout [develop](https://github.com/marcgibbons/django-rest-swagger/tree/develop). Thanks again for the hard work! :+1:
@marcgibbons uh, nice to see this update. I'm a little bit busy right now with our project to provide support for class level documentation, but will take a look at it soon. That shouldn't be a big deal to make it work, the only issue here is viewsets actually, so I will need to take a look at some use-cases first.
I'm also considering adding search & ordering + filter backends introspection support, but this is something to be discussed.
Hi,
first of all I really appreciate your work! Unfortunately I am having an issue where I have different serializers for the request and response. When I define a custom response model like 

```
type:
    myparam:
        description: My custom response param
        required: true
        type: string
```

It seems, that this "unregisters" the serializer class I would like to use as a body model in the request:

```
serializer: mypackage.serializers.MyWriteSerializer

parameters:
    - name: MyModel
      description: Use this model to post to my API please
      type: MyWriteSerializer
      paramType: body 
```

This then results in displaying the "Data Type" as the string "MyWriteSerializer" instead of the model. In the raw request I can see that MyWriteSerializer is not registered as a model unless I remove the custom response model again.
Can you confirm this? Is there a workaround for now?
@jakob-o you are right, there is no such feature implemented since DRF does not natively support different request and response objects yet. 

Feel free to dig into code, thats not so complicated on introspector side. 

An easy solution would be to develop additional YAML parser that would parse data type that should be used as a response object (or request). 

I just did not have any use case for that while developing this pr.
Thank you very much, I will have a look at the code.
@jakob-o 

actually you can use something like that (I've noticed this in my code)

``` python
    def put(self, request, *args, **kwargs):
        """Updates User password.

        Verifies provided token and allows to change account password.

        ---
        # API Docs
        type:
            detail:
                required: true
                type: string

        serializer: ...serializers.public.PasswordResetSerializer
        """
        # code here
```

In this example I'm changing response object and at the same time passing different request serializer than one defined in class var. Latter is not required, if not specified request object will equals to default specified on a class level.

So I assume that could help.
Hi, thank you very much. Unfortunately this only works for form parameters, but I was able to make a minimalistic change to the code which fixes my issue. I also opened a pull request for it #89. Feel free to comment on it.
I extended this pull request to support function based views, support the old way of specifying parameters, and parse class docstrings. It's in develop. Still needs docs.
Using replace is not the solution here. This should explicitly ONLY remove the first occurrence. 

I think this is a better solution:

https://github.com/marcgibbons/django-rest-swagger/pull/68
Agreed - replace could yield unexpected results. Will be testing & merging #68 later on the weekend. Many thanks for pointing this out.
Fixed in #68. Thanks again!
I just ran into this... In my case the letter "i" is stripped off. It's rather odd because it's not the entire base path ("/api") but just the last letter... Is there some behavior of lstrip I'm not familiar with going on here?

_Edit_: Okay, so `lstrip` treats the string as a character array and removes all of those characters. This is definitely not the right behavior for this situation.

e.g.

```
>>> "/api/identity".lstrip("/api")
'dentity'
```
This is great. `lstrip` indeed behaves unexpectedly. Found this that explains nicely:
http://stackoverflow.com/a/1687179/1451738

Thank you @bbenko for the fix and +1 for the added test. Will merge in and release this weekend. :+1:
I've just tested out this fix as I was having the same problem (using a clone of the master branch from 06/03/2014). This works great and fixes the problem.
I made a pull request before I should have, still need to write tests. 

Wat do you think of the point in general?
:+1:
please merge..
this was part of #133. Thanks for the contribution.
Let me know also if the 'custom_template' setting should be changed such that the path of the template provided would be relative to a PROJECT_DIRECTORY setting or something similar.
There is no need for this because Django allows you to override templates.

To override a template, just copy it from the default directory into your custom directory, and make changes.

see: https://docs.djangoproject.com/en/1.4/ref/settings/#std:setting-TEMPLATE_DIRS
Thanks docc, you're absolutely right. Without having the need to override 3rd party module templating before, I was completely unaware of the functional nature of Django's template loader pipeline. Thanks for informing me.
:+1: I just found this same issue and was going to open it. Hope it can make it into upstream soon.
Can we get this in?
:+1: I tried this and it worked. Please merge this pull request and upload to pypi.
looks like this is in
I would love to see this merged so I can use it in one of my projects that's running on Python 3. Do you have an ETA on that?
ping
also interested when this is can be merged, as this a critical one
bumping this since django-rest-swagger is currently unusable on python 3.
+1
This patch is working well for me, well done !
updated to include a fix for #123 -- I won't be able to test this until tonight but it looks right.
Patch is confirmed working. :+1:  Paging @marcgibbons
+1
I fixed the python 3 compatibility issue, all tests pass now. Is there something keeping this from getting merged?
sorry, I haven't had a chance to review this yet. Will do tonight.
I think these are all in now.
hasattr(field, 'help_text')
field.help_text
This could be useful. My primary reservation is that the introspectors are an internal thing that are subject to change (I've had need to mess with them quite a bit lately), and making this a documented feature would imply the opposite.

I guess you could put a "use at your own risk" in the docs.
I believe this has been handled in #184
duplicated request (#80)
This makes pull request #89 obsolete.
hm. now that I've duplicated this work, I see what you're doing. #185 has equivalent functionality.
Thank you.
thanks
@deathowl I've already created request #94 for this issue 
and there is another one #80
it would be good, if any of those would be merged, the community kinda needs this fix i think..
Thank you so much for including a test with your pull request
it's in
thanks for the contribution, but we have the same fixes in another branch.
looks like we have everything from this pull request in now
I think the equivalent of this pull request is in.
put this functionality into the yaml parser. Thanks for the contribution!
needs some test cases
#117 already fixed, thanks for spaceless!
pretty sure this would be a fast forward merge, but I'm paranoid..
@gotche Do you think we ought to be doing anything in REST framework in order to support this kind of introspection in a formalized and less brittle way?
@tomchristie I haven't worked with introspection so much, to be honest. So I am not sure what is the best practice about this. I will have a look at projects with similar problems.

I would also ask @boekkooi who was the committer of this part of the code.
@gotche The code except for the comments looks fine to be the only thing I can imagine is that instead of doing `if code and getattr(code, 'co_name') == 'wrapped_view':` you may want to implement some while loop like:

```
code = six.get_function_closure(callback)
closure = six.get_function_closure(callback)

while code and getattr(code, 'co_name') != 'view':
    view = getattr(closure[0], 'cell_contents')
    code = six.get_function_closure(view)
    closure = six.get_function_closure(view)

if code and getattr(code, 'co_name') == 'view':
    freevars = code.co_freevars
else:
    raise RuntimeError( 'Unable to use callback invalid closure/function specified.')
return closure[freevars.index('actions')].cell_contents
```

_Sorry if there are any typo's but i don't have time to test_
@boekkooi  thanks a lot!
I took into account all your comments and rebased it @boekkooi
@gotche Looks great!
Thanks @boekkooi  

I will PR it tonight against https://github.com/ariovistus/django-rest-swagger
Fixes #123 for me. Thanks!
It's in develop.
well, I guess I lied on #133 about this one
its in. thanks!
spec: https://github.com/swagger-api/swagger-spec/blob/master/versions/1.2.md#513-info-object

How about you make it default to empty dict instead of petstore example and then put an example use in cigar_example? It doesn't seem reasonable to silently inject licensing and terms of use information into other people's APIs..
@ariovistus Thanks, went with empty strings instead of an empty dictionary, given the "required" in the spec, though to be fair it changes significantly in 2.0, things like merging license and licenseUrl into one JSON object.
what's the markdown class for?
Text formatting is not correct without this one. I've found markdown CSS class in swagger's stylesheets, I don't know why it was not used before, but turned out it is very useful, though I'd add some corrections to it, for example: **bold text** is shown as it should, but _italic text_ is not. I'll add corrections to CSS class this week, too busy with my work at the moment.
Here is an example from API I'm working on right now. **Without markdown** CSS class ![Without markdown CSS class](http://i.imgur.com/OjFihGj.png)

**With markdown** CSS class
![](http://i.imgur.com/OP0IBie.png)
Hi! So, what are your thoughts on these changes? Will they be pulled in? I have some work to do and need to know what's your answer, please.
sorry, thought I was waiting on some more stuff from you
Thanks a lot!
wow, that really shortens the tox file. thanks!
hey dude, you gonna fix this pr?
Sry for that
is there any documentation for docExpansion elsewhere? I can't seem to find any after a minute or two of googling..
Also, since docExpansion is currently "none", would it not make more sense to have it default to "none" rather than ''?
odd, two PRs for this feature in one day? thanks for contributing.
I get

```
rest_framework.fields.empty instance at is not JSON serializable
```

I can't seen any swagger refs in the stack trace. I'll investigate further.
Here's a little more.

```
renderer_context    
{u'args': (),
 u'kwargs': {'path': u'api/v1'},
 u'request': <rest_framework.request.Request object at 0x7f6876daebd0>,
 u'response': <rest_framework.response.Response object at 0x7f687c0d1b10>,
 u'view': <rest_framework_swagger.views.SwaggerApiView object at 0x7f687c07c190>}
self    
<rest_framework.renderers.JSONRenderer object at 0x7f6876daed90>
separators  
(',', ':')
data    
{'apiVersion': '',
 'apis': [{'description': u'',
           'operations': [{'method': u'GET',
                           'nickname': u'Api_Root',
                           'notes': '  \n',
                           'summary': '',
                           'type': None}],
           'path': u'/api/v1/'},
          {'description': u'',
           'operations': [{'method': u'POST',
                           'nickname': u'Share',
                           'notes': '  \n',
                           'parameters': [{'defaultValue': <rest_framework.fields.empty instance at 0x7f6876fcfb00>,
                                           'description': None,
                                           'format': 'string',
                                           'name': 'server',
                                           'paramType': 'form',
                                           'required': True,
                                           'type': 'string'},
                                          {'defaultValue': <rest_framework.fields.empty instance at 0x7f6876fcf2d8>,
                                           'description': None,
                                           'format': 'string',
                                           'name': 'share',
                                           'paramType': 'form',
                                           'required': True,
                                           'type': 'string'},
```
I've probably the same issue: #163
I cleaned up the compat in tomchristie/django-rest-framework@d54c67d79d0f5661ef33d860efe80a4272e22b3e because Django>=1.4.2 already provides this compat. Sorry if it broke something.
@dnozay can you also update tox.ini and .travis.yml to point to 3.0.1
this pr breaks the build
I think I see what you're doing here, but could you add some tests to help illustrate it, and so it doesn't inadvertantly get broken later?
Promiss I will but I'm leaving for hollidays so... next year ;)

Regards

On 19/12/2014 16:42, ariovistus wrote:

> I think I see what you're doing here, but could you add some tests to 
> help illustrate it, and so it doesn't inadvertantly get broken later?
> 
> —
> Reply to this email directly or view it on GitHub 
> https://github.com/marcgibbons/django-rest-swagger/pull/180#issuecomment-67654038.

## 

Guillaume DOUMENC
_FPR / CoWorks_
Your Internet Enabler
http://www.coworks.pro
:+1:
I'm trying to get a copy of cigar_example working with versioning. I changed the urls like so: `r'^v2/drop_cigar_in_jambalaya/$'`, I changed SWAGGER_SETTINGS to have 

```
    'api_version': 'v2', 
    'available_api_versions': ['v2'],
```

and it gives me

NoReverseMatch at /

Reverse for 'django.swagger.base.view' with arguments '('v2',)' and keyword arguments '{}' not found. 0 pattern(s) tried: []

what am I doing wrong?
I think you're mixing versions in cigar with versions in swagger. For swagger the configuration is almost right, drop the "v"s in api_version and available_api_version, so:

```
'api_version': '2',
'available_api_versions': ['2']
```

Then you can go to your docs with [...]/v2/, that will set "2" as the `SWAGGER_SETTINGS['api_version']`. From there what the project that is isolated from swagger, what you get is that number set in the settings so you can respond with the right content. 
Now you made me realize that an example project would be very helpful to see how versions can be implemented. I'll try to add that here.
Has there been any progress on versioning support?
This seems exactly what I'm after as well..... any update?
I'm also very (very) interested in this feature ! I would love for it to be integrated into the project.
:+1:
Would be really useful.
Additionally (or maybe I've just missed it), it would be great to have a dropdown for the available versions (but that's only nice-to-have for now).

A related PR to handle the version in the request header: https://github.com/marcgibbons/django-rest-swagger/pull/379.
Not planning to update this, closing it.
This should maybe raise an error instead, which could be optionally handled?
can you rebase these changes? travis isn't running on this PR..
Final attempt at a PR which passes the build.
It looks like this PR assumes that request_serializer will pull its data from form parameters or query parameters and build docs to that effect.  I'm wondering what the docs end up looking like when it does this (not at a usable computer atm) and whether there may be any need for more fine-grained control.

I'll try and have a look at this tonight
The way I wanted to use this in code is as below

```
class CustomSerializer(serializer.Serializer):
     foo = serializers.FieldSerializer()
     bar = serializers.FieldSerializer()
```

`serializer = CustomSerializer(request.query_params)`
but in terms of markdown definition, as long as we define a `request_serializer: CustomSerializer` I am not sure if matters how the serializer pulls in the actual the query_params at runtime.

In terms of seeing the params in the UI, it shows up just like a query param defined using the `parameter` definition.
Are you using this with generic views or function based views? When I tried it last night, it didn't seem to change the existing views, which is A) what I want and B) not what I was expecting. It looked to me that it would change the param type of the inputs from form to query. Am I understanding this PR correctly, and if so maybe you could put an example usage in cigars example?
I'm not sure that using a serializer on query parameters is being used in actual RESTful code here. You can use django filter do get properly documented query parameters if they are being used in RESTful code. 

See related SO answer: http://stackoverflow.com/questions/23006735/how-can-i-access-querystring-values-in-serializer-django-rest-framework#comment35144212_23007786
@ariovistus, @mverteuil most of the time DRF is not used only for the RESTful APIs but also for some custom APIs along with it. For such custom GET APIs `request_serializer` parameter should put the fields from serializer with param_type as `query` instead of `form`. 
I hope this clears the doubts.
Thanks for this submission (I realize it was done some time ago). Closing it out since YAML docstrings have been deprecated in v2.
seems like something that should have a test for it
You're perfectly right. Actually, the `urlconf` argument wasn't tested directly at all.

This adds tests that pass `urlconf` directly, both using an import string (and an `__import__` mock), or passing a mocked module directly.

I added `mock` (for mocking imports cleanly) and `flake8` (for linting) to `requirements.py`.
Okay, after a bit of fiddling with `tox` and requirements (sorry about that, wasn't really familiar with it) this is passing on all environments.

`six` is now in the requirements (seems like a good idea, actually) as I've used it to test for string types over py2 and py3. Note that I've also left `mock` in the `requirements.py` as `nose` is also there.
six seemed like a good idea to me too, but apparently django already packages it in django.util, so use that if you can.
Uh, does GitHub notify on commits or comments only?
not sure. thanks for the PR.
probably the test that breaks is incorrect, I'll try to get to it tonight
It looks like the failed test might have more to do with Markdown parsing
rather than HTML, though I wouldn't be sure.

If the summary is meant to take just the plaintext version of the
docstring, it might be bad. If it was supposed to remove Markdown elements,
it's breaking.

On Wed, Feb 4, 2015 at 8:28 PM, ariovistus notifications@github.com wrote:

> probably the test that breaks is incorrect, I'll try to get to it tonight
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/marcgibbons/django-rest-swagger/pull/207#issuecomment-72962980
> .

## 

Andrés Osinski
It look like all others pull requests are sent to `master` so I close this one and send another to `master` and not `develop`.
@ariovistus : Approximatively, when will be the next release ? :)
@Situphen when I'm not distracted by robotics (next week)
@ariovistus thanks! :)
Failing travis unit test, will reopen after passing
Now passing lint tests. Fixed a bug with the default use case
could you squash your commits? it makes it easier to review
Done!
could you add protocol and base_path to the docs?
could you add a test or two to the suite?
I have updated the documentation and will take a look at the best way to add tests for this this week. Thank you!
Any news regarding this pull request? I'm trying to get django-rest-swagger working for [this project](https://www.beat-eu.org/platform/). However, the default [`https` entry point](https://www.beat-eu.org/platform/docs/) keeps using `http` instead of `https`. I guess that being able to force the protocol to https would fix my issue. Thanks a lot.
Well, that was a bit of a bugger to figure out how to test.
This patch is breaking backward compatibility because `request.is_secure()` is ignored and `http` is always used unless I add `{'protocol': 'https'}` in my settings.

`request.is_secure()` should be the only reliable and consistent way to go here.

I do not understand why adding `protocol` in swagger settings is a good idea?
You want to use `http` even if `request.is_secure() is True` ?
If `nginx` is forced to connect with `http` and if `request.is_secure()` return `True`, it means you probably have something misconfigured in your settings.
This is also inconsistent with the provided docs. The one case where I was foggily under the impression this would be beneficial is when is_secure is false but you do want https.
interesting. Please make this an issue so it doesn't get lost once this PR is merged. Also, you're breaking the build, looks like you need to update the tests.
Fixing tests, and opened #233
yes please!
Any interest in merging this?
could you update the docs and maybe slip an example usage into the cigar example?
Will do
On Apr 9, 2015 6:27 PM, "ariovistus" notifications@github.com wrote:

> could you update the docs and maybe slip an example usage into the cigar
> example?
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/marcgibbons/django-rest-swagger/pull/224#issuecomment-91395365
> .
Closing this off as URL include/exclude is now down in the schema generator from Django REST Framework 3.4.
could you add docs for new swagger setting and squash please?
Thanks for this. DRF 3.4 now handles this with the SchemaGenerator, so will close.
could you add the use of VIEW_NAME_FUNCTION to docs?
As requested.
looks like #234 fixes this and then some
Updated to use the `foo is not None` idiomatic check instead of just `if not foo`. `None` is indeed the value Django uses when no pattern exists, see https://github.com/django/django/blob/master/django/core/urlresolvers.py#L252

This prevents us from using django-rest-swagger right now. Anything I can do to get this merged? @ariovistus, it looks like you were recently active, I'd love to hear from you to improve this pull request.
sorry bout that, been busy
Thank you @ariovistus!
Thanks for the submission. DRF 3.4 takes care of this now.
Thanks for this. DRF 3.4 is now responsible for URL pattern inclusion/exclusion through the SchemaGenerator, so this no longer applies.
sweet! squash please.
It should be ok now.
needs a mention in the docs, and we'll be good to go.
Since this PR hasn't been merged yet: I'd like to be able to set this attribute in class Meta, because, well, it's meta-data and it makes for a more generalised solution that could be used outside django-rest-swagger as well.

Then the attribute `name` could be used. Like so:

```
class MySerializer(serializer):
(...)
class Meta:
   name = 'my request name'
```

I've made a fork that changes introspectors.get_serializer_name to achieve this.
+1 on this one also, would love to see it in soon. When using swagger-codegen, classes are created to represent each serializer - and 'FooSerializer' doesn't make a great deal of sense to the end user.
+1
Serializer names are no longer returned with v2.
Please close this pull request I deleted the fork by mistake.
there is better one here #261.
Perhaps factor this out into some compat module rather than putting the logic right here.
Hmm. we probably need to add DRF 3.1 to the travis build.
it is the official release now.
not talking about Django 1.8 yet, which is for fact working fine with me at the moment.
yay, tests! give that man a klondike bar!
Thanks for this. DRF 3.4 is now responsible for URL pattern inclusion/exclusion through the SchemaGenerator, so this no longer applies.
:+1: On adding this feature.
@cancan101 I added support for enum.
There is still many improvements we can bring to this implementation.
But I would like to get it out of the door asap, and then improve over the time.
Would also be cool to set the `enum` field if possible.
I guess my only question is is there ever a case when you want to force https?
E.g. when you have a proxy receiving with https and communicating to django with http.
@ariovistus Django has a strategy to cover this use case:
https://docs.djangoproject.com/en/1.8/ref/settings/#std:setting-SECURE_PROXY_SSL_HEADER

We don't need to worry about this.
Do filters not apply to detail views?
I do not think so, you target a document by its `id`, there is no need for filtering.
What would be the use-case ?
fair enough.
@ticosax Any updates on re-fixing this?
@ariovistus 
This pull request is failing because some tests were not under the radar.
I think we can accept the output of each tests, as the current behaviour seems reasonable.
But better you double check.
aw, crumb.

Nice catch, thanks
I do not validate the test case, because you are supposed to call `generator.get_introspector(api)` 2 times, one for each view.

When I check the current master `docgenerator.DocumentationGenerator.get_introspector` is called by `DocumentationGenerator._get_serializer_set` and `DocumentationGenerator.generate` (through `DocumentationGenerator.get_operations`) and both of them are iterating over `apis`. It means all views will be parsed, thus there is not need to pass over the `apis` argument.

Please can you explain me what problem do you have with the current version of master ? I would like to help
The issue here is the two methods listed in the docstring - list and retrieve. They are provided by the two patterns, and if the introspector doesn't have access to all the patterns, on each call to get_introspector it will complain that one or the other is missing from the list of methods that the view supports.
ok thanks, I will dig into it.
I understand the use case now.
I made a pull request against your branch to extend the tests. They expose the problem I tried to solve when I removed `apis` parameter.
It seems DRS needs bigger refactoring.
I'll try to come up with a better solution. In the mean time you can revert #291 completely.
I'll rework it with the tests you wrote in #298
I'm not sure I understand why this change.
It helps me while writing API using rest framework versioning classes or custom versioning class. In that case swagger only sends header content-type which is application/json while discovering apis and resources. 
I was using own custom versioning scheme which accepts only those requests which had header X-API-VERSION, so I just searched to send custom headers or customization technique to send headers using swagger unfortunately didn't found because they had hard coded header content type in javascript.

Now it will be helpful for others in case of they required some other kind of inputs using headers.

Thanks
probably this pr would be more appropriate to send to swagger ui, since I believe that's the source of swagger.js. When we update our swagger ui (and it looks like we'll need to pretty soon), changes like these are likely to get blown away and the difference not noticed.
Are there any cases where `field_serializer is None and data_type not in BaseMethodIntrospector.PRIMITIVES`?
Even if it were none that's ok.  It's just giving it more precedence to take the ref over a primitive "guessed" type
what's your use case that the current implementation doesn't cover?
I have decorated views that are not being unwrapped correctly, and thus not documented, because 0th index is not a sufficient condition in all cases. 

That the view argument is of FunctionType is necessarily true, and provides some flexibility. That flexibility means the difference between whether DRS actually documents the majority of my views, instead of ignoring them because of something trivial.
Could you post an example view? I'm curious, and also I want something in the test suite for this.
Sure. I was trying to craft a test for this on my lunch break yesterday, but the tests file is quite the behemoth and is light on the intent comments and docstrings. I will take another stab at it.
I had assumed the bug was larger than it was. However, I've managed to isolate it.

I copied the ViewSets which had issues, then excised until only the code required to exercise the bug remained. 
- ~~ed84746~~ 80535a2 contains the tests which exercise the bug
- ~~763711b~~ 1a7c0c3 contains the fix.
sweetness! 
linter doesn't like you (I've noticed github doesn't seem to notify the pull requester when travis fails, so just making sure you're aware)
I keep getting dinged on my amended commits because I'm doing that after running tox. One sec.
Pushed a linter friendly version of `decorators.py`
Working on the test failure now.
Fixed. I wasn't using the 2/3 compatible form of `im_func`.
your for more info link in the decorator doc doesn't seem to go anywhere?
I see, it looks like the original branch is now gone, but I don't have a SHA to point to it.

I've been using a version that was proposed in a Django ticket for years now, that code essentially comes from this patch: https://code.djangoproject.com/attachment/ticket/14512/ticket14512.diff

Usually this decorator wraps other decorator invocations that are meant for decorating an FBV. I've simply unwrapped the wrapped decorator and that's where the name 'squashed' comes from. 'Unwrapped' may have been a better choice, but I didn't want to use that term because it has a slightly different (albeit similar) meaning in `decorators.py`.

I've found a shorter version, here, which isn't EXACTLY the same thing but seems to be for my purposes:
http://stackoverflow.com/questions/6069070/how-to-use-permission-required-decorators-on-django-class-based-views

The tricky thing here is, the shorter version does not seem to exercise the bug because of how it's constructed. Since the scoping is a bit different when `method_decorator` is used for the inner decoration, it doesn't seem to mess with the freevars. In any event, I still feel like relying on the coincidence of argument position is more fragile and less correct than relying on the fact that the view callable must necessarily be an instance that is `FunctionType`. While `FunctionType` type is still a  coincidental detail, it has more of a chance to be right. The first argument will then need to also be a FunctionType, and so any time the previous predicate was a true positive it will also be so in this case. Additionally where it was a false positive, it will no longer be one, and where it was a false negative at least there's now an opportunity to find the view callable in other positions.
linter doesn't like you
Does this logic belong in drs? Seems like it could be handled by custom request creator
Providing a callback means delegating to the project that leverages DRS, which seems like the correct design. DRS already delegates for authorization to view the docs page using a callback, so I emulated the existing design choice. Now I can keep the decisions about authorization to view/use subsets of the full set of endpoints restricted to a single routine in my API routing app.

What do you mean by a "custom request creator"?
Sorry about the linter issue, I've amended the commit.
this functionality seems reasonable to me. It looks like you can use it to prevent code from introspecting some apis, which would cover the use case described in #231. I still haven't checked to see that it actually does this, grr.
Either way, I will be demanding an update to the docs to mention the new field in SWAGGER_SETTINGS.

and ditto, what's a "custom request creator"?
By "custom request creator", I meant the `view_mocker`: http://django-rest-swagger.readthedocs.org/en/latest/yaml.html#view-mocker.
@cancan101 Ok I can see how that API could be used to do this, but it's inelegant and kind of a shotgun surgery solution. I'd need remember to include the view_mocker in all docstrings and provide the same `view_mocker` argument to all views, polluting every docstring with this information. 

In addition, if I wanted to use `view_mocker` for its intended use, I'd have to wrap that behaviour with the permissions delegate somehow. `view_mocker` also doesn't get called with the request object and thus is also not able to filter the documented endpoints based on the request user.

I appreciate the suggestion, but I think it's clear that the use case isn't entirely covered by `view_mocker`. I also think you'd need to be pretty smart to see that `view_mocker` might be used in this way, which is not very convenient to tired and frustrated developers who want clear and obvious documentation.
@ariovistus I've revised my commit and added documentation and example. I've also added a whitespace-fix aesthetic commit for `settings.rst` separately from the functional commit that contains the implementation details.
will fix #257 once it passes..
@ariovistus : write "closes #257" in the description to have it auto-close.
## Before

![broken-api](https://cloud.githubusercontent.com/assets/203574/8628168/a6868a6c-271e-11e5-8811-8d559415a046.png)

## After

![fixed-api](https://cloud.githubusercontent.com/assets/203574/8628179/b7b9bebc-271e-11e5-9d5b-93253e02c06e.png)
rebase, perhaps?
Rebased :haircut:
Investigating the test failures now.
~~Oh I rebased onto an old HEAD, should be easily resolved.~~
I wasn't aware that `filter` doesn't return a list in python3, but I am now. ;)

It was a good thing your test exercised this, or it would have probably caused some curious issues.
Why not use `'/%s' % path`?
Because David Beazley told me it's ok.

![python_cookbook__3rd_edition_pdf__page_77_of_706_](https://cloud.githubusercontent.com/assets/203574/8628351/3044c128-2720-11e5-9288-41b1def6a283.png)

But in any event, the string formatting in this file is pretty schizophrenic and `'%s' % value` is less favourable to `'{}'.format(value)` or `'{0}'.format(value)` [says python docs](https://docs.python.org/2/library/string.html#format-string-syntax).
Perhaps factor `DocumentationGenerator(for_user=self.user)` out to `self.get_documentation_generator()`
For backward copatibility, I would prefer to see:

``` python
def __init__(self, for_user=None):
   if for_user is None:
       for_user = AnonymousUser()
```
That's a good idea. I'll do that. :+1:
Since an `AnonymousUser()` ought be the same thing everywhere, I think I'd prefer:

``` python
def __init__(self, for_user=AnonymousUser()):
```

Thoughts?
I'm fine with that, is there any issue with always instantiating I suppose not?
It's actually only done once, the first time the class body is processed by the python interpreter. You may recall this as the reason why you can't put an empty list literal as the default for a keyword argument. :white_check_mark:
Well it's never instantiating if you always pass in a user :-) in the way I wrote it.
That's also true. 

I think there's some benefit to self-documenting the default argument value and the cost of one AnonymousUser instance is also trivial. On the other hand, aesthetically I don't like the constructor call in the middle of the signature. I think I will switch to `None`.
Done in 36aa647
It seems the solution here is to control what end points drf is generating.
Yes, that's a solution we considered, but it didn't suit us. We didn't want to remove the functionality. Just needed simple control over which methods appeared in the _documentation_. 

Setting here offers a logical place, right next to the other existing, similar setting. (In fact, we were all surprised when enabled_methods didn't do what we expected it to).
I was about to create a Pull request with changes for similar effect. This is super helpful. However, I dont see why enable_methods cant be used for controlling display. Please explain ?
In any case, this PR is helpful, not sure why hasnt @marcgibbons accepted it yet.
@cancan101 If I specify http_method_names in the DRF viewsets, which is one way of controlling endpoints from DRF, Rest swagger does not honour those settings. It still shows all the methods in the API list. Either this PR makes sense or making sure only those methods are shown in the viewsets which are mentioned in the DRF viewset class.
@ankitml I don't follow what you are saying:

> If I specify http_method_names in the DRF viewsets, which is one way of controlling endpoints from DRF, Rest swagger does not honour those settings.
@cancan101 You point above was, the solution is to control what endpoints DRF is generating. 

Now it turns out that even after doing exactly that, Swagger still shows non exposed endpoint. 

I can do that by explicitly specifying http_method_names in a viewset. For an example case, my viewset exposes (get, post, patch) ie no delete and no put. The swagger still shows these two endpoints even when DRF is not exposing them. Hence there is a case for explicitly specifying display_methods.
This does not happen for me, so I would be curious what your Viewset looks like:

> The swagger still shows these two endpoints even when DRF is not exposing them.
Interesting.... For me a standard ModelViewSet with http_method_names=['get','patch'] is exposing all methods only in swagger. Is there a way I can write tests or something to show what I am seeing is legitimate?
Closing this out as it no longer applies to v2+. Thanks for the submission!
Ahh crap. Dealing with support for all versions now.
..and apparently never under test?

(hint hint :)
Thanks for the submission. This has been fixed in v2.
I need to write tests specifically for DRF < 3.0.
I will fix the tests and update
Hello,

I have tested @cjhenck's patch and can confirm that it works for me.  It's especially nice because Swagger-UI v2.1 fixes the bug that was causing DRS's `enabled_methods` to be ignored.  [Here's a gist](https://gist.github.com/felliott/bfce4b1ee15556f2a7c8) with a patch to fix the failing test.  The test was checking to see if the https protocol was being propagated, but was doing it by fragile string matching.  I've updated it to use a regex instead.

Thanks @marcgibbons for this fantastic module, and @cjhenck for updating it to UI v2.1!

Cheers,
Fitz
I just found one slight omission, the `branding` and `api_selector` block declarations were left out of base.html.  [This patch](https://gist.github.com/felliott/61f17aa5da85a02e999e) adds them back.  If you prefer, they're also available as commits b2c263c6 and 176cc68a in my `osf-needs` branch.
@cjhenck 
Any plans to integrate the patches from @felliott ?

By now, the current version of swagger-ui is 2.1.3 btw.
See also https://github.com/marcgibbons/django-rest-swagger/issues/309.
Fixed by https://github.com/marcgibbons/django-rest-swagger/commit/949e71b98635d8797ecf1051bc239d1be38152c4!?
Sorry I lost track of this! Hopefully it's all fixed, I know a lot has changed since I put in the pull request.
Now @ 2.1.6. Thank you!
https://docs.djangoproject.com/en/1.8/ref/settings/#secure-proxy-ssl-header

This is the correct way to handle this. Did you already tried ?
@ticosax Sounds like I took the wrong path on that not checking the docs first. Thank you.
:+1:
Thank you for this. This no longer applies to v2+ as DRF 3.4 is now responsible generating the schema.
Removing this conditional lets Swagger UI output `array(field)`. If the conditional was left in place, we would just see `array` when `data_type ='field'`. The conditional was preventing anything that's not in `BaseMethodIntrospector.PRIMITIVES` from being output. I could've added a `field` key to `PRIMITIVES`, but I didn't think it qualifies as a primitive.
Thank you for accepting my pull request.  Can I please ask when this will
be released to PyPI?

Thanks again,
Rod Carroll

On Wed, Oct 14, 2015 at 10:30 PM, ariovistus notifications@github.com
wrote:

> Merged #365 https://github.com/marcgibbons/django-rest-swagger/pull/365.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/marcgibbons/django-rest-swagger/pull/365#event-435964802
> .
Thank you for this. DRF 3.4 now handles schema generation, so the YAML docstring has been deprecated as of v2. Closing out as this no longer applies.
As of v2, you can use DRF Permission classes on the schema view, so this no longer applies. Thanks for the submission!
JFI: one of the Travis jobs failed, probably because of a network issue - should be restarted/retried (https://travis-ci.org/marcgibbons/django-rest-swagger/jobs/93179102).
Yeah looks like a network issue.

Unfortunately even though it's my PR, Travis doesn't let me retrigger that individual job -- instead I'd have to amend the commit & force push to trigger another run. However that would mean another 1hr 50 mins of cumulative Travis time wasted (since the testing matrix is pretty large; IMO the Django 1.5 and 1.6 jobs should be dropped given they're EOL), so I'll have to leave this to one of the project maintainers to retrigger just that job :-)
> I'll have to leave this to one of the project maintainers to retrigger just that job

:+1:
As for addressing this, there would be `travis_retry`, which runs a command up to 3 times, but this should not be wrapped around / used for `tox` itself for obvious reasons.
For another project I had created a wrapper script that then is used by tox internally: https://github.com/yourlabs/django-autocomplete-light/blob/207b206681a978b9825a969fd9b2fe6e54200ee1/.travis.yml#L43-L58
Thank you for merging :-)
Closing this out as DRF is now responsible for generating the schema. Typing is still under development in 3.4 and CoreAPI, but this project no longer supports YAML docstrings.
Thanks for this. Closing out as the new schema generator in DRF 3.4 is responsible for including/excluding url patterns.
Hello - introspection is now done by DRF 3.4, so this no longer applies to this project. Thank you!
closing for now while i check the tests, etc
The SwaggerUI has been updated to 2.1.6 as of DRS v2, so this no longer applies. Thank you!
I have a problem with STATIC_URL. It`s empty 
It`s doesn't work for  
`python manage.py runserver`
and for gunicorn
Any progress so far? Mb you need help?
:+1:
Works for me :+1:
@marcgibbons - can I get a review on this? I'm running on my fork/branch of DRS but I'd like to get back to a merged & released version.
Thanks @MrTam. Is it possible to add a few unit tests to cover this?
Hi @marcgibbons,

Sure, no problem - I'll get a few done up and added to the PR either today, or at the latest tomorrow.

Cheers,
Tom
Great - thank you!
Great! I was just about to start fixing this but it seems that this patch resolves the issue I for me. 

You should probably fix the linting error and rebase tough.
@thomasf, is it ok now?
I'm not a project maintainer so my opinion isnt that important, I was just looking at the red CI status..

Personally I would:
1. squash all commits into one so that the master commit log is easier to understand.
2. try to add at least one test.
:shipit: Thank you!
@marcgibbons was there any reason to close this? We can change if something needs to be polished here.
@galuszkak I may have fat fingered this while cleaning up issues and forgot to comment.

As of DRF 3.4, schema generation and introspection is being done by Django REST Framework, and no longer by this project. (See http://www.django-rest-framework.org/api-guide/schemas/)

If pattern grouping remains a problem in the new version, please open a new ticket on DRF. 

Thank you!
The link on the Github repo description also needs updating.
Thank you! Updated.
You should put HTTPS on the repo link ;)
💯
🔒
FWIW, I am successfully using this package in Django 1.9. I think it's more that the test suite does not support 1.9, than the package itself does not.
We should probably fix the tests rather than suppress the errors?
Agreed, but in a PR after this one to save blocking & to keep this PR smaller and easier to review. I'll file a separate issue for the Django 1.9 failures shortly - having the tests running in the meantime will allow others to iterate more easily for the 1.9 compat fixes.
(This is the approach eg django-rest-framework takes)
(Sorry multiple comments)
I think it's also helpful for users of the package, since they can glance at the Travis run, or the Travis config and quickly see that the package is broken on 1.9, rather than thinking it may work but just happens not to be testing in CI yet.
100%. It seems like the failing tests come from the block on lines 2936 of test.py...
There are actually a good few lines in there with issues; dealing with deprecations, etc. I started an effort to fix the test suite in my Django 1.10 fix, and it just started to turn into a rather sizable job. But if this PR is dropping support for everything prior to 1.8, then that effort should become massively easier.
I haven't tried this out yet, but is this not going to add query params for _all_ GET queries, including the ones that don't actually need query params ? for e.g. a simple `/resource/pk/` query which only uses the serializer for the response, will now add the serializer fields to query params in the docs ?

Maybe we need to add a yaml option to explicitly say if the serializer is to be used to generate query parameters ?
This PR works great, thank you!
@arshsingh Yes you are right. I have fixed it on my end. Will update the pull request soon.
Hey @swapnilsm thanks for this. This issue will go away in v2 / Django REST 3.4 as schema generation will be done by DRF. The new version will have breaking changes, so this feature may be valuable for existing projects. I'll probably make another release in the 0.x.x series before the v2 release.

It would be good to update so that query params are only added when explicitly requested.
@marcgibbons Great to know that. Sure I will add that flag. :)
Closing since YAML docstrings were deprecated and related docs removed.
Huge thumbs up from me! 👍 😎
Nice. Let me know if/when you need me to do anything on the REST framework docs side of things! :)
Really curious, is there any reason why you're requiring `simplejson` over the built-in `json` module?
Merged in the stable/0.3.x branch.
I think `swagger-ui.min.js` also needs updating with the XSS fix, I can still repro after updating.
Thank you!
@rloomans Thanks for this! I did a quick check back to the SwaggerUI dist source, and `style.css` doesn't appear to be used at all... so we can delete it completely.

Going to reference this on the SwaggerUI project.
Released in 2.0.2. Thanks!
Awesome. Confirmed working fine. Thanks.
I can confirm the XSS no longer repros after this.
Thank you :-)
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/493?src=pr) is 60.60% (diff: 100%)

> Merging [#493](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/493?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will decrease coverage by **24.50%**

``` diff
@@             master       #493   diff @@
==========================================
  Files             3          5     +2   
  Lines            47         66    +19   
  Methods           0          0          
  Messages          0          0          
  Branches          2          4     +2   
==========================================
  Hits             40         40          
- Misses            7         26    +19   
  Partials          0          0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [dc1eaec...7c22eb9](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/dc1eaec5b397a7fd2b1e276f7d850afb213a86ac...7c22eb9382a248482f8655120d217dff33215fb0?src=pr)
Thanks for this! This is cool, but I am somewhat hesitant to introduce this just yet. Ideally, we'd want to provide all the flexibility of configuration the schema view; the kwargs for the schema generator, view permissions, whether or not to include the request object, etc. Since the schema generation is still very new and still being developed, my preference is to keep this loose for now.

Also, the schema view can originate from a Router (although needs a fix to make it a default) (https://github.com/tomchristie/django-rest-framework/issues/4268)
Ah, well I guess this submission was a bit naive, then.  :)  Looking at the schema documentation in DRF, I only see three kwargs, which wouldn't so bad to support along with the optional request argument.  I don't know much about view permissions, though.

It seems that it would be nice to have something like this in place even if schema generation isn't locked down, as a basis for future modification, but it's not that big of a deal to just include a copy of this view in my project anyways for now.

Is there anything I could do to make this PR useful to this project in any way?  If not, feel free to just close the PR.
@malikoth It is a good idea, and I think a nice convenience to get people quickly up and running. Things are still in flux, so I will keep it in the backlog and revisit. Thank you so much!
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/499?src=pr) is 100% (diff: 100%)

> Merging [#499](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/499?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will increase coverage by **3.63%**

``` diff
@@             master   #499   diff @@
======================================
  Files             3      3          
  Lines            55     50     -5   
  Methods           0      0          
  Messages          0      0          
  Branches          3      2     -1   
======================================
- Hits             53     50     -3   
+ Misses            1      0     -1   
+ Partials          1      0     -1   
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [e9ea647...f987e49](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/e9ea647220630242e8b51d43daa77881fc54403c...f987e4992aa39725e8d089c3d693ef79869914b7?src=pr)
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/503?src=pr) is 100% (diff: 100%)

> Merging [#503](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/503?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will not change coverage

``` diff
@@           master   #503   diff @@
====================================
  Files           3      3          
  Lines          66     66          
  Methods         0      0          
  Messages        0      0          
  Branches        6      6          
====================================
  Hits           66     66          
  Misses          0      0          
  Partials        0      0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [c31d888...28444c9](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/c31d8889c33606ad8a329c899e96a9cc7b843910...28444c9bed525f7866ad90b469baee7be1e30d79?src=pr)
Thanks!

This should probably then also mention `tox -l` to get a list of environments etc - because typically during development you should not have to run all of them, but only e.g. `py35-django1.9-drf3.4`.

_Edit_: also the output example is probably not necessary - at least in the provided state it does not add more information, but just some confusion (I was thinking that only linting would get done in this project).
@blueyed Thanks for good advice! I just added comments about it
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/505?src=pr) is 100% (diff: 100%)

> Merging [#505](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/505?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will not change coverage

``` diff
@@           master   #505   diff @@
====================================
  Files           3      3          
  Lines          50     50          
  Methods         0      0          
  Messages        0      0          
  Branches        2      2          
====================================
  Hits           50     50          
  Misses          0      0          
  Partials        0      0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [fbd0a90...0728654](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/fbd0a90ed7ca28f57c3bfbeeef7fbad081dac253...0728654f849b511ce9f2329069189e9ecdcba61f?src=pr)
@bitnik Thanks for the submission. This looks like something something that should be posted to the SwaggerUI project? 

https://github.com/swagger-api/swagger-ui
@marcgibbons thank you! but sorry that i am confused. do you generate this js file out of Swagger UI project?
@bitnik Yes, the SwaggerUI static files are stock and taken directly from SwaggerUI's `dist`. Please open an issue / PR on the Swagger project. Thank you!
@marcgibbons thanks a lot for the explanation.
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/506?src=pr) is 100% (diff: 100%)

> Merging [#506](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/506?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will not change coverage

``` diff
@@           master   #506   diff @@
====================================
  Files           3      3          
  Lines          50     50          
  Methods         0      0          
  Messages        0      0          
  Branches        2      2          
====================================
  Hits           50     50          
  Misses          0      0          
  Partials        0      0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [fbd0a90...c2cf2c0](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/fbd0a90ed7ca28f57c3bfbeeef7fbad081dac253...c2cf2c01bd8548fe75d6f064cde3a693d347ebca?src=pr)
@marcgibbons 
Can I do anything here?  The VersionEye failure seems to be unrelated.

Apart from that: how does this apply / work in version 2?  (asked in https://github.com/marcgibbons/django-rest-swagger/pull/522#issuecomment-240192237 already)
@blueyed I think this patch is too far behind master now. A rebase reveals this patched code has moved out of `base.html` completely!?
@lwm 
The PR is for stable/0.3.x.. :)
I realize this PR / issue is ancient, but pushed some new settings for headers. See https://marcgibbons.com/django-rest-swagger/settings/#headers
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/513?src=pr) is 100% (diff: 100%)

> Merging [#513](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/513?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will not change coverage

``` diff
@@           master   #513   diff @@
====================================
  Files           3      3          
  Lines          50     50          
  Methods         0      0          
  Messages        0      0          
  Branches        2      2          
====================================
  Hits           50     50          
  Misses          0      0          
  Partials        0      0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [f80c458...60efe71](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/f80c458671ef60e9f6163fe133ce4def8c465d9a...60efe713abddf4c82e922d13be18647d3d065573?src=pr)
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/514?src=pr) is 100% (diff: 100%)

> Merging [#514](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/514?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will not change coverage

``` diff
@@           master   #514   diff @@
====================================
  Files           3      3          
  Lines          50     50          
  Methods         0      0          
  Messages        0      0          
  Branches        2      2          
====================================
  Hits           50     50          
  Misses          0      0          
  Partials        0      0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [b896a50...b4184a3](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/b896a501bbfe745d8f82cfdb887e6367c68e1858...b4184a35108a2647c153e5e7a724b17c7f972746?src=pr)
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/516?src=pr) is 100% (diff: 100%)

> Merging [#516](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/516?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will not change coverage

``` diff
@@           master   #516   diff @@
====================================
  Files           3      3          
  Lines          50     54     +4   
  Methods         0      0          
  Messages        0      0          
  Branches        2      3     +1   
====================================
+ Hits           50     54     +4   
  Misses          0      0          
  Partials        0      0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [3838299...1fef970](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/3838299cd5ac5241cf9ae39ab0da090df6fd682c...1fef9700b155caa858b2a4811031b4c658ca531d?src=pr)
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/519?src=pr) is 100% (diff: 100%)

> Merging [#519](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/519?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will not change coverage

``` diff
@@           master   #519   diff @@
====================================
  Files           3      3          
  Lines          54     60     +6   
  Methods         0      0          
  Messages        0      0          
  Branches        3      4     +1   
====================================
+ Hits           54     60     +6   
  Misses          0      0          
  Partials        0      0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [36e82c3...334cb0d](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/36e82c316493ccfd4c1dd2867c6b3f171d5d104d...334cb0d6eae95d196d12258d2ec25d69984b7d8f?src=pr)
The missing version comes via DRF's AcceptHeaderVersioning (without a default and therefore enforced version).  Do you have a pointer how this should be configured in django-rest-swagger 2.x?
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/522?src=pr) is 96.87% (diff: 33.33%)

> Merging [#522](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/522?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will decrease coverage by **3.12%**

``` diff
@@           master       #522   diff @@
========================================
  Files           3          3          
  Lines          61         64     +3   
  Methods         0          0          
  Messages        0          0          
  Branches        5          6     +1   
========================================
+ Hits           61         62     +1   
- Misses          0          1     +1   
- Partials        0          1     +1   
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [a2b6487...9fb9474](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/a2b64870473f5f48a70e2184bcbb1f08bf3ba745...9fb94746da9b60568988ce730d0a68650ad13933?src=pr)
Good call.
@marcgibbons 
There should be a test of course, but I am not sure if this is the best approach for this issue anyway: it would be nice to return more information / the actual error and detail of the 406 somehow - but that might get done implicitly for an empty return upwards in the stack.  I don't remember the details right now.
What do you think?
@blueyed I've pulled your branch into #523  and added some additional handling. Thank you for this!
Shouldn't it be `renderer_context['response']` instead of `['response']` ?
Of course!  Thanks!
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/523?src=pr) is 100% (diff: 100%)

> Merging [#523](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/523?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will not change coverage

``` diff
@@           master   #523   diff @@
====================================
  Files           3      3          
  Lines          61     66     +5   
  Methods         0      0          
  Messages        0      0          
  Branches        5      6     +1   
====================================
+ Hits           61     66     +5   
  Misses          0      0          
  Partials        0      0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [a2b6487...7d8cca9](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/a2b64870473f5f48a70e2184bcbb1f08bf3ba745...7d8cca9c3498652582d25e6aeec8fb3411262cfc?src=pr)
@marcgibbons 
Thanks!

The "fixup!" commit was meant to be squashed though.
Check out http://fle.github.io/git-tip-keep-your-branch-clean-with-fixup-and-autosquash.html.
zsh has nice completion after `git commit --fixup`, and I am using the following shell function (where just `gcf` adds a fixup for HEAD):

``` zsh
gcf () {
    typeset -a opts
    while [[ $1 = -* ]]
    do
        opts+=($1) 
        shift
    done
    git commit $opts --fixup "${@:-HEAD}"
}
```

I have an alias for `grbi=git rebase -i --autostash` and `grbiom=grbi origin/master` then.

Hope that's useful.. :)
@blueyed I had no idea! Very cool feature!
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/527?src=pr) is 100% (diff: 100%)

> Merging [#527](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/527?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will not change coverage

``` diff
@@           master   #527   diff @@
====================================
  Files           3      3          
  Lines          66     66          
  Methods         0      0          
  Messages        0      0          
  Branches        6      6          
====================================
  Hits           66     66          
  Misses          0      0          
  Partials        0      0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [4edbd83...0efbd7b](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/4edbd83bd86a944d689ae592fff5393b52e0913d...0efbd7bbb14c8fbaa806a1aa48dce4030dc1f676?src=pr)
👍
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/528?src=pr) is 100% (diff: 100%)

> Merging [#528](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/528?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will not change coverage

``` diff
@@           master   #528   diff @@
====================================
  Files           3      3          
  Lines          66     66          
  Methods         0      0          
  Messages        0      0          
  Branches        6      6          
====================================
  Hits           66     66          
  Misses          0      0          
  Partials        0      0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [4edbd83...d6cbc64](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/4edbd83bd86a944d689ae592fff5393b52e0913d...d6cbc64f4fbf86016833c316e8d2c0b2c2c73560?src=pr)
@blueyed This is good, but the problem is that the list of lexers is generated from pygments and varies from OS and versions - so we could endlessly be adding more migrations since the choices vary.

What do you think about hardcoding the `choices` in the snippets models of the example_app to a couple of common languages?
> What do you think about hardcoding the `choices` in the snippets models of the example_app to a couple of common languages?

Sounds good.  Will you do it?

I am closing this PR.
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/531?src=pr) is 100% (diff: 100%)

> Merging [#531](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/531?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will not change coverage

``` diff
@@           master   #531   diff @@
====================================
  Files           3      3          
  Lines          66     66          
  Methods         0      0          
  Messages        0      0          
  Branches        6      6          
====================================
  Hits           66     66          
  Misses          0      0          
  Partials        0      0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [3dd6d32...358c061](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/3dd6d329a47ed8ec002c1f3a3318d1b8592d5438...358c0616024c985eba22353eb74c3cf1c6217771?src=pr)
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/532?src=pr) is 100% (diff: 100%)

> Merging [#532](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/532?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will not change coverage

``` diff
@@           master   #532   diff @@
====================================
  Files           3      3          
  Lines          66     66          
  Methods         0      0          
  Messages        0      0          
  Branches        6      6          
====================================
  Hits           66     66          
  Misses          0      0          
  Partials        0      0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [571d29e...49da5fd](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/571d29eb2527711b622caf1f281e79270b9099f2...49da5fdffa3658579872fbc1df335b4287e804ed?src=pr)
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/545?src=pr) is 100% (diff: 100%)

> Merging [#545](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/545?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will not change coverage

``` diff
@@           master   #545   diff @@
====================================
  Files           3      3          
  Lines          66     66          
  Methods         0      0          
  Messages        0      0          
  Branches        6      6          
====================================
  Hits           66     66          
  Misses          0      0          
  Partials        0      0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [c31d888...b8725d0](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/c31d8889c33606ad8a329c899e96a9cc7b843910...b8725d00c26528c9a533ec99befd4a4f935d36be?src=pr)
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/550?src=pr) is 100% (diff: 100%)

> Merging [#550](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/550?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will not change coverage

``` diff
@@           master   #550   diff @@
====================================
  Files           3      3          
  Lines          66     66          
  Methods         0      0          
  Messages        0      0          
  Branches        6      6          
====================================
  Hits           66     66          
  Misses          0      0          
  Partials        0      0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [c31d888...57d68e9](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/c31d8889c33606ad8a329c899e96a9cc7b843910...57d68e9048b7a657ff909ef1bd69005eaa067012?src=pr)
bump! ;)
Thank you @lwm !
:rocket:
Thanks @tomchristie !
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/556?src=pr) is 100% (diff: 100%)

> Merging [#556](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/556?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will not change coverage

``` diff
@@           master   #556   diff @@
====================================
  Files           3      3          
  Lines          66     66          
  Methods         0      0          
  Messages        0      0          
  Branches        6      6          
====================================
  Hits           66     66          
  Misses          0      0          
  Partials        0      0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [21fdc98...c546c06](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/21fdc98f9e40346722bb56e7c0925378090207f5...c546c06628703a3a5c8c42dc89ddbbc8bf63bc0e?src=pr)
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/557?src=pr) is 100% (diff: 100%)

> Merging [#557](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/557?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will not change coverage

``` diff
@@           master   #557   diff @@
====================================
  Files           3      3          
  Lines          66     65     -1   
  Methods         0      0          
  Messages        0      0          
  Branches        6      6          
====================================
- Hits           66     65     -1   
  Misses          0      0          
  Partials        0      0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [dc4e04f...41e9d5a](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/dc4e04f6359885a34131a48729c84524bbd8e54c...41e9d5ac0ea84fa6374d9168afc9245a6e5f053a?src=pr)
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/559?src=pr) is 100% (diff: 100%)

> Merging [#559](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/559?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will not change coverage

``` diff
@@           master   #559   diff @@
====================================
  Files           3      3          
  Lines          65     65          
  Methods         0      0          
  Messages        0      0          
  Branches        6      6          
====================================
  Hits           65     65          
  Misses          0      0          
  Partials        0      0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [72754d4...8615ea2](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/72754d4f7898122ca422376dcf4c912a2023dff4...8615ea2334674ca8d8b6ea9a26ac2e4be26d9560?src=pr)
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/563?src=pr) is 100% (diff: 100%)

> Merging [#563](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/563?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will not change coverage

``` diff
@@           master   #563   diff @@
====================================
  Files           3      3          
  Lines          65     63     -2   
  Methods         0      0          
  Messages        0      0          
  Branches        6      7     +1   
====================================
- Hits           65     63     -2   
  Misses          0      0          
  Partials        0      0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [fd1dd3c...e0f5439](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/fd1dd3c53c756f3b4982c450db8a1ed9533772e9...e0f5439e4fed8cc84dbae2bbab71af4a0004e1c0?src=pr)
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/565?src=pr) is 100% (diff: 100%)

> Merging [#565](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/565?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will not change coverage

``` diff
@@           master   #565   diff @@
====================================
  Files           4      4          
  Lines          83     83          
  Methods         0      0          
  Messages        0      0          
  Branches        8      8          
====================================
  Hits           83     83          
  Misses          0      0          
  Partials        0      0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [cdb3741...5b030ec](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/cdb3741ae61a89a52b774c73c54a02847c71e3f0...5b030ec7ab378d98725a0d42f73ca7f759333570?src=pr)
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/566?src=pr) is 100% (diff: 100%)

> Merging [#566](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/566?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will not change coverage

``` diff
@@           master   #566   diff @@
====================================
  Files           4      4          
  Lines          83     83          
  Methods         0      0          
  Messages        0      0          
  Branches        8      8          
====================================
  Hits           83     83          
  Misses          0      0          
  Partials        0      0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [dc1cf8a...66e15a1](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/dc1cf8a3fd690c35b58417d54c35c71bc4d9207d...66e15a1fbdfdc748e78164e160d2a04a59f2508f?src=pr)
Thank you!
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/569?src=pr) is 100% (diff: 100%)

> Merging [#569](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/569?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will not change coverage

``` diff
@@           master   #569   diff @@
====================================
  Files           4      4          
  Lines          83     84     +1   
  Methods         0      0          
  Messages        0      0          
  Branches        8      8          
====================================
+ Hits           83     84     +1   
  Misses          0      0          
  Partials        0      0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [99d65f3...89528c4](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/99d65f3de930f1aa24418ceec3ffced8efe3dcd8...89528c4917ebd83415747c8c25a5dd8ffcc1d532?src=pr)
@theromis This looks good, though I'm replacing this whole class with a call to the new `get_schema_view` shortcut just released in DRF 3.5.

Maybe propose this on Django REST Framework?

Otherwise, you can absolutely create your own Schema APIView. The intent here was to allow people to get quickly up and running.
@marcgibbons Thank you for quick reply, your answer not clear to me.

Do you want me to change my pull request, move this code to DRF or just declining PR?
@marcgibbons Working on my documentation I can change something if you want.
Hey @theromis - sorry I did not reply to your previous comment.

The block of code subject to the PR above is being removed (currently in a feature branch), so I recommend modifying the get_schema_view from `rest_framework.schemas` and opening a PR on Django REST Framework. This fix will help others who may not necessarily use Swagger.

Meanwhile, you can create your own SchemaView in your projects to suit your use case and not use the short cut.
I can see 2 feature branch: `feature/swagger-2` and `feature/upgrade-reqs`

```
➜  rest_framework_swagger git:(feature/swagger-2) git branch -a
* feature/swagger-2
  master
  remotes/origin/HEAD -> origin/master
  remotes/origin/feature/swagger-2
  remotes/origin/feature/upgrade-reqs
  remotes/origin/gh-pages
  remotes/origin/master
  remotes/origin/stable/0.3.x
```

I assume you mean `feature/swagger-2` am I right? Just want to play with a new upcoming swagger.
See https://github.com/marcgibbons/django-rest-swagger/pull/570
Closing per comment https://github.com/marcgibbons/django-rest-swagger/pull/569#issuecomment-256176880 above.
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/570?src=pr) is 100% (diff: 100%)

> Merging [#570](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/570?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will not change coverage

``` diff
@@           master   #570   diff @@
====================================
  Files           4      4          
  Lines          83     68    -15   
  Methods         0      0          
  Messages        0      0          
  Branches        8      7     -1   
====================================
- Hits           83     68    -15   
  Misses          0      0          
  Partials        0      0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [19242d6...0edee4c](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/19242d6c6a659962b2932f59cff5ce2e329c3930...0edee4cbd701608d44e67ba5caf3755b889ab669?src=pr)
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/571?src=pr) is 100% (diff: 100%)

> Merging [#571](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/571?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will not change coverage

``` diff
@@           master   #571   diff @@
====================================
  Files           4      4          
  Lines          83     83          
  Methods         0      0          
  Messages        0      0          
  Branches        8      8          
====================================
  Hits           83     83          
  Misses          0      0          
  Partials        0      0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [99d65f3...a2c8e04](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/99d65f3de930f1aa24418ceec3ffced8efe3dcd8...a2c8e047bdc8b57ca495e3b246ec63d38d232d2c?src=pr)
This seemed to be the exact document I needed. I'm building an API from scratch and have elected to use swagger and Header Versioning right from the get go with the Django Rest Framework. 

 See:

Browsable API and Versioning - Google Groups
https://groups.google.com/forum/#!topic/django-rest-framework/x3xah0f9jps

But when I try to implement this solution, I get this error:

`Unable to Load SwaggerUI`

In my javascript console.

This is the change I made in my project, basing it off this document:

.../lib/python2.7/site-packages/rest_framework_swagger/templates/rest_framework_swagger/index.html

``` html
{% extends "rest_framework_swagger/base.html" %}

{% block extra_scripts %}
  <script type="text/javascript">
    $(function () {
      var ApiVersionAuthorization = function () {};
      ApiVersionAuthorization.prototype.apply = function (obj) {
        console.log("Happy time!");
        obj.headers['Accept'] += '; version=2.0';
        return true;
      };
      swaggerUi.api.clientAuthorizations.add('api_version', new ApiVersionAuthorization());
    });
  </script>
{% endblock extra_scripts %}
```

I could totally be doing this wrong, so I'll be double checking this later / spending more time troubleshooting, but I figured I'd post this here to see if any ideas crop up 😸
Yeah, I guess you need to check for JS errors, and see when it actually breaks.
I am using this in an own project successfully, but maybe something was lost when doing the PR?!
🚀
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/575?src=pr) is 100% (diff: 100%)

> Merging [#575](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/575?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will not change coverage

``` diff
@@           master   #575   diff @@
====================================
  Files           4      4          
  Lines          83     83          
  Methods         0      0          
  Messages        0      0          
  Branches        8      8          
====================================
  Hits           83     83          
  Misses          0      0          
  Partials        0      0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [99d65f3...42f8824](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/99d65f3de930f1aa24418ceec3ffced8efe3dcd8...42f8824fa7104886b44c460b55ed01e02719b22f?src=pr)
Thank you!
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/576?src=pr) is 100% (diff: 100%)

> Merging [#576](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/576?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will not change coverage

``` diff
@@           master   #576   diff @@
====================================
  Files           4      4          
  Lines          68     68          
  Methods         0      0          
  Messages        0      0          
  Branches        7      7          
====================================
  Hits           68     68          
  Misses          0      0          
  Partials        0      0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [0bcd8f9...af973ff](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/0bcd8f9cfcb7aaebeca3d8f23a750ef5335358d1...af973ff7bf3f82178fcfe511937142ee353f3fea?src=pr)
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/597?src=pr) is 100% (diff: 100%)
> Merging [#597](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/597?src=pr) into [release/2.1.1](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/release/2.1.1?src=pr) will not change coverage

```diff
@@           release/2.1.1   #597   diff @@
===========================================
  Files                  4      4          
  Lines                 68     83    +15   
  Methods                0      0          
  Messages               0      0          
  Branches               7      8     +1   
===========================================
+ Hits                  68     83    +15   
  Misses                 0      0          
  Partials               0      0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [30b81b9...2ac2813](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/30b81b993e057427acd5f66f6ed6e524b68bb846...2ac2813e67e183cee42639528ef3d2c5083c8aba?src=pr)
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/598?src=pr) is 100% (diff: 100%)
> Merging [#598](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/598?src=pr) into [release/2.1.1](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/release/2.1.1?src=pr) will not change coverage

```diff
@@           release/2.1.1   #598   diff @@
===========================================
  Files                  4      4          
  Lines                 83     83          
  Methods                0      0          
  Messages               0      0          
  Branches               8      8          
===========================================
  Hits                  83     83          
  Misses                 0      0          
  Partials               0      0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [d326f52...981df50](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/d326f52890f67b94f4d4fd52c7ebc266394d7ed5...981df50bd81eb5065325ff99af19258fe3efd926?src=pr)
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/605?src=pr) is 100% (diff: 100%)
> Merging [#605](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/605?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will not change coverage

```diff
@@           master   #605   diff @@
====================================
  Files           4      4          
  Lines          68     68          
  Methods         0      0          
  Messages        0      0          
  Branches        7      7          
====================================
  Hits           68     68          
  Misses          0      0          
  Partials        0      0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [1e8a5f4...118623a](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/1e8a5f467497829efcf8905860a685b6031e0a2a...118623ac736aedf821945050cd4403cbe8bdcfe6?src=pr)
For development we can use the `python setup.py develop -Z` command to always install unzipped, but `python setup.py install` has no equivalent option.
Looks good to me!
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/606?src=pr) is 100% (diff: 100%)
> Merging [#606](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/606?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will not change coverage

```diff
@@           master   #606   diff @@
====================================
  Files           4      4          
  Lines          68     83    +15   
  Methods         0      0          
  Messages        0      0          
  Branches        7      8     +1   
====================================
+ Hits           68     83    +15   
  Misses          0      0          
  Partials        0      0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [1e8a5f4...dd8b5a9](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/1e8a5f467497829efcf8905860a685b6031e0a2a...dd8b5a9e764f87eb1937c36dbed49167aa116d23?src=pr)
Closing since related code was reworked while ago.
## [Current coverage](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/610?src=pr) is 100% (diff: 100%)
> Merging [#610](https://codecov.io/gh/marcgibbons/django-rest-swagger/pull/610?src=pr) into [master](https://codecov.io/gh/marcgibbons/django-rest-swagger/branch/master?src=pr) will not change coverage

```diff
@@           master   #610   diff @@
====================================
  Files           4      4          
  Lines          83     83          
  Methods         0      0          
  Messages        0      0          
  Branches        8      8          
====================================
  Hits           83     83          
  Misses          0      0          
  Partials        0      0          
```

> Powered by [Codecov](https://codecov.io?src=pr). Last update [d1bd5a9...1961c7a](https://codecov.io/gh/marcgibbons/django-rest-swagger/compare/d1bd5a9750fcb43bd73f110361ffa1ff8cc7214a...1961c7a5786c5cc5bfd8e0fa8bfe9117f80bb796?src=pr)
You're welcome :-)
Thank you!
Closing since YAML docstrings are deprecated for some time.
This looks good. Will combine with #626
Hey @marcgibbons, sorry to bother but, any update on this?
Is the current checklist still accurate? I could maybe give some of this a shot!
@marcgibbons Is there any plan to ever merge this in?
Closing since Swagger UI rendering was reworked while ago and PR is not relevant any more.
Same as PR #685.
sorry,  I made an operational mistake.
Didn't notice earlier, but this is a duplicate of #650 and #644.
@tpyo then it may be better to close this pull request. Although I doubt that @marcgibbons will ever look at any improvements to the so-called stable version.
By now also Django 1.8 and 1.10 reached their EOL.  I'm happy to update the PR if there's interest.
`¯\_(ツ)_/¯`
Closing since docs now rendered using `python-openapi-codec`, so that the PR is not relevant any more.
DRF's JSONRenderer does essentially the same thing, with a few extra flags:

https://github.com/encode/django-rest-framework/blob/master/rest_framework/renderers.py#L85
Closing stale PR.
I've also run into this and think it's a great idea. I'm also running into issues where my permissions are causing my swagger docs to 500, as the state is much different when displaying the schema vs actually hitting the API. 

I don't think permissions should be necessary when simply mapping out the urls.

+1 !
@craiga  do you know of a workaround on a per-view basis I could implement in the meantime? Looking like something around custom schemas attached to my views might work?
@nicholasserra Sorry, but I don’t. I’ve been using my own branch with this PR included for a while now and it seems to be working fine.
Is this going to be merged into master anytime soon? Since I see that the PR is hanging for a couple of months already and we are in need of this to simplify things.
@lukzmu I just noticed that [Marc posted a call for help to deal with stuff like this](https://github.com/marcgibbons/django-rest-swagger/commit/8648cd00ae215513b0ee5f952dc6ded857145be5), so it might be a while unless someone's able to volunteer to help out.
Oh just saw that as well, think we will have to import the PR for now then :)
Hopefully this will be sorted out in the future and hope @marcgibbons will get help :)
Could someone please approve this to push this forward. 

I would really appreciate it.
I just tested the proposed pull request. It works great for me with one exception. I have one View that uses the [`get_serializer_class(self)`](https://www.django-rest-framework.org/api-guide/generic-views/#get_serializer_classself) method. In this method I use `self.request.method` which fails as `request` is `None` when running with the `IGNORE_USER_PERMISSIONS` setting.

It is easy enough for me to adapt the `get_serializer_class()` code to take this case into account. I am in favor of this pull request; thanks.
@BenjaminHabert Can you provide a stack trace of where that problem is happening?

[The docs state](https://www.django-rest-framework.org/api-guide/schemas/#get_schemaself-request) that the request argument to `get_schema` is optional, so I wonder if `self.request` being `None` is valid when generating the schema.
here is the stacktrace:

```
Internal Server Error: /swagger/
Traceback (most recent call last):
  File "/Users/benjamin/Documents/Quantmetry_Missions/Plasidia/moon-api/.venv/lib/python3.6/site-packages/django/core/handlers/exception.py", line 34, in inner
    response = get_response(request)
  File "/Users/benjamin/Documents/Quantmetry_Missions/Plasidia/moon-api/.venv/lib/python3.6/site-packages/django/core/handlers/base.py", line 126, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "/Users/benjamin/Documents/Quantmetry_Missions/Plasidia/moon-api/.venv/lib/python3.6/site-packages/django/core/handlers/base.py", line 124, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/Users/benjamin/Documents/Quantmetry_Missions/Plasidia/moon-api/.venv/lib/python3.6/site-packages/django/views/decorators/csrf.py", line 54, in wrapped_view
    return view_func(*args, **kwargs)
  File "/Users/benjamin/Documents/Quantmetry_Missions/Plasidia/moon-api/.venv/lib/python3.6/site-packages/django/views/generic/base.py", line 68, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/benjamin/Documents/Quantmetry_Missions/Plasidia/moon-api/.venv/lib/python3.6/site-packages/rest_framework/views.py", line 495, in dispatch
    response = self.handle_exception(exc)
  File "/Users/benjamin/Documents/Quantmetry_Missions/Plasidia/moon-api/.venv/lib/python3.6/site-packages/rest_framework/views.py", line 455, in handle_exception
    self.raise_uncaught_exception(exc)
  File "/Users/benjamin/Documents/Quantmetry_Missions/Plasidia/moon-api/.venv/lib/python3.6/site-packages/rest_framework/views.py", line 492, in dispatch
    response = handler(request, *args, **kwargs)
  File "/Users/benjamin/Documents/Quantmetry_Missions/Plasidia/moon-api/.venv/lib/python3.6/site-packages/rest_framework_swagger/views.py", line 32, in get
    schema = generator.get_schema()
  File "/Users/benjamin/Documents/Quantmetry_Missions/Plasidia/moon-api/.venv/lib/python3.6/site-packages/rest_framework/schemas/generators.py", line 281, in get_schema
    links = self.get_links(None if public else request)
  File "/Users/benjamin/Documents/Quantmetry_Missions/Plasidia/moon-api/.venv/lib/python3.6/site-packages/rest_framework/schemas/generators.py", line 319, in get_links
    link = view.schema.get_link(path, method, base_url=self.url)
  File "/Users/benjamin/Documents/Quantmetry_Missions/Plasidia/moon-api/.venv/lib/python3.6/site-packages/rest_framework/schemas/inspectors.py", line 215, in get_link
    fields += self.get_serializer_fields(path, method)
  File "/Users/benjamin/Documents/Quantmetry_Missions/Plasidia/moon-api/.venv/lib/python3.6/site-packages/rest_framework/schemas/inspectors.py", line 336, in get_serializer_fields
    serializer = view.get_serializer()
  File "/Users/benjamin/Documents/Quantmetry_Missions/Plasidia/moon-api/.venv/lib/python3.6/site-packages/rest_framework/generics.py", line 110, in get_serializer
    serializer_class = self.get_serializer_class()
  File "/Users/benjamin/Documents/Quantmetry_Missions/Plasidia/moon-api/moon/glycemia/views.py", line 88, in get_serializer_class
    if self.request.method == 'GET':
AttributeError: 'NoneType' object has no attribute 'method'
[07/Feb/2019 15:23:11] "GET /swagger/ HTTP/1.1" 500 18760
```
And here is the culprit (which was easy enough to modify and protect against this error):

```python
# file: moon-api/moon/glycemia/views.py
class GlycemiaAPIView(generics.ListCreateAPIView):
    def get_serializer_class(self):
        if self.request.method == 'GET':
            return GlycemiaSerializer
        return GlycemiaListCreateSerializer
```
@BenjaminHabert Thanks for that. `self.request` being `None` is the correct behaviour here … are you comfortable with that?
@craiga yes
so, when you a planning to merge this PR to master?
Any progress on this?
As this project is deprecated, I'm closing this PR to make this clear to subsequent visitors. [Check the project's readme for more info and an alternative library to use.](https://github.com/marcgibbons/django-rest-swagger/blob/master/README.md)
@craiga Thanks for the response. What will be the other open issues and PRs? I think it would be better if you "archive" the project and make it read only.
@ulgens I'm not sure. I have no special status in this project, I just happened to open a moderately popular pull request. ;)

@marcgibbons What do you think of archiving this project?
Looks good
I have been using this proposed version for a few months. I think this change is useful and can be accepted
Closing since link to swagger.io site already removed for the application templates.
Your PR is solving the same problem that is addressed in #609, however your patch is more self-contained. Could you please add "Stable/0.3.x:" prefix in the PR name? The branch (and the project) seems to be hibernated, however.
@tuffnatty done
Hello @graphman65,

Why did you close this pull request ?
It doesn't seem to be merged...
Hum, my bad, didn't want to close it. But my fix is not working I'll push another commit that fix the issue.
Already fixed by 4a47fcda37ed937ce3820774bfd9162d419a4e7b.
Thank you! This pull request seems to be not self-contained and trying to solve the same problem that is solved by PR #690. Also, this patch is against the master branch instead of `stable/0.3.x`.
PR does not seem to contain changes, related to the compatibility with Django 1.11. Feel free to rebase remote branch, exclude irrelevant changes and re-open PR. Thanks.
Just curious, any ETA on when the PRs will be looked at? I notice the PR count stays at 43 for a real long time. I know 'long' is relative. So, is this normal pace in the repo? Thanks
Thanks for the PR. The get_swagger_view is meant as a helper and I purposely want to avoid overloading it with config options. With that said, you can create your own view and customize permissions, etc. as needed.

Take a look at: https://marcgibbons.com/django-rest-swagger/schema/#advanced-usage
Thanks for the contribution.
Just noticed the same on our site.  Waiting for this fix  :)
Fixed by 33e8e0766809b367c653c470d277ffaa67e55961.
Indeed. Thanks for the contribution.
woooo 🌟
Indeed. Thanks for the contribution.
Thanks for the contribution.
Thanks for the contribution.
Superseded by #821.
Superseded by #829.
I'm not so sure about this one. If an admin user clicks the user link, but does not have user_change permissions, then they'll get the useless permission denied django admin page.

Up until now, I've had the policy of keeping the reversion object history page the same as the django admin object history page, so minimise confusion. I could be persuaded to radically alter it in order to make browsing old revisions easier, but I can't help feeling that object history tweaks are best submitted to the Django core team. Any object history improvements they make, I'll follow.
That's reasonable - it's not hard to do in a template override.

On the subject of browsing, I've been working on some AJAX diff views on the history page. I might see if I can export that cleanly (and remove the outside dependencies) since it's proven rather useful.
I've cherry-picked this commit in. Many thanks!
Thanks - I probably should have done that in a branch for a cleaner pull request.
Fantastic! Thanks for helping out!

Consider yourself pulled. :P
Very nice! Thanks for contributing! :D

Dave.
Oh, dear. I'm apparently unfamiliar with the way the issue tracker interacts with pull requests. My apologies for the duplication.
Hi,

I'm not sure that this belongs in the core of reversion, although your approach is interesting and seems pretty well implemented.

There's a chance that the diff helpers will be taken out of Reversion in a coming release, in an effort to keep the codebase compact and streamlined. However, I hope to put together a few wiki pages of recipes that explain how to add this sort of functionality yourself, at which point I'd certainly consider adding your code as an example of connecting up mail notifications of diffs to the post-save receiver of models.

I'm marking this as wontfix, but please don't take this as a reflection of your code quality! I just like to run lean libraries. :P

Best,

Dave.
I really hate copy&paste, so I'll write different module only with sending email functionality. And it will have django-reversion as dependency

:-)
Once it's done, let me know. A wiki page on django-reversion extensions would be a good thing!
Those South migrations are not needed for release-1.3.3, but are needed for the head version, so thanks!

All merged.
Thanks! It's been merged. :)
Excellent! Thank you!
Thanks for alerting me to this issue. I've just put in a fix, which is based on your approach but avoids the VERSION_NULL hack. :)
Thank you! This makes it a lot easier to conditionally include reversion in a project too.
Good call. You just fixed an oversight on my behalf when adding the recent action flag to Version objects.

Thanks!
I've pulled this in, with a small modification.

https://github.com/etianen/django-reversion/commit/7dfb14be79b13f3fbb0d41568f6c5eee17aaa564

In your version, the excluded file field would explicitly clear the file on the model, wheres in the new version the excluded file field just leaves the model alone.
So far as I can tell, this just means that a null user is displayed as a hypen, rather than a blank cell. Is this the desired behaviour? After all, a blank comments field is represented as a blank cell, not a hyphen.
It's ok, if it should be empty and not a "-"...

But the real problem is, that {% if action.revision.user != None %} is needed. Otherwise we get a silent "error", you will see it, if TEMPLATE_STRING_IF_INVALID is set.
btw. my test settings looks like this: https://gist.github.com/1037619
Thanks! It's in.
Thanks! I've pulled in your patch.
Could you provide a link to some documentation about what this style param would actually do? This will allow me to keep the relevant docs updated.

Otherwise this seems like a good feature to add.
Well i need to pass parameters because i cannot to find another "best"
way, but, the need is to make the diffs more "human readable".
Documentation? i have this:

```
   html_template = """
   <div>
       <div><span><strong>%s:</strong></span></div>
       <div>%s</div>
   </div>
   """
```

And this in other place of the django-code (a for to get all attr from an object):

```
   comment += html_template % (attr.attname,
          generate_patch_html(old, new, attr.attname, "semantic"))
```

Note than "semantic" is passed like a param, but, it can be in other way, it works for me, but i can to make changes if it needed. The idea is make possible swith between "semantic" and "efficience" or each other (if exists) in order to make an UI more friendly than allows the user select how to see the diffs, because the "default" option is in RAW mode and isn't "human readable". We need to design the best way. We can do it ;).

Edited:

This link: http://neil.fraser.name/software/diff_match_patch/svn/trunk/demos/demo_diff.html is the best explanation of this :D
It's pulled! Many thanks!
I've made a small change to your code that renamed the "style" parameter to "cleanup". This seemed more relevant to me, since it's specifying the cleanup options.
It's perfect no problem i make the changes needed

El 16/08/2011 12:24, "etianen" <
reply@reply.github.com>
escribi:

I've made a small change to your code that renamed the "style" parameter to
"cleanup". This seemed more relevant to me, since it's specifying the
cleanup options.

## 

Reply to this email directly or view it on GitHub:
https://github.com/etianen/django-reversion/pull/78#issuecomment-1818153
I've refactored out do_revert into reversion.models.safe_revert()

Putting it in helpers wasn't an option, since it made a cyclic dependency.
Awesome! Thanks!
Thanks!
Oops! My bad. Thanks!
Many thanks!
Why move this up to the first check?  That makes this diff a lot larger than it appears to need to be.
Because GenericInlineModelAdmin is a subclass of InlineModelAdmin, and GenericInlineModelAdmins shouldn't go down the InlineModelAdmin path (which is probably why it was written the way it was initially)
Lovely job. Thanks!
Thanks. I think this is going to have to be pulled into a 1.4 branch for the time being, as it'll break the code for anyone using trunk reversion with django 1.3.1
Yea, that's right - this interface changed massively in 1.4 and I think there's lots of it that.  The question is if we can break the compatibility or if I should check for the pre 1.4 version?
Breaking backwards compatibility is pretty mandatory for keeping reversion working with the Django admin. Sad but true.

Do what you must. :)
This fixed one problem I'm having with Django 1.4, but on anything with inlines I'm getting this on the revert page:

```
Traceback:
File "/srv/python-environments/egg/src/django/django/core/handlers/base.py" in get_response
  111.                         response = callback(request, *callback_args, **callback_kwargs)
File "/srv/python-environments/egg/src/django/django/utils/decorators.py" in _wrapped_view
  91.                     response = view_func(request, *args, **kwargs)
File "/srv/python-environments/egg/src/django/django/views/decorators/cache.py" in _wrapped_view_func
  88.         response = view_func(request, *args, **kwargs)
File "/srv/python-environments/egg/src/django/django/contrib/admin/sites.py" in inner
  192.             return view(request, *args, **kwargs)
File "/srv/python-environments/egg/src/django/django/db/transaction.py" in inner
  209.                 return func(*args, **kwargs)
File "/srv/python-environments/egg/src/django-reversion/src/reversion/revisions.py" in do_revision_context
  279.                     return func(*args, **kwargs)
File "/srv/python-environments/egg/src/django-reversion/src/reversion/admin.py" in revision_view
  350.         return self.render_revision_form(request, obj, version, context, revert=True)
File "/srv/python-environments/egg/src/django-reversion/src/reversion/admin.py" in render_revision_form
  292.             media = media + inline_admin_formset.media
File "/srv/python-environments/egg/src/django/django/contrib/admin/helpers.py" in _media
  240.         for fs in self:
File "/srv/python-environments/egg/src/django/django/contrib/admin/helpers.py" in __iter__
  213.                 model_admin=self.opts)
```

Not sure what's going on here.
This does not look like the compelte Traceback, could you please provide this one?  What did you do for that?
I've fixed this in #103
This has been merged into a new django-1.4 branch. All django-1.4 fixes will be integrated here, for a final giant merge with master when django 1.4 lands.

Thanks!
I've merged this into a new branch, django-1.4. This is where all django 1.4 compatibility fixes will sit until django-1.4 is released.

Thanks!
Gosh, I'm amazed I wrote it that way in the first place!

Thanks. :)
Thanks for this. :)

I've got some questions about how this works. Maybe I'm missing something. I've never actually implemented a multi-db app!
1. The reversion accessors (get_for_object, etc) default to looking for revisions in the same database as the object originated from, yet the reversion context managers will use the default database until explicitly specified. This seems like inconsistent behaviour.
2. The method of specifying the database to use in the revision context manager will break if multiple context managers are nested, since reversion only saves a revision when the outermost context manager exits.

``` python
with reversion.create_revision(using="foo"):
    with reversion.create_revision(using="bar"):
        obj.save()
```

The above code will save the new revision into "foo". In a more complex example, where the nested context managers are actually in very different parts of the code, this could get dangerous.

My suggestions would be:
1. Either default to saving versions into the same database as the object on write (but what if there are objects within the same revision using different databases?), or make choice of database a completely manual process in all cases (ie. stay out of obj._state).
2. Throw a RevisionManagementError if a nested context manager is attempting to use a different DB to the outer one.
I'm also new to Django multi-app and there's little out there on what's proper in enabling multi-db in a Django API. I saw for example django.contrib.contentttypes using a mixture of (...,using=db) and obj._state.db.

Regardless, I agree with your comments. I'll change the managers to stay out of obj._state and we should just throw RevisionManagementError if other than the first context manager sets another db.

How does that sound?
That sounds just about perfect.
Dave,

I'm updating my pull request with the changes we discussed. I think this gets us much further, but I also would like to discuss a few other changes. Anyway, we love the project, well done!

-Elias
just checking on this pull request.
Sorry, I've been a bit busy.

My main reason for delaying on this is that I personally have no experience with multi-db django stuff, so I've got no real way of knowing whether the changes you're suggesting are the right way to do things. I'd rather not pull in code that might later have to be re-vamped and break backwards compatibility.

I'm wondering whether a better approach may be to make it so that the DB for the revision is specified in the same way as the comment and the user meta properties. That is, you would call reversion.set_db(db) to set it at any time in the revision stack. That would make it more obvious that it's shared for the whole revision stack, and follow existing paradigms. The current method of deciding the DB when you push onto the revision stack feels like it may lead to a misunderstanding about how it works. (Although your current method of throwing an exception is a good solution too, admittedly, it's not the paradigm that's been established.)

What do you think?

Again, sorry for the delay and wibbling. I have to be pretty careful nowadays in getting things right first time with reversion, since it's got a fair few users now. :)
When do you expect to push this request?

I really need this!
Does right now work for you? :P

The API has changed a little. If you want to set the db to use for the current revision, call the reversion.set_db() method.

This is still an experimental feature, so it's undocumented at present. Please let me know if you encounter anything hairy.

@eliast - many thanks for this!
Not work for me. I'm using admin, not API level. I'm get this error when I want to list all deleted objects:

  Caught DatabaseError while rendering: (1146, "Table 'django_control.product' doesn't exist")

django_control is my default database for all django application

this model product is in another database configurated in my settings, I'm using a router of database to access all this application models...

But what I really want is the reversion history being storage in default database... where I define where the reversion is storage.
Reversion will save it's revision models to DEFAULT_DB_ALIAS, unless you call reversion.set_db(alias) at some point during the revision.
thanks! @etianen we might need an example config so people can test and see it in action

@ebertti please let me know if I can help
i find this query:

```
SELECT `reversion_version`.`id`, `reversion_version`.`revision_id`, `reversion_version`.`object_id`, `reversion_version`.`object_id_int`, `reversion_version`.`content_type_id`, `reversion_version`.`format`, `reversion_version`.`serialized_data`, `reversion_version`.`object_repr`, `reversion_version`.`type`, `reversion_revision`.`id`, `reversion_revision`.`manager_slug`, `reversion_revision`.`date_created`, `reversion_revision`.`user_id`, `reversion_revision`.`comment` FROM `reversion_version` INNER JOIN `reversion_revision` ON (`reversion_version`.`revision_id` = `reversion_revision`.`id`) WHERE (`reversion_revision`.`manager_slug` = default AND `reversion_version`.`id` IN (SELECT MAX(U0.`id`) AS `latest_pk` FROM `reversion_version` U0 INNER JOIN `reversion_revision` U1 ON (U0.`revision_id` = U1.`id`) WHERE (U1.`manager_slug` = default AND U0.`content_type_id` = 20 AND NOT ((U0.`object_id_int` IN (SELECT U0.`id` FROM `product` U0) AND U0.`object_id_int` IS NOT NULL)) AND NOT (U0.`type` = 2 )) GROUP BY U0.`object_id_int` ORDER BY NULL)) ORDER BY `reversion_version`.`id` ASC
```

The django ORM is not putting schema in this query of the my model SELECT U0.`id` FROM `product` U0

But the two models is not in same schema also, and this query is no passing in my DatabaseRoute method allow_relation to make the django ORM try make this relation works.
I find a simple soluction, I will make a pull request showing the soluction
This would also need multi-db support.
This obviously would need changing back to the main download! :)
for sure.. ;-)
Thanks!

The only issue I can see with this is that class decorators are only allowed in Python 2.6 and above. I've had enough complaints from people for forcing Python 2.5 in the tests! Yeah, people are still using Python 2.4... :S

If you could switch this over to a series of function decorators, I'll pull.
Hi, thanks for pointing that out. I just compiled Python 2.5 locally and verified my changes against that.
You're pulled. Many thanks!
This feels like a dangerous addition. Because a revision is only saved in the outermost revision context, your rev context.result() can break with the addition of an outer revision context, such as via the revision middleware.
This is unfortunate, but unavoidable. It is a documented case- revcontext.result() will return None if no revision has been saved. It is the responsibility of the site to ensure it is installed in a way that allows this to be used.

The problem is exactly the same in any other case which wants to make use of the created revision, regardless of how that Revision object is obtained. This patch just makes it easier to obtain the correct Revision object.

If there are any changes I can make to make this more acceptable please let me know.

Thanks.
Simon
As a counter-example, using get_for_object() in an inner context after create_revision() has finished will silently return the wrong revisions- the most recent one will be missing...

```
with reversion.create_revision():
    with reversion.create_revision():
        model_inst.save()
    versions = get_for_object(model_inst)
    # missing latest versions because they haven't been made yet
```
You're quite correct.

I'm wondering whether there is a way to make the latest revision available through some other mechanism than the context manager. It would be good if this could be a feature that was generally available to all of the revision context api, particularly for Python 2.4 users.
That would be nice, although I'm not entirely sure how to do that at the moment.

In any case, RevisionContextManager.end() still needs to return something so that part should be safe to add. This would allow people to create their own RevisionContext class if they wanted access to that information until we decide how best to expose it in the public API. I'm already doing this in my app for other reasons so this would be fine for me. At the moment I still have to use my fork because RevisionContextManager.end() doesn't return anything.

Thanks.
I think something that implements this functionality is now in place, although not properly documented.

``` python
revision = reversion.default_revision_manager.save_revision([object1,object2])
```

This will save a revision containing the current state of the given objects, returning the revision.

If you want to suppress the automatic saving of revisions when you save models, then you can combine this with a block of manual revision management as follows:

``` python
with reversion.create_revision(manage_manually=True):
    object1.save()
    object2.save()
    revision = reversion.default_revision_manager.save_revision([object1,object2])
```

I believe that this should suit your use case.
Your unit tests now actually fail when there are no models with initial data!

This is now pulled in a slightly corrected form. :P
The issue here is that your code is relying on the type column to detect deleted objects. In reality, the deleted flag is not a guarantee that the object is currently deleted. It just means that that version object represents a deletion event.

If an object is deleted outside of a revision context, then a version with the deletion flag is never set. Yet the object is still marked as deleted. This is not such a problem for new revision data, but for legacy revision data there will be a lot of examples of this.
I don't think my issue here is that my code is relying on the type column to detect deleted objects. Here's why I think that:
1. I'm using the same **EX**clude `type=VERSION_DELETE` as you on the same query.
2. My code do mostly the same thing as yours except for 2 things, I'm not doing the `annotate` and I'm not passing the pks in a subquery at the end.

If I get you right, the general idea is to get all the versions (of the good content type and with the good manager slug) except the one that their object is live. Is it right? If yes, I don't know why you need to exclude the one with `type=VERSION_DELETE`? Do I need to take into account other things?

And don't forget that the current code kill MySQL!
Ok, I looked back at the SQL generated by your code and now I get why you did the `annotate` and the last subquery: you want to return only the latest version of a deleted object if there's more then one version of an object. I need to think a bit about this to find a way to do that without killing MySQL. As a matter of fact, I don't really know why this query kill MySQL. And I did my tests on small datasets? Look likes MySQL get stuck in an infinite loop!

But I still don't understand why your excluding `type=VERSION_DELETE`?
Now I understand everything (except the `type=VERSION_DELETE`) and I found a fix!

I don't know why but MySQL seems to have a problem having the `annotate` query in a subquery. If I pass only the pks as list to the last query, problem is solved! I know it's a bit slower but the bad behavior of MySQL is a lot nastier. That could crash a website really fast.

Here's the modified code of line 557:

``` python
    return self._get_versions().filter(pk__in=list(deleted_version_pks)).order_by("-pk")
```

Tell me what you think, and sorry for the noise, if you received too much messages.
Interesting!

The only issue I can see with this is that SQLite can only handle IN clauses with a max of 999 members. I've had people run into this before, hence the current use of a subquery.

What version of MySQL are you using? I know that it used to have terrible subquery performance, but I thought they'd fixed this...
Concerning SQLite, is true that the max variable number default to 999 and that can be a problem. But I think this problem is already present in the code on line 550, no?

``` python
object_id__in = list(live_pk_queryset.iterator())
```

Unfortunately, for the moment, I don't have an idea how to solve this, except by adding code specific for MySQL, but it doesn't solved the problem with SQLite on line 550.

I use MySQL 5.1.46 x86_64 on OS X (dev) and MySQL 5.1.41 x_86_64 on Ubuntu (prod). Both have the same problem. I saw in a bug report (but I'm not sure if it's for exactly the same problem) that the problem was fix in 5.1.47.
It's true, that line also has the problem. But it's a problem that only affects models with non-integer primary keys, which which reversion works horribly slow anyway.

I'm not sure what to do here. A buggy MySQL version shouldn't really justify a code workaround. But it's generally hard to choose the MySQL version a website is deployed on, so this will affect a fair few users.

On 12 Jan 2012, at 16:21, Etienne Desautels wrote:

> Concerning SQLite, is true that the max variable number default to 999 and that can be a problem. But I think this problem is already present in the code on line 550, no?
> 
> ``` python
> object_id__in = list(live_pk_queryset.iterator())
> ```
> 
> Unfortunately, for the moment, I don't have an idea how to solve this, except by adding code specific for MySQL, but it doesn't solved the problem with SQLite on line 550.
> 
> I use MySQL 5.1.46 x86_64 on OS X (dev) and MySQL 5.1.41 x_86_64 on Ubuntu (prod). Both have the same problem. I saw in a bug report (but I'm not sure if it's for exactly the same problem) that the problem was fix in 5.1.47.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/etianen/django-reversion/pull/118#issuecomment-3465819
I think we should go with the workaround for these reasons:
1. As you write, generally we can't choose the MySQL version we use (and MySQL is very popular).
2. This bug mostly stall the DB, so it's not only a "missing feature" bug. It can have really bad consequences.

We could do something along this:

``` python
if connection.vendor == "mysql":
    deleted_version_pks = list(deleted_version_pks)
return self._get_versions().filter(pk__in=deleted_version_pks).order_by("-pk")
```

If we find the exact MySQL version where this bug is fix, we could add also a version check with `connection.get_server_version()`.
I think you're right. If you can narrow down the server versions, then we should definitely put your fix in.

I don't want to blanket target MySQL, however, as that will have performance tradeoffs for those using more up-to-date releases.
OK, when I'll get some time I'll do the research to find the precise version where this bug was fix.
I finally did some tests with mysql-5.1.61-osx10.6-x86_64 and mysql-5.5.21-osx10.6-x86_64 (so the latest version) and I got the same problem. So it look that all MySQL versions have the problem, at least in InnoDB. I start thinking moving this database to Postgres. MySQL was chosen over Postgres at the start of the project for really bad reasons. I have now performance problem with big JOINs created by the Django admin search field...
In which case, maybe we should go down the route of detecting the database vendor and forcing two queries on MySQL?

I used to use MySQL, but the crappy error messages and slapdash feel made me move to Postgres. I've never looked back.
Yes, I think we should go this route.
It is done!
If you look at the admin code, they're going down the route of escaping object IDs by using django.contrib.admin.util.quote and django.contrib.admin.util.unquote . I think the way forward here to to make sure that wherever Reversion is generating admin URLs, it's using these functions, and wherever it's parsing URLs, to correspondingly unquote.

If you can get this working in your pull request, then I'll happily pull.
This got it working with quoting for me.
That looks just about perfect. I'll run this through some tests, and get it integrated this week.

Thanks for contributing! :)
All pulled!
Ah, I think we're running into different ideas of what this multi-db code is supposed to achieve.

The original contributor, @eliast, intended the multi db code to allow reversion to work with multiple DBs by saving the revisions for each model in the same database as the model. At least, I think that's the case.

Your intention is to make the model's own router take care of the db for that model, and allow the db parameter to specify the database used to store the revisions.

This being the case, is the multi-db code for reversion actually needed at all? Couldn't database routers just be used for all the models?
We originally tried to do everything in the database router, but unfortunately I don't think it's powerful enough. If you review the database router interface in Django, you only receive the model and _maybe_ some hints. The only hint you might receive is the instance when you are performing a create or update operation. But when performing queries there are no hints to give you so we are SOL. For example, when creating a widget_1 I tell Django to use Shard1 but then reversion asks reads/writes from the Revision/Version models but I won't always have enough information to connect it to widget_1 instance.

There a few common patterns for multi-db usage: master for writing and slave for reading, vertical partitioning (aka at the object level) and horizontal partitioning (sharding). 

Now each of them assume different strategies that are hard to embed into reversion or any other library. Regardless, the developer must have knowledge of this partitioning (coded in the router and sometimes in other places, like a sharding registry or hashing function to spread the writes/queries). All I wanted to do in reversion is to have the ability for the developer to control which DB to perform the operation against.

@ebertti has two different fixes in his patch, one might be good which is to consume the iterator before adding it to the query set, the other is not because we lose the multi-db function. All he needs to do is set the DB by using the same logic he's using in his router to determine which DB to use.

IOW, there are many limitations in the django multi-db support (not an easy problem) to make django reversion smart enough to always do the right thing.
I think that @ebertti may have a point in his code, however.

When calling set_db during a revision save, the db specified will be used to save the version and revision models, whereas the rest of the models will be stored in the database specified by their router, or the one specified when save() was called. In other words, the reversion models and the others models may be saved to different databases.

OTOH, the get_deleted method currently assumes that the model and reversion models are in the same database. @ebertti is aiming to decouple this.

My suggestion would be to adapt @ebertti's pull request to add another parameter: model_db, which defaults to db, and specifies the database that contains the model being queried.

At this point, it works as now for single db setup, but supports shared non-default databases and non-shared-non-default databases. In other words, the best of both worlds.
Or, to put it another way, should it work like this branch?

https://github.com/etianen/django-reversion/blob/multi-db/src/reversion/revisions.py#L545
@etianen great idea!!! faster for same db and working for different db. I like it!
This is all merged into MASTER now. Enjoy!
Wouldn't a better way to do this be to check the number of Version and Revision models in setUp(), and to then us this as the offset? It'll still work for your User case, and may well fix issue #104 too.
That should work, too. However, since part of the functionality you want to test is that the correct number of versions and revisions are created, I think that hard coding either an offset or the number of versions and revisions that _should_ be created would make for more robust tests.
I dunno, that sounds less robust to me. There's no guarantee that registering auth.User will create a revision, it just happens too. Maybe other registered models would have a similar effect.

By seeing how many revisions are present in setUp, we then test for how many _additional_ revisions were created in the various unit tests.

I suspect this problem is what's causing unit tests to fail in some setups. It's never happened to me, but others are reporting it in issue #104.
Well, regardless of whether it must create a revision, my impression is that it is guaranteed to add another version, right?

My concern is that, since one of the questions the test suite is supposed to answer is, "Was the correct number of versions created?" (i.e. "Did Version.objects.count() return the right number?"), then basing the "right number" off of what Version.objects.count() returns might reduce your coverage. I think it would work either way, though. I can probably throw together a patch that does that and see what difference it makes if you'd like.

Incidentally, I'm also able to reproduce #104 (on Postgres only), and I get the sense that they're unrelated. But you never know.
Can you still reproduce #104 with the latest HEAD revision?
This issue has now been fixed. The solution I've taken was to unregister all registered models at the start of the test case, then re-register them later.
I'm a bit confused about why this should help matters. Creating a standalone admin site and then associating ModelAdmin instances with it should work fine. If django-admin-tools is borking this paradigm using some magic somewhere, surely that needs to be fixed in django-admin-tools?

Am I not getting something here?
In user's custom django.contrib.admin templates he can use global admin site. Global admin site depends on url of global application. And you override global `urlpatters` and local `AdminSite`.

To be clean django-reversion needs to use local subset of `urlpatterns` and local `AdminSite`. Or use global overriding of `urlaptterns` and `AdminSite`.
I agree completely. I actually thought I was using a local subset of url patterns. See here:

``` python
class VersionAdminTest(TestCase):

    urls = "reversion.tests"
```

It think it would be cleaner to stay out of the global admin site and just test on local URLs and a local admin site.

In which case, where am I currently not doing this?
Yes, I agree. This patch is dirty and problem with admin.site is in django-admin-tools.

But problem is more global. reversion uses local urls.py and local AdminSite. But it uses global templates. In my app I can override any templates with `admin/` prefix (even admin/base.html) and use my own urls. So reversion needs to reset `TEMPLATE_DIRS` too.

``` diff
diff --git a/src/reversion/tests.py b/src/reversion/tests.py
index 89e2b2a..46b5419 100644
--- a/src/reversion/tests.py
+++ b/src/reversion/tests.py
@@ -6,7 +6,7 @@ These tests require Python 2.5 to run.

 from __future__ import with_statement

-import datetime
+import datetime, os

 from django.db import models
 from django.test import TestCase
@@ -647,6 +647,12 @@ class VersionAdminTest(TestCase):
             is_staff = True,
             is_superuser = True,
         )
+        self.old_TEMPLATE_DIRS = settings.TEMPLATE_DIRS
+        settings.TEMPLATE_DIRS = (
+            os.path.join(os.path.dirname(admin.__file__), 'templates'),
+            )
         self.user.set_password("bar")
         self.user.save()
         self.client.login(username="foo", password="bar")
@@ -717,6 +723,7 @@ class VersionAdminTest(TestCase):
         self.client.logout()
         self.user.delete()
         del self.user
+        settings.TEMPLATE_DIRS = self.old_TEMPLATE_DIRS
         ChildTestAdminModel.objects.all().delete()

```
I believe that the ability to modify the settings file in tests is a feature that's coming in Django 1.4. As such, maybe this is best left a few weeks until it lands. That way we can do this properly, rather than hackily?
This code is used in django.contrib.auth tests (I just copy&pasted it). It was in django since 1.1 version:

https://github.com/django/django/blob/1.1.X/django/contrib/auth/tests/views.py
Ouch! That is dirty! :)

Fine, if you can get your tests passing using a local admin site, local URLs and a TEMPLATE_DIRS override, I'll pull that!
Yes, tests passing with this patch :)
As in, that diff you included inline?
yes
It's been added in. Many thanks!
Lovely jubbly! Thanks for contributing!
Lines 18 to 20 of the file "/django-reversion/src/reversion/locale/pt_BR/LC_MESSAGES/django.po" provoked an error on my project. I copied them from the russian locale file and edited.

<code>
"X-Poedit-Language: Brazilian Portuguese\n"
"X-Poedit-Country: Brazil\n"
"X-Poedit-SourceCharset: utf-8\n"
</code>

I removed them and the project ran just fine.

Cheers.
Oh dear, I can confirm that the pt-br translations are broken for me too. After editing those lines, did you have to recompile the .mo file? If so, could you put together a pull request with the correct .mo and .po files?
Sent the pull request... Sorry for the bad files. I was too eager to contribute, that was my sin :) 

New files are ok.
These work great! Many thanks! :)
You're welcome.. sorry about the mess :) Glad I could contribute to a great app.
I don't think that this is correct. If you look in the django source code, they never seem to use the settings.DATETIME_FORMAT directly. Instead, it's all done by using the "DATETIME_FORMAT" special format string.

See: https://github.com/django/django/blob/master/django/contrib/admin/templates/admin/object_history.html#L31

So I wonder why this is going wrong for you. Are you getting this problem on normal (non-reversion) object_history views?
I'm closing this for now. If you'd like to take the discussion further, please feel free to re-open it.
why is `'DATE_FORMAT'` ugettext'ed? The `date` filter does the following:

``` python
    try:
        return formats.date_format(value, arg)
    except AttributeError:
        try:
            return format(value, arg)
        except AttributeError:
            return ''
```

So probably reversion should too.
Just removing the gettext markers doesn't help, @etherealmachine's patch is the right approach.

`format` turns every character of the second argument into a string based on the first argument according to https://docs.djangoproject.com/en/dev/ref/templates/builtins/#std:templatefilter-date, so if the second argument is `"DATE_FORMAT"`, this will turn into `DAY_OF_WEEK|AM_OR_PM|TIME_ZONE|MONTH|YOU_GET_THE_POINT...`.

So yeah, this pull request should be applied.
Just use `django.utils.formats.localize` https://github.com/django/django/blob/master/django/utils/formats.py#L132-151 to format a datetime or date object
btw. if you revert a version, you will get strange datetime values in comment, like:

```
Reverted to previous version, saved on TuePMUTCJuneUTC0JunJune_June+0000RJunPMUTC
```

Is this related to this change here?

EDIT: Oh, sorry. This was the fix here. I have used django-reversion v1.6.0 which has not this patch yet, isn't it?
@jezdez is, of course, correct. If this pull request could be updated to use that method, I'll take it. Otherwise, I'll get this in myself for the next release.
Dammit! That's a silly mistake of mine you just fixed. :)
Other than my comments on the delete command modification, this is excellent!
It is a simple task :P

Is there a way to undo the sqlite fix or do I have to commit reverted code?
Make a new commit that applies the fix / undos the commit, then commit that. Then I'll pull! :)
Let's see if it fits now, otherwise I will revert all code associated with SQLlite and work this sqlite stuff in another pull request.
It's pulled. Many thanks!
You are welcome!
I'm a little concerned by this. It's a big slowdown for "proper" databases, just to let test databases work better. I wonder if there's a way we can catch this error for SQLite and fix it? Or a database-specific switch (pretty hacky, mind).

Alternatively, this can be fixed by changing some of the config params for SQLite.

I'm not sure what to do here.
My goodness, good spot! I've been through a lot of editors in my time, and it looks like one's been misbehaving!
Oh, you are quick ;)

Now the template compare with the "diff" branch looks nicer, e.g.: https://github.com/jedie/django-reversion/compare/diff#diff-4

I found also some differences in spaces, newlines in the sourcecode. Should i cleanup them? I use aptana studio and PyDev can autoformat the sourcecode... Thats why the sourcecode compare of the diff branch looks more than it is...
In general, it's considered a pretty bad idea to go for major reformatting, since it messes up author associations with line numbers. The tab/space mixup can be a pretty big problem in Python, so if you've found any more tabs in the codebase, please do submit a pull request. For other formatting issues, it's probably best to leave things be.
One other thing. I tried automatically adding the version from `reversion/__init__.py` but because you're importing django as well there's no simple way to do it.

Couple of solutions I thought of:
1. Read `__init__.py` and then parse through with a regex searching for the VERSION
2. Create `reversion/version.py` and import that into `__init__.py` and setup.py

The second solution is much cleaner IMO but it requires an extra file and it's up to you. This would mean you'd only need to update the version in that one place and you could have it import into setup.py for both version and for your download links.
First solution is definitely not good idea.
I agree with @charettes, I just included it because some other large projects use that.
Your code will still be embedding markdown syntax in pypi. I suppose that's better than the broken ascii!

What's the problem with 

``` python
from reversion import VERSION
```

In any case, solution 2 is clearly better!
`from reversion import VERSION` dies in fire because `__init__.py` also includes `import django` which exceptions out when pypi runs setup.py
Ah, I see. D'oh!

If you can implement your solution 2, then I'll gladly pull this in.
A little more hacky than I usually like to make sure everything is backwards compatible.
You're pulled! Many thanks! I've learned something today. :)
Why the **version** here? Isn't this just adding lines of code for no reason?
Nice markdown formatting error there. I mean `__version__`
`__version__` is the PEP standard. Because you've used `VERSION` every where else I didn't want to break backwards compatibility incase anyone is relying on `VERSION`. http://www.python.org/dev/peps/pep-0396/
Thanks a lot! :)
Excellent!

What is the point of the HOUR constant, by the way?
Ah, sorry. I just grabbed that code from:
http://docs.python.org/release/2.5.2/lib/datetime-tzinfo.html.

Quite old code but simple enough and did the trick.
So please remove the HOUR constant line.
Thanks!
This is an interesting approach. I take it your were being hit by the memory leak of the django query log?

My long-term plan is actually to use Django's bulk_create method to implement that command, thus piping the whole thing into the database in one big efficient hit. This should hopefully solve your problem. The only reason it's not implemented yet is that it will remove the post_save signal that's sent by the Version and Revision models, thus breaking some existing code. I've had deprecation notices up on those signals for a while, and will be switching the bulk_create in the next major release of reversion (corresponding to Django 1.5).

In the meanwhile, maybe it might be best to make batch_size be a configurable command line param?
@etianen Thanks for responding! Yes, it seemed to be that the memory leak from the django query log was our biggest nuisance. Using bulk_create sounds quite interesting, but I wonder how it will handle in cases like us, where we had hundreds of thousands of records? Maybe keeping some kind of batching in place might be beneficial.

Either way, I've added another commit to include --batch-size as a configurable param.

Cheers :-)
Thanks for this. I think you're right - we'll keep your batch size parameter to control the bulk_create batch size when that comes in.
Good spot, thanks!
Great, thanks!
Similar fix needed for the 1.5.X branch (supporting Django 1.3.2)
Good reactions!
Seems legit!

Thanks!
Thanks for looking into this. I think this can be simplified further using the helpers for checking permissions that are built in to the admin class.

For example, admin.has_change_permission, admin.has_add_permission, admin.has_delete_permission.

This patch should probably use those, for proper extensibility via admin subclasses.
Ah! I wasn't aware of those. :-)
Let me revise the pull request.
Excellent! Thank you for contributing!
Excellent! Thanks. I never quite got around to doing that myself.
See #181, which fixes it for all templates.
This was just fixed in #182. Jinx!
Nice spot!
Thanks! I'll pull this when I get back from holiday, on the 29th.

On Thursday, October 18, 2012, Zbigniew Siciarz wrote:

> Django 1.4.2 was released yesterdayhttps://www.djangoproject.com/weblog/2012/oct/17/security.
> 
> ## This commit removes warning message about version compatibility.
> 
> You can merge this Pull Request by running:
> 
>   git pull https://github.com/zsiciarz/django-reversion patch-1
> 
> Or view, comment on, or merge it at:
> 
>   https://github.com/etianen/django-reversion/pull/188
> Commit Summary
> - Support for Django 1.4.2 (security release)
> 
> File Changes
> - _M_ src/reversion/**init**.py (1)
> 
> Patch Links
> - https://github.com/etianen/django-reversion/pull/188.patch
> - https://github.com/etianen/django-reversion/pull/188.diff
>   
>   —
>   Reply to this email directly or view it on GitHubhttps://github.com/etianen/django-reversion/pull/188.
For anyone else looking to suppress this, I added the following to my settings.py to temporarily suppress the compatibility warning to avoid clogging my log files:

```
# TODO: Remove after https://github.com/etianen/django-reversion/pull/188 closes:
import warnings
warnings.filterwarnings("ignore", category=UserWarning, module=r'^reversion$', lineno=36)
```
Great, thanks @acdha and @zsiciarz!
@etianen Any chance you could merge this?
It's merged. I assume the admin interface works okay with this Django release? That's typically what breaks.
I'll doublecheck in more detail tonight or tomorrow. This was a pretty minor header-related security fix release, so if it worked with 1.4.1, there's a 99.9% chance it'll work with 1.4.2.
Working just fine, for what we use it for.
Thanks for this! For large datasets, this could be very useful!
You're breaking backward compatibility with django < 1.5. Those `get_user_model` imports should be replaced by something along:

``` python
try:
    from django.contrib.auth import get_user_model
except ImportError: # django < 1.5
    from django.contrib.auth.models import User
else:
    User = get_user_model()
```
Thanks!
I added some comments, good job so far!
Thanks, I knew there was a better way of doing that.
User._meta.module_name gives 'user'; would this be a problem as compared to 'User'?

I also haven't made the corresponding changes in the other four migration files, as the references to the User model don't seem to come into play. Presumably for consistency I should make these changes too?
I think we better try to reproduce the exact same output, note that some corrections use `User._meta.object_name` which is `'User'` instead of `User._meta.module_name`.
In terms of backwards compatibility with Django 1.5, this will only be a
factor if the admin interface hacks made by reversion remain backwards
compatible. With all other major releases of Django, reversion has had to
become backwards incompatible, and fork off a release branch for patches.

It might be worth checking over the current state of Django 1.5 admin, and
if it has broken the reversion admin (including inline models, which are a
bitch), then you don't need to worry about supporting 1.4 with your patch.

On 13 November 2012 01:18, Simon Charette notifications@github.com wrote:

> I think we better try to reproduce the exact same output, note that some
> corrections use User._meta.object_name which is 'User' instead of
> User._meta.module_name.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/etianen/django-reversion/pull/191#issuecomment-10311968.
I've never used the reversion admin - I'll be working solely with the low level API. However, your included example project doesn't seem to not work with 1.5 alpha 1
Oh, that's good news!

My typical approach has been to make a pre-release branch for reversion,
let people hack on it, then do a final audit shortly after the final launch
before merging with master.

When you're both happy with the code, I'll merge it into a django-1.5
branch.

On 13 November 2012 22:36, Bill Collins notifications@github.com wrote:

> I've never used the reversion admin - I'll be working solely with the low
> level API. However, your included example project doesn't seem to not work
> with 1.5 alpha 1
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/etianen/django-reversion/pull/191#issuecomment-10347025.
Hello, I'm waiting for this to be merged. Any idea on when that happens? 
And big up for this nice app, and the good work with 1.5 patch.
Hello all!

I've merged this into a django-1.5 branch of reversion. You can switch to this branch to track any django-1.5 compatibility changes as they happen, and it'll eventually be merged into master when Django 1.5 actually lands.

@mrginglymus I'm closing this pull request. If there's any more changesets coming in from your repo, please hit me with another!

Happy coding!

Dave.
This should be `User`.
Here you can use `User._meta.object_name`.
Here you can use `"%s.%s" % (User._meta.app_label, User._meta.object_name)`.
Here you can use `"%s.%s" % (User._meta.app_label, User._meta.module_name)`.
Same as [line 23](#L0R23).
I can see your motivation in this. As it stand, I can see a couple of issues with your patch:
1. By removing the automatic timestamp on Revision.date_created, we potentially break external code that was relying on it. I think that this can be mitigated by setting default=datetime.datetime.now , however.
2. This changes the meaning of the date_created timestamp from "when the revision was created" to "shortly before when the revision was created". It's subtle, but feels wrong.

In your case, however, I'm not sure we need this patch at all. Why is it critical that the created and last_modified timestamps match in the database? Are you doing some sort of lookup on them? They may differ by a few fractions of a second, but so what? The revision and the document were created at slightly different times, so that's surely correct?

The patch is good, by the way. I'm just worried about extra complexity in the codebase for very little, if any, gain.
Lovely jubbly! Many thanks. :+1:
Thanks!
I think you should submit both fixes in separate tickets.

Plus the swapping using model is breaking backward compatibility for django < 1.5.
Ok, I've split the pull request into the #205 and #206. And swapping user model in the way I've implemented it does not break compatibility with django < 1.5, as I explained in #206
@uruz sorry I forgot to mention that in order to maintain backward compatibility you should fallback to `django.conf.urls.defaults` on `django.conf.urls` `ImportError`.

``` python
try:
    from django.conf.urls import patterns, url
except ImportError: # django < 1.4
    from django.conf.urls.defaults import patterns, url
```
Sorry, I thought that branch django-1.5 is a pure 1.5 branch. I've amended my commit.
Thanks for this.

At the moment, it looks like this branch might be able to support django-1.4, which is nice, as admin changes typically break backwards compatibility.

I'll do final testing when django 1.5 officially lands.
Looks good, thanks!
Just found this in the django1.5 branch.  Swear that wasn't there last time I looked.
Thanks!

Could you include the new compiled .mo file in your pull commit? Saves me installing a whole load of tools I'll never use.
I've added the compiled .mo file, thanks.
Looks good, thanks a lot!
Hi,

Something very much like this has already been merged into the django-1.5 branch, here.

If you're working with Django 1.5, I'd recommend using this branch until the final release of Django 1.5.
Reversion is not supposed to be backwards compatible AFAIK. It is only compatible with one Django version at a time.

However, actually Django 1.4 raises `PendingDeprecationWarning` when importing from `django.conf.urls.defauls` and I wonder if the above change can perhaps be backported to reversion 1.6.x series... how would that happen? Is it even possible to change older releases of django-reversion?
My general policy is to support the current and previous major versions of Django, although only the latest Django release gets new django-reversion features. This is mostly an effort to keep development time sane.

The latest reversion uses the new Python3 compatibility shims from Django, which aren't available in the earlier minor releases of Django 1.4 (anything earlier than 1.4.2 will break, I believe).

So, your patch here will probably allow reversion to work fine on Django 1.4.2+. However, I'm not sure it's worth the effort. django-reversion 1.6.6 has all the features of django-reversion 1.7, so you're not actually gaining anything by using the newer version.
I would perhaps suggest a 1.6.7 release with any warnings dealt with. Would be a nice way of saying goodbye to 1.4 :)

I've just written this short post on dealing with Warnings -> http://overtag.dk/wordpress/?p=365
I'm closing this for now. If you recreate this as a pull request on the https://github.com/etianen/django-reversion/tree/release-1.6.x branch, then I'll pull it in and do the 1.6.7 release.
This looks excellent. I'll review it over the next day or so, then pull. (Three production site launches this week, so more than usually busy!)
I've just pulled. Thanks for the time you put into this. :)
Thanks! Good spot!
Looks good! Many thanks! :+1:
Seems harmless. Thanks!
Np. Thanks for a great project! :-)
Good spot!
Hmm... tricky. The reason for using the tuple was so that, if multiple RevisionMiddleware were used together for some reason, the _close_revision() method would still be called for all of them, since otherwise a memory leak could result.

At the moment, depending on how the RevisionMiddleware is converted to a string, your patch could break that.

My solution would be to check for whether REVISION_MIDDLEWARE_FLAG is present in request.META in process_request, and throw an error if it is. This would prevent using the middleware twice, but I doubt anyone is actually doing this. Doing this, REVISION_MIDDLEWARE_FLAG could be used as a raw string, without wrapping in a tuple, and thus avoid borking your oauth implementation.

If you implement this, I'll pull right away.
Tricky. How do you know that ordered_objects isn't being used? It's present in the admin context for the change_form, and reversion extends change_form. I worry that this would break something subtle in the admin form.
I said that is not used because a get_ordered_objects always return an empty list. If you see a source code of this method a code for populate this method is commented.

I had done grep on django source code:

```
(salupro)[3/5.0.2]niwi@localhost:~/django/django> grep -R get_ordered_objects .
./contrib/admin/templatetags/admin_modify.py:        'onclick_attrib': (opts.get_ordered_objects() and change
./contrib/admin/options.py:        if self.opts.get_ordered_objects():
./contrib/admin/options.py:        ordered_objects = opts.get_ordered_objects()
./db/models/options.py:    def get_ordered_objects(self):
```

The first line has one condition that seems never fulfilled. (I don't known, Maybe I'm wrong :S)
Actually, I checked, and you're right.

I'm making a new django-1.6 branch and pulling into that.

On 29 Jul 2013, at 12:14, Andrey Antukh notifications@github.com wrote:

> I said that is not used because a get_ordered_objects always return an empty list. If you see a source code of this method a code for populate this method is commented.
> 
> I had done grep on django source code:
> 
> (salupro)[3/5.0.2]niwi@localhost:~/django/django> grep -R get_ordered_objects .
> ./contrib/admin/templatetags/admin_modify.py:        'onclick_attrib': (opts.get_ordered_objects() and change
> ./contrib/admin/options.py:        if self.opts.get_ordered_objects():
> ./contrib/admin/options.py:        ordered_objects = opts.get_ordered_objects()
> ./db/models/options.py:    def get_ordered_objects(self):
> The first line has one condition that seems never fulfilled. (I don't known, Maybe I'm wrong :S)
> 
> —
> Reply to this email directly or view it on GitHub.
If you come across any more django-1.6 fixes, please submit more pull requests to the new django-1.6 branch. I'm not using Django 1.6 myself at the moment, so your ahead-of-time contributions are most welcome! :D
Many thanks!
Many thanks!
Very nice. Thanks!
Hi! This merges some more fixes into your `django-1.6` branch. I hope you don't mind, but I took the liberty of adding a TravisCI config file while I was at it. I hope this proves useful!
I will, of course, remove the TravisCI file if you wish `:)`
Thanks!

I've been meaning to look into TravisCI for a while. Once this is merged into master, I'll have a go at firing it up.
Excellent, thank-you! `:)`
If this doesn't fit the bill (because the three use cases aren't explicitly mentioned or for any other reason), please let me know.
It's cool! Thanks!
If I'm ignoring a pull request, it's not because I don't like it, it's just
because I haven't got around to taking a proper look at it! Thanks for
putting the effort into this, and for your patience!

On 13 September 2013 08:07, pquentin notifications@github.com wrote:

> If this doesn't fit the bill (because the three use cases aren't
> explicitly mentioned or for any other reason), please let me know.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/etianen/django-reversion/pull/253#issuecomment-24376973
> .
Many thanks! It's a nasty edge case, and masking exceptions is a terrible crime.

Thanks for contributing!
Solid. Thanks!
Is there a reason why "type" was removed?
Yes, a good reason (I hope)!

https://github.com/etianen/django-reversion/issues/164

Basically, it was making the reversion history very hard to reason with, and had caused a lot of confusion amongst users of the low-level API. It's been scheduled for removal for two major releases.
Thanks for the quick response!
> It's been scheduled for removal for two major releases.

Can I find this list somewhere? I didn't find it in the docs.

We use this flag in our application and now we have to figure out how to change this. Do you have an idea for a simple "actions" app?
It was on the issue tracker. I guess a lot of people wouldn't read that,
though. I believe there was also an announcement on the mailing list at
some point.

For apps that are using this, it's also an option to just not upgrade.
Unless you're planning on upgrading your Django to 1.6, there's no need to
upgrade.

Alternatively, if you want the latest Django and reversion, you'll need a
replacement action logger. Something like a model like this:

``` py
class Action(models.Model):
   content_type = models.ForeignKey(ContentType)
   object_id = models.TextField()
   action_flag = models.IntField()
   comment = models.TextField()
   user = models.ForeignKey(User)
```

You could then connect to reversion.post_revision_commit, and generate the
actions from the revision and instanced parameters passed to the handler.

http://django-reversion.readthedocs.org/en/release-1.8/signals.html

For the delete action flags, you'd need to connect to the post_delete
handler of your models, and somehow get the current user and comment
(potentially from the reversion.get_user() and reversion.get_comment()
helpers.

On 8 November 2013 10:29, Daniel Rech notifications@github.com wrote:

> It's been scheduled for removal for two major releases.
> 
> Can I find this list somewhere? I didn't find it in the docs.
> 
> We use this flag in our application and now we have to figure out how to
> change this. Do you have an idea for a simple "actions" app?
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/etianen/django-reversion/pull/261#issuecomment-28053640
> .
Thank you but I think I have to work without 1.6 for a while. Over 100000 revisions to migrate before I can upgrade...
Thank you for the Action proposal, I'll give it a try :)
Ouch! That's a lot of revisions.

The action migrations shouldn't take too long to run, I'd hope. They simple
delete all revisions where the flag is `delete`, and then take out the
column. The only really slow bit might be the revision cleanup, where empty
revisions are discarded.

On 10 November 2013 17:10, Daniel Rech notifications@github.com wrote:

> Thank you but I think I have to without 1.6 for a while. Over 100000
> revisions to migrate before I can upgrade...
> Thank you for the Action proposal, I'll give it a try :)
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/etianen/django-reversion/pull/261#issuecomment-28154894
> .
Good spot. Thanks!
Thanks!

As it happens, the < Django 1.6 support isn't needed, as reversion has to be paired with a Django version to support the admin integration.
Any chances for releasing new version soon-ish?
This is excellent. Thanks very much!
Thanks!
This error message seems misleading. It seems to be suggesting that the parent class is the name of the class in the error message. It would be more helpful to actually give the name of the parent class that should be registered, in addition to the failing class.

Something like:

{model} is a proxy model, and cannot be used with django-reversion, register the parent class ({model_parent}) instead.
@etianen 
Changed as suggested. It will also handle a list of parent classes.
Should I rebase/squash it into a single commit?
Some people might like their revision histories clean and polished, but I like to remember all the gory details.

Thanks for the pull request! Consider it merged. :)
A neat solution!
This looks good. I've put a couple of comments on the object_history page. Once these are resolved, I'll happily pull.

Thanks! :D
Thanks for this!
I'd take this bit out. In plenty of cases, all of the users will be available, and in those cases, the footnote will be confusing.
I'd lose the asterisk, in line with losing the footer comment.

Is there some translation string that already exists in Django that can be used here, to prevent having to re-do all the django-reversion translations?
Looks legit! Thanks!
Good spot! Thanks!
Fast response! 
Thanks too.
You'll get a duplicate key error if you use a OneToOne field on the revision. If you just use a Foreign Key, it'll work just fine.
Ah okay. I thought using a OneToOne was required.
Yah, I guess on that point the docs are somewhat unclear. I suppose that,
by default, the docs should use a ForeignKey to Revision. I'd take a pull
request that updated that.

On 7 May 2014 14:57, Mitchel Humpherys notifications@github.com wrote:

> Ah okay. I thought using a OneToOne was required.
> 
> —
> Reply to this email directly or view it on GitHubhttps://github.com/etianen/django-reversion/pull/304#issuecomment-42429753
> .
Absolutely right. I'll merge this this afternoon when I'm back from holiday.

> On 23 May 2014, at 15:08, Tong Wang notifications@github.com wrote:
> 
> ...exit() with simple return
> 
> Those are really not error conditions. I don't think we should raise CommandError.
> 
> You can merge this Pull Request by running
> 
>   git pull https://github.com/tongwang/django-reversion master
> Or view, comment on, or merge it at:
> 
>   https://github.com/etianen/django-reversion/pull/308
> 
> Commit Summary
> 
> refs https://github.com/etianen/django-reversion/issues/307 replace sys.exit() with simple return
> File Changes
> 
> M src/reversion/management/commands/deleterevisions.py (4)  
> Patch Links:
> 
> https://github.com/etianen/django-reversion/pull/308.patch
> https://github.com/etianen/django-reversion/pull/308.diff
> —
> Reply to this email directly or view it on GitHub.
Thanks!
Yeah, I think this is better. Thanks!
Why closed? Would love to add your translation?
Sorry, I forgot to add django.mo for the translation.
Thanks!
Oh god. I still keep making that mistake.

Good spot! :P
I do it everytime. :P
Thank for taking the time to flesh out the issue with me. Your pull request looks great.

I wonder how a model without a PK ends up in a related queryset? Were you using prefetch_related by any chance? That would result in a cached version of the queryset being used.
You are pretty good at this forensic stuff.  I had to go check, but you are right, I am using prefetch_related on this call and for the related objects that end up causing the error!
Perfect implementation and tests, many thanks!
That's odd. The pypi build fails all over the place with seemingly trivial AttributeErrors

If you have pypi installed on your dev machine, I'd appreciate some insight on how it's managing to be so broken on PyPi.
I'll need to dig into this.
In the meanwhile I also added PyPy 3 to the build (travis added it today).
I'm reluctant to pull this one until the pypi errors have been marked as expected failures, or the weird source of PyPi errors has been fixed, given that the build is perfectly fine for all currently-supported Django versions and Python versions.
@etianen Django 1.5+ officially supports PyPy as far as I know.
But don't pull this until I fix the tests.
Sure, but currently django-reversion doesn’t :)

I just want to avoid making people think that some bug has appeared in the codebase, which would be the obvious conclusion from a failing build.

On 31 Jul 2014, at 10:38, Omer Katz notifications@github.com wrote:

> @etianen Django 1.5+ officially supports PyPy as far as I know.
> 
> —
> Reply to this email directly or view it on GitHub.
This pull request is now pretty stale. Happy to consider a new pull request that adds PyPy to the build matrix, and makes it work with existing tests.
You've convinced me. I had a look through the Django source, and you're quite right. Thanks for looking into this, and offering a fix!
Lovely jubbly!
Is it available through pip now with this translation? Or when will it be? :)
I can push out a new release at the end of the week, if desired.
If it's no trouble it would be much appreciated. :)

Mvh.
Jesper Vandborg

*- *Owner at Vandborg IT
- Software Engineer student at AAU
- Volunteer at The Danish Youth Association of Science

Phone: (+45) 61276624
Mail: Jesper@vandborg.net

On Wed, Jul 30, 2014 at 4:04 PM, Dave Hall notifications@github.com wrote:

> I can push out a new release at the end of the week, if desired.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/etianen/django-reversion/pull/331#issuecomment-50618436
> .
Sure. I’ll do it Friday morning, which will give the current feature set a little time to settle.

On 30 Jul 2014, at 16:35, Jesper Vandborg notifications@github.com wrote:

> If it's no trouble it would be much appreciated. :) 
> 
> Mvh. 
> Jesper Vandborg 
> 
> *- *Owner at Vandborg IT 
> - Software Engineer student at AAU 
> - Volunteer at The Danish Youth Association of Science 
> 
> Phone: (+45) 61276624 
> Mail: Jesper@vandborg.net 
> 
> On Wed, Jul 30, 2014 at 4:04 PM, Dave Hall notifications@github.com wrote: 
> 
> > I can push out a new release at the end of the week, if desired. 
> > 
> > — 
> > Reply to this email directly or view it on GitHub 
> > https://github.com/etianen/django-reversion/pull/331#issuecomment-50618436 
> > . 
> > 
> > —
> > Reply to this email directly or view it on GitHub.
Thanks. Will it be 1.8.2 ? or will you just overwrite the current 1.8.1? :)

Mvh.
Jesper Vandborg

*- *Owner at Vandborg IT
- Software Engineer student at AAU
- Volunteer at The Danish Youth Association of Science

Phone: (+45) 61276624
Mail: Jesper@vandborg.net

On Wed, Jul 30, 2014 at 5:41 PM, Dave Hall notifications@github.com wrote:

> Sure. I’ll do it Friday morning, which will give the current feature set a
> little time to settle.
> 
> On 30 Jul 2014, at 16:35, Jesper Vandborg notifications@github.com
> wrote:
> 
> > If it's no trouble it would be much appreciated. :)
> > 
> > Mvh.
> > Jesper Vandborg
> > 
> > *- *Owner at Vandborg IT
> > - Software Engineer student at AAU
> > - Volunteer at The Danish Youth Association of Science
> > 
> > Phone: (+45) 61276624
> > Mail: Jesper@vandborg.net
> > 
> > On Wed, Jul 30, 2014 at 4:04 PM, Dave Hall notifications@github.com
> > wrote:
> > 
> > > I can push out a new release at the end of the week, if desired.
> > > 
> > > —
> > > Reply to this email directly or view it on GitHub
> > > <
> > > https://github.com/etianen/django-reversion/pull/331#issuecomment-50618436>
> > > 
> > > .
> > > 
> > > —
> > > Reply to this email directly or view it on GitHub.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/etianen/django-reversion/pull/331#issuecomment-50632995
> .
It’ll be 1.8.2. A pypi version is never overwritten (exception: you’ve cocked it up and you’ve not told anyone about it yet).

On 31 Jul 2014, at 09:25, Jesper Vandborg notifications@github.com wrote:

> Thanks. Will it be 1.8.2 ? or will you just overwrite the current 1.8.1? :) 
> 
> Mvh. 
> Jesper Vandborg 
> 
> *- *Owner at Vandborg IT 
> - Software Engineer student at AAU 
> - Volunteer at The Danish Youth Association of Science 
> 
> Phone: (+45) 61276624 
> Mail: Jesper@vandborg.net 
> 
> On Wed, Jul 30, 2014 at 5:41 PM, Dave Hall notifications@github.com wrote: 
> 
> > Sure. I’ll do it Friday morning, which will give the current feature set a 
> > little time to settle. 
> > 
> > On 30 Jul 2014, at 16:35, Jesper Vandborg notifications@github.com 
> > wrote: 
> > 
> > > If it's no trouble it would be much appreciated. :) 
> > > 
> > > Mvh. 
> > > Jesper Vandborg 
> > > 
> > > *- *Owner at Vandborg IT 
> > > - Software Engineer student at AAU 
> > > - Volunteer at The Danish Youth Association of Science 
> > > 
> > > Phone: (+45) 61276624 
> > > Mail: Jesper@vandborg.net 
> > > 
> > > On Wed, Jul 30, 2014 at 4:04 PM, Dave Hall notifications@github.com 
> > > wrote: 
> > > 
> > > > I can push out a new release at the end of the week, if desired. 
> > > > 
> > > > — 
> > > > Reply to this email directly or view it on GitHub 
> > > > < 
> > > > https://github.com/etianen/django-reversion/pull/331#issuecomment-50618436> 
> > > > 
> > > > . 
> > > > 
> > > > — 
> > > > Reply to this email directly or view it on GitHub. 
> > 
> > — 
> > Reply to this email directly or view it on GitHub 
> > https://github.com/etianen/django-reversion/pull/331#issuecomment-50632995 
> > . 
> > 
> > —
> > Reply to this email directly or view it on GitHub.
Good practice, stuff will fast get messy otherwise. :)

Mvh.
Jesper Vandborg

*- *Owner at Vandborg IT
- Software Engineer student at AAU
- Volunteer at The Danish Youth Association of Science

Phone: (+45) 61276624
Mail: Jesper@vandborg.net

On Thu, Jul 31, 2014 at 10:41 AM, Dave Hall notifications@github.com
wrote:

> It’ll be 1.8.2. A pypi version is never overwritten (exception: you’ve
> cocked it up and you’ve not told anyone about it yet).
> 
> On 31 Jul 2014, at 09:25, Jesper Vandborg notifications@github.com
> wrote:
> 
> > Thanks. Will it be 1.8.2 ? or will you just overwrite the current 1.8.1?
> > :)
> > 
> > Mvh.
> > Jesper Vandborg
> > 
> > *- *Owner at Vandborg IT
> > - Software Engineer student at AAU
> > - Volunteer at The Danish Youth Association of Science
> > 
> > Phone: (+45) 61276624
> > Mail: Jesper@vandborg.net
> > 
> > On Wed, Jul 30, 2014 at 5:41 PM, Dave Hall notifications@github.com
> > wrote:
> > 
> > > Sure. I’ll do it Friday morning, which will give the current feature
> > > set a
> > > little time to settle.
> > > 
> > > On 30 Jul 2014, at 16:35, Jesper Vandborg notifications@github.com
> > > wrote:
> > > 
> > > > If it's no trouble it would be much appreciated. :)
> > > > 
> > > > Mvh.
> > > > Jesper Vandborg
> > > > 
> > > > *- *Owner at Vandborg IT
> > > > - Software Engineer student at AAU
> > > > - Volunteer at The Danish Youth Association of Science
> > > > 
> > > > Phone: (+45) 61276624
> > > > Mail: Jesper@vandborg.net
> > > > 
> > > > On Wed, Jul 30, 2014 at 4:04 PM, Dave Hall notifications@github.com
> > > 
> > > wrote:
> > > 
> > > > > I can push out a new release at the end of the week, if desired.
> > > > > 
> > > > > —
> > > > > Reply to this email directly or view it on GitHub
> > > > > <
> > > 
> > > https://github.com/etianen/django-reversion/pull/331#issuecomment-50618436>
> > > 
> > > > > .
> > > > > 
> > > > > —
> > > > > Reply to this email directly or view it on GitHub.
> > > 
> > > —
> > > Reply to this email directly or view it on GitHub
> > > <
> > > https://github.com/etianen/django-reversion/pull/331#issuecomment-50632995>
> > > 
> > > .
> > > 
> > > —
> > > Reply to this email directly or view it on GitHub.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/etianen/django-reversion/pull/331#issuecomment-50732772
> .
Heh, well it wasn't like I tested it either. Then again, I don't speak Dutch, so my tests wouldn't have been great!
Looks like a good start.

The errors appear to be due to the migration framework. I wonder, is there a way to fix this without breaking backwards compatibility?
Nope. Not as far as I know. But it's a minor breakage.
You're on fire!

I'll get all these pulled tomorrow morning, first thing.

> On 30 Jul 2014, at 18:44, Omer Katz notifications@github.com wrote:
> 
> You can merge this Pull Request by running
> 
>   git pull https://github.com/thedrow/django-reversion patch-2
> Or view, comment on, or merge it at:
> 
>   https://github.com/etianen/django-reversion/pull/335
> 
> Commit Summary
> 
> Large matrixes should fast finish.
> File Changes
> 
> M .travis.yml (1)
> Patch Links:
> 
> https://github.com/etianen/django-reversion/pull/335.patch
> https://github.com/etianen/django-reversion/pull/335.diff
> —
> Reply to this email directly or view it on GitHub.
I did consider this index when the app was first created, but was reluctant to add it since it's not required for everyday reversion operation. Revisions are normally ordered by pk rather than date, which allows fast ordering without the need for another index.

My concern with this patch is that some people have very large revision databases, and this would increase the storage requirement of the database tables still further.

OTOH, the deleterevisions management command does use the date_created field, so this would speed up that operation considerably.

Summery: I think this patch is probably a good thing. I just need to think about it for an hour or so before I merge. Thanks for contributing! :D
Merged! Thanks for flagging this up!
This is actually a reasonable approach, and a better one than I've had in my pasts. I've annotated your source code with some suggestions.
I've run some tests, and have encountered a couple of issues:

# 1. Exception when reverting to a previous revision that contains an inline model that needs to be recreated.

Steps to reproduce:
1. Fire up the included test_project admin.
2. Create a Child Model, but create no inline models
3. Create a new revision with an inline model
4. Load up revision 1, and save.
5. Load up revision 2, and save. BOOM.

```
Environment:


Request Method: POST
Request URL: http://localhost:8000/admin/test_app/childmodel/1/history/5/

Django Version: 1.6.5
Python Version: 2.7.8
Installed Applications:
('django.contrib.auth',
 'django.contrib.contenttypes',
 'django.contrib.sessions',
 'django.contrib.sites',
 'django.contrib.messages',
 'django.contrib.staticfiles',
 'django.contrib.admin',
 'django.contrib.admindocs',
 'reversion',
 'test_project.test_app')
Installed Middleware:
('django.middleware.common.CommonMiddleware',
 'django.contrib.sessions.middleware.SessionMiddleware',
 'django.middleware.csrf.CsrfViewMiddleware',
 'django.contrib.auth.middleware.AuthenticationMiddleware',
 'django.contrib.messages.middleware.MessageMiddleware')


Traceback:
File "/Users/dave/Workspace/reversion/venv/lib/python2.7/site-packages/django/core/handlers/base.py" in get_response
  112.                     response = wrapped_callback(request, *callback_args, **callback_kwargs)
File "/Users/dave/Workspace/reversion/venv/lib/python2.7/site-packages/django/utils/decorators.py" in _wrapped_view
  99.                     response = view_func(request, *args, **kwargs)
File "/Users/dave/Workspace/reversion/venv/lib/python2.7/site-packages/django/views/decorators/cache.py" in _wrapped_view_func
  52.         response = view_func(request, *args, **kwargs)
File "/Users/dave/Workspace/reversion/venv/lib/python2.7/site-packages/django/contrib/admin/sites.py" in inner
  198.             return view(request, *args, **kwargs)
File "/Users/dave/Workspace/reversion/src/reversion/revisions.py" in do_revision_context
  296.                 return func(*args, **kwargs)
File "/Users/dave/Workspace/reversion/venv/lib/python2.7/site-packages/django/db/transaction.py" in inner
  371.                 return func(*args, **kwargs)
File "/Users/dave/Workspace/reversion/src/reversion/admin.py" in revision_view
  438.         return self.render_revision_form(request, obj, version, context, revert=True)
File "/Users/dave/Workspace/reversion/src/reversion/admin.py" in render_revision_form
  316.                     self._hack_inline_formset(inline, formset)
File "/Users/dave/Workspace/reversion/src/reversion/admin.py" in _hack_inline_formset
  241.         for form in formset.forms:
File "/Users/dave/Workspace/reversion/venv/lib/python2.7/site-packages/django/utils/functional.py" in __get__
  49.         res = instance.__dict__[self.func.__name__] = self.func(instance)
File "/Users/dave/Workspace/reversion/venv/lib/python2.7/site-packages/django/forms/formsets.py" in forms
  133.         forms = [self._construct_form(i) for i in xrange(self.total_form_count())]
File "/Users/dave/Workspace/reversion/venv/lib/python2.7/site-packages/django/forms/models.py" in _construct_form
  848.         form = super(BaseInlineFormSet, self)._construct_form(i, **kwargs)
File "/Users/dave/Workspace/reversion/venv/lib/python2.7/site-packages/django/forms/models.py" in _construct_form
  567.                 connection=connections[self.get_queryset().db])
File "/Users/dave/Workspace/reversion/venv/lib/python2.7/site-packages/django/db/models/fields/__init__.py" in get_db_prep_lookup
  387.             value = self.get_prep_lookup(lookup_type, value)
File "/Users/dave/Workspace/reversion/venv/lib/python2.7/site-packages/django/db/models/fields/__init__.py" in get_prep_lookup
  369.             return self.get_prep_value(value)
File "/Users/dave/Workspace/reversion/venv/lib/python2.7/site-packages/django/db/models/fields/__init__.py" in get_prep_value
  613.         return int(value)

Exception Type: ValueError at /admin/test_app/childmodel/1/history/5/
Exception Value: invalid literal for int() with base 10: ''
```

# 2. When rolling back to a revision, inline models won't remove FileField values

Steps to reproduce:
1. Create a Child model with an inline. Don't upload any files.
2. Create another revision where the Child model and inline both have a file.
3. Load up revision 1, and click save.
4. The Child model no longer has a file, but the inline model still does.
Hi, thanks for the feedback, just thought I'd let you know I'm working on
this, I still haven't found a good solution for number 1, I've only got
limited time to work on this, but I plan on getting it to pass all tests
eventually!
No worries. It's a very tricky feature, but one that is worthwhile. 

Unfortunately, my current project doesn't use reversion, so I can't spend too much time debugging it myself at the moment. However, I'm very interested in getting this feature in, so will happily spend what time I have testing and reviewing.

Good luck!

> On 9 Sep 2014, at 17:33, Diego Gaustein notifications@github.com wrote:
> 
> Hi, thanks for the feedback, just thought I'd let you know I'm working on
> this, I still haven't found a good solution for number 1, I've only got
> limited time to work on this, but I plan on getting it to pass all tests
> eventually!
> —
> Reply to this email directly or view it on GitHub.
After a bunch of different approaches, I don't see a way to make this work with inlines without overriding FormSet itself or some seriously ugly hacks which will surely break in some future Django release. 

I cannot really justify spending more time on this. I've reverted my master branch to my first commit, which only fixes the readonly display for the main object, and rebased it against the latest master. It passes all tests (including the two cases above) and is quite simple. Since it fixes the problem partially and doesn't seem to cause any side effects, would you agree to merging this? Thanks!
I guess the only side effect is that it’s a partial feature. It might be confusing to users. Essentially, what we currently have is that readonly fields work IF they don’t cross foreign keys and IF they’re on the main model. I wonder if consistency doesn’t trump the extra functionality here?

> On 21 Oct 2014, at 15:31, Diego Gaustein notifications@github.com wrote:
> 
> After a bunch of different approaches, I don't see a way to make this approach work with inlines without overriding FormSet itself or some seriously ugly hacks which will surely break in some future Django release.
> 
> I cannot really justify spending more time on this. I've reverted my master branch to my first commit, which only fixes the readonly display for the main object, and rebased it against the latest master. It passes all tests (including the two cases above) and is quite simple. Since it fixes the problem partially and doesn't seem to cause any side effects, would you agree to merging this? Thanks!
> 
> —
> Reply to this email directly or view it on GitHub.
You may have a point there. I guess the ideal thing would be to create a custom view and override a few templates which actually know about revisions, instead of trying to fake it all on the view side. Feel free to close this issue if you rather not merge a partial feature, if I ever get the time I'll work on a proper fix, cheers.
I'd like to keep this pull request around, as it's the best attempt I've seen yet on this problem. At some point, I"d like to think that someone, be it yourself, me, or someone else, could use it as the starting point for a complete feature.

Until then, I think it's probably best not to merge. Thanks for your time on this. You've certainly advanced the state of the art, and we're a few steps closer to a solution (assuming such a solution will be possible at some point!).
Closing, as fixed in aa858f8ff53b50ea10be8b2ccca96ca993b95545
I don't think that field.attname is correct here. FK fields have an attname of `"name_id"`, but are stored in serialised models as `"name"`

I think this can be simplified as:

```
for key, value in initial.iteritems():
    setattr(obj, key, value)
```
The initial version of the code was like that, but it raises a ValueError on foreign keys, since it is expecting an instance of the type instead of the ID. So for example if we have

```
class Book(models.Model):
    author = models.ForeignKey(Author)
    title = models.TextField()
```

the keys returned by `self.get_revision_form_data(request, obj, version)` are (author, title), but we need to set (author_id, title).

Also I replaced iteritems with items, since it broke the Travis build on python 3.x. Best would be to use six, but I didn't want to add another dependency.
A possible optimization would be 

``` python
initial = self.get_revision_form_data(request, obj, version)
for key, value in initial.items():
    try:
        setattr(obj, key, value)
    except ValueError:
        field = model._meta.get_field(key)
        setattr(obj, field.attname, value)
```

It is slightly more expensive if the model has a lot of ForeignKeys, but it avoids the overhead of get_field() for all other field types. Would you prefer this?
I’m utterly unconcerned with optimisation at this level!

My concern was with the correctness of your code, but I see that I was mistaken. I see no reason not to include this pull request, but I’ll review some of the past attempts first to make sure this isn’t doing something that has been proven broken before. (There has been another attempt at this feature that DID introduce a bug, so I need to check).

On 19 Aug 2014, at 16:04, Diego Gaustein notifications@github.com wrote:

> In src/reversion/admin.py:
> 
> > @@ -323,7 +323,12 @@ def render_revision_form(self, request, obj, version, context, revert=False, rec
> >              # change_view.  Once again, a hook for this kind of functionality
> >              # would be nice.  Unfortunately, it results in doubling the number
> >              # of queries required to construct the formets.
> > -            form = ModelForm(instance=obj, initial=self.get_revision_form_data(request, obj, version))
> > -            initial = self.get_revision_form_data(request, obj, version)
> > -            for key, value in initial.items():
> > -                field = model._meta.get_field(key)
> > -                setattr(obj, field.attname, value)
> 
> A possible optimization would be
> 
> initial = self.get_revision_form_data(request, obj, version)
> for key, value in initial.items():
> 
> try:
> 
> setattr(obj, key, value)
> 
> except ValueError:
> 
> field = model._meta.get_field(key)
> 
> setattr(obj, field.attname, value)
> It is slightly more expensive if the model has a lot of ForeignKeys, but it avoids the overhead of get_field() for all other field types. Would you prefer this?
> 
> —
> Reply to this email directly or view it on GitHub.
Sure thing. I have checked the PR associated with #170, and while this is doing something different, I don't understand entirely what the bug caused was, so better be safe, cheers.
Here's a thought. Currently, read only fields in related objects via admin inlines won't work.

Is there any way to extend this patch to work with related objects via admin inlines?

> On 19 Aug 2014, at 16:19, Diego Gaustein notifications@github.com wrote:
> 
> In src/reversion/admin.py:
> 
> > @@ -323,7 +323,12 @@ def render_revision_form(self, request, obj, version, context, revert=False, rec
> >              # change_view.  Once again, a hook for this kind of functionality
> >              # would be nice.  Unfortunately, it results in doubling the number
> >              # of queries required to construct the formets.
> > -            form = ModelForm(instance=obj, initial=self.get_revision_form_data(request, obj, version))
> > -            initial = self.get_revision_form_data(request, obj, version)
> > -            for key, value in initial.items():
> > -                field = model._meta.get_field(key)
> > -                setattr(obj, field.attname, value)
> >   Sure thing. I have checked the PR associated with #170, and while this is doing something different, I don't understand entirely what the bug caused was, so better be safe, cheers.
> 
> —
> Reply to this email directly or view it on GitHub.
That seems like a good idea, I was just toying around with it trying to get a working patch, and I think it would work, however the `_hack_inline_formset_initial` method is doing some things I don't fully understand. What I'd like to do is, instead of rebuiding the entire Formset from scratch, to only update the objects, and create new forms for the deleted objects.

``` python
for related_version in related_versions.values():
    initial_row = related_version.field_dict
    pk_name = ContentType.objects.get_for_id(related_version.content_type_id).model_class()._meta.pk.name
    del initial_row[pk_name]
    initial.append(initial_row)
```

At this point in related_versions there are only left the Versions for which there is no related_obj in the formset queryset, so I guess there are the deleted related object. Then why is it removing the PK?

Later there are some lines prefixed by `Hack the formset to force a save of everything.`, I see what this is doing, but why?
What I _think_ it’s doing is forcing the formset to clear and recreate all the models in the formset on save, rather than updating them in place. I can’t honestly remember what the rational behind this was. Unfortunately, django-reversion has had a history of competing with the django admin to achieve what it wants, with new versions of django breaking past hacks. It’s only in the past couple of django releases that the hacks have stopped breaking, presumably due to the maturity and stability of the django admin.

I’d like to think that there was an easier way to achieve this approach, but I’m also pretty sure that this “kill and recreate” tactic represents the only working solution I could come up with, however hacky and unpleasant.

On 20 Aug 2014, at 17:15, Diego Gaustein notifications@github.com wrote:

> In src/reversion/admin.py:
> 
> > @@ -323,7 +323,12 @@ def render_revision_form(self, request, obj, version, context, revert=False, rec
> >              # change_view.  Once again, a hook for this kind of functionality
> >              # would be nice.  Unfortunately, it results in doubling the number
> >              # of queries required to construct the formets.
> > -            form = ModelForm(instance=obj, initial=self.get_revision_form_data(request, obj, version))
> > -            initial = self.get_revision_form_data(request, obj, version)
> > -            for key, value in initial.items():
> > -                field = model._meta.get_field(key)
> > -                setattr(obj, field.attname, value)
> 
> That seems like a good idea, I was just toying around with it trying to get a working patch, and I think it would work, however the _hack_inline_formset_initial method is doing some things I don't fully understand. What I'd like to do is, instead of rebuiding the entire Formset from scratch, to only update the objects, and create new forms for the deleted objects.
> 
> for related_version in related_versions.values():
> 
> initial_row = related_version.field_dict
> 
> pk_name = ContentType.objects.get_for_id(related_version.content_type_id).model_class()._meta.pk.name
> 
> del initial_row[pk_name]
> 
> initial.append(initial_row)
> At this point in related_versions there are only left the Versions for which there is no related_obj in the formset queryset, so I guess there are the deleted related object. Then why is it removing the PK?
> 
> Later there are some lines prefixed by Hack the formset to force a save of everything., I see what this is doing, but why?
> 
> —
> Reply to this email directly or view it on GitHub.
Ok, so I've just pushed a new commit which tries to apply the same strategy with inlines. It's working so far in my tests. The part that sets a fake queryset is a bit hackish, but not terribly more so than what it's replacing. Please review and let me know what you think!
Won't this need to be .items() for Python3 compatibility?
Can't we use self._patch_object() here?
I'm a bit concerned about the complexity of having two different hacking approaches, one used during GET, and one during POST. Could you explain why the two distinct approaches are necessary? Could they be merged into one formset hack method, as before?
Yeah, sorry, seems I lost some changes in the last commit. Should be fixed now.
Absolutely, same as above, got accidentally reverted to an older version.
The issue is that they need to do different things. On GET, we need to modify the queryset to present the version data, while on POST the we only need to patch the form's `get_changed_data` and `has_changed` so everything gets saved; there is no reason to patch the form with the version data, since it's already been patched on GET.
I realize the test suite is failing, I will check it tomorrow at work
Cool, this is looking a lot cleaner now, and I get your point about different requirements for POST and GET.

Interesting how the test suite is failing, I'd forgotten that I'd put in some admin unit tests.

I like how your patch is going. If you can fix the failing tests, my plan it to pull locally, then test more thoroughly myself. I might also bolster the admin test suite, ensuring that the following conditions are met via various POST and GET requests to the admin interface.
1. Test model must have multi-table inheritance.
2. Test model must be registered with a child inline.
3. Test model must be registered with a child generic inline.
4. Test model can be reverted.
5. Test model can be recovered from deletion.
6. Both types of child model inline can be reverted.
7. Both types of child model inline can be recovered from deletion.
8. Both types of child model inline can be re-deleted when reverting to a previous revision that does not contain them.

I'd imagine that the current admin test suite covers some of these cases, but I can't remember how many.
Sounds good. We are not using multi-table inheritance, but I've amended the commit and it passes all current tests. Let me know how it goes and if you think any other changes are necessary, cheers.
Good spot, thanks!
Content Types have to be loaded from the same database a `reversion` and app that we create revisions for is installed in because django does not support cross database relations.

You're right that CT is cached when retrived but cache is also database specific, so it doesn't change anything here.

A snippet from Content Type model:

```
def _get_from_cache(self, opts):
        key = (opts.app_label, opts.model_name)
        return self.__class__._cache[self.db][key]
```
I think you're right.
Lovely jubbly. Many thanks!
I don't think ContentType should take a database argument. All the ContentType models are loaded from the database on app load and cached.
I think we need to let the default ContentType router take care of selecting the database.
As above.
I think the default should be `None`. This allows the database routers to kick in, if specified. Otherwise, we're effectively forcing the default db alias. See #329
Yes, right. My bad - just copied quickly from another script :/
Coolio. If you fix this, I'll happily pull! :)
done.
Oh FFS, you're right. Who thought that having to explicitly list all the packages in your setup.py was a good idea?!
Release 1.8.4 is now out!
I'm not sure that this commit fixes. If you want to associate a user with a revision, simply call reversion.set_user(user) at any point during the revision body.

http://django-reversion.readthedocs.org/en/latest/api.html#version-meta-data
hello etianen, I believe that reversion.set_user(user) will work.this is good.thanks.

but can i just make it out by middleware(reversion.middleware.RevisionMiddleware) and VersionAdmin(reversion.VersionAdmin)?

and this is excactly where the user/comment get lost.please consider my codes, it's very simple as you might see in the "files channged" tab above.
set_user is already called in RevisionMiddleware.

https://github.com/TommyU/django-reversion/blob/master/src/reversion/middleware.py#L36

Are you saying that, despite, this, no user is being saved in your revisions?

On 12 Sep 2014, at 02:36, Tommy notifications@github.com wrote:

> hello etianen, I believe that reversion.set_user(user) will work.this is good.thanks.
> 
> but can i just make it out by middleware(reversion.middleware.RevisionMiddleware) and VersionAdmin(reversion.VersionAdmin)?
> 
> and this is excactly where the user/comment get lost.please consider my codes, it's very simple as you might see in the "files channged" tab above.
> 
> —
> Reply to this email directly or view it on GitHub.
hi, etianen, sorry to reply so late.
You got it,no user saved.
It seems that there two threads running at the same time. One get into  here at https://github.com/TommyU/django-reversion/blob/master/src/reversion/middleware.py#L36, but not valid for saving the reversion. the  other is valid for saving the reversion but can not execute the "set_user" logic here at https://github.com/TommyU/django-reversion/blob/master/src/reversion/middleware.py#L36.

I don't know where exactly the problem lies, and just get the user from the request, I guess it will always work,but you know, it's not so elegant.Hopefully you guys will have better solution for this issue.
I think your middleware might be out of order. The RevisionMiddleware needs to be listed after the AuthenticationMiddleware to access the user.

On 16 Sep 2014, at 09:06, Tommy notifications@github.com wrote:

> hi, etianen, sorry to reply so late.
> You got it,no user saved.
> It seems that there two threads running at the same time. One get into here at https://github.com/TommyU/django-reversion/blob/master/src/reversion/middleware.py#L36, but not valid for saving the reversion. the other is valid for saving the reversion but can not execute the "set_user" logic here at https://github.com/TommyU/django-reversion/blob/master/src/reversion/middleware.py#L36.
> 
> I don't know where exactly the problem lies, and just get the user from the request, I guess it will always work,but you know, it's not so elegant.Hopefully you guys will have better solution for this issue.
> 
> —
> Reply to this email directly or view it on GitHub.
I tried it, still no user saved.
Maybe there is something wrong with my test code at https://github.com/TommyU/test_reversion.
I'll try another way, thanks anyway.
Try modifying your RevisionMiddleware to look like this:

def process_response(self, request, response):
        """Closes the revision."""
        # look to see if the session has been accessed before looking for user to stop Vary: Cookie
        if hasattr(request, 'session') and request.session.accessed \
                and hasattr(request, "user") and request.user.is_authenticated() \
                and revision_context_manager.is_active():
            print “SETTING USER”, request.user
            revision_context_manager.set_user(request.user)
        self._close_revision(request)
        return response

Then check out your dev server console output and see whether the user is actually being set.

On 17 Sep 2014, at 01:20, Tommy notifications@github.com wrote:

> I tried to put the middleware at the head/end of the list,it did not work.
> And just now I tried to put the middleware just after the AuthenticationMiddleware, and it did not save the user&commment eighter.
> 
> Below down is the order I ever tried:
> 
> A)
> MIDDLEWARE_CLASSES = (
> 'reversion.middleware.RevisionMiddleware',
> 'django.contrib.sessions.middleware.SessionMiddleware',
> 'django.middleware.common.CommonMiddleware',
> 'django.middleware.csrf.CsrfViewMiddleware',
> 'django.contrib.auth.middleware.AuthenticationMiddleware',
> 
> 'django.contrib.messages.middleware.MessageMiddleware',
> 'django.middleware.clickjacking.XFrameOptionsMiddleware',
> 
> )
> 
> B).
> MIDDLEWARE_CLASSES = (
> 
> 'django.contrib.sessions.middleware.SessionMiddleware',
> 'django.middleware.common.CommonMiddleware',
> 'django.middleware.csrf.CsrfViewMiddleware',
> 'django.contrib.auth.middleware.AuthenticationMiddleware',
> 
> 'django.contrib.messages.middleware.MessageMiddleware',
> 'django.middleware.clickjacking.XFrameOptionsMiddleware',
> 'reversion.middleware.RevisionMiddleware',
> 
> )
> 
> C).
> MIDDLEWARE_CLASSES = (
> 'reversion.middleware.RevisionMiddleware',
> 'django.contrib.sessions.middleware.SessionMiddleware',
> 'django.middleware.common.CommonMiddleware',
> 'django.middleware.csrf.CsrfViewMiddleware',
> 'django.contrib.auth.middleware.AuthenticationMiddleware',
> 
> 'django.contrib.messages.middleware.MessageMiddleware',
> 'django.middleware.clickjacking.XFrameOptionsMiddleware',
> 
> )
> 
> —
> Reply to this email directly or view it on GitHub.
hello, buddy , believe it or not. the user is set after the reversion log is saved.Please debug it to see what's up.

![111](https://cloud.githubusercontent.com/assets/6781433/4301596/04e63a88-3e51-11e4-8d8d-c330b2394e93.png)
Could you please put in the debugging line I suggested, and let me know if it’s being logged?

Ultimately, the reversion.set_user() command does work, so it’s either not being called, or your code is somehow overriding it.

On 17 Sep 2014, at 10:57, Tommy notifications@github.com wrote:

> hello, buddy , believe it or not. the user is set after the reversion log is saved.Please debug it to see what's up.
> 
> —
> Reply to this email directly or view it on GitHub.
Below down is the debug view. 
When I try the url  http://127.0.0.1:8000/update/1 of my test project at https://github.com/TommyU/test_reversion/.
hope it will make clear what was happening.

![111](https://cloud.githubusercontent.com/assets/6781433/4302493/a53c052c-3e5a-11e4-9db4-f7b805df20e2.jpg)
the process_response method was entered twice.
for the first time, the reversion log was saved but the user was not set. (as is shown in the image below down)
and the second time, the user was set,but the revision_context_manager._objects.items() is a empty list.(as is shown in the picture above)

![000](https://cloud.githubusercontent.com/assets/6781433/4302658/6df380ac-3e5c-11e4-8115-d2719cecdd4c.jpg)
Ah, in order for the user to be added to the revision, you must access request.user somewhere in your templates or views.

For example, in your template, add the following somewhere:

{{user}}

Otherwise, the session is never initialised.

On 17 Sep 2014, at 12:08, Tommy notifications@github.com wrote:

> Below down is the debug view. 
> When I try the url http://127.0.0.1:8000/update/1 of my test project at https://github.com/TommyU/test_reversion/.
> hope it will make clear what was happening.
> 
> —
> Reply to this email directly or view it on GitHub.
bad news. that won't fix.
![111](https://cloud.githubusercontent.com/assets/6781433/4303054/60e94900-3e61-11e4-8a46-df63eb6e0e55.png)
![111](https://cloud.githubusercontent.com/assets/6781433/4303203/43fdd728-3e63-11e4-8aa8-9566aca29e9e.jpg)
I’ve got to the bottom of this. During the POST request, the user is never accessed, so the session is never initialized, and thus the middleware branch that triggers saving the user is never called.

Try adding this to your articleUV:

def dispatch(self, request, _args, *_kwargs):
    request.user.username  # Initialize the user.
    return super(articleUV, self).dispatch(request, _args, *_kwargs)

This isn’t normally an issue, since views which have a user generally check some sort of user authentication.

In your case, I’d suggest putting in another middleware that initialises the user in the pre_request hook, ensuring that RevisionMiddleware will always save the user.

On 17 Sep 2014, at 13:08, Tommy notifications@github.com wrote:

> —
> Reply to this email directly or view it on GitHub.
Thank you!
Closing this. No recent activity, and the feature can be implemented in non-library code.
Thanks!
Does 1.8.5 not work with Django 1.6? My understanding is that it does.
I was using 1.8.4, and the default looks like it is trying to use django migrations instead of south when `./manage.py migrate` is used. I wasn't able to figure out how to get it to default back to the south_migration version, but I found that 1.8.2 worked since it was before [1f265db](https://github.com/etianen/django-reversion/commit/1f265dbe1fb499032954b4f589816558d03fd9b0#diff-53166c59bbe436ba3f2589d92a817d23).
And the docs seemed to indicate that as of 1.8.3 django [1.7 or greater was required](http://django-reversion.readthedocs.org/en/latest/migrations.html). So I didn't dig into code to try and get it to work and just flipped back a few versions. 

fyi - the 1.8.3+ causes `ImportError: cannot import name migrations` on the migrate command.
Are you using south 1.0? I believe that should use the old migrations.

On 30 Sep 2014, at 17:50, Chris Stephens notifications@github.com wrote:

> I was using 1.8.4, and the default looks like it is trying to use django migrations instead of south when ./manage.py migrate is used. I wasn't able to figure out how to get it to default back to the south_migration version, but I found that 1.8.2 worked since it was before 1f265db.
> And the docs seemed to indicate that as of 1.8.3 django 1.7 or greater was required. So I didn't dig into code to try and get it to work and just flipped back a few versions.
> 
> fyi - the 1.8.3+ causes ImportError: cannot import name migrations on the migrate command.
> 
> —
> Reply to this email directly or view it on GitHub.
Ah, I was working with an older version. I'll upgrade and double check.
Thanks.
Seems that v1.8.2 is the last one for Django v1.6.x isn't it?

See: https://github.com/etianen/django-reversion/compare/release-1.8.2...release-1.8.3

A compatibility table would be good ;) Or does this anywhere exists?
The current release (1.8.5) should still support Django 1.6.x.

http://django-reversion.readthedocs.org/en/latest/django-versions.html

> On 2 Feb 2015, at 09:53, Jens Diemer notifications@github.com wrote:
> 
> Seems that v1.8.2 is the last one for Django v1.6.x isn't it?
> 
> See: release-1.8.2...release-1.8.3
> 
> A compatibility table would be good ;) Or does this anywhere exists?
> 
> —
> Reply to this email directly or view it on GitHub.
Thanks for the link! Maybe a good place of a link to is is in the README under https://github.com/etianen/django-reversion#upgrading ?

> The current release (1.8.5) should still support Django 1.6.x.

No.
I think this commit it the problem: https://github.com/etianen/django-reversion/commit/1f265dbe1fb499032954b4f589816558d03fd9b0 and will result in `ImportError: cannot import name migrations` (As sayed above: https://github.com/etianen/django-reversion/pull/356#issuecomment-57344919 )

it's the switch from `south` to `django.db.migrations` which is new in django 1.7.x

(btw. i didn't really need django 1.6.x support ;) )
It totally works in 1.6! I have proof! :P

https://travis-ci.org/etianen/django-reversion

Try upgrading to south 1.0.

> On 2 Feb 2015, at 13:08, Jens Diemer notifications@github.com wrote:
> 
> Thanks for the link! Maybe a good place of a link to is is in the README under https://github.com/etianen/django-reversion#upgrading ?
> 
> The current release (1.8.5) should still support Django 1.6.x.
> 
> No.
> I think this commit it the problem: 1f265db and will result in ImportError: cannot import name migrations (As sayed above: #356 (comment) )
> 
> it's the switch from south to django.db.migrations which is new in django 1.7.x
> 
> —
> Reply to this email directly or view it on GitHub.
Hi,

Thanks for contributing! Could you explain what the intended use-case for this is?

I'm a little bit concerned about the special-casing for the pre_delete signal. Presumably there are other custom signals that might need this special casing too?

Essentially, most some signals need deferred handling, but some (pre_delete), need eager handling. I wonder if there is a nice syntax we could use for specifying this when adding custom signals?
The intended use-case (which we're already using internally and I'm hoping to publish as soon as time permits) is a soft-delete solution built on top of django-reversion. 

post_save is not the right signal for this for two reasons:
1. In case of cascading deletes we might lose information on child objects
2. The table gets "polluted" with a lot of versioning information which is uninteresting for the soft-delete usecase

To elaborate on point 1. (the most significant point), consider the following flow:
1. A Chapter object is created (triggers post_save on Chapter object)
2. A Page object (which is a child of the Chapter) is created (triggers post_save on Page object, but not on Chapter)
3. Chapter object is deleted (does not trigger post_save, so no handling by django-reversion)
   3a. Due to cascading deletes, the Page object is also deleted
4. The Chapter object is restored, based on the latest information in django-reversion. Since this is the information stored at time of 1, the Page object is not restored.

By storing the information on pre_delete, we can ensure that all the information neccesary for a full restore is available.

Regarding the special-casing, I agree that there might be other signals (especially user-defined ones) that might need eager handling as well. We could pass in a list of dictionaries with 'signal' and 'eager' instead of just a list of signals and store whether a signal should be processed as eager in an attribute on the revision manager. I'll augment the pull request to facilitate this.
Thanks for the comprehensive response... I can see how this would be useful. Apologies for taking a few days to get back to you on this. I'm afraid that I'm just come back from a camping trip.

I'm not so sure about the dictionary syntax for the signals. It seems clumsy to use strings like this. Two ideas present themselves:

```
reversion.register(SomeModel, signals={post_save: False, pre_delete: True})
```

Or:

```
reversion.register(SomeModel, signals=(post_save,), eager_signals=(pre_delete,))
```

I'd tend to prefer the second, as it's more explicit as to what is being done.
Good idea. I have some other stuff to attend to right now, but I'll get a pull-request to you later today.
Ping :) Are there issues that you'd like to have resolved before this can be merged?
Sorry, I don't actually get notified when new code goes up. It just appears silently. :S

I've made some comments on the changes. I wonder, would it also be possible to get some tests in?
Good suggestions, implemented.

I also added some tests specifically for the pre_delete functionality, but I'm not sure if those are sufficient. You have a rather comprehensive set of tests :) If you could point me at anything specific you'd like me to test I'd be happy to add some more tests.
Thanks, this looks excellent!
(At some point, I'll integrate a code coverage report on Travis, but at the moment, it's good that the feature is at least partly tested for the easy cases).
Great :) As one final question: in what timeframe do you expect this to surface in a stable release on pypi? When I have spare time I'm planning on extracting the undelete feature I built out into a seperate package so that I can release it and I don't want it to rely on unreleased code :) No hurry though, just wondering.
I can push out a release tomorrow, no worries!

> On 30 Oct 2014, at 14:09, Erwin Junge notifications@github.com wrote:
> 
> Great :) As one final question: in what timeframe do you expect this to surface in a stable release on pypi? When I have spare time I'm planning on extracting the undelete feature I built out into a seperate package so that I can release it and I don't want it to rely on unreleased code :) No hurry though, just wondering.
> 
> —
> Reply to this email directly or view it on GitHub.
Tadah!

https://pypi.python.org/pypi/django-reversion/1.8.5

> On 30 Oct 2014, at 14:18, Dave Hall dave@etianen.com wrote:
> 
> I can push out a release tomorrow, no worries!
> 
> > On 30 Oct 2014, at 14:09, Erwin Junge notifications@github.com wrote:
> > 
> > Great :) As one final question: in what timeframe do you expect this to surface in a stable release on pypi? When I have spare time I'm planning on extracting the undelete feature I built out into a seperate package so that I can release it and I don't want it to rely on unreleased code :) No hurry though, just wondering.
> > 
> > —
> > Reply to this email directly or view it on GitHub.
It feels like unregister() should unregister from all the signals provided in register(), rather than allowing selective unregistration. I'd suggest also storing self._signals, in the same way as you're storing self._eager_signals, and looping over both of these in unregister.
This can just be list(self._signals) + list(self._eager_signals), if below comment is implemented.
I'm not sure if it will work. I'll try and let you know.
South migrations are removed from the project now, so this is no longer relevant.
Rather than repeat this method on every migration, surely it's better to place it in south_migrations.**init**?
Looks good, thanks!
Thanks!
What is the purpose of making this explicit?
> reversion/models.py:113: RemovedInDjango19Warning: Model class reversion.models.Version doesn't declare an explicit app_label and either isn't in an application in INSTALLED_APPS or else was imported before its application was loaded. This will no longer be supported in Django 1.9.

Looks like Django 1.9 needs an explicit app_label.
I'm not sure that I like this approach. Using object_version.object.save() will completely ignore m2m relations. I can see this causing a lot of confusion, with people wondering where their m2m data went.

What was the traceback when you undelete failed? How did the auto_now field break the undelete?
Oh, I didn't know that. 

I don't have the traceback anymore, but the problem was that I got an IntegrityError from postgres due to the field not being in the json serialization. This makes sense, since I added the field to the model after deleting the original. Calling the save() method on the object sets the auto_now field to "now", which (while not exactly correct, since the object wasn't modified), seems better to me than not saving at all.

This seemed to me like one case where we can safely recover from changing the schema after creating a revision, but now I'm not sure if what I'm trying to achieve is possible. Would calling object_version.save() again after object_version.object.save() work for the m2m?
Yes, calling one, then the other, might work, while still saving the m2m data.

I’m still not sure that putting in this sort of slight hack is right, however. I guess it’ll fix revision reverting when a new field with a default value is added, but it seems a bit… wrong.

> On 13 Nov 2014, at 11:16, Erwin Junge notifications@github.com wrote:
> 
> Oh, I didn't know that. I'll try to figure out a way to save the m2m data as well.
> 
> I don't have the traceback anymore, but the problem was that I got an IntegrityError from postgres due to the field not being in the json serialization. This makes sense, since I added the field to the model after deleting the original. Calling the save() method on the object sets the auto_now field to "now", which (while not exactly correct, since the object wasn't modified), seems better to me than not saving at all.
> 
> This seemed to me like one case where we can safely recover from changing the schema after creating a revision, but now I'm not sure if what I'm trying to achieve is possible. Would calling object_version.save() again after object_version.object.save() work for the m2m?
> 
> —
> Reply to this email directly or view it on GitHub.
Closing this, as it's a bit hacky, and there's no current interest in it.
Oops. Good spot.
Would this be an alternative fix?

http://dev.mysql.com/doc/refman/5.5/en/innodb-parameters.html#sysvar_innodb_large_prefix
Yes, but only if you're using the DYNAMIC and COMPRESSED row formats, but I am not and I imagine that most won't be either because the default is COMPACT (since MySQL 5.0.3).
`Seems legit. I'm pulling now.
Thanks!
Good spot. Ta!
This will break Django 1.6 support. For the time being, until 1.8 is released, I'd like to keep supporting 1.6.

I'll keep this one on hold until then. But still, thanks for contributing, and it will be merged soon!
This breaks backwards compatibility with 1.6. Until 1.8 has been released, I'd like to keep this pull request on hold.

Alternatively, a patch that performs a conditional import would be merged right now.
Good point. Fixed.
Thanks!
Can you clarify "doesn't work"?
django.contrib.contenttypes.generic will be removed in Django 1.9 and generate RemovedInDjango19Warning in 1.8.
In Django 1.8+ GenericInlineModelAdmin moved to django.contrib.contenttypes.admin and GenericRelation to django.contrib.contenttypes.fields

To avoid warnings and errors we need to try import them from new place first and fallback to django.contrib.contenttypes.generic on ImportError (for older versions of Django).

#394 have few bugs with that:
import from django.contrib.contenttypes.generic first (and we still get RemovedInDjango19Warning in 1.8)
And on ImportError we try to get both GenericInlineModelAdmin and GenericRelation from django.contrib.contenttypes.admin (but GenericRelation located in django.contrib.contenttypes.fields, so we will get another ImportError in 1.9)

P.S. Sorry for possible writing mistakes, English is not my primary language.
Good spot!
Looks good. Thanks!

I'm really loving how the Django community appears to be finally switching over to Python 3. :)
Thanks.

It’s about time to be honest ;-)

> On 7 May 2015, at 10:14, Dave Hall notifications@github.com wrote:
> 
> Looks good. Thanks!
> 
> I'm really loving how the Django community appears to be finally switching over to Python 3. :)
> 
> —
> Reply to this email directly or view it on GitHub https://github.com/etianen/django-reversion/pull/401#issuecomment-99787447.
Aside from my notes about get_apps() and get_models(), this all looks good. If you could make the change, I'll pull. :)
FYI the PR has been updated.
Lovely, it's merged! Thanks for the fixes. :)
Thanks for merging. One of the latest deprecation warning on Django 1.8 is the usage of `get_formsets` in admin.py. However, this is a bit harder to fix as some knowledge of that code is required to update it wisely...
What specific warning are you getting for get_formsets?

> On 27 May 2015, at 19:10, Claude Paroz notifications@github.com wrote:
> 
> Thanks for merging. One of the latest deprecation warning on Django 1.8 is the usage of get_formsets in admin.py. However, this is a bit harder to fix as some knowledge of that code is required to update it wisely...
> 
> —
> Reply to this email directly or view it on GitHub.
```
.../local/lib/python2.7/site-packages/reversion/admin.py:329: RemovedInDjango19Warning:
ModelAdmin.get_formsets() is deprecated and will be removed in Django 1.9. Use ModelAdmin.get_formsets_with_inlines() instead.
  for FormSet, inline in zip(self.get_formsets(request, obj), self.get_inline_instances(request)):
```

See https://docs.djangoproject.com/en/1.8/ref/contrib/admin/#django.contrib.admin.ModelAdmin.get_formsets
This feels like a fallback that isn't correct, as the two modules aren't equivalent. We should really be specifically importing get_models() and get_apps() using from django.(apps/models) import get_models, get_apps.
This feels like a fallback that isn't correct, as the two modules aren't equivalent. We should really be specifically importing get_models() and get_apps() using from django.(apps/models) import get_models, get_apps.
I didn't look in details about differences, but it seems at least in Django 1.8 they were equivalent enough to justify some aliasing:
https://github.com/django/django/blob/stable/1.8.x/django/db/models/__init__.py#L62
https://github.com/django/django/blob/stable/1.8.x/django/db/models/loading.py
Yes, but django.db.models includes other things like models.Q, models.Max, which aren’t present in django.apps.

> On 21 May 2015, at 17:14, Claude Paroz notifications@github.com wrote:
> 
> In src/reversion/management/commands/createinitialrevisions.py:
> 
> >  from optparse import make_option
> > +try:
> > -    from collections import OrderedDict
> >   +except ImportError:  # For Python 2.6
> > -    from django.utils.datastructures import SortedDict as OrderedDict
> >   +
> >   +try:
> > -    from django.apps import apps
> >   +except ImportError:  # For Django < 1.7
> > -    from django.db import models as apps
> 
> I didn't look in details about differences, but it seems at least in Django 1.8 they were equivalent enough to justify some aliasing:
> https://github.com/django/django/blob/stable/1.8.x/django/db/models/__init__.py#L62
> https://github.com/django/django/blob/stable/1.8.x/django/db/models/loading.py
> 
> —
> Reply to this email directly or view it on GitHub.
Ah, I see your point now. I'll directly import the methods instead.
Thanks!
No problem!

On Wed, May 27, 2015 at 3:29 PM, Dave Hall notifications@github.com wrote:

> Thanks!
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/etianen/django-reversion/pull/407#issuecomment-106025498
> .
Nice. I think this will also fix #391.

I've made a comment on your implementation that I think will improve it. If you could make the change, I'll pull.
Yeah I noticed it as soon as I made the PR. I'll make the change.
I made the change, so it's ready to be merged.
Great, thanks!
I think this should be:

``` py
if obj.pk is not None
```
Lovely!
Fixed issues; please merge.
Thanks!
Thanks!
Thanks!
Thanks for looking into this! A better way to do this might be to use six in the head of the module.

``` py
from django.utils.six.moves import input
```
Hi @etianen I agree using six.moves would be better, but the six compatibility layer it isn't used elsewhere in the codebase and I didn't want to introduce a new dependency. It should be fine though since `django.utils.six` has been available since [Django 1.4.2](https://docs.djangoproject.com/en/1.8/topics/python3/#writing-compatible-code-with-six) (earlier than I thought)
Full marks for trying to fit with the existing code style! I like this new approach better. Merged!
Thanks!
This feels like quite a specialised use-case.

In the django admin integration that django-reversion ships with, it performs autodetection of followed relationships when it initializes. Couldn't the admin registration for django-fluent-pages support something similar?
I will need to look further into how the Django admin integration auto detection of followed relationships works.

This approach might work for our use-case if we can find and register all the polymorphic models that could be associated with the followed relationships of a page.
Deprecating this PR. I am able to auto-register all the models we need as part of the admin auto-registration process which isn't pretty, but is probably cleaner than this approach.
I can see the use for this, but I'm not sure that this is entirely the correct approach.
1. Rather than introduce a new django setting, I think it might be better to have it as an attribute of the VersionAdmin class.
2. It's a bit unintuitive to display a form to the user, but have it ignore any changes made! This feels like it needs a read-only preview of the version to be restored.  How that would be created is an open question.
Thanks for the feedback.
1. Moving the Django setting into a VersionAdmin class attribute makes sense, I will make that change.
2. We are handling the read-only nature of the revert/restore pages by applying Javascript to disable the form fields client-side. I looked into doing this on the server-side but it looked quite involved, and for our CMS would leave a lot of dynamic form editing UI "junk" we would still need to strip out anyway. Would you be interested in having some basic Javascript support for disabling the form in this project?
Javascript seems wrong. I can see how a complicated CMS UI would require it, but the basic Django admin shouldn't.

How about this as an approach? Override `get_readonly_fields()`, and within this method get the list of form fields from `get_fieldsets()`, flatten it using `flatten_fieldsets()`. This will set all form fields to read-only.

The trick is getting it to work for inline model formsets, of course. Then again, for strict revert, those could just be omitted? It's lazy, but strict revert implies that your data transcends the inline formsets anyway.

I'm wondering whether an approach like this shouldn't be the default. The current hacking of the inline formsets is horrible, and a completely different mechanism for reverting that the low-level API. A cleaner approach might be to show a read-only no-inline view of the data, allow the developer to easily override it for a nicer read-only view, and get rid of all the formset hacking for good.
Of course, a big change like this would mean a new major release. Now that I think about it, I'm increasingly in favour of this approach. It's much better for long-term maintainability and fixes some long-standing issues with the admin integration.
From my perspective a read-only view of the data makes a lot of sense, as opposed to allowing the user to edit and restore in the one operation, so making this major change in default behaviour in a new version of reversion sounds reasonable.

However, please don't scrap the admin inline formsets data population altogether! The inlines may be "hacky" – they actually work pretty well for us :) – but in our case an admin page without inlines would be next to useless since all the content of our CMS pages is "plugin" based and only appears in the inlines.

The strict restore feature makes it much less important for the admin page content to be entirely accurate and complete – it is enough for the admin page to show a reasonable approximation of the data that will be restored. Maybe switching to a strict restore as the default and making it clear that the data shown on admin pages (including inlines) is a best-effort only would sidestep some of the maintenance issues with the admin integration? Or at least, with users' expectations for it.
To be fair, a read-only set of inlines would be a lot less hacky. Maybe that’s the compromise.

> On 10 Jul 2015, at 11:56, James Murty notifications@github.com wrote:
> 
> From my perspective a read-only view of the data makes a lot of sense, as opposed to allowing the user to edit and restore in the one operation, so making this major change in default behaviour in a new version of reversion sounds reasonable.
> 
> However, please don't scrap the admin inline formsets data population altogether! The inlines may be "hacky" – they actually work pretty well for us :) – but in our case an admin page without inlines would be next to useless since all the content of our CMS pages is "plugin" based and only appears in the inlines.
> 
> The strict restore feature makes it much less important for the admin page content to be entirely accurate and complete – it is enough for the admin page to show a reasonable approximation of the data that will be restored. Maybe switching to a strict restore as the default and making it clear that the data shown on admin pages (including inlines) is a best-effort only would sidestep some of the maintenance issues with the admin integration? Or at least, with users' expectations for it.
> 
> —
> Reply to this email directly or view it on GitHub.
I should add that while I agree that using Javascript to disable the fields client-side feels pretty wrong, the Javascript approach is quite effective, relatively easy, and could work well for standard Django admin presentations like it does for our use-case with a complex dynamic admin UI.

My suggestion would be to make strict restore available as an optional feature now with the Javascript client-side hack to produce reasonable behaviour by default – quick and dirty as it is – then use that as an example for the proposed new default behaviour once the server-side can be sorted out.
I could probably have a go in the next couple of weeks at making the base and inline fields disabled/read-only on the server-side. I actually made a start down this path originally, before I realised how difficult it was likely to be (and that the Javascript hack was good enough for us)
Unfortunately, making it optional with a javascript hack just means more code to maintain in the short-term. I don’t think the server-side solution would be much work.

I’ve have a think about it over the weekend. If this still seems like a good idea, I’d have a go at getting this working in a separate branch next week.

> On 10 Jul 2015, at 12:02, James Murty notifications@github.com wrote:
> 
> I should add that while I agree that using Javascript to disable the fields client-side feels pretty wrong, the Javascript approach is quite effective, relatively easy, and could work well for standard Django admin presentations like it does for our use-case with a complex dynamic admin UI.
> 
> My suggestion would be to make strict restore available as an optional feature now with the Javascript client-side hack to produce reasonable behaviour by default – quick and dirty as it is – then use that as an example for the proposed new default behaviour once the server-side can be sorted out.
> 
> —
> Reply to this email directly or view it on GitHub.
(I’ve done dynamic read-only stuff before, and the code is still hanging around in some project somewhere. It’s not too bad.)

> On 10 Jul 2015, at 12:08, Dave Hall dave@etianen.com wrote:
> 
> Unfortunately, making it optional with a javascript hack just means more code to maintain in the short-term. I don’t think the server-side solution would be much work.
> 
> I’ve have a think about it over the weekend. If this still seems like a good idea, I’d have a go at getting this working in a separate branch next week.
> 
> > On 10 Jul 2015, at 12:02, James Murty notifications@github.com wrote:
> > 
> > I should add that while I agree that using Javascript to disable the fields client-side feels pretty wrong, the Javascript approach is quite effective, relatively easy, and could work well for standard Django admin presentations like it does for our use-case with a complex dynamic admin UI.
> > 
> > My suggestion would be to make strict restore available as an optional feature now with the Javascript client-side hack to produce reasonable behaviour by default – quick and dirty as it is – then use that as an example for the proposed new default behaviour once the server-side can be sorted out.
> > 
> > —
> > Reply to this email directly or view it on GitHub.
That sounds great thanks @etianen, I appreciate your efforts on this potentially disruptive PR, whatever you decide.
Disruptive, for sure, but it’s started something that will make the codebase much better in the long-run. :)

> On 10 Jul 2015, at 12:15, James Murty notifications@github.com wrote:
> 
> That sounds great thanks @etianen, I appreciate your efforts on this potentially disruptive PR, whatever you decide.
> 
> —
> Reply to this email directly or view it on GitHub.
Have a look at this:

https://github.com/etianen/django-reversion/tree/admin-transactions

It's a variant of the idea we discussed. It uses a hybrid approach of using the normal admin widgets to display the revision data, but also performs a revert(delete=True) to revert any objects not in the admin forms.

In order to achieve this, I've (ab)used database transactions to actually revert the revision prior to rendering the form, then rolling back the transaction post-rendering. This has the advantage in that the data you're rendering the form with is completely consistent, without requiring any of the previous hacks to smoosh the revision data in.

Take a look, and let me know what you think. It's still a bit WIP, so anything you spot would be useful to know.
This seems like a really promising approach. It feels daring to use DB transactions like this, but if it works correctly then it makes for a much cleaner approach overall. 

I am now considering taking the same approach to allow viewing of versioned pages in full fidelity, rather than having to fake it (which was going to be complex for our CMS page objects). Maybe via some middleware...

I have only read through the code so far, not run it, but I have one request: Can you move the `version.revision.revert(delete=True)` call into a method so it can be overridden? We need to do so when reverting our unwieldy page objects that the inbuilt delete doesn't fully handle (I think because of our project's ContentType weirdness I mentioned elsewhere)
I can confirm that the _admin-transactions_ branch worked well for our project as a drop-in replacement for this strict versioning PR.

The only minor issue I have found is that when you restore or revert an item, the history comment lists all the field changes as for a standard version save, instead of stating "Reverted to previous version, saved on ..."
I’m not sure that transactions were meant to be abused like this, but it works well. It’s a case of trading a lot of pervasive, smaller and incomplete hacks for a giant thermonuclear “reset the world” hack. Thankfully, database transactions and save points seem up to the task.

What aspect of version.revision.revert(delete=True) isn’t sufficient? If it’s something general, it could be fixed reversion-side.

I’ll fix the change message for the admin too.

> On 16 Jul 2015, at 05:45, James Murty notifications@github.com wrote:
> 
> This seems like a really promising approach. It feels daring to use DB transactions like this, but if it works correctly then it makes for a much cleaner approach overall.
> 
> I am now considering taking the same approach to allow viewing of versioned pages in full fidelity, rather than having to fake it (which was going to be complex for our CMS page objects). Maybe via some middleware...
> 
> I have only read through the code so far, not run it, but I have one request: Can you move the version.revision.revert(delete=True) call into a method so it can be overridden? We need to do so when reverting our unwieldy page objects that the inbuilt delete doesn't fully handle
> 
> —
> Reply to this email directly or view it on GitHub.
The change message update is in, and I’ve had a manual test everything, as well as the automated tests. I’m pretty happy with this.

I was thinking about making a context manager to allow a revision to be rolled back within a limited block of code, which sounds like you’d be able to use for your own preview functionality.

> On 16 Jul 2015, at 09:25, Dave Hall dave@etianen.com wrote:
> 
> I’m not sure that transactions were meant to be abused like this, but it works well. It’s a case of trading a lot of pervasive, smaller and incomplete hacks for a giant thermonuclear “reset the world” hack. Thankfully, database transactions and save points seem up to the task.
> 
> What aspect of version.revision.revert(delete=True) isn’t sufficient? If it’s something general, it could be fixed reversion-side.
> 
> I’ll fix the change message for the admin too.
> 
> > On 16 Jul 2015, at 05:45, James Murty notifications@github.com wrote:
> > 
> > This seems like a really promising approach. It feels daring to use DB transactions like this, but if it works correctly then it makes for a much cleaner approach overall.
> > 
> > I am now considering taking the same approach to allow viewing of versioned pages in full fidelity, rather than having to fake it (which was going to be complex for our CMS page objects). Maybe via some middleware...
> > 
> > I have only read through the code so far, not run it, but I have one request: Can you move the version.revision.revert(delete=True) call into a method so it can be overridden? We need to do so when reverting our unwieldy page objects that the inbuilt delete doesn't fully handle
> > 
> > —
> > Reply to this email directly or view it on GitHub.
Thanks @etianen for finding a much better approach to enable "strict" restores. Closing this PR
Could you explain the situation under which a "version's apparent content type does not match the actual class that was versioned"?

That sounds like a bug that should be fixed higher up. Shouldn't a version's content type always match the actual class that was versioned?
The edge-case prompting our work-around for inexact `ContentType`s is for some dynamically-generated classes (see bottom): https://github.com/edoburu/django-fluent-contents/blob/master/fluent_contents/plugins/markup/models.py

Basically, we have dynamically-generated class variants of the base `MarkupItem` such as `MarkdownMarkupItem` and `TextileMarkupItem`, but when you look up their ContentType you get the `MarkupItem` class which does not match the more exact/correct version (e.g. `MarkdownMarkupItem`) set on the `Formset.model` the method matches against.

Admittedly this is all pretty unusual stuff, and might only ever be useful for this particular CMS. Maybe the best option is to move the class comparison into a method so we can easily override it to handle our use-case? Or we could just override the `get_related_versions` implementation wholesale and leave the original unchanged, which is a bit messier but only for us ;)
This PR is deprecated, and has been replaced by the much simpler #438
Yuck! Good spot!
Thanks!
As per the discussion in #431, I'm closing this.
I'll take your word that these are improvements! :P

Thanks!
NOTE: this should pass TravisCI tests once PR #437 is integrated
Thanks! I'm an idiot! :P
Very naughty of me!
Naughty!
NOTE: this should pass TravisCI tests once PR #437 is integrated
Does this ct_id correspond to anything in Django core? Or is it a specific variable set by your CMS?

I'd be reluctant to put this into the template if it's just for your CMS, since it can easily be implemented with a project-specific template provided by your CMS.
The `ct_id` isn't part of Django core but is used/required by the _django-polymorphic_ admin for polymorphic models where the type isn't discoverable from the URL path, see for example: https://github.com/chrisglass/django_polymorphic/blob/master/polymorphic/admin.py#L321

I'm not sure how widely polymorphic models are used with reversion. We could certainly use a project-specific template override, though we would need to duplicate most of the _recover_list.html_ page.
Tricky. I wonder if there's a way that we could make the template more easy
to override in this case, or some useful hook that could be added to the
admin?

On Wed, 29 Jul 2015 at 11:05 James Murty notifications@github.com wrote:

> The ct_id isn't part of Django core but is used/required by the
> _django-polymorphic_ admin for polymorphic models where the type isn't
> discoverable from the URL path, see for example:
> https://github.com/chrisglass/django_polymorphic/blob/master/polymorphic/admin.py#L321
> 
> I'm not sure how widely polymorphic models are used with reversion. We
> could certainly use a project-specific template override, though we would
> need to duplicate most of the _recover_list.html_ page.
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/etianen/django-reversion/pull/438#issuecomment-125905010
> .
The only way I can think of to handle this more cleanly would be to add a "url_params" `block` to the end of the link in reversion's template, which would make customisation easier but is still pretty awful.

For now I have just overridden the "content" block in a customised template, so we can again use the official release.

If anyone can think of a better way of handling this situation let us know.
Closing this for lack of activity. Please feel free to re-open!
Thanks! Very negligent of me...
Creating revisions on delete isn't a core feature of django-reversion. If you want this functionality, you'll have to subclass the VersionAdmin and add it yourself.
Good spot. Thanks for updating the docs.
Lovely! :D
Good point!
Thanks!
Thnx!
Always happy to link to supporting projects! :D
So the issue can be reproduced by:

1) Register an inline admin class for a proxy model.
2) Create a revision with no children
3) Create a revisions with children
4) Load revision 1
5) Admin site shows that inlines

I've made a minimal test case for it here: c86bb87e64e7f3952bd53f4888cab19e1e5882cd

This test case is currently passing. I'm afraid that your pull request confounds the issue by using explicit registration and by proxying a model that's not otherwise used in admin tests.
Thank you for your response.
I've added couple of line notes on c86bb87.
As i see, tests still not covering the case where both parent and child models are proxies.

Kind regards
The problem with this pull is the explicit registration of the base model without follow parameter which overrule the admin automatic registration for the proxy model, thus resulting the test fail.
Conversation on #465
Thanks!
Very nice. Thanks for cleaning up some legacy imports. :)
Thanks!
Very nice indeed! Appreciate the code cleanup to drop all Django 1.7 hacks too!
Thanks for merging so quickly!
Thanks!
The real solution involves fixing nested revisions. I'd rather get a real fix in early next week then pull in a temporary fix.

Meanwhile, I'm keeping this up as a reference for people who do want a quick fix.
This should be fixed in the refactor branch, so closing.
Nice approach! Thanks for your contribution!
Thanks!
I don't care what people say... I love micro-optimizations. Thanks!
Thanks for picking this up!

I'm hoping to give reversion some love myself when I've cleared my current deadline, so that's one thing I don't have to do myself now. :)
A fair point!
Why not indeed!

What are your plans for a refactoring? It would be good to know in advance, as large code dumps can be hard to integrate blind. :)
I tried to add a `GenericRelation` field automatically to the model being versioned. But it appears to be a dead end as it deletes `Version` instances on `Model` deletion (with on_delete behaviour).
Ok, I figured out how to get the deprecation warning to show and updated the PR description to use `python -Walways manage.py deleterevisions`. I don't know if end users will ever see the warning since Python doesn't show deprecation warnings by default.
Appreciate your help here! :)
If I read this correctly, the deprecation warning will be emitted irrespective of whether the "confirmation" argument is given. I think we need something like:

``` py
if options["confirmation"] is False:
    interactive = False
    warnings.warn(  # etc...
```
oops! I de-dented it to make it warn all the time and forgot to undo before committing.
I have my editor configured to strip trailing whitespace. I tried to `git add -p` just the non-whitespace changes but some got through.
My editor is set up a lot more strictly than it was when I wrote reversion, so this sort of thing happens all the time! No worries!
Aha, I remember discussing this! I'll take a look first thing Monday!
On Sun, 15 May 2016 at 02:22, Michael Shannon notifications@github.com
wrote:

> - Remove object_id_int
> - Combination index for content_type and object_id for performance
> 
> ---
> 
> You can view, comment on, or merge this pull request online at:
> 
>   https://github.com/etianen/django-reversion/pull/521
> Commit Summary
> - Change Object_Id to Char and Index
> 
> File Changes
> - _M_ src/reversion/management/commands/createinitialrevisions.py
>   https://github.com/etianen/django-reversion/pull/521/files#diff-0
>   (16)
> - _A_ src/reversion/migrations/0003_auto_20160515_0048.py
>   https://github.com/etianen/django-reversion/pull/521/files#diff-1
>   (34)
> - _M_ src/reversion/models.py
>   https://github.com/etianen/django-reversion/pull/521/files#diff-2
>   (29)
> - _M_ src/reversion/revisions.py
>   https://github.com/etianen/django-reversion/pull/521/files#diff-3
>   (62)
> - _M_ src/tests/test_reversion/migrations/0001_initial.py
>   https://github.com/etianen/django-reversion/pull/521/files#diff-4
>   (1)
> 
> Patch Links:
> - https://github.com/etianen/django-reversion/pull/521.patch
> - https://github.com/etianen/django-reversion/pull/521.diff
> 
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly or view it on GitHub
> https://github.com/etianen/django-reversion/pull/521
Thanks, i'm sure its a rather big change to absorb in current version.  We use oracle in-house so I haven't had an opportunity to try it beat it up on mysql or postgresql (hence the extra commits).  Your great module has been working very wel so thank you.  The only issue was performance, which was partly our fault for deciding not to use integer keys.

As a side note, we also use django-reversion-compare and these changes broke a few things in it.  I'm hoping to make a PR to fix on that project.
So, I'd appreciate your thoughts on the approach in #527.

Closing this for now, as I think the in-database support for joins supersedes this approach. Very much appreciate your work on this up to now, and will mention you as a contributor to this feature in the next release notes. :)
Hi!

Having had a look over your code, this is the only bit that bothers me. It's not really portable between database engines, or with custom fields, which makes me very cautious about including it.

The alternative is to just use in-memory joins for createinitialrevisions and get_deleted. This will scale fine up until a million rows or so, at which point it'll start to eat hundreds of MB of memory.

Your thoughts appreciated!
I think this needs to be ["object_id", "content_type"], since that'll mean the index can be used just for "object_id", for queries that don't need the content_type.
The only downside to that is then we would need an index on content_type for FK validation.

All your internal logic always specifies the content_type, but I understand others might not expect that situation.  (Though it would be dangerous to do that lookup and not specify the content_type, since the object_id is not guaranteed to be unique across content_types.)

If you still want me to switch it and re-add the FK, it's fine with me.
I agree and wasn't in love with the solution.  While I think it would be fine, its probably best if i revert that logic until either Django includes in official release or I have time to write more unit tests around it.

I'll change it to do the in-memory lookup.
Because content_type is a ForeignKey, it'll have an index anyway, so I think all bases are covered.
Hold fire for the time being, I've almost got a solution that supports common database setups for in-database joins.
Hah! Didn't see your comment till now, I pushed up a commit with it changed to in-memory.  

I did add a unit test to check various primary key types, so that might be useful to retain.
Changed
Resolves https://github.com/etianen/django-reversion/issues/524
@etianen Am also not sure whether the session will be accessed.  Let me make the change and check for the request.method
Thanks! Just merged!
Are we absolutely certain that this won't result in the session being accessed?

I was actually wondering about making the check simply inspect request.method, and set the user if it's a POST, PATCH or PUT request. It's simpler, and mutating methods shouldn't suffer from losing the cache.
+1, i'll give it a try on oracle in a bit
Thanks! I'm actually in the process of performing a major cleanup of the tests in the refactor branch, so these probably won't exist for very long, but they're a good verification of the current codebase.
haha oh well!   I saw you implemented tox, it worked well locally, might want to note that users will need to install postgresql and mysql to run it.
Good point!
Not in the master branch, which is what the current docs are referring to. :)

However, I can see this is going to cause confusion, so I've stuck the docs for 1.10.3 up as the default version. It should redirect you to the 1.10.3 docs when you visit the site now.

https://django-reversion.readthedocs.io
Thanks!
No prob!
done! my local migration has been running for over an hour now -.-
Nice. It's annoying that the de-duping needed to be done in the first place, as that unique constraint should have been enforced at the software level since the beginning of the project.

Just goes to show the usefulness of db-level constraints.

New users just get the squashed migration, anyway, so this is a temporary problem.
Thanks!
Looks like a very sensible optimization. Can I be picky and ask for the whitespace around the newlines to be removed to match the rest of the style? Then I'll merge right away.
Thanks for the pull request!

Unfortunately, setting this to anything other than AUTH_USER_MODEL will break the admin integration, revision middleware and revision view helpers. I don't think it belongs in django-reversion,

If you want to associate a non-admin user model with a revision, consider using the add_meta() feature:

https://django-reversion.readthedocs.io/en/stable/api.html#revision-api
Good call. :)
How are you generating that query? The built-in revision lookup API methods all include a filter on the `db` column too, allowing this unique index to kick in:

https://github.com/etianen/django-reversion/blob/master/reversion/models.py#L267
Actually, that query plan is from an old version of django-reversion. The object_id_int column no longer exists!
Oh, sorry! Yes we're using an old version.
Phew!
Thanks!

The travis build failed due to the linter randomly exploding, which I don't really understand. I'll deal with that separately.
Thanks for looking into this.

Could you explain the benefit of adding this to django-reversion? My understanding was that an app config module was entirely optional.
The reason for this PR is for I want to make translation of this app name in django-admin interface. I will add translate on russian in next PR.
I think that you can do this without requiring any changes to django-reversion. You can place the AppConfig anywhere in your codebase.
Thanks!

Meanwhile, something very odd is happening with travis CI, and the build is breaking for really odd reasons all of a sudden...
Sorry I took so long to merge, I was away on holiday. :)

Thanks for the fix!
@etianen not sure
1. if the signal signature aligns with your design; and
2. if this is the right strategy to test the signals; and
3. if dispatching the post_commit signal inside/outside the transaction block is actually a concern.

Please take a look, thanks!
This looks perfect!
1. Sure does!
2. I've not used mock much, but I like how those tests look. :)
3. I believe that the signals are dispatched inside the transaction block, which is good, as it contains their database side-effects inside the same transaction.

If you could also add a `signals.rst` to the docs, and link it in, that would finish this perfectly.

(Unfortunately, having spent a long time updating the docs recently, I've since come to realize that there are much better ways of formatting them using python hooks built into sphinx. Please follow the existing style for now, even if it's a bit odd!)
Took a shortcut to copy most of it from the original doc. See if it is consistent with the existing style :)
Lovely job, thanks!
Great project here! Thanks!
refs #573
Thanks!

I think we'd be better off using capability testing, rather than version checking here. Something like isinstance(user.is_authenticated, bool)
But in django 1.10 `is_authenticated` can be a property or attribute. And in default User `is_authenticated` return `CallableBool`
I meant like:

``` py
if isinstance(user.is_authenticated, bool):
    return user.is_authenticated
return user.is_authenticated()
```

That should work for the case of CallableBool and bool.
But that's not work in case of CallableBool
![image](https://cloud.githubusercontent.com/assets/8990821/18061875/1ea1ddac-6e2d-11e6-9ba0-24909787996e.png)
So in django with version less than 1.10 I can't import CallableBool to check isinstance of it.
Damn, you're right. 

I hate using version number checks, but in this case I can't see a better alternative.
Good spot, ta!
Ta!
Egg on my face! :)
Unfortunately, I'm not understanding test failures yet and struggling to see the relation with my PR.
Order of tests is different on Python 2 and 3. If the test_app is registered when the admin.site.get_urls is called (once for all the test suite), then the tests run fine. Conversely, if test_app is not registered with the admin when get_urls is called, several tests are failing during URL resolution.
This is completely unrelated to this patch.
Thanks! I've applied a fix to master that will hopefully solve the test ordering issue too. :)

It feels like time for a new release. I'll let things stabilise for a few days, then push something out.
So tell me, how are these "pull request reviews" at all different from comments? :P
Thanks!
Maybe that is little bit late,, But may i ask why are you saving the change_message text result instead of the change_message Json ?!

Thing is 
1- This violates the `no translated text in database` rule 
2- more importantly This will not yield correct translation if language changed
It would make sense to keep JSON in comments, even if it could break compatibility for people accessing `Revision.comment` directly.
Please open a separate issue for that.
Except... reversion comments are not just used for admin change messages.
They're used for any arbitrary user-supplied change message.

What about people who want to write arbitrary text in the reversion comment?

On 16 May 2018 at 09:29, Claude Paroz <notifications@github.com> wrote:

> It would make sense to keep JSON in comments, even if it could break
> compatibility for people accessing Revision.comment directly.
> Please open a separate issue for that.
>
> —
> You are receiving this because you modified the open/close state.
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/580#issuecomment-389438678>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAJFCBkfGyzIiVhrfoMgzhD_EUnNpnc1ks5ty-NQgaJpZM4J7td6>
> .
>
If we mimic the contrib.admin `LogEntry` model behavior, in the comment getter method, we can try first to JSON-decode the message, then fallback to plain text if that doesn't succeed.
I guess that makes sense. It would be a breaking change, however, since
existing users would have to use the new getter method everywhere.

On 16 May 2018 at 11:34, Claude Paroz <notifications@github.com> wrote:

> If we mimic the contrib.admin LogEntry model behavior, in the comment
> getter method, we can try first to JSON-decode the message, then fallback
> to plain text if that doesn't succeed.
>
> —
> You are receiving this because you modified the open/close state.
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/580#issuecomment-389473548>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAJFCLDpus2ftpEda0wc-Iao4gFLUwevks5tzADTgaJpZM4J7td6>
> .
>
Highly pullable. Would pull again.
Thanks!
Thanks for the pull request.

What problem is it fixing?
All my projects are encapsulated in docker containers and Dockerfile for container with django has string `RUN python ./manage.py collectstatic --noinput`. If you run `docker build server` container has no access to database and build breaks.
I don't think that accessing connection.features opens a database connection. Is it that the docker container doesn't contain the database settings, which is causing an ImproperlyConfigured exception to be raised?

If so, surely the fix is to provide the database settings to the container?

Alternatively, we could move the check to the recover/revert view to delay the check until runtime.
Yes you are right. All database settings I put in a file with environment variables and container building process knows nothing about them. This .env file is connected to the container only when it's lainched
I'm actually unsure how this integrates with the `babel.messages` stuff you're doing in `setup.py` though, gonna close for now
Actually, I'd like this open.

I don't actually know that the babel.messages stuff is either. It was a request made a long time ago by another user.
I'd not bothered doing this before, because it's a small pure python package. Still, if it can speed up installs, there seems no reason not to do it. :)
What I meant was I'm not entirely sure you can make wheels at all because of the conditional logic in `setup.py` around `babel.messages`, but looking again you should be able to because it only affects people invoking `setup.py` to update the message catalogs afaict.
I'll try it out for the next release, anyway. I'm looking to push it out at the start of next week.

Thanks for the suggestion and pull request!
Just release 2.0.7 as a universal wheel!

https://pypi.python.org/pypi/django-reversion/2.0.7
Yay!

![](http://cavemenworld.com/wp-content/uploads/2015/02/CMT183.jpg)
Interesting. So the "-pk" ordering was applied if you used the reversion helpers of get_for_object() or get_for_object_reference(), but wasn't applied as the default ordering of the models? And I guess you were previously performing queries on the models themselves, rather than using the helpers?
A model is using a `GenericRelation` like this:

```
versions = GenericRelation("reversion.Version")
```

Since the `Version` table previously was ordered by `pk`, the new `-pk` added in the referenced commit turned results upside down in ordering. Just though it might be helpful to have that noted in the changelog, just in case someone else uses the models directly :)
Definitely. Most people were simply using the helpers, but I added the default ordering in to ensure consistency.

Didn't think I'd break anybody's code! :O

Thanks for the contribution. :)
What strange behaviour to include by default!

Thanks for the fix. 😄
Nice! Thanks.
Very nice. One thing - could you put the comments for the commands above the related command, rather than below? I think that would be more understandable for people.
Thanks!
Thanks!
I didn't know about ExitStack. Thanks for sharing!

And regarding the tests, since it's not my project I tend to lean towards
more tests. But on the other hand, if I forget to pass the atomic parameter
to reversion.create_revision then the middleware test will catch that.

Anyway, I'm happy you liked the changes.

Regards,
Ernesto.

On Tue, Feb 28, 2017 at 5:12 AM Dave Hall <notifications@github.com> wrote:

> *@etianen* requested changes on this pull request.
>
> This is super cool!
>
> Your _dummy_context() is a reasonable hack. Ideally, we would use
> contextlib.ExitStack, but that would kill Python 2.7 support.
>
> I'm not sure that all the extra tests are really justified. The middleware
> and view components delegate very simply to the underlying
> reversion.create_revision() decorator/context manager. I think that we
> only really need one extra test here, which simple tests the atomic / non
> atomic behavior of reversion.create_revision().
>
> So:
>
>    - Functionality is good! 😄
>    - All the extra tests are a bit complex for the simple functionality.
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/625#pullrequestreview-24202426>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AFOlfxYXi51ZVtKC-lym5ucqUVxhxPxGks5rg_L8gaJpZM4MMPNR>
> .
>
Lovely jubbly! Thanks for the contribution! This will be included in the next release, sometime soon. :)
Excellent. Thanks Dave.

On Tue, Mar 7, 2017 at 3:42 AM Dave Hall <notifications@github.com> wrote:

> Lovely jubbly! Thanks for the contribution! This will be included in the
> next release, sometime soon. :)
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/625#issuecomment-284657422>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AFOlf80wzTRCdzzbvCWUp_W-5pvazfBkks5rjRhmgaJpZM4MMPNR>
> .
>
@ernestoferro thank you for important change!

@etianen can we, please, make a release with it? :)
v2.0.9 is currently being built, and will be on PyPi in about 30 minutes.

On 14 June 2017 at 10:13, Rustem Sayargaliev <notifications@github.com>
wrote:

> @ernestoferro <https://github.com/ernestoferro> thank you for important
> change!
>
> @etianen <https://github.com/etianen> can we, please, make a release with
> it? :)
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/625#issuecomment-308372740>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAJFCMsh0Ik-_-MYkVOJKCgWojVDKpaxks5sD6QygaJpZM4MMPNR>
> .
>
@etianen thank you much! I appreciate that! 🎉
This is super cool!

Your _dummy_context() is a reasonable hack. Ideally, we would use `contextlib.ExitStack`, but that would kill Python 2.7 support.

I'm not sure that all the extra tests are really justified. The middleware and view components delegate very simply to the underlying `reversion.create_revision()` decorator/context manager. I think that we only really need one extra test here, which simple tests the atomic / non atomic behavior of `reversion.create_revision()`.

So:
- Functionality is good! 😄 
- All the extra tests are a bit complex for the simple functionality.
Thanks! I'm currently on holiday, being lazy, so thanks for sorting this.
You should not be here on github, if you are on holidays :-) have a nice time.
Ah, I didn't realize that was ever part of the public API, hence moving it to a protected attribute.

Still, good spot.
D'oh! Thanks!
Thank YOU for this excellent library!
Closed, as #646 is now fixed.
Thanks for the pull request! No need for a test, given the simple functionality. Merged!
@etianen well, the test would be to make sure that it doesn't regress in the future and break our builds again : )
I understand, but when testing a tiny piece of functionality, you're got to
consider the overhead of maintaining the test code itself.

I'd certainly accept a pull request for a small, simple regression test.

(Sometimes I receive a few hundred lines of tests for a single, simple
change, and test code is still code to be maintained by me in the long term)

On 23 June 2017 at 14:50, Paweł Adamczak <notifications@github.com> wrote:

> @etianen <https://github.com/etianen> well, the test would be to make
> sure that it doesn't regress in the future and break our builds again : )
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/649#issuecomment-310670668>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAJFCJVzzWuhpmRWZP9yL-8SORU-Atzeks5sG8KpgaJpZM4OCMk5>
> .
>
I love it! :D
Things to hate about MyISAM tables:

1. They're not transactional.
2. I can't spell them.
I take it this pull request was an accident? :P
Yes sorry pull request should be sent to our own fork
I've reduced it down to a single unit test. I think it would be good to have to check for regressions, as it's an easy thing to forget when making changes. If you'd prefer not to have any unit tests at all let me know and I'll remove all together.

Not sure why travis is failing. It doesn't look like it's caused by the addition of the unit test? At least, not in an obvious way. Any ideas?
Cool, thanks. I think this is a good compromise on tests. :)

I'll see if I can work out why the tests are breaking on Python 2.7...

On 22 August 2017 at 11:56, Adam Chidlow <notifications@github.com> wrote:

> I've reduced it down to a single unit test. I think it would be good to
> have to check for regressions, as it's an easy thing to forget when making
> changes. If you'd prefer not to have any unit tests at all let me know and
> I'll remove all together.
>
> Not sure why travis is failing. It doesn't look like it's caused by the
> addition of the unit test? At least, not in an obvious way. Any ideas?
>
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/662#issuecomment-323991939>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAJFCKj9b5ET8kCcuXH7NnhEDMVyDBdoks5sarPygaJpZM4O-PhF>
> .
>
For some reason, the tests stopped breaking. Odd. :S

Thanks for your time on this!
No worries, thanks for the super quick merge!
Thanks for the fix!

I'd rather not merge the new tests, as they're quite a large chunk of code for a two-line patch. Also, the travis build appears to be breaking as a result of something.
I'm suprised that a simple `<` comparison to a tuple costs 70ms!

Still, this doesn't really feel like a critical path for any real application. A given HTTP request will involve database connections, HTTP parsing, plus several thousand such trivial variable comparisons. I'm afraid this feels like a pretty trivial micro-optimisation.
Yep is not that big win, the thing I thought of is "why do this comparison when it is not needed?"
I guess because it saves 8 lines of code, and made sense at the time. :man_shrugging: 

I don't really subject little bits of functionality like this to such rigorous analysis!
Thanks for the pull request!

Can't this be done already using the pre_revision_commit signal, and reversion.set_comment()?
Thank you for your reply, yes it can be done using the signal but this new way it could be very easy to customise the commit message for each view (class based or not) so you can capture the meaning of the change
Surely in a view it's even easier? Just call `reversion.set_comment()` in the view itself.

I'm reluctant to add two ways of doing something to reversion, even if it's slightly easier to use the new way in some circumstances. Two ways of doing something is more documentation for users to read, more code to maintain in the long-term etc.

Or does this provide some new functionality that I'm not aware of?
What I'm trying to do is similar to automatically adding the user meta data which RevisionMixin already does by default; in my point of view having the possibility to create the message when creating the revision could be handy
Can't you just do this?

``` py
class YourView(RevisionMixin):

    def dispatch(self, request):
        reversion.set_commit("foo bar")
        return super().dispatch(request)
```

I don't see how that is any harder than your suggested solution.
This way the new revision should not be created yet, or am I missing something?

I thought it could be useful to do the thing inside the create_revision_base context
The dispatch method is wrapped in create_revision() when the class instance
is instantiated.

On 19 September 2017 at 11:53, Francesco Pischedda <notifications@github.com
> wrote:

> This way the new revision should not be created yet, or am I missing
> something?
>
> I thought it could be useful to do the thing inside the
> create_revision_base context
>
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/666#issuecomment-330503292>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAJFCPp4ioEO-lMzr_jJ4rEq7RkMYA4cks5sj51EgaJpZM4PcFcn>
> .
>
Ok understand, please close the PR if you think this change will not give benefits
Thanks for the time you put in, anyway. 😃 As usual, I've got to balance each feature against long-term maintenance, so not everything can make the cut. Discussion is always useful though, and I'm always glad to talk over potential new features with users willing to contribute.
That's the correct spirit :) thanks for taking the time to review the
changes!

2017-09-19 17:04 GMT+02:00 Dave Hall <notifications@github.com>:

> Thanks for the time you put in, anyway. 😃 As usual, I've got to balance
> each feature against long-term maintenance, so not everything can make the
> cut. Discussion is always useful though, and I'm always glad to talk over
> potential new features with users willing to contribute.
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/666#issuecomment-330569485>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/ABgZ3y5b77qVtWbe38MGoc61zcev7Sxaks5sj9gEgaJpZM4PcFcn>
> .
>



-- 
"Unix IS user friendly. It's just selective about who its friend are"

"Nevertheless I still think it’s a bad idea to make things harder for
ourselves if we can avoid it."

"C is quirky, flawed, and an enormous success."
                                   -- Dennis Ritchie

"Shipping is a feature. A really important feature. Your product must have
it."

"There is no such a thing as a temporary change or workaround: In most
cases, workarounds are tech debt."

"La gatta frettolosa ha fatto i gattini ciechi"
#668 should be solved first
Thanks!
Thanks, but sorry, I was not yet certain it worked, it would have been better to wait for a successful test run first :-)
I think we also need to allow the master failures at tox level (probably with `ignore_outcome`)
You might try to add:
```
ignore_outcome =
    djangomaster: True
```
under `[testenv]`
Thanks, that fixed it.

What with pyenv, too and travis, there's a lovely mess of configuration at
play here, in an environment you can only access with a git push. *Sigh...*

On 25 September 2017 at 10:59, Claude Paroz <notifications@github.com>
wrote:

> You might try to add:
>
> ignore_outcome =
>     djangomaster: True
>
> under [testenv]
>
> —
> You are receiving this because you modified the open/close state.
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/667#issuecomment-331834915>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAJFCMt9DazXY3GMpKE1wWFiRPXBb9NEks5sl3mfgaJpZM4Ph30X>
> .
>
Sure, but you can also test with pull requests before committing to the main master branch (and force push to pull requests until the tests pass).
Not ready, still two errors to fix.
Now ready.
One change affects the main code, so a new release will be needed to support Django 2.0.
Damn fine work!
While Django 2.0 is in development, I think it's fine to require installing django-reversion from the GitHub repo.
Sure no rush. However, Django 2.0 is feature frozen now, so if we can have a release during the next two months, it encourages people to test the new Django before its .0 release.
Brilliant! Thank you!
@yorkedork @bartek @charettes @blueyed any comments about this pull request?
Thanks for contributing!

I'm confused by this. The proposed setting seems to exclude certain models from version control altogether, not just with RevisionMiddleware.
@etianen well... It seemed legit when you are using the middleware because it controls all models, but your point is correct where when ever you use it, you can include or exclude models at all time.
You can simply exclude models by not registering them with reversion, surely?
@etianen but if you are using the middle ware, can you do that?
The middleware will only version models that have been registered with
reversion, either via reversion.register() or via the admin integration.

On 17 November 2017 at 12:34, Yazan Alhorani <notifications@github.com>
wrote:

> @etianen <https://github.com/etianen> but if you are using the middle
> ware, can you do that?
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/679#issuecomment-345232654>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAJFCO2lwBDUTDpXwRC7ThgMIpCxe8Pfks5s3X1ugaJpZM4QgrC7>
> .
>
I will add some tests in case you like it.
Thanks for the pull request?

Is it normal to define custom __repr__ methods for models? I was under the impression that the Django built-in models typically don't. The only precedent I can find is with the admin LogEntry model.
It is not that common, but I've found it very useful in the past.
It gets used with locals in tracebacks and with the interactive interpreter.
Try the above example with and without this PR.
Sure, let's get this in. I've put a few comments inline.
I think we can just use the built-in repr of date_created here.
Why are we using getattr?
It is a bit long though - but has the benefit of being simpler.
Will change it.
Because otherwise you might get an `RelatedObjectDoesNotExist` error if the ForeignKey is None.
# [Codecov](https://codecov.io/gh/etianen/django-reversion/pull/682?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@7050796`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/etianen/django-reversion/pull/682/graphs/tree.svg?src=pr&token=fYvfCJKwLP&width=650&height=150)](https://codecov.io/gh/etianen/django-reversion/pull/682?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #682   +/-   ##
=========================================
  Coverage          ?   97.64%           
=========================================
  Files             ?       23           
  Lines             ?     1319           
  Branches          ?        0           
=========================================
  Hits              ?     1288           
  Misses            ?       31           
  Partials          ?        0
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/etianen/django-reversion/pull/682?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/etianen/django-reversion/pull/682?src=pr&el=footer). Last update [7050796...8412f1b](https://codecov.io/gh/etianen/django-reversion/pull/682?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
I've never heard of codecov before.

django-reversions does use `coverage` to generate code coverage. Does this have any advantage over that?
It is a coverage reporting platform, which provides reports like the one above (which is more useful once you have a base to compare against of course).
You can also browse the files and see the coverage at https://codecov.io/gh/etianen/django-reversion/tree/8412f1bfff056e627ee7044b6f50c68395299b26 already for example.
I'm inclined to pass for now, as it's more complexity for little gain over the existing coverage solution.
Hmm.. but it does not replace the existing use of Coveragepy, but rather uses its output.
Therefore the patch to enable reporting to codecov (this PR) is just the reporting, and not e.g. installing/setting up coverage tracking (since that is already in place).
The only added complexity I see is that you might want to disable codecov comments (but would still benefit from its GitHub API status - e.g. it can report if a PR's diff is not covered enough with tests).
Excellent, thanks!
👍
Great! Thanks!
didnt see before there is already a PR for this in https://github.com/etianen/django-reversion/pull/707
Yup! #707 beat you to it. :)
If you create models in your own business views, use `RevisionMiddleware` to create the revisions, or even better, `reversion.create_revision()` decorator/context manager.

The trouble with this patch is that it will prevent fast-path deletion in Django (which is a lot faster!), and result in more revisions being saved in the usual case where models have a revision created on first save.
We use `django-reversion` to record **staff's modification** in django admin for audit as most developer does. Staff's modifcation and deletion is very less but unavoidable,  `django-reversion` can help us find out who made a mistake. 
 But model object changes in business view do not need to create reversion, especially in production environment.  We also have used logical deletion in business view when physical deletion in not allowed.
However, deletion is not recommended. The additional revisions of this patch(or older `django-reversion`) is much less than `createinitialrevisions `  or  `RevisionMiddleware `.  It is so expensive to support the fast-path deletion such an infrequent feature.
You can implement this in your own project.

@receiver(pre_delete)
def post_delete_receiver(sender, instance, using, **kwargs):
    if reversion.is_registered(sender) and reversion.is_active() and not
reversion.is_manage_manually():
        reversion.add_to_revision(instance, model_db=using)

On 21 March 2018 at 07:25, xiaxianzhi <notifications@github.com> wrote:

> Closed #709 <https://github.com/etianen/django-reversion/pull/709>.
>
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/709#event-1532575101>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAJFCMJzjke0Nhj2LbKBKA_jW1mqRshFks5tggBjgaJpZM4SxsFk>
> .
>
Thanks, we hava already done.
Found a typo so added that commit to this PR as well.
Good spot!
Sorry for taking so long to review this. I've been snowed under at work.

It's not been forgotten!

On 30 April 2018 at 14:30, Primož Kariž <notifications@github.com> wrote:

> fix revert bug for nested inlines when delete=True
> ------------------------------
> You can view, comment on, or merge this pull request online at:
>
>   https://github.com/etianen/django-reversion/pull/718
> Commit Summary
>
>    - Fix: revert delete nested inlines
>
> File Changes
>
>    - *M* reversion/models.py
>    <https://github.com/etianen/django-reversion/pull/718/files#diff-0>
>    (7)
>    - *A* tests/test_app/migrations/0002_testmodelnestedinline.py
>    <https://github.com/etianen/django-reversion/pull/718/files#diff-1>
>    (24)
>    - *M* tests/test_app/models.py
>    <https://github.com/etianen/django-reversion/pull/718/files#diff-2>
>    (12)
>    - *M* tests/test_app/tests/test_models.py
>    <https://github.com/etianen/django-reversion/pull/718/files#diff-3>
>    (42)
>
> Patch Links:
>
>    - https://github.com/etianen/django-reversion/pull/718.patch
>    - https://github.com/etianen/django-reversion/pull/718.diff
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/718>, or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAJFCCOK8PL6ymmhCDOv7eHUrZbumT3Iks5ttxIHgaJpZM4TslhS>
> .
>
no problem. i merged the migrations, if there is anything else to change please let me know
Cool! Thanks!
Can you explain why this fixes the issue?
Oh, sorry, I see you mentioned it in your issue!
Can you merge this migration with the 0001_initial migration for the test app?

There's no reason to proliferate migration files for test databases.
Thanks!

I'm not sure the new model, migration and tests are necessary. If you could cull them, I'll merge.
I can cut them yet I think the test may be useful for 2 reasons:
a) It serves as documentation of why the change was introduced and
b) it serves as regression in case that any future change breaks the functionality.

If you are certain you want them cut, I'll do it. Just let me know your final decision.
Here's the thing - if every two line change in reversion generated 74
additional lines of test code, the situation would very rapidly become
unmaintainable!

I understand the argument, but test code has a tendency to grow
explosively, and each line of test code is another line in the codebase I
have to maintain.



On 22 May 2018 at 16:37, Ignacio Vissani <notifications@github.com> wrote:

> I can cut them yet I think the test may be useful for 2 reasons:
> a) It serves as documentation of why the change was introduced and
> b) it serves as regression in case that any future change breaks the
> functionality.
>
> If you are certain you want them cut, I'll do. Just let me know your final
> decision.
>
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/722#issuecomment-391037563>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAJFCJqoOa7bUrAKDSnNaFY-a9Th1MKPks5t1DCqgaJpZM4UFxZr>
> .
>
Sorry for the late reply. I'm very busy these days. Will do what you asked and let you know.
Thanks! It's merged.
Thanks!
Looks good, thanks!

I think this is going to require a major version bump to the library, as it's technically backwards-incompatible. Such is life! :)
Thanks to you for sharing and keeping up this wonderful app.
I'll look into a 2.0 release in a week or so


On 8 June 2018 at 15:54, Ramez Ashraf <notifications@github.com> wrote:

> Thanks to you for sharing and keeping up this wonderful app.
>
> —
> You are receiving this because you modified the open/close state.
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/726#issuecomment-395786368>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAJFCD0AcAdx9PwGQg0vlr0dXrmI4j5oks5t6pAigaJpZM4UXumK>
> .
>
(I mean 3.0 release)

On 8 June 2018 at 18:04, Dave Hall <dave@etianen.com> wrote:

> I'll look into a 2.0 release in a week or so
>
>
> On 8 June 2018 at 15:54, Ramez Ashraf <notifications@github.com> wrote:
>
>> Thanks to you for sharing and keeping up this wonderful app.
>>
>> —
>> You are receiving this because you modified the open/close state.
>> Reply to this email directly, view it on GitHub
>> <https://github.com/etianen/django-reversion/pull/726#issuecomment-395786368>,
>> or mute the thread
>> <https://github.com/notifications/unsubscribe-auth/AAJFCD0AcAdx9PwGQg0vlr0dXrmI4j5oks5t6pAigaJpZM4UXumK>
>> .
>>
>
>
3.0 is out!
I'm not convinced by copying and pasting the code here.

How about you do this:

``` py
LogEntry(change_message=json.dumps(comment)).get_change_message())
```

This will re-use the existing code from Django quite cleanly.
Yes,  absolutely right.
Updating
Are we sure that this is really a problem, in practice?

On 13 June 2018 at 14:23, Matthijs Kooijman <notifications@github.com>
wrote:

> When you want to revert to an older revision, you get a regular change
> form with the older values pre-filled. If you make changes to the form
> before saving, the new version saved will be different from the older
> version you are reverting to, though the log message still only says
> "Reverted to previous version".
>
> This commit changes the reverting code to create a separate revision for
> the revert, with the "Reverted to previous version" message. The
> subsequent save of the form happens in a second revision.
>
> *This change is not complete*: Currently the second revision is always
> saved, regardless of whether any changes were made. I am not sure how to
> solve this yet.
>
> I tried setting ignore_duplicates on the relevant model, which seems
> to work. Of course this is something that should not be set for the
> entire model, but just for this particular revision, but that is
> probably feasible to add. However, ignore_duplicates seems to work on
> individual versions, so might cause some versions to be left out of the
> revision, even when the revision is not completely empty (more
> generally, I believe ignore_duplicates might not always work as
> intended when multiple models or follows are involved).
>
> One other approach might be to to another check (like the one for
> ignore_duplicates) just before saving a revision, but check *all*
> versions in the revision and skip saving if *all* versions are
> unchanged. This is probably a sane approach? The extra overhead of
> comparing these versions is probably acceptable when it only happens on
> a revert?
> ------------------------------
> You can view, comment on, or merge this pull request online at:
>
>   https://github.com/etianen/django-reversion/pull/728
> Commit Summary
>
>    - When making a change during revert, create two revisions
>
> File Changes
>
>    - *M* reversion/admin.py
>    <https://github.com/etianen/django-reversion/pull/728/files#diff-0>
>    (10)
>
> Patch Links:
>
>    - https://github.com/etianen/django-reversion/pull/728.patch
>    - https://github.com/etianen/django-reversion/pull/728.diff
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/728>, or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAJFCKKTglPk2e8fdOgabPBCovnFsdaUks5t8RI-gaJpZM4UmMD1>
> .
>
I haven't used this much in actual practice yet, but I feel that the current message can be confusing and lacks explicitness. If you're looking at the history, you want to know what changed when, and should be able to trust the log that is shown.
One alternative could be to make the form read-only somehow, so you can view a previous revision and revert to it, but not change it at the same time (this might be a useful feature in any case, to allow viewing history without reverting to it - even though that requires significant permission changes).
Something to try: If we delete this line:

https://github.com/etianen/django-reversion/blob/master/reversion/admin.py#L196

Then I think that the normal django admin change message will be used,
which will simply generate a list of changed fields.

Sure, it'll no longer be displayed as a "revert" in the comment text, but
that's not really what's happening here anyway.

On 13 June 2018 at 14:58, Matthijs Kooijman <notifications@github.com>
wrote:

> One alternative could be to make the form read-only somehow, so you can
> view a previous revision and revert to it, but not change it at the same
> time (this might be a useful feature in any case, to allow viewing history
> without reverting to it - even though that requires significant permission
> changes).
>
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/728#issuecomment-396947023>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAJFCGm9AdmRJam7nCmabKzPaA4dx37pks5t8Rp9gaJpZM4UmMD1>
> .
>
>Then I think that the normal django admin change message will be used, which will simply generate a list of changed fields.

I believe it will only show the changed fields compared to the *reverted* version (since that is what the django admin classes believe to be the current version in the database). I guess this could be made to work if we only run this line for `POST` requests:

https://github.com/etianen/django-reversion/blob/master/reversion/admin.py#L190

Except that will prevent reverting fields that are not present in the change form, so that doesn't really help.
I think maybe we go for a hybrid message. Something like "Reverted to
revisions saved on blah. Changed fields blah blah". Effectively,
concatenate the current revert message with the admin's generated change
message.

On 13 June 2018 at 20:01, Matthijs Kooijman <notifications@github.com>
wrote:

> Then I think that the normal django admin change message will be used,
> which will simply generate a list of changed fields.
>
> I believe it will only show the changed fields compared to the *reverted*
> version (since that is what the django admin classes believe to be the
> current version in the database). I guess this could be made to work if we
> only run this line for POST requests:
>
> https://github.com/etianen/django-reversion/blob/master/
> reversion/admin.py#L190
>
> Except that will prevent reverting fields that are not present in the
> change form, so that doesn't really help.
>
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/728#issuecomment-397049628>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAJFCI2Kfgvzcvzhy9VAFIQiKYwMhlKMks5t8WF2gaJpZM4UmMD1>
> .
>
That's actually a good idea. IIRC if no fields are changed (other than the revert), the admin generates a "No fields changed" messages, which is probably ok as well (though one could interpret the admin-generated message as the fields changed *during* the revert perhaps, rather than *after* the revert, but I'm not sure if there is an easy way to prevent that).
Excellent! I'm happy to take a pull request for this idea.

On 14 June 2018 at 11:39, Matthijs Kooijman <notifications@github.com>
wrote:

> That's actually a good idea. IIRC if no fields are changed (other than the
> revert), the admin generates a "No fields changed" messages, which is
> probably ok as well (though one could interpret the admin-generated message
> as the fields changed *during* the revert perhaps, rather than *after*
> the revert, but I'm not sure if there is an easy way to prevent that).
>
> —
> You are receiving this because you commented.
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/728#issuecomment-397250725>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAJFCKIiblzJnJryUK-SNyrjkoNMKDGwks5t8j1HgaJpZM4UmMD1>
> .
>
Nice implementation!
Nice idea!

I think that this should be implemented inside the ``_create_revision_context`` function, since then the calls to set_meta, set_comment etc only need to be implemeted in one place.
@etianen that was a great suggestion!

I moved the code to `_create_revision_context`. I actually removed the changes from create_revision as to not touch that since I don't need it. I also added an arguably useless test in another commit so it can be removed easily if you prefer to not keep it. Let me know if you think there is any documentation to add for this.
Thanks!

Any chance of a pull request to update the docs: https://github.com/etianen/django-reversion/tree/master/docs ?
Unfortunately, I've had to revert this pull request.
Extra fields should be added to create_revision(), not _create_revision_context(), which is a private API.
I like it!

Can you update the documentation with this new hook? I'll then merge.
Sweeeeeet!
Thanks for the pull request!

Unfortunately, tracking deletions is something that doesn't really work with django-reversion. There's a discussion about it here: https://github.com/etianen/django-reversion/issues/164
Thanks!
I'll review this when I get back from holiday, in just over a week. :)
Thanks!

Looking at your use-case (custom create_revision context managers), it looks like you can do this already without changing django-reversion at all!

``` py
from contextlib import contextmanager
from reversion import create_revision, set_user, add_meta

@contextmanager
def create_revision_for_your_obj(user, status):
    with create_revision():
        set_user(user)
        add_meta(YourObjMeta, status=status)
        yield

with create_revision_for_your_obj(request.user, 'draft'):
        obj.save()

```
Perfect. I didn’t think to simply nest the context managers!
This is great work!

Assuming the build passes, I'll merge it in!
It took me way to many attempts to get the test matrix right, but now the tests are finally passing.
Great pull request, and it taught me something new about Travis CI config. :D
Hm, this installs Django 2.1.x; I'll try it with double quotes instead of single quotes again
Can I see the full stack trace of the error, before I merge this? Just to verify the cause of the original problem.
Thanks for the quick response! For NDA reasons, I just changed some folder names :) 

Here's the full traceback:
```
Traceback (most recent call last):
  File "/opt/python/3.6.3/lib/python3.6/unittest/case.py", line 59, in testPartExecutor
    yield
  File "/opt/python/3.6.3/lib/python3.6/unittest/case.py", line 605, in run
    testMethod()
  File "/home/travis/build/xxx/xxx/xxx/tests.py", line 92, in test_custom_diff_compare
    diff = mr.get_diff()
  File "/home/travis/build/xxx/xxx/xxx/models/versioned_object.py", line 57, in get_diff
    diffs = dict(generate_diffs(self.prev_version, self.next_version, field, 'semantic'))
  File "/home/travis/build/xxx/xxx/xxx/utils/reversion_diff.py", line 10, in generate_diffs
    old_text = old_version.field_dict[field_name] or ""
  File "/home/travis/virtualenv/python3.6.3/lib/python3.6/site-packages/django/utils/functional.py", line 35, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/home/travis/virtualenv/python3.6.3/lib/python3.6/site-packages/reversion/models.py", line 295, in field_dict
    field_dict = self._local_field_dict
  File "/home/travis/virtualenv/python3.6.3/lib/python3.6/site-packages/django/utils/functional.py", line 35, in __get__
    res = instance.__dict__[self.name] = self.func(instance)
  File "/home/travis/virtualenv/python3.6.3/lib/python3.6/site-packages/reversion/models.py", line 281, in _local_field_dict
    if field.attname in object_version.m2m_data:
TypeError: argument of type 'NoneType' is not iterable
```

Custom code is about creating a diff, inspired on existing diff work and `django-reversion`. None of them was what we need so I was working on a custom code for that and the problem appeared.
Very odd, and I suspect a bug in Django.

Meanwhile, your patch does the job. Thanks for contributing!
You're welcome! Yep, it was really strange. Thanks for merging :)
You da MVP. :)
I think that this is useful, but harder to do in practice than it may first
appear.

My concerns:
- It'll break if there is no user registered in the django admin.
- It'll break if the user doesn't have permission to view the user model.

The default object history view in the django admin doesn't include user
URLs, probably for this reason.

On Fri, 2 Nov 2018 at 19:37, Prakhar Kumar Goel <notifications@github.com>
wrote:

> This is how it would look:
> [image: screen shot 2018-11-02 at 11 18 59 pm]
> <https://user-images.githubusercontent.com/1198834/47934026-36f5bf80-defc-11e8-987e-1b331159596a.png>
> ------------------------------
> You can view, comment on, or merge this pull request online at:
>
>   https://github.com/etianen/django-reversion/pull/766
> Commit Summary
>
>    - Added support for clickable urls for admin user who performed the
>    edits, in history view.
>
> File Changes
>
>    - *M* reversion/admin.py
>    <https://github.com/etianen/django-reversion/pull/766/files#diff-0>
>    (9)
>    - *M* reversion/templates/reversion/object_history.html
>    <https://github.com/etianen/django-reversion/pull/766/files#diff-1>
>    (11)
>
> Patch Links:
>
>    - https://github.com/etianen/django-reversion/pull/766.patch
>    - https://github.com/etianen/django-reversion/pull/766.diff
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/766>, or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AAJFCKm3-GJqNQl9Mf0KriJis2WgHUXvks5urJ7pgaJpZM4YMK_s>
> .
>
Hi Dave,


> - It'll break if there is no user registered in the django admin. 

I have added a check for this in template. Following suggestions from this question https://stackoverflow.com/questions/694477/getting-django-admin-url-for-an-object
```
...
{% url admin_user_view action.revision.user.id as admin_user_url %}
{% if admin_user_url %}
...
```
Please double check if this will remedy the problem.

> - It'll break if the user doesn't have permission to view the user model.

If a user has permission to view the log history (which usually contain more sensitive data), there is a high chance that user has permission to view user model as well. In case he doesn't, they would see a 403 page. This is more of sanity than a break in flow. Even in AWS console, when I login as IAM user, I regularly see "permission denied" although I can see links to forbidden resources.
Could you double-check that the {% url %} tag doesn't cause a server error if the user model hasn't been registered with django admin?

If so, then this pull request is probably a good idea.
> If a user has permission to view the log history (which usually contain more sensitive data), there is a high chance that user has permission to view user model as well.

I disagree here .. having permission to view a model (ex: Product) history , does not mean i can see my "manager" profile .. 
Also this is not view page you're linking to.. it's a the change page _as far as i see_.
Finally: If it'll throw a 403 then maybe it's not OK to have it as a link in the first place.

My suggestion:  give just enough support for this option and leave it to the end developer to actually implement it.
I'm inclined to agree. On reflection, the object-history page in django-reversion should be as close to the equivalent raw django page as possible. It was done that way for a reason.

Users can implement this themselves very easily.
Without this, users that have only view permissions get 403 when pressing "History" button on a model's page. But they can still view a revision if they get a direct url to it.
A very nice change, and good work on backwards compatibility!
I fear the failing tests are not related with my changes. Also master was failing there. Thus I changed the travis config accordingly
This is fantastic. Thanks!
Released as v3.0.3
oh, some tests are failing now
now it works, but please tell me if something may go wrong. I disabled deleting models from current revision. Later code under `if delete:` should be deleted because it is not used anymore
Any comments? Otherwise I'm going to close this MR.
The delete functionality in the admin revert is pretty important behaviour, IMO. I don't want to simply disable it.

I'd take a merge request that fixes the original bug.
@etianen @ofw I'm hitting this error as well, in particular on the combination of `django-reversion` with [`django-polymorphic`](https://github.com/django-polymorphic/django-polymorphic) though I dunno if the latter influences the behaviour. 

Effectively, when I attempt to view a deleted record in order to recover it I'll hit a 500 with the same error as above and this traceback:

```
AttributeError: 'HttpResponseRedirect' object has no attribute 'render'
  File "django/core/handlers/exception.py", line 34, in inner
    response = get_response(request)
  File "django/core/handlers/base.py", line 115, in _get_response
    response = self.process_exception_by_middleware(e, request)
  File "django/core/handlers/base.py", line 113, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "contextlib.py", line 75, in inner
    return func(*args, **kwds)
  File "django/utils/decorators.py", line 130, in _wrapped_view
    response = view_func(request, *args, **kwargs)
  File "django/views/decorators/cache.py", line 44, in _wrapped_view_func
    response = view_func(request, *args, **kwargs)
  File "django/contrib/admin/sites.py", line 231, in inner
    return view(request, *args, **kwargs)
  File "reversion/admin.py", line 201, in recover_view
    return self._reversion_revisionform_view(
  File "reversion/admin.py", line 178, in _reversion_revisionform_view
    response.render()  # Eagerly render the response, so it's using the latest version.
```

at which point if i hit back on the browser the list-view of the deleted items will show up with a warning  at the top of the page reading `<verbose-name-of-model> with ID “<pk>” doesn’t exist. Perhaps it was deleted?`.

Apologies for commenting on a closed issue but I was curious as to whether either of you have managed to resolve this issue in any way eg properly redirecting to the list-view.
I think using model inheritance with the admin integration is going to land you in problems, as it effectively means you've got two ways of saving a given model. I'm not sure of any easy way to resolve it.
Yeah I thought the combination of polymorphism with reversion might be a bit of a hornet's nest (honestly I'm surprised it has worked as well as it has thus far). I've been investigating the issue which has not been super reproducible as it seems to have something to do with whether the view called when viewing a deleted item is that of the child or the parent object.

I will look further into it and will update here should I manage to resolve it somehow
That looks great! Thanks.
Sweeeeeet!

Thanks. :)
Thank you very much for this.

@etianen May I inquire when a new version is planned to be released with this fix? We want to wait for it before using this package, so we don't have to later revert the admin migrations and remove it from the installed apps.
Sometime next week, no worries! :)

On Fri, 17 May 2019 at 12:28, Aki Foudila <notifications@github.com> wrote:

> Thank you very much for this.
>
> @etianen <https://github.com/etianen> May I inquire when a new version is
> planned to be released with this fix? We want to wait for it before using
> this package, so we don't have to later revert the admin migrations and
> remove it from the installed apps.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/784?email_source=notifications&email_token=AABEKCBT7T47QA623OUYRSTPV2JEPA5CNFSM4HC7DI62YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODVUQAXI#issuecomment-493420637>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AABEKCHNNEE2KNIXEHQ7QFLPV2JEPANCNFSM4HC7DI6Q>
> .
>
It is done. :)

v3.0.4

On Fri, 17 May 2019 at 18:08, Dave Hall <dave@etianen.com> wrote:

> Sometime next week, no worries! :)
>
> On Fri, 17 May 2019 at 12:28, Aki Foudila <notifications@github.com>
> wrote:
>
>> Thank you very much for this.
>>
>> @etianen <https://github.com/etianen> May I inquire when a new version
>> is planned to be released with this fix? We want to wait for it before
>> using this package, so we don't have to later revert the admin migrations
>> and remove it from the installed apps.
>>
>> —
>> You are receiving this because you were mentioned.
>> Reply to this email directly, view it on GitHub
>> <https://github.com/etianen/django-reversion/pull/784?email_source=notifications&email_token=AABEKCBT7T47QA623OUYRSTPV2JEPA5CNFSM4HC7DI62YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODVUQAXI#issuecomment-493420637>,
>> or mute the thread
>> <https://github.com/notifications/unsubscribe-auth/AABEKCHNNEE2KNIXEHQ7QFLPV2JEPANCNFSM4HC7DI6Q>
>> .
>>
>
Thank you! Only one thing, the `createinitialrevisions` does not seem to work without admin being in the installed apps. `BaseRevisionCommand` uses `admin.autodiscover()`, which fails: 

```
» docker-compose exec web python manage.py createinitialrevisions
Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/django/apps/registry.py", line 155, in get_app_config
    return self.app_configs[app_label]
KeyError: 'admin'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/django/utils/module_loading.py", line 44, in autodiscover_modules
    if register_to:
  File "/usr/local/lib/python3.7/site-packages/django/utils/functional.py", line 256, in inner
    self._setup()
  File "/usr/local/lib/python3.7/site-packages/django/contrib/admin/sites.py", line 529, in _setup
    AdminSiteClass = import_string(apps.get_app_config('admin').default_site)
  File "/usr/local/lib/python3.7/site-packages/django/apps/registry.py", line 162, in get_app_config
    raise LookupError(message)
LookupError: No installed app with label 'admin'.

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/local/lib/python3.7/site-packages/django/apps/registry.py", line 155, in get_app_config
    return self.app_configs[app_label]
KeyError: 'admin'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "manage.py", line 21, in <module>
    main()
  File "manage.py", line 17, in main
    execute_from_command_line(sys.argv)
  File "/usr/local/lib/python3.7/site-packages/django/core/management/__init__.py", line 381, in execute_from_command_line
    utility.execute()
  File "/usr/local/lib/python3.7/site-packages/django/core/management/__init__.py", line 375, in execute
    self.fetch_command(subcommand).run_from_argv(self.argv)
  File "/usr/local/lib/python3.7/site-packages/django/core/management/base.py", line 323, in run_from_argv
    self.execute(*args, **cmd_options)
  File "/usr/local/lib/python3.7/site-packages/django/core/management/base.py", line 364, in execute
    output = self.handle(*args, **options)
  File "/usr/local/lib/python3.7/site-packages/reversion/management/commands/createinitialrevisions.py", line 58, in handle
    for model in self.get_models(options):
  File "/usr/local/lib/python3.7/site-packages/reversion/management/commands/__init__.py", line 31, in get_models
    admin.autodiscover()
  File "/usr/local/lib/python3.7/site-packages/django/contrib/admin/__init__.py", line 26, in autodiscover
    autodiscover_modules('admin', register_to=site)
  File "/usr/local/lib/python3.7/site-packages/django/utils/module_loading.py", line 53, in autodiscover_modules
    if register_to:
  File "/usr/local/lib/python3.7/site-packages/django/utils/functional.py", line 256, in inner
    self._setup()
  File "/usr/local/lib/python3.7/site-packages/django/contrib/admin/sites.py", line 529, in _setup
    AdminSiteClass = import_string(apps.get_app_config('admin').default_site)
  File "/usr/local/lib/python3.7/site-packages/django/apps/registry.py", line 162, in get_app_config
    raise LookupError(message)
LookupError: No installed app with label 'admin'.
```
Oh, how annoying. I guess that was missed by the original PR.

I'll happily take a PR to fix this.

On Tue, 28 May 2019 at 13:11, Aki Foudila <notifications@github.com> wrote:

> Thank you! Only one thing, the createinitialrevisions does not seem to
> work without admin being in the installed apps. BaseRevisionCommand uses
> admin.autodiscover(), which fails:
>
> » docker-compose exec web python manage.py createinitialrevisions
>
> Traceback (most recent call last):
>
>   File "/usr/local/lib/python3.7/site-packages/django/apps/registry.py", line 155, in get_app_config
>
>     return self.app_configs[app_label]
>
> KeyError: 'admin'
>
>
>
> During handling of the above exception, another exception occurred:
>
>
>
> Traceback (most recent call last):
>
>   File "/usr/local/lib/python3.7/site-packages/django/utils/module_loading.py", line 44, in autodiscover_modules
>
>     if register_to:
>
>   File "/usr/local/lib/python3.7/site-packages/django/utils/functional.py", line 256, in inner
>
>     self._setup()
>
>   File "/usr/local/lib/python3.7/site-packages/django/contrib/admin/sites.py", line 529, in _setup
>
>     AdminSiteClass = import_string(apps.get_app_config('admin').default_site)
>
>   File "/usr/local/lib/python3.7/site-packages/django/apps/registry.py", line 162, in get_app_config
>
>     raise LookupError(message)
>
> LookupError: No installed app with label 'admin'.
>
>
>
> During handling of the above exception, another exception occurred:
>
>
>
> Traceback (most recent call last):
>
>   File "/usr/local/lib/python3.7/site-packages/django/apps/registry.py", line 155, in get_app_config
>
>     return self.app_configs[app_label]
>
> KeyError: 'admin'
>
>
>
> During handling of the above exception, another exception occurred:
>
>
>
> Traceback (most recent call last):
>
>   File "manage.py", line 21, in <module>
>
>     main()
>
>   File "manage.py", line 17, in main
>
>     execute_from_command_line(sys.argv)
>
>   File "/usr/local/lib/python3.7/site-packages/django/core/management/__init__.py", line 381, in execute_from_command_line
>
>     utility.execute()
>
>   File "/usr/local/lib/python3.7/site-packages/django/core/management/__init__.py", line 375, in execute
>
>     self.fetch_command(subcommand).run_from_argv(self.argv)
>
>   File "/usr/local/lib/python3.7/site-packages/django/core/management/base.py", line 323, in run_from_argv
>
>     self.execute(*args, **cmd_options)
>
>   File "/usr/local/lib/python3.7/site-packages/django/core/management/base.py", line 364, in execute
>
>     output = self.handle(*args, **options)
>
>   File "/usr/local/lib/python3.7/site-packages/reversion/management/commands/createinitialrevisions.py", line 58, in handle
>
>     for model in self.get_models(options):
>
>   File "/usr/local/lib/python3.7/site-packages/reversion/management/commands/__init__.py", line 31, in get_models
>
>     admin.autodiscover()
>
>   File "/usr/local/lib/python3.7/site-packages/django/contrib/admin/__init__.py", line 26, in autodiscover
>
>     autodiscover_modules('admin', register_to=site)
>
>   File "/usr/local/lib/python3.7/site-packages/django/utils/module_loading.py", line 53, in autodiscover_modules
>
>     if register_to:
>
>   File "/usr/local/lib/python3.7/site-packages/django/utils/functional.py", line 256, in inner
>
>     self._setup()
>
>   File "/usr/local/lib/python3.7/site-packages/django/contrib/admin/sites.py", line 529, in _setup
>
>     AdminSiteClass = import_string(apps.get_app_config('admin').default_site)
>
>   File "/usr/local/lib/python3.7/site-packages/django/apps/registry.py", line 162, in get_app_config
>
>     raise LookupError(message)
>
> LookupError: No installed app with label 'admin'.
>
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/784?email_source=notifications&email_token=AABEKCBRZSGLDU3XSURDKUTPXUONXA5CNFSM4HC7DI62YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGODWL5MZQ#issuecomment-496490086>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AABEKCAJKDONHQE65FOW4VLPXUONXANCNFSM4HC7DI6Q>
> .
>
Thanks!
This won't work, sadly. Depending on the database where this is run, it'll generate different migrations files.
I think the correct approach is *probably* a custom model field that is stored as bjson in postgres, and text everywhere else. I'm not sure that this complexity is worth slightly easier querying in postgres. It should be possible to run any JSON query in postgres using custom SQL, and casting the field into json. The performance won't be great without an index, but it would avoid a lot of complexity in django-reversion itself.
Ah yes, I didn't take into consideration the different migration scripts that would get generated.

> It should be possible to run any JSON query in postgres using custom SQL, and casting the field into json.

I see what you mean, but the selectors that Django provides for `JSONField`s might be better to use when it comes to speed (since internally the field is a `jsonb` and hence indexed) and for better readability of code.

But I'm not very sure if a text search on a `TextField` would be faster than querying for a key-value on a `JSONField` column, however I have a hunch that the text search might be faster.

Thanks
I like losing the custom SQL, and I like the idea of some performance improvements.

Can you make some benchmarks for the affected queries and views please? I only care about PostgreSQL, MySQL and SQLite. I'm happy to accept a small performance degradation for small datasets if the improvement for large datasets is as significant as you say.
To get some cross-database benchmarks, I used `TestModel` from `test_app`. To populate, the objects were created in a revision, saved in another revision, and then every other object was deleted using the following:

```python
from test_app.models import TestModel
import reversion
from reversion.models import Version


def create_test_objects(num_objects):
    for obj_num in range(num_objects):
        with reversion.create_revision():
            obj = TestModel.objects.create()
        with reversion.create_revision():
            obj.save()
        # Delete half of created objects
        if obj_num % 2 == 0:
            obj.delete() 
```

I ran the original query vs. the version in this pull request for postgres, sqlite, and mysql with 100, 1,000, and 10,000 objects (and 100,000 for postgres) for `Version.objects.get_deleted(TestModel)`:

Postgres 11.3

| Number of objects | Original query | New query |
|------------------:|---------------:|----------:|
| 100               | 1.5 ms         | 1.7 ms    |
| 1000              | 4.8 ms         | 5.8 ms    |
| 10000             | 92.3 ms        | 35.0 ms   |
| 100000            | 933.7 ms       | 257.7 ms  |


MySQL 8.0

| Number of objects | Original query | New query  |
|------------------:|---------------:|-----------:|
| 100               | 2.1 ms         | 7.7 ms     |
| 1000              | 12.8 ms        | 237.7 ms   |
| 10000             | 85.8 ms        | 22313.4 ms |


SQLite 3.24

| Number of objects | Original query | New query |
|------------------:|---------------:|----------:|
| 100               | 167 ms         | 166 ms    |
| 1000              | 1422 ms        | 1398 ms   |
| 10000             | 25430 ms       | 22557 ms  |

So MySQL should get the old fallback subquery again, but the postgres results are improved.
Thanks for a great PR, and a solid set of benchmarks! Merged.
Good spot!
Great! Thanks.
This will be mandatory to support Django 3.0 (unless we add more compatiblity shims).
Very nice. I suspect there'll be a few more places where the code can be cleaned up without the requirement to support Python 2, Django < 3.0, but this is a great start.

I think that following Django's advice to drop Django <3.0 support and Python 2 probably merits a breaking release (v3.0?), so if there's anything else you can see that will cut out compatibility shims, I'd love a PR.
For now I didn't see yet a compelling reason to drop support for older Django version, but it might occur when adding support for Django 3.0.
The single Travis error is apparently a timeout issue when getting Python 3.5 package.
Yeah, I see. I've restarted the build.

On Wed, 11 Sep 2019 at 13:33, Claude Paroz <notifications@github.com> wrote:

> The single Travis error is apparently a timeout issue when getting Python
> 3.5 package.
>
> —
> You are receiving this because you are subscribed to this thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/802?email_source=notifications&email_token=AABEKCHRRMJIC4SCXALFT5TQJDQP5A5CNFSM4IVTJ7BKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD6OKITY#issuecomment-530359375>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AABEKCAYRIPCANJNF5IDLCTQJDQP5ANCNFSM4IVTJ7BA>
> .
>
Oh, I had just forgotten a docs removal.
@etianen, thanks for merging. Just for information, you can setup Github to merge PRs without creating a merge commit to have a somewhat cleaner history, in case you missed it.
I'm one of those people who doesn't really care about a clean history or
not. I've never been slowed down by a non-linear git history. There's
plenty of other serious issues in software development that can wreck my
day, but never that! :P

On Thu, 12 Sep 2019 at 08:44, Claude Paroz <notifications@github.com> wrote:

> @etianen <https://github.com/etianen>, thanks for merging. Just for
> information, you can setup Github to merge PRs without creating a merge
> commit to have a somewhat cleaner history, in case you missed it.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/802?email_source=notifications&email_token=AABEKCEVWQ6XLTNOLS7V35TQJHXNDA5CNFSM4IVTJ7BKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD6Q7G7A#issuecomment-530707324>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AABEKCCBDRWIQLLR2NMEV7LQJHXNDANCNFSM4IVTJ7BA>
> .
>
No problem, I guess it depends on practices. Personnally, I like browsing the history with tools like gitk, so when every one commit is a merge, that's a bit frustrating.
Nice. All your recent PRs are merged.

I can't see any reason to release yet, since they're largely code simplifications in preparation for Django 3.0. When Django 3.0 lands, the recommendation is to drop support for Django < 2.2, which I guess we should follow, and make a new release.

https://docs.djangoproject.com/en/dev/releases/3.0/
I must admit I don't fully agree with that recommendation. For some packages where you have to add semi complicated code to support older versions, yes sure. But typically in this case, we can easily support 3.0 and even 1.11 without any issue, so I wouldn't press for dropping those versions too soon. But you are the maintainer :-)
You make a good point. I guess we should view this as a license to drop
earlier Django versions if it's helpful for maintenance, rather than a
mandate.

On Thu, 12 Sep 2019 at 08:50, Claude Paroz <notifications@github.com> wrote:

> I must admit I don't fully agree with that recommendation. For some
> packages where you have to add semi complicated code to support older
> versions, yes sure. But typically in this case, we can easily support 3.0
> and even 1.11 without any issue, so I wouldn't press for dropping those
> versions too soon. But you are the maintainer :-)
>
> —
> You are receiving this because you modified the open/close state.
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/804?email_source=notifications&email_token=AABEKCGGU7MCYMC4P3M2YQ3QJHYDDA5CNFSM4IVUAEDKYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOD6Q7W6Q#issuecomment-530709370>,
> or mute the thread
> <https://github.com/notifications/unsubscribe-auth/AABEKCALFZUUOCR2CJ5OOD3QJHYDDANCNFSM4IVUAEDA>
> .
>
Absolutely
Hi! Thanks for the MR.

I think there's already a hook on the admin class for precisely this purpose:

`construct_change_message`

Alternatively, the user can just override `log_addition` and `log_change` on their admin class and substitute in a different message.
Hi @etianen i already see it, but this is for customize the content on the comment it self.
The text that you could see on the web page.

I want store the json format on the LogEntry and see text friendly on the comment in the reversion model.
In that way i could have alot information on the json inside of the LogEntry model and summary on the reversion model.
I want get the LogEntry to analyze everything with details, in other way i cannot have different information on each side.

What do you think about?
That sounds like a pretty unusual use case. People using django-reversion
typically disregard LogEntry.

Rather than add overhead to the library, I think this is best solved in
your own code.

On Wed, 30 Oct 2019 at 22:00, Victor Torre <notifications@github.com> wrote:

> Hi @etianen <https://github.com/etianen> i already see it, but this is
> for customize the content on the comment it self.
> The text that you could see on the web page.
>
> I want store the json format on the LogEntry and see text friendly on the
> comment in the reversion model.
> In that way i could have alot information on the json inside of the
> LogEntry model and summary on the reversion model.
> I want get the LogEntry to analyze everything with details, in other way i
> cannot have different information on each side.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/806?email_source=notifications&email_token=AABEKCACPK5Z4OFBEMCHLQLQRH7VNA5CNFSM4JGVV63KYY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOECV5AAA#issuecomment-548130816>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AABEKCDURYERQFM7E3CZWXDQRH7VNANCNFSM4JGVV63A>
> .
>
Thanks!
Again, thanks!
Thanks!

I'm really torn here. I'd assume that the majority of users are English-speaking, so this is to the benefit of the majority of users. I might sit on it for a bit and have a think.
I see what you're doing, but I'd say this description still implies that clicking the link will revert immediately!

How about "Choose a date from the list below to view a previous version of this object, and optionally revert to it."
Of course, this will break all translations, so I'm not sure it's worth the clarification, since my translations are unlikely to get updated for a while.
I updated the text. It's up to you to decide whether it's worth touching the translations.
Thanks!
Thanks for this! I've kept your test, but written an alternative implementation in #818 that keeps things simpler, and seems to acheive the same thing my simply reversing the order of the nesting of atomic blocks and revision stack frames. Your new test still passes.

Does #818 make sense to you?
Yes, that seems like a good way of fixing it. Thanks!
Cool. I'll merge #818, and close this. Thanks for the MR and the review :D
That's cool, thanks!

Keeping up with packaging specifiers is tiresome, so I appreciate it! :)
Awesome! Thanks for contributing!

I'll push out a release tomorrow, all things being good.
Hi, I noticed that version 3.0.6 is released that should include the Slovenian translation, but something must went wrong as sl_SI folder is not included in reversion/locale in the latest release https://github.com/etianen/django-reversion/commit/3356aa18084ed2b6ab1aa39c33b9bb9a87df33d8

or in the download available on pypi.
Oh, crap. Looks like I've got my branches in a twist. I'll sort this out now with a new 3.0.7 release.
Fixed in v3.0.7. Sorry!
Thank you!

I'm looking at pushing out a release today or tomorrow.
You're welcome !
Could you upload the updated package to pypi ? 

Thanks !
Done already :)

On Mon, 17 Feb 2020 at 10:42, François GUÉRIN <notifications@github.com>
wrote:

> Could you upload the updated package to pypi ?
>
> Thanks !
>
> —
> You are receiving this because you modified the open/close state.
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/821?email_source=notifications&email_token=AABEKCC7G3LF43PQGDHLTI3RDJSYZA5CNFSM4KS4GJY2YY3PNVWWK3TUL52HS4DFVREXG43VMVBW63LNMVXHJKTDN5WW2ZLOORPWSZGOEL55JVA#issuecomment-586929364>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AABEKCGOYMOC3W73YZWAYD3RDJSYZANCNFSM4KS4GJYQ>
> .
>
Thanks!
Good spot!
I mean, you're totally right. Thanks!
Clear and concise. Love it!
I looked at the open issues: #773 can be considered closed?
I appreciate the work you've put into this, and it's a nice idea. Unfortunately, it's quite a weight of files to add to the project for what's effectively an alternative testing workflow, and since it's not a workflow I use myself, there'll be a tendancy for it to rot and break without anyone noticing.

Any open-source project can be tested using Docker. But should every open source project include a load of stuff to make doing so easier? To my mind, no.

Thanks for the MR. I can't accept it at this time, but it's a nice piece of work, and the documentation additions were well written. :smiling_face_with_three_hearts:
Hey @etianen! Thanks for your response! 😄

If you don't want to merge my pull request its fine, but I think its a pity because without those scripts making a contribution is way harder.

Take myself for example, I wanted a demo of the functionalities STAT and I had to install **two DB** on my machine to do so, and without my work someone else have to do the same thing **again**! Let's not repeat ourselves!

An open source project lives with his community, and if someone gives up on a contribution because its too much pain to set-up, then it's a loss for everyone. 😣

Also I have two questions about your comment:

**1.**
> it's quite a weight of files to add to the project

What do you mean exactly? Not considering the docs and the 4 lines edits in "test_project/settings.py" the wc is pretty low:
```bash
  $ wc -l Dockerfile docker-compose.env docker-compose.yml docker-entrypoint.sh docker-run.sh
        35 Dockerfile
        22 docker-compose.env
        41 docker-compose.yml
        20 docker-entrypoint.sh
        13 docker-run.sh
       131 total
```
Maybe the fact that everything is in the root folder bothers you? I can move everything in a "docker" subdir if you feel that's cleaner, otherwise mind to explain the issue in more detail?

**2.**
> it's not a workflow I use myself, there'll be a tendancy for it to rot and break without anyone noticing.

Why don't you start using it and dismiss the old method that relies on the underling OS with its DBs? What's stopping you? Is there some hidden advantage I don't see?

If you don't want to spend a lot of time writing a response it's fine (and understandable) so I also throw in the option to chat via Skype (or whatever you prefer), just comment here and I will send to your e-mail (dave@etianen.com) my contact.

Anyway, thank you for your time and your compliments about my MR! 🤩

Lorenzo
I generally assume that people would demo django-reversion on an existing project. Adding it to an existing project is just a few lines of code, and then you get to see exactly how it would work with what you have. Even better, if you like it, you've just done the work to integrate it! :p

In terms of testing and contributing, your point is well-made. However, it's a choice of installing two databases **or** docker. On Unix, that's the same difficulty, as it's a single `apt-get` command to do both. On OSX, if you have homebrew, it's the same. On Windows, I have no idea! But not everyone has Docker, and not everyone wants to install it. It probably does lower the barrier to entry for Docker users, but for everyone else it's more docs, more files to understand.

Don't get me wrong, I'm not a Docker-hater. I use it a tremendous amount in my day job.
I wouldn't assume the first point, there are many ways someone can approach
the module! For example, it's common to do a research before starting a new
project and choose the technology based on modules/libraries available for
it. If this functionality is what someone needs, they can test it STAT and
choose Django over something else, all this much before any code is laid
down.

And again, more people, more contributions! 😉

Also, installing docker over two DB have a huge difference, not only an
apt-get command! Examples: what if I have already installed one or more
DBs? I have to extract/find/remember the credentials and do all the work to
configure the connections in the settings? And if I don't want to use those
instances because there is running something important and I fear this
module can brake it or simply don't want to "put dirty" in them? Does my OS
have all the necessary libs to build the required python modules (posgres
and mysql drivers are non-trivial)?

There is many points where someone can fall, but download docker, git clone
the repo, and launch ./docker-run.sh from within the project root dir is
straight forward, batteries included and clean.

And I still don't know the answer of my two previous questions: why you
don't want to use it? Are really 5 text files of about 130 lines in total a
burden to understand?

I don't know, I feel like I'm trying to sell you a vacuum cleaner you don't
want, but in reality I have spent time to solve a problem someone else can
have, and I would be happy to not make them solve it twice... also I'm not
selling anything, it's free! 😆

I'll renew the proposal of a Skype, because I feel it will be orders of
magnitude more efficient compared to GitHub-comment-texting*™.*

In any case, have a nice day! 😄

On Tue, May 12, 2020, 19:21 Dave Hall <notifications@github.com> wrote:

> I generally assume that people would demo django-reversion on an existing
> project. Adding it to an existing project is just a few lines of code, and
> then you get to see exactly how it would work with what you have. Even
> better, if you like it, you've just done the work to integrate it! :p
>
> In terms of testing and contributing, your point is well-made. However,
> it's a choice of installing two databases *or* docker. On Unix, that's
> the same difficulty, as it's a single apt-get command to do both. On OSX,
> if you have homebrew, it's the same. On Windows, I have no idea! But not
> everyone has Docker, and not everyone wants to install it. It probably does
> lower the barrier to entry for Docker users, but for everyone else it's
> more docs, more files to understand.
>
> Don't get me wrong, I'm not a Docker-hater. I use it a tremendous amount
> in my day job.
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/835#issuecomment-627480358>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AH4QLL76VBM3HZIRYNABUC3RRGAQLANCNFSM4M6XI5CA>
> .
>
Thanks for the MR!

I'm not convinced that this use-case isn't better served by your own RevisionMiddleware in your own codebase. It's pretty easy to implement using reversion.create_revision(), and avoids complicating the main django-reversion codebase.
Thanks!
Really nice work, thanks!
I'll release this in about a week, if no other features land before then.
Great! Thanks! Sorry for the late response, I was camping. :)
no worries, i'll be at camping tomorrow haha
Thanks!
Thank you!
Hi!

I'm not sure this approach is a good idea. What advantage could there be in saving a metadata model twice (once to create, again to update_or_create)? It turns one database query into two. Worse, a user might re-use an existing metadata instance, expecting it to be associated with two revisions, when in reality the metadata instance will be re-associated with the new revision, and removed from the old.
@etianen thanks for the feed back, our current implementation/work-around for this is to have a separate model that has a nullable FK to our meta data model, and this was an attempt to eliminate the extra model. 

Here are some possible solutions we could try to address your concerns:

- With some tweaks to the code we could make the logic only do the one query, one to create when a ``Model`` is supplied or an update when an ``instance`` is supplied.  The ``update_or_create`` was me trying to keep the code slim.

- Further more we could also check to make sure, when an ``instance`` is supplied, that the required ``reivison`` FK is null before attempting the update, which would address the re-associating problem.
Can I ask why you're creating your meta model before the revision is
created? Surely you could just store all the information in a dict, then
use reversion.add_meta(YourModel, **your_model_data)?

By creating it before the revision is saved, you're performing two database
queries: one to create, then one to update.

On Mon, 19 Oct 2020 at 13:47, Jose Soares <notifications@github.com> wrote:

> @etianen <https://github.com/etianen> thanks for the feed back, our
> current implementation/work-around for this is to have a separate model
> that has a nullable FK to our meta data model, and this was an attempt to
> eliminate the extra model.
>
> Here are some possible solutions we could try to address your concerns:
>
>    -
>
>    With some tweaks to the code we could make the logic only do the one
>    query, one to create when a Model is supplied or an update when an
>    instance is supplied. The update_or_create was me trying to keep the
>    code slim.
>    -
>
>    Further more we could also check to make sure, when an instance is
>    supplied, that the required reivison FK is null before attempting the
>    update, which would address the re-associating problem.
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/852#issuecomment-712132616>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AABEKCGU2OU54VWVQUACNWLSLQYPTANCNFSM4STW3SDA>
> .
>
Surely, and you are correct, we do store the data for later use, in the form of an extra model however, with a `OneToOneField` to a custom `RevisionMeta` model. 

### More information:
We wanted a way to create revisions manually, based off of a certain status change of a database record, and reversion gave us that functionality. So there might be many normal saves between a certain status change that we did not want to store revisions. During this process, the edits might take a couple hours to perhaps months and we wanted a way for our users to "tell us about the change your doing" before or during normal updates and before submitted/publishing the data (which triggers a status change and therefore a `revision` to be made).

Here is our current work around

```python
class RevisionExtra(models.Model):
    content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
    object_id = models.CharField(max_length=255)
    content_object = GenericForeignKey('content_type', 'object_id')

    version_number = models.CharField(max_length=255) # user input
    version_date = models.DateField(default=now) # user input
    # extra user input fields


class RevisionMeta(models.Model):
    revision = models.ForeignKey(Revision, on_delete=models.CASCADE)
    revision_extra = models.OneToOneField(RevisionExtra, on_delete=models.CASCADE)
```

We store all the real meta data in ``RevisionExtra``, and during the user "editing" a content object, they will have the ability to edit `RevisionExtra`, in this case a `version_number` and `version_data`. These edits of a content object might take a while before they "publish" the changes, which is when we manually create the `Revision` and attach our `RevisionExtra` to it.

Here is some of our workflow (using django rest framework)

```python
class ObjectViewSet(viewsets.ViewSet):

    # extra view stuff

    def update(self, request, ...):
        # normal updates

    def create(self, request):
        # create objects

    @action(detailt=True, methods=['PUT']
    def start_edit(self, request, ...):
        """specific route for initiating an edit"""
        obj = self.get_object()
        obj.status = 'in_progress'
        obj.save()

        RevisionExtra.objects.create(
            content_type=ContentType.objects.get_for_model(obj),
            object_id=obj.id,
            version_number=f'edit {str(uuid4())[:4]}' # auto generate number initially
         )
        return Response(...)
        
    @action(detail=True, methods=['PUT']
    def publish(self, request, ...):
        """specific route for publishing"""
        obj = self.get_object()

        with reversion.create_revision():
            obj.status = 'published'
            obj.save()

            c_type = ContentType.objects.get_for_model(obj)
            revision_extra = RevisionExtra.objects.get(
                revisionmeta__isnull=True,
                content_type=c_type,
                object_id=str(obj.id)
             )

            # Store some meta-information.
            reversion.set_user(request.user)
            reversion.add_meta(RevisionMeta, revision_extra=revision_extra)
        return Response(...)
```

The idea for this PR was to eliminate the need for the extra model.

*For what its worth, we took this approach to only store revisions of data that matters to us (published versions of data), as well as keeping our database storage somewhat leaner.*
I see. That does make sense. Thank you for clarifying. :)

I think your extra model is a perfectly decent approach. It's a little less
efficient to look up, but it's also a little more efficient to save the
revision. Either way, I doubt the difference is noticeable, and I'd rather
keep django-reversion leaner and less complex for the common-case.

On Tue, 20 Oct 2020 at 14:44, Jose Soares <notifications@github.com> wrote:

> Surely, and you are correct, we do store the data for later use, in the
> form of an extra model however, with a OneToOneField to a custom
> RevisionMeta model.
> More information:
>
> We wanted a way to create revisions manually, based off of a certain
> status change of a database record, and reversion gave us that
> functionality. So there might be many normal saves between a certain status
> change that we did not want to store revisions. During this process, the
> edits might take a couple hours to perhaps months and we wanted a way for
> our users to "tell us about the change your doing" before or during normal
> updates and before submitted/publishing the data (which triggers a status
> change and therefore a revision to be made).
>
> Here is our current work around
>
> class RevisionExtra(models.Model):
>     content_type = models.ForeignKey(ContentType, on_delete=models.CASCADE)
>     object_id = models.CharField(max_length=255)
>     content_object = GenericForeignKey('content_type', 'object_id')
>
>     version_number = models.CharField(max_length=255) # user input
>     version_date = models.DateField(default=now) # user input
>     # extra user input fields
>
> class RevisionMeta(models.Model):
>     revision = models.ForeignKey(Revision, on_delete=models.CASCADE)
>     revision_extra = models.OneToOneField(RevisionExtra, on_delete=models.CASCADE)
>
> We store all the real meta data in RevisionExtra, and during the user
> "editing" a content object, they will have the ability to edit
> RevisionExtra, in this case a version_number and version_data. These
> edits of a content object might take a while before they "publish" the
> changes, which is when we manually create the Revision and attach our
> RevisionExtra to it.
>
> Here is some of our workflow (using django rest framework)
>
> class ObjectViewSet(viewsets.ViewSet):
>
>     # extra view stuff
>
>     def update(self, request, ...):
>         # normal updates
>
>     def create(self, request):
>         # create objects
>
>     @action(detailt=True, methods=['PUT']
>     def start_edit(self, request, ...):
>         """specific route for initiating an edit"""
>         obj = self.get_object()
>         obj.status = 'in_progress'
>         obj.save()
>
>         RevisionExtra.objects.create(
>             content_type=ContentType.objects.get_for_model(obj),
>             object_id=obj.id,
>             version_number=f'edit {str(uuid4())[:4]}' # auto generate number initially
>          )
>         return Response(...)
>
>     @action(detail=True, methods=['PUT']
>     def publish(self, request, ...):
>         """specific route for publishing"""
>         obj = self.get_object()
>
>         with reversion.create_revision():
>             obj.status = 'published'
>             obj.save()
>
>             c_type = ContentType.objects.get_for_model(obj)
>             revision_extra = RevisionExtra.objects.get(
>                 revisionmeta__isnull=True,
>                 content_type=c_type,
>                 object_id=str(obj.id)
>              )
>
>             # Store some meta-information.
>             reversion.set_user(request.user)
>             reversion.add_meta(RevisionMeta, revision_extra=revision_extra)
>         return Response(...)
>
> The idea for this PR was to eliminate the need for the extra model.
>
> *For what its worth, we took this approach to only store revisions of data
> that matters to us (published versions of data), as well as keeping our
> database storage somewhat leaner.*
>
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/852#issuecomment-712860886>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AABEKCFIRGTYSBITVE3L4BTSLWH37ANCNFSM4STW3SDA>
> .
>
thx for the feedback, much appreciated
Thank you! This is a difficult query to optimize, so I'm pretty excite when something like this comes along.

I can't really accept an optimization patch without before and after benchmarks, however. Could you provide before and after benchmarks for the following scenarios:

(Large | small) version table, (large | small) model table, (no | many) deleted objects.

Or other scenarios, if you think it's appropriate.
I've tested this query on a live project on the table with 115K existing rows and 10K deleted rows, and the solution works much faster, like 0.5 seconds vs 15s.

I'll try to provide some synthetic tests soon. 
If you have any ideas or previous examples of the benchmarks, that would be helpful :)
Interesting, and encouraging!

Benchmarking on your dataset with the before and after code would be
sufficient, tbh.

On Tue, 12 Jan 2021 at 11:38, Sergey Fursov <notifications@github.com>
wrote:

> I've tested this scenario on a live project on the table with 115K
> existing rows and 10K deleted rows, and the solution works much faster,
> like 0.5 seconds vs 15s.
>
> I'll try to provide some synthetic tests soon.
> If you have any ideas or previous examples of the benchmarks, that would
> be helpful :)
>
> —
> You are receiving this because you commented.
>
>
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/856#issuecomment-758598962>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AABEKCG25YDEB3F6AE6PORLSZQYBZANCNFSM4V6ZWAVQ>
> .
>
here it is
```
Existing| Deleted	| Old time 	 | New time
171536  | 1 		| 0:00:19.774807 | 0:00:00.136772
1899    | 140 		| 0:00:00.569091 | 0:00:00.007093
402654  | 2989	 	| 0:00:33.789328 | 0:00:00.345087
1476468 | 6463 		| 0:00:36.706675 | 0:00:00.470335
158723  | 0 		| 0:00:26.714242 | 0:00:00.364553
524738  | 4658 		| 0:00:27.682335 | 0:00:03.061931
50727   | 846 		| 0:00:01.349259 | 0:00:00.076102
182551  | 6806 		| 0:00:05.901048 | 0:00:00.448359
11653   | 848 		| 0:00:33.278280 | 0:00:00.516516
93540 	| 427 		| 0:00:11.173351 | 0:00:00.328175
2331 	| 3 		| 0:00:00.017268 | 0:00:00.004476
112231 	| 434 		| 0:00:04.787984 | 0:00:00.682868
325305 	| 37415 	| 0:00:08.344689 | 0:00:00.809080
13829 	| 130 		| 0:00:17.498631 | 0:00:04.824630
15671 	| 459 		| 0:00:03.479546 | 0:00:01.302051
4402 	| 57823 	| 0:00:02.915513 | 0:00:00.667132
2153 	| 0 		| 0:00:00.023557 | 0:00:00.003816
7622 	| 79 		| 0:00:00.061769 | 0:00:00.009884
7354 	| 10 		| 0:00:00.058137 | 0:00:00.008684
3686 	| 50161 	| 0:00:00.599514 | 0:00:00.440178
49187 	| 0 		| 0:00:00.305760 | 0:00:00.030057
61178 	| 233380 	| 0:00:02.370193 | 0:00:01.973392
94983 	| 9951 		| 0:00:01.414094 | 0:00:00.253754
68179 	| 16763 	| 0:00:01.445508 | 0:00:00.167908
545040 	| 19131 	| 0:00:05.287630 | 0:00:00.661380
121303 	| 4047 		| 0:00:01.271823 | 0:00:00.186989
162439 	| 8144 		| 0:00:01.804782 | 0:00:00.301282
4 	| 0 		| 0:00:00.006102 | 0:00:00.002966
21 	| 0 		| 0:00:00.010503 | 0:00:00.004099
9 	| 0 		| 0:00:00.005437 | 0:00:00.002856
118225 	| 10762 	| 0:00:01.529504 | 0:00:00.375201
3344987 | 160791 	| 0:01:16.863503 | 0:00:21.369741
4010 	| 3 		| 0:00:00.037191 | 0:00:00.004252
```

the benchmark code:
```python
from django.core.management import BaseCommand
from django.db.models import Exists, OuterRef
from django.db.models.functions import Cast
from django.utils import timezone

from reversion import get_registered_models
from reversion.models import Version

class Command(BaseCommand):
    def handle(self, *args, **options):
        all_registered_models = get_registered_models()
        self.stdout.write('Existing | Deleted | Old time | New time')
        for model in all_registered_models:
            start = timezone.now()
            old_deleted_count = Version.objects.get_deleted(model).count()
            old_time_end = timezone.now()
            new_deleted_count = self.get_deleted_new(model).count()
            new_time_end = timezone.now()
            existing_count = model.objects.count()
            assert old_deleted_count == new_deleted_count, str(model)
            self.stdout.write(
                f'{existing_count} | {old_deleted_count} | '
                f'{old_time_end - start} | {new_time_end - old_time_end} | ',
            )

    def get_deleted_new(self, model, model_db=None):
        model_qs = (
            model._default_manager.using(model_db).filter(
                id=Cast(OuterRef("object_id"), model._meta.get_field('id')),
            ).values('id')
        )
        subquery = Version.objects.get_for_model(
            model,
            model_db='default',
        ).filter(
            ~Exists(model_qs),
        ).order_by('object_id', '-pk').distinct('object_id').values('pk')
        return Version.objects.filter(pk__in=subquery)
```
Okay, it's hard to argue with that!

This is great work. I'll push out a release with it next week. :heart:
Released in 3.0.9
This is good! I don't think the link to the issue helps, so I'd prefer that removed.
Thanks!

Interestingly, no actions seemed to run for your MR. Any idea why? Is there something I need to turn on?
> Interestingly, no actions seemed to run for your MR. Any idea why? Is there something I need to turn on?

`on: [push, pull_request]` instead of `on: [push]`

https://github.com/etianen/django-reversion/blob/7f3645649bcd92d832cb69754fded6e9a8802aa6/.github/workflows/python-package.yml#L3
Huh, easy as that! Thanks!
Cool, thanks!
Interesting. I think BigAutoField is the correct choice here, but won't that also require a migration to be added?

I think for the time being keeping it as AutoField is safer. I've found some bugs in the migration Django generates for this in some of my work projects.
In the PR I've changed the BigAutoField to AutoField. Also, the workflow was cancelled due to Flake8 error. This has been resolved as well.
Merged, thanks!

The tests are failing for an unrelated issue: https://github.com/psycopg/psycopg2/issues/1293#issuecomment-862835147
I'm going to assum you know what you're doing here. :p

The failing tests appear unrelated. Thanks!
There are a few failing checks, but otherwise this looks excellent!
Thanks!
> Thanks!

@etianen you’re welcome!
Hi! Thanks for getting in those extra test combinations, and for sorting out the exclude matrix. Looks perfect to me. :)
Thank you for the review and merge. That was quick! 🏎️
Brilliant, thanks!
This is very nice, and the extra complexity it introduces is worth it for the performance gain.

Can you extend the tests for this command to test on mysql, postgres and sqlite by passing the "using" param to the management command? That will ensure that both codepaths are tested.
@etianen Apologies for the delay, I completely spaced on the existence of this PR.

There were already tests that used postgres and mysql [here](https://github.com/etianen/django-reversion/blob/dbf87494ef651ca31802e2566bac708871c6e53d/tests/test_app/tests/test_commands.py#L54-L67). Would it be sufficient to just add an additional test for sqlite, or would you like something further?
Oh, good spot!

Yes, an SQLite test would be nice. Although by the looks of things the MySQL test is already covering both code paths. So it's not as essential as I first thought.

If you fancy adding an SQLite test, please do! Otherwise, I think this is good to merge as-is.
Huh, sorry, this slipped below my radar. Merged!
Hi,

Thanks for this! It's a good change. Unfortunately, it requires Python 3.7+, which is going to be supported by Django LTS until early 2024!

I'd like to keep this MR open until then, but I don't think I can drop support for Python 3.6 while Django LTS supports its.

Alternatively, I'd consider a compatibility shim that used contextvars and fell back to thread-local state. That seems like it would be a relatively unobtrusive change.
Hey @etianen ,

I would argue that, even though Django 3.2 (the current LTS) should be supported until early 2024, Python 3.6 already reached EOL (https://endoflife.date/python) and should not be used anymore by anyone. People using 3.2 can (and should) use at least Python 3.7 (the latest version supports even Python 3.10).

But if you really want to maintain compatibility, I can write a compatibility shim.
You make an excellent point. Go ahead and drop 3.6 from the matrix and
we'll get this merged. :)

On Sat, 12 Feb 2022 at 18:00, Thiago Bellini Ribeiro <
***@***.***> wrote:

> Hey @etianen <https://github.com/etianen> ,
>
> I would argue that, even though Django 3.2 (the current LTS) should be
> supported until early 2024, Python 3.6 already reached EOL (
> https://endoflife.date/python) and should not be used anymore by anyone.
> People using 3.2 can (and should) use at least Python 3.7 (the latest
> version supports even Python 3.10).
>
> But if you really want to maintain compatibility, I can write a
> compatibility shim.
>
> —
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/904#issuecomment-1037350910>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AABEKCBZZJDQ5DZ5RDVSC7LU22NJJANCNFSM5NQUVZHA>
> .
> Triage notifications on the go with GitHub Mobile for iOS
> <https://apps.apple.com/app/apple-store/id1477376905?ct=notification-email&mt=8&pt=524675>
> or Android
> <https://play.google.com/store/apps/details?id=com.github.android&referrer=utm_campaign%3Dnotification-email%26utm_medium%3Demail%26utm_source%3Dgithub>.
>
> You are receiving this because you were mentioned.Message ID:
> ***@***.***>
>
@etianen nice :)
Just made the change, think it should be enough
Thanks! I'll get this into a release ASAP.
Good catch!
The failed builds were due to an unrelated problem with Sphinx
Released as 5.0.1
This is fantastic, a really thorough job.

I'll not bother with a release from this, as nothing has actually _changed_. But this'll get folded into the next release.
> This is fantastic, a really thorough job.

Great! Most of the thorough job was performed by upgrading tools actually 😉

I would be very pleased to open another PR to add a [pre-commit](https://pre-commit.com/) config with a few hooks like pyupgrade and django-upgrade. From that, you'd be able to setup the [Github integration](https://pre-commit.ci/) and eventually add other hooks like black, isort, flake8…

Let me know!
Thanks for the offer, but I'm not really a fan of pre-commit. I don't like lag introduced into my commits, and prefer to use IDE integrations of these tools along with CI checks to enforce before merging.
This looks great! Thanks for the tests and the comprehensive writeup! I'll get this into a release ASAP!
@etianen How's this?
Looks great! I've merged!

A release will be incoming shortly.
Thanks for this! I've suggested a tweak to make this less alarming to people.
```suggestion
            logger.warning('Could not revert to {version}', exc_info=True)
```
Exceptions are logged at `ERROR` level, which is pretty serious, given this can often recover by iteself.

This edit still logs the traceback, but uses the `WARNING` level, which is more appropriate.
Hmm, It looks like this change happened in release 5.0.3? Should a note be added to the changelog too? I can add one to this pr if you'd like.
Good spot!

I'm not really fussed about the changelog. Dropping support for out-of-support Django versions is a non-event, IMO.
Hi @etianen, The PyPI page is still out-of-date in terms of the Django requirement for 5.0.3 - https://pypi.org/project/django-reversion/5.0.3/ 

(And just my opinion) About the changelog, it acts as log of notable events/changes made to a project. Sure Django 2.0 is very old but still for historical completeness, timeline and previous patterns in the changelog - I feel it's worthwhile to note it because it's a major change in requirements. Also maybe worthwhile to note the support for Django 4.1. For me, I was wondering when this requirement was bumped because of the discrepancy on the PyPI page; tried looking at the changelog file and no info until I landed here.
gI'm not opposed to putting this in the changelog. I'm just not
particularly excited about it either. If you write it, I'll merge it. :P

The PyPI page, AFAIK, will only update with a new release. Or is there a
way to update the description and metadata for an already-released package?

On Tue, 1 Nov 2022 at 17:55, Dau Lam ***@***.***> wrote:

> Hi @etianen <https://github.com/etianen>, The PyPI page is still
> out-of-date in terms of the Django requirement for 5.0.3 -
> https://pypi.org/project/django-reversion/5.0.3/
>
> (And just my opinion) About the changelog, it acts as log of notable
> events/changes made to a project. Sure Django 2.0 is very old but still for
> historical completeness, timeline and previous patterns in the changelog -
> I feel it's worthwhile to note it because it's a major change in
> requirements. Also maybe worthwhile to note the support for Django 4.1. For
> me, I was wondering when this requirement was bumped because of the
> discrepancy on the PyPI page; tried looking at the changelog file and no
> info until I landed here.
>
> —
> Reply to this email directly, view it on GitHub
> <https://github.com/etianen/django-reversion/pull/926#issuecomment-1298900066>,
> or unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AABEKCHDOSL6MXC7ZPWKDULWGFKRPANCNFSM6AAAAAAROQARYE>
> .
> You are receiving this because you were mentioned.Message ID:
> ***@***.***>
>
Nice spot
Brilliant, thank you!
Lovely! I'll not bother with a release for this, but it's nice to keep the CI up-to-date!
Whoops
Thanks!
👍
Very nice! Release incoming.
Awesome :)
Awesome! Thanks a lot :)
Thanks for you contribution!

(I added you to AUTHORS, too)
Awesome, thanks a lot!
fast :)
I'm a ninja, but it's a secret :) Shhhh :p
I will probably merge this in, but leave it out of the egg that is being created in the end.
Not really sure how to handle this, I initially thought that example apps should be distributed outside of the shop framework itself...

So I would pull this in, but might remove/move this in the future. Is that fine with you?
I was lead by what I wanted when I downloaded app to evaluate - have something quick and working without too much hassle  to syncdb, download other project, check versions,  set virtualenv, etc. I am sure in some moment real example app would be needed so feel free to remove it it whenever something better than this is available.
alright, makes sense
Absolutely. Thanks!
tests are still pending. Also, I am thinking of merging example app into testapp, think we can use same both for example and testing
using the same app for testing and example is a bad idea, we used to do that in the CMS and as a result we neither had a good test app nor a good example. I really think you should keep those separated.
ok, agree
What's the status on this pull request? I kind of lost track of whether I should pull it or not...
I think that you can pull it. It shouldnt affect recent changes that were pulled
Merged. Thanks :)
Shouldn't we start from product price here?
I'm done. As usual I found only minor typos and lame stuff. Code looks good to me.
Should all be fixed now.
I vote for a consistent way of writing 'payment backends'. Sometimes we got 'p' and sometimes we got 'P'. I don't really see how this is a fixed name or so, so let's just write it following English rules -->  capital 'P' only when sentence begins.
'Payment backends' writing...
'Payment backends' writing...
'Shipping backends' writing...
'Shipping backends' writing....
USE_CACHE always True? Should there be a setting that can control this value?
typo:
- payment 
- shipping
what if it is None. Better: if not backend_name:
better: if not url_namespace:
Eventually output str(backend_instance) to give a hint where it went wrong? There is probably a better way to output the classname... just in case someone defined a crazy **unicode** method on his backend_instance's class. Maybe str(type(backend_instance))?
missing space after comma
let's make it more readable and dump the escape character. change the outer ' to "
missing space after comma
Should we also check if the url_namespace slug is actually something that will be valid in a url? we could sluggify the string and compare if the sluggified version is equal to the original version. But then... its probably overkill. If someone enters such a stupid slug, let it crash!
I don't understand what this base class does...
btw. with the TestCase class that comes with django you can do this:

self.assertRaises(NotImplementedError, backends_pool.get_payment_backends_list())

1 line vs.6 :)
better: using self.assertRaises from django.test.TestCase
better: self.assertRaises
better: self.assertRaises
delete this?
This is simply used for tests - I'll switch it to an **init** parameter with a default instead.
Using "cache" simply means the results of importing backends are stored in memory and not re-read from file every time. In tests I want the opposite behavior since the settings are overriden all the time (to test stuff)...
Ah, that's never the case, since I getattr() with a default value of "", if it is actually None or undefined, it will be "".

Ah well, I'll switch to if not anyway...
Good idea, I'll do just that.
Ok, I changed all the ones I could find to the Django way :)
Merged in!

Thanks a lot for your help, I was actually going to write this template tag (or something extremely similar) today :)
Thank :)
Awesome! You're in :)
Ewww, triple single quotes.
Like I says, I prefer triple doubles too.  Just matched it up with what surrounded it.  CG - any pref?
Ah well, I guess I'm just a lazy bum (the triple singles are slightly easier to type on my Swiss keyboard), I really don't have anything to say about it.
I guess if you're both used to triple-doubles that means it's in PEP8, and therefore, I am wrong. :)
(just checked, and unamazingly enough, you guys are right)

So, I'll make the search and replace now on the rest of the codebase.
FWIW, I was partially kidding, the most important rule from PEP8 is "A Foolish Consistency is the Hobgoblin of Little Minds". So if the code base prefers single quotes I'd happily concur and stop my passive-agressive comments :)
Tadaaa!
I'm a hobgoblin and I'm ok, I code all night and I ... code all day :)

So well, nothing a good ol' find + sed couldn't handle.
You're awesome :) Thanks a lot!
you are welcome!
Thanks :)
Awesome! Muchas Gracias :)
I checked your code out in more details now, and gave it a spin.

What is really amazing with open source is that I would have _never_ expected that people would want to make the checkout process this way :) I didn't realise that it is what you did here :)
I'm not really sure if this should go in trunk "as is", (or at all) as opposed to finding a way to make a "django-shop-singlestepcheckout" application or something

I will definitely cherry pick some of your commits to trunk, and will think of how to handle the rest :)

Thanks a lot for your contribution, and I'm really looking forward to see what other "crazy stuff" you'll do with the code :)
The interesting thing is, most sites I've bought from have done it in a similar fashion to what I've coded here! Either that or my memory is really warped...

The next thing on my list was a signal to be sent when an order is completed - right now I'm connecting to models.post_save() to catch completed orders and continue processing the orders - but you've beaten me to that one! :P

Other things I was considering, were in circumstances where there is only one payment method, or there is only one shipping method, there is not really any choice to be made, so the user shouldn't have to make that extra click, and even if my approach to checkout doesn't belong in the main trunk (probably doesn't, given how it requires people to sign up), it would probably still benefit from a view that lets users update their billing/shipping info. 

If either of those sound interesting, let me know, and I'll put them in a seperate branch leaving out my other changes to the workflow (Although I suppose this discussion is probably better off being moved to the Google group rather than in the comments here :)

Anyway, I'll close this pull request now, since it looks like you've grabbed the bits you want from my current efforts. :)
Heya!

You might be interested in my "signals" branch then - I've been looking to send more accurate signals along the checkout process (if that's not what you were refering to already :) ): https://github.com/chrisglass/django-shop/tree/signals

Not all of them are "hooked" yet (it's a work in progress), but you should get the idea :)

I think I need to think a little more about what the default should be... I'll reopen this for the time being
Just throwing this out there, haven't thought it through properly, let alone done any testing, but you could always include my workflow and the default - switching between them would just require overriding the default url for checkout, ie, 

```
# uncomment to use single form for choosing shipping/payment instead of the default
#from django.views.checkout import ShippingBillingView
urlpatterns += patterns('',
    # uncomment to use single form for choosing shipping/payment instead of the default
    #url(r'^shop/checkout', 'ShippingBillingView.as_view()),
    url(r'^shop/', include('shop.urls')),
)
```
Like we discussed on the mailing list some time ago, I'll close this since the master now includes something very similar to this now famous "althalus branch" :)
Whow, closing pull request 42 on towel day... is that good or bad karma?
Wow. Famous? Really? And I'm quite sure closing number 42 on towel day is a good omen of things to come! Or at the very least, an omen of rather hilarious failures to come, in any case. :P
Like when this line of code I was looking at turned into a bowl of petunias? ;)
I really should have done this since the beginning :)
Awesome, thanks a lot!
Awesome, Thanks!
This was merged ( see c419673cc6b107766977d7bc007bd349ba8ce691)
It seems github didn't pick it up...
Do you want to enhance this a little further as discussed? (Tests and doc come to mind)

Other than that, the idea is good and I think it makes sense.
Thanks so much for your time, Chris! Tomorrow I will jump into this and add awesome docs and tests and send another pull request. As far as I am concerned you can close this pull request...
Ah well you can simply add commits to your fork's simplevariation branch and it'll get added here :) No need to recreate one :)
I would like to extend the signature of this method. When we have variations, it is no longer suitable to just select CartItem by cart and product. For proper merging we also need to know if a CartItem of this cart, this product, with these CartItemOptions exists. I think the simplest approach would be to allow handing in a queryset which can override the standard queryset we use until now.
Overriding of standard queryset if a custom queryset is given.
Line was too long :) and I just saw that there are more PEP8 issues in this line... damn...
I would like to suggest that we do also return the cart_item that we just created here. This is very convenient and later you will see why...
I think we should also enhance the signature of this method. As I said earlier, for adding CartItemOptions the product is of no interest because we need the actual CartItem instead.

If people want to do simple things with the cart item when overriding the CartDetails class, I think they should have access to the CartItem here.
I have renamed these. They confused me. At first I thought we are talking about CartItems here when it is Products in reality. Also further down I introduced the real CartItem and having an item and a cart_item variable here just sucks. It is a product. It should be named as such.
Here you see why it is convenient to return the CartItem we just created. Now I can easily pass it to the post_success method below.
Sure, makes sense
I would personally rephrase this as:
if not queryset:
____ queryset = CartItem.objects.filter()...
item = queryset

(github: indentation sucks)
+1
+1
Yeah, makes sense indeed
+1
Awesome! Sorry for the long time to merge - I was on vacation :)

Thanks a lot!
forgot to update the toctree
I just pushed e75f269 to master, but I'm not really sure if the milkman paragraph belongs here either...
I'm not too sure about this part. I don't think that we should advertise the use of milkman here as there are dozens of fixture helpers out there.

In a how to test document I would rather expect hints on how to use certain APIs in order to create the objects you need and how to assert certain commonly used things. A link to the current test suite would probably be a good idea as you can steal a lot of ideas from there.
That's pretty cool, thanks.
Maybe not the best idea I ever had, but how about JSON/Pickle serializing the address?
1. json field will not be human readable/editable in django admin interface.
2. again if developer want to handle address granulary, he should just implement override copying methods in order model
Human readable can easily be achieved using a nice admin widget, editable might be tougher though :D
Developer can save address as json by simply overriding as_text method (if really needed ) )
i guess...
Ah damn, I should have caught this one
damn... my editor removed all those blanks again. Here is the actual new code..
The name is saved in the database on the payment object (this was payed by "backend_name"). I suggest we don't translate it, befause it would get super confusing (the write will probably be in the language the client preferred, which the admin might not speak / read)
I knew it was worth waiting for a comment :)
@Tribaal

Is it save to translate the backend_name?
Screwed this. Opened a new one.
Don't know how to test this without self.client. If you got an idea, I'm eager to learn!
What is the preferred way to store default values for our settings? Shouldn't we have some sort of settings file for the shop that has all the defaults? If I want to use this SHOP_FORCE_LOGIN setting at another place and do the same getattr dance with providing a default again that probably defeats the DRY principle.
This code is not done by me (except the little conditional further down, see my other comment). I use it in all my projects to secure class based views. Don't know if there are better ways to do this.
And that's it. If SHOP_FORCE_LOGIN = True, the user will be redirected to /accounts/login or whatever URL he defined as his login url. It's up to the user to make use of django's well documented login mechanism to provide a form that deals with user signup and login. We would need to document that. I would create a django-shop-simplelogin repo that might be used as an example for this.
That looks good. Thing is, you'll have to add this to views exposed by shipping and payment backends, isn't it?
lolwut github is acting weird...
So basically Models are now abstract, and the shop provides an implementation of them by default, that other users can replace, with the setting (like it used to be).

Another novelty is the dynamic app-label fixing in foreign keys, making it work without having circular imports. see shop.utils.loader.get_model_string.

There is a lot of testing and documentation to do after I pull this one in...
Pretty cool, thanks guys :)
LGTM! Awesome stuff!
Why I did this is unbelievable
shop_login_required does the same as django's login_required. Just it checks for our new SHOP_FORCE_LOGIN setting. If a user sets that to False, all our shop views will not get secured.
Some PEP8 reshuffeling.
Sorted all imports by alphabet and made the ( ... ) imports multiline. This was coding standard at my last company and I think it makes sense (you can easily delete or insert a new line and you can select lines between ( ) and sort them alphabetically by your editor (if your editor can do that).
This import is actually new...
Not sure if that is PEP8 but I love it to have builtins first, then high level frameworks (django), then 3rd party apps (everything else than django) and this own apps' imports.

It's very convenient when you can rely on this scheme :)
My call still stands: If someone knows how to test this without client.get, I'm all in. Test suite is still amazingly fast, though.
Any objections to put this code into this file at this location?
Any objections to put this code into this file at this location?
Slight change to the original implementation of this Mixin class: I call get_test_func here because our shop_login_required decorator needs to figure that out as well and I want to repeat myself.
It took me hours of swearing and cussing. I'm a total noob with decorators. In the end I just copied django's login_required decorator. If someone knows a more elegant version to create a decorator that calls @login_mixin only when SHOP_FORCE_LOGIN is True and that also allows all args and kwargs of the original @login_mixin decorator, I'm all in.
Would it be OK to put this information into this location?
Yeah, I agree, but I also know that my editor will f**k this up :(
Nice :)
I think the django client is precisely what you should use. They are, technically speaking, not "unit tests" anymore (functional tests, rather), but who cares? Thanks a lot!
No, looks good to me :)
Ah nice, I meant to do this for a while but keep forgetting :)
LOL :) 
I can do one of these changes with every pull request that I send :)
If we agree that this should be done, I would first list all undocumented settings here. After that I would send another request with the documentation.
The new pattern would look like this: 
- never import django.conf.settings
- always do from shop import app_settings as settings

There is a reason to that which I will describe further down..
This would be our central settings file...
Thanks to this context_manager, there is a glitch in this approach, that I never thought of before. And that is also the reason why I want a codereview / discussion on this.
When the test server starts, it will load its settings.py. It will also load our app_settings.py which will set all out internal settings to the values from settings.py or to our defaults. 

When we use OverrideSettings in a test, it will only alter the value in settings.py but internally we never touch settings.py any more, we only touch app_settings.py.

I guess by using reload(app_settings) we can fix this (the tests run fine now). However, I never used reload before and I don't know if this has ugly side effects or is too hacky. What do you guys think?

BTW: This is also the reason why we would need to import form shop import app_settings and not from shop.app_settings import SHOP_FOO ... in that case SHOP_FOO will be loaded on server start and cannot be Overridden by this context manager any more.
Unfortunately, that is not how `Meta`/`_meta` works... If you have a look at https://github.com/django/django/blob/9d4d4bc57addbd3a6676dd88b6ebc16c79c27d09/django/db/models/base.py#L57 you will notice that `Meta` never actually becomes `_meta`, but rather get's put inside an instance of https://github.com/django/django/blob/64d6366c733b651451eedf08228c12686295351e/django/db/models/options.py#L22

So in order to put methods on MyModel._meta, you must use a metaclass on MyModel.
This should probably be `raise AttributeError`, not `return`. Also: an error message would be super useful here
Not for 'app_label', look at: https://github.com/django/django/blob/9d4d4bc57addbd3a6676dd88b6ebc16c79c27d09/django/db/models/base.py#L49
Yea, this definitely should be 'raise' :)
Doesn't seem to work though:

```
In [1]: from django.db import models

In [2]: class MyModel(models.Model):
   ...:     class Meta(object):
   ...:         def __getattr__(self, name):
   ...:             if name == 'app_label':
   ...:                 return 'wharbargel'
   ...:             raise AttributeError
   ...:         
   ...:         
---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)

/home/jonas/workspace/django-shop/tests/testapp/<ipython console> in <module>()

/home/jonas/.virtualenvs/shop/lib/python2.7/site-packages/django/db/models/base.pyc in __new__(cls, name, bases, attrs)
     50             # For 'django.contrib.sites.models', this would be 'sites'.

     51             model_module = sys.modules[new_class.__module__]
---> 52             kwargs = {"app_label": model_module.__name__.split('.')[-2]}
     53         else:
     54             kwargs = {}

IndexError: list index out of range
```
Of course. Your module is `__main__` and not `app_name.models` :P
Test included with pull request, check it.
Yes, but according to you, **getattr** on Meta should be honored by Django, but it isn't
LGTM!
Zeus raised a valid point: this is extremely confusing, from the perspective that something that is _supposed_ to only change a cart item now can also change the cart - which it shouldn't.

A better way to solve our problem would be to make the cart modifier make an aggreagate query in the process_cart method, since this will anyway only be called when refreshing the cart...
I changed the way this behaves. Since changing the cart from a cart update method is _wrong_ as Zeus pointed out, I now make a dictionnary accessible to cart modifers called `state` which holds any information they might feel like passing around. 

It's now extremely easy to make "running tallies" for a specific condition on each item, without a single DB query (provided you only use CartItem or Product of course). Also, this does not affect the general complexity of update() since we already loop on CartItems in O(n) (in memory), and simply add more treatment to each iteration.

Let me know what you think, @mbrochh @ojii
LGTM!
works
Yes indeed I'm whitelisted on RTD (and if it's not user-specific, I can get the django-shop whitelisted). So +1 on settings/ttag references!
other than my little nitpicking comment LGTM. Amazing patch beni!
Wonderful! Law and order in the docs! LTGM!!
Whoooaaa thanks :)
sphinx has a pep role:: `:pep:`8``
changed, thanks!
Apart from the typos: LGTM
Sorry about that, I've pushed it already. I'll commit your suggestions now
and done.
yep --> yet
proocess --> process
delete the , well, 
only stops reading flow.
This looks good - thanks a lot.
LGTM!
Awesome. Thanks a lot!
Can you explain why we would want to add zero quantity products to the cart?
there is one working case on our site e-cigar.ru:
my product models has a relations like "related products", so when user place one good like cigarette, we place cartridges and accessories for this into cart with zero quantity. This case really works - upsale working greate!
OK that is a pretty cool idea but why do you need to add these products to the cart? Can't you just hand over a list of related products to the template and then display them nicely just below the real cart items and give them an "add to cart" button?
Not sure about this either, having a cart with zero qty items in it looks just wrong to me.  

@clincher - I can see the motivation for this proposition, but I think it would be better to approach that with using some recommmendations model like @mbrochh suggested.
Guys, it is rly usefull and usabilitifull. and work much better then "recommended goods". peoples don't look for sides, bottom or someone else.

And one else case: peoples sometimes play with quantity of goods in cart, look on total amount, they can set count to 0, look, think, set quantity back or tweak it a bit.

For example most popular internet-shop of retail selling citilink.ru has this mechanism. and this is most usabilitible shop i ever seen.

Remember! We must make usabilable sites in first case and other priorities is secondary
Hmm... @clincher has another good point here. If a user has many products and wants to "play" with the quantities (like: Hmm ok thats too expensive, what if I drop THIS item but chose 3 of THOSE items instead). Currently, I think, setting the quantity to 0 will completely remove the item from the cart, so if you change your mind, you would have to go back to the shop and find the item again, which indeed sucks...

Maybe having 0 quantity items isn't that far fetched... what do you think, @bmihelac
I believe that this, _Save for later_ (this is how this functionality is called on amazon shop) functionality does not belong to cart. 

 I think that it should not be too hard to implement this functionality outside of cart and render form for "Save for later" items below the cart form so it looks like you want. 

Given that, I would love to see "Save for later" functionality feature in core.
this is not just like "Save for later".

Sad, that u, guys can't register on our russian citilink.ru, i understand it
hard to do it on foreign language.

but there is greate realisation of cart and favorite products.

I rly don't see reason to delete items from cart when they quantity is zero.
much intuitive for users is button like "delete item".

2011/10/10 bmihelac <
reply@reply.github.com>

> I believe that this, _Save for later_ (this is how this functionality is
> called on amazon shop) functionality does not belong to cart.
> 
>  I think that it should not be too hard to implement this functionality
> outside of cart and render form for "Save for later" items below the cart
> form so it looks like you want.
> 
> Given that, I would love to see "Save for later" functionality feature in
> core.
> 
> ## 
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/divio/django-shop/pull/104#issuecomment-2347218

## 

Best regards,
Bolshakov Vasiliy
icq: 206635536
skype: va.bolshakov
tel: +79067151725
I totally understand your point @clincher
@bmihelac I'm also a bit confused by your answer. Think about setting a quantity to zero. Would you want the item to disappear from the cart after you click the update button? I would not want it to disappear. So I think we actually need functionality to have zero quantity items in our cart, no?
It is logical to me that if you set quantity to zero and press update product disappear from the cart. 

I believe that most of web shops will do exactly that. 3 carts that I tried just now have same behavior - update cart item to 0 and it's gone (for reference this are amazon, expansys and thinkgeek).
Ok in that case, I think @clincher should just override the cart views according to his needs. @clincher you would probably just need to override urls.py, and call your own CustomCartDetails. In CustomCartDetails you would need to override get_context_data and add some logic to add the suggested products to the context. In your template you can then render those products right behind the REAL products and show them with quantity 0. Then you need to override post() and make sure that if the quantity of the suggested products was increased to >0 they actually get added to the cart.

I vote for closing this pull request.
Thank you very much, guys, for all your comments
Why is this deleted?
oh, i was write something like note for myself, when make a fork.
this must don't be deleted, ofcourse, sorry
my pull request was an idea. if you not against it i can make it clearly and better a bit
and need to conform: is it need to make setting that will allow zero-quantity products in cart
looks like an indentation error here
hmmm... not sure about this. If we only execute this when quantity > 0 (why do we even need quantity > 0??) it means that item.update() will not be called and that means that eventually existent price modifiers will not be used.

Didn't we recently introduce some state field to the modifiers so that we could, for example, increment a counter when we go from one modifier to the next? Items with quantity 0 would not be included into this counter then. Maybe I am too theoretical here. I can't even think of a real world example... but just MAYBE this might break something? 

@Tribaal? What do you think?
OK after staring at it for half an hour, this is my understanding:
- if the user wants to override one of the models, his model path MUST look like this: "someappname.models.Modelname"

That means, if a user wants to seperate his model classes into further files, this workaround will not work because of the check for length == 3.

i.e. myshop.models.cartmodel.Cart and myshop.models.ordermodels.Oder

We would restrict people here.
I think it would be better if we check like this:

IF class_path.startswith('shop.models') THEN do our usual load_class thing
ELSE return '%s.%s' % (parts[0], parts[-1])

Because, if I am not wrong, we always need the first and the last part of the path, right?
Hello-

I agree with mbrochh in that my solution is not ideal, but I would suggest that the change required is a bit more substantial than I have done here and what mbrochh describes.

The problem in both cases is that the values that we need--app_label and model name--can only be taken from the class_path in the most basic default case.  It is possible, I think, to reassign a model to a completely different app, arbitrarily, using Meta.app_label.  In such a case, even under my modified implementation, it is possible for a model found at "someapp.models.ModelName" to have an app_label of "otherapp", and therefore be registered inside Django at a completely different location, breaking get_model_string.  An added problem with mbrochh's suggestion is that some models may be loadable only with the class path "projectname.appname.models.submodule.ModelName" or something of the form, whereby any workable parsing would be very complex if not impossible.

A more permanent solution would be to modify the kind of data found in SHOP_x_MODEL settings.  Instead of being class paths, I think that they should instead be ("app_label", "ModelName") pairs, or strings of the form "app_label.ModelName".  This would dramatically simplify get_model_string, and would require a very simple change to the importation of custom models inside shop.models.  Instead of using load_class, use get_model, as described here:

http://stackoverflow.com/questions/5542753/how-to-import-a-model-in-django-given-the-name/5543163#5543163

Other than get_model_string and shop.models, I am unsure of where SHOP_x_MODEL settings are used, which is why I did not include this more comprehensive change in my pull request; also, any such change would render any production settings files backwards incompatible (albeit, in a manner trivial to correct), so I hesitated for that reason as well.

Regards,

Eduardo
duh. Using ('appname', 'modelname') pairs in conjunction with get_model is so simple and elegant. Why didn't we do that right away?

+1
Actually, thinking about this a bit more, it occurs to me that the "comprehensive solution" that I suggested in my last comment may not work in the default case where no custom models are defined by outside apps.  Furthermore, my suggestion mandates that any custom apps be listed _before_ shop inside INSTALLED_APPS.

The reason, I think, is that for get_model to work, the model has to already be loaded into memory, and because it is shop.models that causes the default shop models to be loaded into memory (in the default case), get_model cannot be used there in order to perform the load.  Also, if 'shop' is listed in INSTALLED_APPS ahead of the app containing the custom model, I don't think that the app will be available via get_model.

So, it seems to me that there are a couple of solutions.  

(a) The most basic is to define the SHOP_x_MODEL settings in the form ("path.to.model.Class", "app_label"), rather than ("app_label", "Class") or "path.to.model.Class", accepting that we actually need both values.  The problem with this may be that many django users do not know about the "app_label" concept being distinct from the name of their app; however, the fact that this is an advanced feature anyway should mitigate this problem.

(b) The other solution is to still use get_model in shop.models, but only in the case where SHOP_x_MODEL is defined.  The problem with this is that "shop" would, if I am correct, still need to be listed in INSTALLED_APPS _after_ the app containing the custom models.  This is a little annoying and may require users to separate their model implementations from the rest of their shop code in order to have other things like template loading work.

I would go with option (a), which requires probably the minimum number of changes.

If you all agree, I'll code something up and modify this pull request.
+1 to (a) as well!
I'm not sure about (a). This requires all existing shops to change their settings... In (b)'s case this is not the case. And I think that an advanced user should be able to remember to load his custom models before the shop app.

Also, we need can failfast (or at least log) the fact that a model is being "overwritten", so we can can warn the user with a friendly message ("you seem to be trying to override X - is your app before 'shop' in installed_apps?")

Finally, I think we need a test for this :)
Good point, Chris, I forgot about the backwards incompatibility :(
I think that I could write option (a) in such a way as to be backwards compatible, so that SHOP_x_MODEL could accept _either_ ('path.to.model.Class', 'app_label') or 'path.to.model.Class'.  Users would only have to use the former if the latter is failing.

A message could be added to that as well.  How should the message be output, with "print" or something else?
So, I think that what I just committed is an improved, more generic approach that is similar to my initial approach and mbrochh's suggestion, for the purpose of backwards compatibility, but with an error message that indicates the "preferred" method if anything goes wrong.

I also added a small change to the cart view.  As you can see, in the PUT (i.e. update) case, I changed the view to look at the REQUEST dictionary (which is a combo of GET and POST dictionaries), instead of the POST dictionary.  

I know that it is not REST, but neither is the approach already taken, really (i.e. a hard-coded PUT method looking inside the POST dictionary).  This change makes it _much_ easier to implement finer-grain control of the cart in the UI.  Specifically, it allows for line-items to be deleted with a single click, without deleting the entire cart.
I have to think it through when I have more time. Can you try to write some tests for this as well?
Why are you adding unrelated code to this pull request?
Well, to a certain extent this is unintentional.  As I update my repository, this pull request changes without my doing anything.  If I recall, that's not how bitbucket works, for instance, where I believe you have to explicitly update the pull request after updating your repo.

That being said, these changes are not all completely unrelated, even if it was not my explicit intention to group them all together here.

The most recent change is also a fix to the general problem I am trying to address here: the problem of "custom model implementations not working".  I think that you and I discussed this in irc, that the models that are defined directly inside of /models/ordermodel.py break when Order is re-implemented.  The reason is this: the migration that exists inside of django-shop for these objects creates a foreign-key relationship with models.defaults.ordermodel.Order and ignores (because it must) any custom Order you define.  Furthermore, it is not sufficient to create your own custom order-extras models and your own migrations, because these objects are referenced from inside django-shop at a variety of locations.  The changes that I made are the only solution to this problem, as far as I can tell.

The "INVALID" order status is unrelated, yes.  Again, this is something that I added to my repo that I did not explicitly decide to include here.  Normally, I would put this in a separate pull request, but I haven't had the time to create a separate repository for that purpose to place this change in it.

The explanation for this change is as follows: there is a use case for orders to enter into a status that is not "CANCELLED", which implies a human decision being made, but that instead indicates an automated decision being made as to the status of the order.  For instance, if there is an irreconcilable failure inside of the payment or checkout procedure prior to settlement that requires the order to be segregated, it's status would be set to "INVALID".  It's purpose is to allow for orders to be automatically segregated by the software when a fatal error occurs.
You should create feature branches in your fork, develop the patch, send it as a pull request and then wait for us to accept the merge.

Further commits into your branch of course get added to the pull request - this is convenient because you can add changes as we discuss the problem and point out problems.

Now things are a bit messy... :(
I won't have time to dive into all these open pull requests until after my marriage / family is back in Germany (10th of November). Maybe we need a small one night hackathon to gather the active devs and punch away all those open pull requests. Really sorry that it all takes so long :(
Hey guys, have you all had a chance to take a look at this?
As I said, unfortunately you have polluted the patch with lots of unrelated stuff. I have to review it again to see if we need all the additional stuff you added but honestly, I would like it more if you could create a new branch based off master, then send a pull request from this feature branch and then DON'T add anything unrelated to that feature to that branch.
I'm closing this pull request, but I opened a new (clean) one with only your relevant commits here: https://github.com/divio/django-shop/pull/118

Please use 118 to continue discussion. Maybe if you need to update it in the future, could you make a branch for your further changes? I'll merge your future branch with the current pull request branch.

Best regards,
- Chris
typo: 'ther'
I would prefer the form ('app_label', 'path.to.models.Class') because it also reflects the real string that we construct out of this 'app_label.Class'
Nice :)
This pull request is polluted with commits that have absolutely nothing to do with issue 112.

The instructions on how to send patches are wrong, but apply to the whole of github, and not just to this project:
1. Checkout your fork.
2. **_Create a feature branch**_
3. Hack hack hack, test test test, commit commit commit, test again.
4. Push to your fork.
5. Open a pull request **_from that feature branch**_.
6. (Merge back that branch into your master if you're so inclined)

From the github documentation: http://help.github.com/send-pull-requests/
"Pull requests can be sent from any branch or commit but it’s recommended that a topic branch be used so that follow-up commits can be pushed to update the pull request if necessary."

I'll indeed make this clear in the shop's documentation too, however.
Sorry for that, but this is the first project hosted on github where I added patches. Git is relatively new to me, as I used subversion until now and at that time I didn't know anything about sending pull requests as described in the github documentation. 
In django-shop there was no instruction about how to send patches, so I used the instructions given in django-cms/blob/develop/docs/contribution.rst which I then copied to django-shop, so that other do not fall into the same trap.
BTW, the contribution instructions in django-cms still do not mention to create a feature branch, before starting to hack.
No problem, I didn't mean it as a reproach - yours was not the only
one with this particular "problem" this week :)

I just updated the django-shop documentation about this, in a similar
way than you suggested

On Tue, Dec 6, 2011 at 12:59 PM, jrief
reply@reply.github.com
wrote:

> Sorry for that, but this is the first project hosted on github where I added patches. Git is relatively new to me, as I used subversion until now and at that time I didn't know anything about sending pull requests as described in the github documentation.
> In django-shop there was no instruction about how to send patches, so I used the instructions given in django-cms/blob/develop/docs/contribution.rst which I then copied to django-shop, so that other do not fall into the same trap.
> BTW, the contribution instructions in django-cms still do not mention to create a feature branch, before starting to hack.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/divio/django-shop/pull/113#issuecomment-3031892
I'm confused. Earlier you stated that there should be a br at one position and not at the other. nowe we have it at both positions?
Will we get a merge conflict here? Didn't Tribaal just describe the same thing in an other pull request?
This does not belong to django-shop docs. Any serious django developer knows about how to solve this problem and should consult the django-registration docs.

We should rather thrive to create a "fully fledged" example shop that has everything (registration, tax modifiers, variations, notifications etc.)

This would be a seperate repository.
Well, I didn't.
And user self registration is not even part of the Django framework but a separate plugin. Even worse, sample templates have to be found somewhere else. Hiding such information makes life for beginners unnecessary hard. Is this Your intention?
A Django app should do one thing and do it well. This is how one of the creators of Django, Jacob Kaplan-Moss puts it. django-shop is an app. It does one thing: Providing a product model and shopping cart, that can be enriched by cart modifiers and a way to turn a cart into an order that will stand the test of time (i.e. when prices / taxes / settings change).

I think the folks at Divio took some good amount of thinking to figure out what is the bare minimum that is needed to run a shop, and this is it. Almost anything else can be achieved by implementing / adding more specialized apps, that rely on the shop.

OR by implementing / adding specialized apps that do not rely on the shop, such as django-registration. django-shop is a framework. It is not a eCommerce plugin for Wordpress that comes with a one click installer. This is nothing for beginners. If you a re a beginner and you don't even know how to do registration with Django, this project is not for you.

We are still in the process of finding out what should go into the shop framework and what should be implemented outside. This documentation update, to me, is something that doesn't belong here.

Besides that pull request is polluted with other stuff again. 

Please remember, when creating a patch, first fork the repo, make sure your master is up to date, create a feature branch, implement JUST THAT feature, send a pull request and then never touch that feature branch again unless people ask for improvements.

@Tribaal I leave it up to you to add your opinion an either merge or close this request. I vote for close.

(sorry jrief, please don't take it personally. your contributions are very much appreciated!)
Having a hint about authentication and registration makes life easier for everybody. This is no Wordpress-style one click installer plugin, its not even code, its just a simple explanation on how to solve a fundamental feature found in each Internet shop.

BTW, sorry again for the mess with the repository. But if in the shops documentation there would have been the hint about how to fork, pull, branch, hack, commit, push, send pull request - well then this mess would not have happend. Sure you can argue that one should have known about http://help.github.com/send-pull-requests/, but I didn't at that time. Unfortunately I messed up my own master tree with my local commits, which now create all those silly problems. Remember, this is my first project hosted on github.
This is not how the Django community works. It is very likely, that 90% of all Django related open source repositories CAN be used in a context that also needs to deal with user registration. Does that mean that 90% of django related repos on github should have the same howto guide? That doesn't make any sense. 

As a Django developer, when you need to solve a problem, first thing you do is, go to djangopackages.com and see what is there, then google for it, then use the specific searches on github, bitbucket and google code, then ask for it on #django and Twitter and if all that reveals nothing, then do it yourself.

There might be other registration approaches now or in the future and we are not biased towards any implementation as it is totally unrelated to the code of our shop. People have to find their preferred solution themselves. We are giving them a shop, not a Django cookbook for beginners.
Agree. I will withdraw it.
|zeus| suggested to use a Formset instead. If no one has objections, I will try to cook a new patch tonight using formsets.
Sure, formsets were an option, but I think I was lazy at the time... :p

Thanks for tackling on the problem!
Okay submitted a new patch. Please review. If there are no objections in the next 48 hours I will create tests and merge this.

I still need some opinions about backwards-compatibility. People will need to update their cart.html template at least.
Yeah, the backwards compatibility will break. But I guess it's worth it to have actual forms (that all django developers except me should know how to handle).

I'll keep reviewing during the day, but I guess it LGTM.
Just submitted a new patch with a minor tweak in cart.html. Nothing serious.
OK I'm done here. ./runtests doesn't fail, we have new tests and I fixed a lot of unrelated PEP8 errors. Sorry for that but I couldn't resist.
It's nice. Sorry for being so long to fix stuff, but I still don't have a proper connection - I'm trying to do some of that stuff at work but can't really spend that much time on it. I should have a nice and quiet weekend though, so I'll be reviewing and fixing stuff :)
this is the minimal change that would have to be done in the template... iterate over form instead cart_items and call field.field.cart_item instead of just item.
I don't know... did I miss anything obvious? I think this is saxay.. no?
As suggested by |zeus| I tried to use modelformsets now. Usually things should be extremely simple, as we just have to tell the modelformset_factory which Model we want to use. Unfortunately we can't do that here because we don't want to simply save the model, we want to call the update_quantity method of the Cart object instead.

Therefore we need this CartItemModelForm which overrides the save() method. Besides it's a cool way to tell the bloody form that negative values for quantity are not welcomed :)
Usually in our view we would just do something like this:
CartItemFormSet = modelformset_factory(CartItem)
formset = CartItemFormSet(queryset=foobar)

However, I don't like the idea that where-ever we want to reuse that formset we have to remember to hand over the correct queryset (which is quite important because otherwise the user would see ALL cart items, from all carts).

So I created this convenience method that returns our desired form_set. Turns out that django's modelforms does lot's of wicked things and seem to pull the model out of the DB again, even though I just gave it a nice queryset. As a result, line_subtotal and line_total was always 0....
This hack is to make sure that the updated CartItems are in form.instance. Unfortunately Django's ModelForms do weird stuff and pull the instances out of the database again.
Using a formset makes things a bit more complicated in the template...
Since we are using an ugly table for our form further down, I cannot insert the form's id properly. I think inserting it up here next to the management_form stuff is nice enough.
this loop is a hack as well... we KNOW that the form only has one field. But with modelforms each form has an additional hidden ID field. If we looped over form.fields, we would get an unwanted row in our table. That's why I only call form.visible_fields here.

Eventually we shouldn't loop here at all but do something like

{% with form.fields.quantity as field %} 
  ...
{% endwith %}

Yea I think that is better. I will submit another patch once you guys gave some feedback on this patch.

UPDATE: New patch submitted and got rid of this iteration
The usage of all this stuff in our view is actually quite straightforward and elegant, I think.
As you will see later, I changed update_quantity() so that it returns the updated (or deleted) instance, because Django encourages to always return the instance that has just been saved here.

Question: How do we handle the case when quantity is 0. update_quantity() will call cart_item.delete(). It might be a bit misleading that we still get the isntance instead of None.

On the other hand, if someone overrides our save() method maybe he can still make some good use of the instance that has been returned even though it has just been removed from the database. I vote for just leaving it as it is and just return the 'ghost' instance in this case.
I'm returning the just changed cart_item here so that we can return it in our CartItemModelForm.save() method.
As I said, we might decide to return None in case of quantity = 0 but I think this is OK as well.
My flake8 script warned me that we are redefining the builtin sum here, so I renamed this variable..
Here are the new tests...
Modelformsets complicate things a bit for tests :)
My flake8 script warned me that we are defining self._update_cart_items outside of __init__ and indeed, defining it here is good for intellisense in IDEs and being transparent about our intentions with this class...
Because I initiated self._updated_cart_items in the __init__ method, this assertions had to be slightly changed.
Hum, we should return something explicit... Maybe None is actually he right thing to return?
Yeah this makes sense.

Still not sure, maybe we should return None?
Ohhh good catch. Thanks.
Nice.
Hmm while working on another problem I also discovered, that when adding a product to the cart, and that product already exists in the cart,, you can still exceed the maximum quantity... now things get really nasty... :(
Seems reasonable, a medium skilled programmer can override this in any case.
whow, thanks a lot! I hope that doesn't mean too many manual merges, but that's a really nice thing to have :)
@neo64bit I fixed you suggestions - please review?
forgot to escape `'be in ther form of a tupple: (\'path.to.models.Class\', \'app_label\').'``
don't make it a tuple `setting_name = 'SHOP_%s_MODEL' % model_name.upper().replace('_', '')`
LGTM
Maybe add something like this:
- Wait for community to do a codereview and to comment on your pull request
- If the community demands further changes, develop them in your feature branch and push again, the pull request will be updated automagically
- DO NOT develop anything else in your feature branch, which is unrelated to the problem your pull request aims to solve This will pollute the pull request and make merging for us very hard
Indeed. I'll follow that very process just now :)
I guess this serves as a more realistic example, but the goal was never to make templates re useable (since all shop will have different templates...
But ok, this seems like a sensible thing to do.
While on the end, every shop would probably replace all templates it is good to be able to replace them gradually rather than all at once, because most of templates are not even valid html documents.
Yeah, that makes sense.
Nice, I think having a large urls file was the source of a lot if confusion. Thanks a lot!
I am not sure if it would be better to put separated urls in own module, but did not find any best practice for that.
I like this a lot, but it will break other peoples implementations if they have overridden some URLs, no?
Absolutely should not break anything, all patterns and names are exactly the same as before, except for  `shop_welcome` which is removed and I think it should not be there. Including `shop.urls` before and now should be identical.
You are absolutely right. Damn it's late and I'm overworked. Your point about jump to definition is valid as well!

LGTM!
Welcome to the pony barn, little pull request :)
Just curious... is there any reason not to use include('shop.urls_order') ? Would save the import on top...
`include` takes module or pattern. I use rather module so it allows me to jump to that module in vim with `<C-C>g` .
LGTM
Thanks, I'm pulling it in.
This path once again is cluttered with tons of unrelated stuff?!? If you want to submit a new patch for a new feature while another patch is still waiting for merge, you have to create a new feature branch and implement ONLY that feature.
Ups - I created an extra branch for it.
Can you please cherry-pick shop.tests.OrderUtilTestCase.test_request_with_user_returns_last_order. Then I will delete the branch hotfixes.
No.

This has to stop. We don't cherry pick, _you_ cherry pick _your_ changes and submit them properly. 
I did it once for you, assuming it was a beginner's mistake, but this apparently prevented you from learning from the process. 

If you think your code is worthy of going in our master, please submit it properly. The multitude of previous contributors seemed to manage to do that just fine.

Also, this will not even cleanly merge against our master, which means you didn't even pull our most recent changes.

Closing this now, resubmit this in a proper way if you want it to be included.
I'm not sure I understand the meaning of this - are you trying to run the unit test suite against mysql? Why?
Because in production we run mysql. I tested the shop from my own app, which uses mysql. Well, for testing, SQLlite seems to be much faster. Thanks for the hint.
No worries. 
The preffered way to run django-shop _unit tests_ is to use the "./runtests.sh (you need django shop dependecies available, I'll cook up a little doc page for that ASAP).
This uses an in-memory sqlite database for tests, so it's blazing fast (less than a second, generally). This way you can afford (well I do at least) to run the tests very often, like several times per minute. While it does not prevent some integration problems with production databases, it does validate the code's logic pretty well.

Running integration tests against a production database is something I do (personally) on a per-project basis, but we could maybe extend the test suite to have a ./run-integration-tests.sh or something, passing in the database to use and it;s connection details... why not.
I added a little more docs on how we use the tests suite - let me know if it needs more information: bc7f56eec476f47ccd726e5a398810488f9bc556
Hi there,

Yeah, we try to maintain backwards-compatility as much as possible, even before 1.0 (our version numbering does not intend to reflect stability or lack thereof).

I would love a few tests for this (but it being a sunny day is an extremely valid excuse :) ), and if you could put the backwards-compatibility changes in it would be awesome :)

Thanks a lot
- Chris
I have two more test cases in mind, but am having trouble implementing them as the error occurs as Django loads the installed app's models. I have not been able to force Django to reload the models without running an external script from a test case. Anyone have any ideas? I have tried clearing AppCache but still no luck!

I have not put any thought into a test case for the code that was added and discussed in 
https://github.com/divio/django-shop/pull/108
Ah yeah, damn I didn't think about this - I don't think Python lets you do this actually. I need to think about it as well.
What I have so far that works. Is two apps [circular_import_old, circular_import_new] in teats/testapp. Two setting files that put the respective app in INSTALLED_APPS and a modified manage.py that loads the setting files and runs the validate command. This custom manage.py script is called from the test case.

You can reload a python module with reload() but what we need is to get Django to go though the model loading process again with modified settings. The normal process of reloading module in the interactive shell to get at new code is not enough.
Ok, I just finished testing your changes. It does indeed work, and your test is valid.

I would love to have other people's advice though. @mbrochh, @bmihelac , any thoughts?
Everything looks good to me.
Sorry to add a test after you have asked others to review Chris. It's no biggy just makes sure load_class works as expected when passed a tuple.
No worries at all, tests are always welcome!
and the review process should be continuous anyway :)
Is there anything in particular preventing this from being merged?
The only thing right now is my time :( I know it's a bad excuse, but it's true.
Sounds like a good excuse to me.
It would be really nice to see this in. Any updates?
I would like to see this in too. I have just checked and, as expected after so long, it does not apply cleanly. I will work through the conflicts from merging master. Then hopefully someone can accept the pull request.
Merged in master. Tests are still passing :)
simonluijk, i get 4 test errors (Django 1.4.1)
they do pass in 1.3.1 though
Confirmed. I will inspect further when I find time. Moving house at the moment!
LGTM!
Thanks a lot!
Simple enough. Thanks!
I don't like putting code in **init** files much... what do others think? @mbrochh ?
I mean, it is more clean to put it in a urls directory, and it does indeed make the import cleaner ("from shop import urls" is as clean as you'll get)...
Hum. Maybe I should pull this in.
I have [intentionally](https://github.com/divio/django-shop/pull/121#issuecomment-3047557) left welcome page out of the urls.

Agree for moving urls into sub module, looks nicer.
Yeah the welcome view is really debatable. @bmihelac , do you think we could re-introduce it, or are you strongly against?
It is not such a big deal for me even it is in - it is easily overrideable after all... but on the other side it is not much usable to anyone I guess
My personal opinion is to always have good default values. This reduces the frustration factor for non expert users.

I understand bmihelac position, that the shop's welcome page shall be served by the CMS, but this can be achieved by writing
    (r'^shop/.+', include(shop_urls, app_name='myshop')),
instead of 
    (r'^shop/', include(shop_urls, app_name='myshop')),
in your main urls.py.
No problem for me, whatever you think would be best.
Ok, I'll pull this one in now.

Thanks a lot!
This is the very typical case explained here: http://www.igvita.com/2011/12/19/dont-push-your-pull-requests/?utm_source=feedburner&utm_campaign=Feed%3A+igvita+%28igvita.com%29&utm_content=feed :)

It will take a long while to review...
Why PickleObjectFields? it makes no sense - it makes the shop migration depend on the pickle version! Why not use a JSON field?
Well, pickling objects keeps the object as-is, thats why I like it - and no conversions have to be done.
But sure, shop updates then would be impossible.

This is just for review and not intended to be merged yet!
I would like to adding django-shop-wishlists to the ecosystem. But that module relies on this pull request. Therefore we should further discuss if this implementation is a better way to handle product variations.
Pickle fields will not go into core.

This is a maintenance nightmare and orders of magnitude worse than the closest bad idea in serialization (xml).
The rest of the world is using more sensible options to serialize objects, and so will we, if needed (this is a point I am still not convinced of).
Well, upon your comment on Dec 21th, the code has been changed to use JSONFields instead of Pickle. This was more than one month ago. See my comments at 1cbe1eb and 2b04cd0.
Too much unrelated code went it into this patch.
Therefore I close this pull request and reopen a new one with less features.
Awesome!
Thanks a lot!
Simple enough. I never really got to finish writing signals for the shop, thanks for doing so!
Other than my little note (about which I'm not 100% sure), LGTM
fixed and pushed
Great :)
Shouldn't this be "カートの小計"?
@ojii You're right. The translation was done by my company's translator, but I've double-checked with my girlfriend, and she confirmed your translation was better.
If you push a commit with the updated translations to your master it will be automatically added to this pull request
Same "problem" as above? Shouldn't it be "カートの合計"?
A migration required for this change.
May I propose following patch instead?

```
diff --git a/shop/util/fields.py b/shop/util/fields.py
index c0df412..6a1101c 100644
--- a/shop/util/fields.py
+++ b/shop/util/fields.py
@@ -9,16 +9,13 @@ class CurrencyField(DecimalField):
     max_digits = 12, decimal_places=2, and defaults to 0.00
     """
     def __init__(self, **kwargs):
-        if 'max_digits' in kwargs.keys():
-            del kwargs['max_digits']
-        if 'decimal_places' in kwargs.keys():
-            del kwargs['decimal_places']
-        # get "default" or 0.00
-        default = kwargs.get('default', Decimal('0.00'))
-        if 'default' in kwargs.keys():
-            del kwargs['default']
-        super(CurrencyField, self).__init__(max_digits=12,
-            decimal_places=2, default=default, **kwargs)
+        defaults = {
+            'max_digits': 12,
+            'decimal_places': 2,
+            'default': Decimal('0.0')
+        }
+        defaults.update(kwargs)
+        super(CurrencyField, self).__init__(**defaults)

     def south_field_triple(self):  # pragma: no cover
         """
```
I've got a question about this whole `decimal_places=2` thing. A tax amount can easily have lots more than 2 decimal places. Real life example from a satchmo shop:
- Tax: GST 2.25
- Tax: PST 4.48875

The PST is a 9.5% compound tax over the 5% GST, so full tax is 14.975%
Good point.
You probably need more decimal places if you want to save prices excl. tax too. I'd advise using at least `decimal_places=6` (if not `decimal_places=10` as we do in Plata) if you do not want to have bigger problems with rounding errors down the road.
This was superseded by the pull request in https://github.com/divio/django-shop/pull/177

I will close this one.
I introduced a similar patch in https://github.com/jrief/django-shop/tree/additional-Order-Item-ExtraLine
However I added this `data` field as JSON.
Instead of using a tuple with 3 unrelated fields (label, value, data), I introduced a new class ExtraEntryLine which holds these fields. This eliminates the magicness which of the tuple fields hold what (label, value, data?) and makes the code easier to read and maintain.
In order to reflect the real meaning of that model, I also renamed ExtraOrderPriceField into ExtraOrderLine and ExtraOrderItemPriceField into ExtraOrderItemLine.
Jacob, I saw you have wrote that patch before. Unfortunately it seems changes in there are quire large. I prefer smallest patch possible and that is also main motivation not to introduce `data` as JSON field (even I think that it would make things easier for developers if it was JSON field). 

@chrisglass, @mbrochh, what do you think about adding `data` to extra price field? 

If we all agree that `data` should hold structured data, let's choose JSON implementation and add it to a django-shop.
Bojan, I agree to prefer the smallest patch as possible, but the current implementation has some issues, where I think that its worthwhile to resolve them now. 

A tuple adds some kind of magicness to your data. Everybody using that structure has to know which one is the first, second and (in future?) the third item. For web designers and programmers using such tuples can be very error prone. It is much better to explain a field by name, say label, value than by index field[0], field[1].

Terminology is fundamental and the name of a class shall be self-explaining. Adding an extra descriptive line below an item on your invoice is something different than adding an extra price field. In commerce you speak about "booking lines" not "booking prices".

Having a label which is assembled using free form data in program code, is a violation of the MVC concept. Assembling the label string must be done in the template or at worst in a templatetag, but never ever in program code. Therefore the data field shall be a free form structure. Using a string for that data imposes the customer of that field to parse and convert it into a customized label. Imagine a template designer having to deal with that.
Agree, to have data as JSON field. 

Regarding tuple, I would rather go with [namedtuple](http://docs.python.org/library/collections.html#collections.namedtuple) than extra class (it is introduced in Python 2.6). Introducing new expected return type would break some cart modifiers implementations which is probably not desirable.

Regarding renaming models I dont have any stance on that, but it should be done in separate pull request.

Bojan
Aww what a beautiful pull request! It even has a changelog entry! thanks a lot @bmihelac !

The model renaming should be in another, clean, pull request.
@chrisglass wait before merging please :)

data field as JSON field yes or no?
Sure, I was not going to merge it as the discussion seemed clear enough, just pointing out how well-formed the pull request was :)

+1 for JSON.
+1 for JSON too

any preference with implementations:
1. https://github.com/bradjasper/django-jsonfield
2. https://github.com/django-extensions/django-extensions/blob/master/django_extensions/db/fields/json.py

(I normally use 2.)
+1 for JSON :)

while implementing django-shop with variations, I used https://bitbucket.org/schinckel/django-jsonfield which is also available from PyPI.
One non obvious feature I need is json.dumps() with sort_keys=True, so that equivalent Python structures always are serialized into the same string.
The state of all these packages is pretty bad. Little or no tests, only one actually tries to handle datetime properly...
Update: I just replaced https://bitbucket.org/schinckel/django-jsonfield with https://github.com/bradjasper/django-jsonfield and ran all unit tests. Everything is OK.
@chrisglass: isn't the underlying DjangoJSONEncoder responsible for handling datetime properly and not jsonfield itself?
Shall we meet on IRC to discuss further development? I urgently need the 'data' field for my current project, and I would rather like to have my code base not diverge too much from the django-shop's base.
2012-02-28 20:00 UTC+1 would be a good time for me.
Ok, I discussed this a little on the mailing list, but just read this.
+1 for namedtuple instead of the new class
+1 for taking the model rename away from this pull request
I think I'll +1 for JSON, if I knew how is this sort of field used on the template. Do you just do `{{ object.json_field_name.attribute }}`?
could this also solve #80 in any way?
@bmihelac can you give me an example of what you would put into `data`? Would a field like `modifier_name` that @jrief proposed solve that?
After reading this https://plus.google.com/u/0/115212051037621986145/posts/HajXHPGN752 by Guido v.R., I changed my mind about named tuples. So from that point of view I agree.
data is in JSON and is not pickled – this works fine.

If we can agree on these extra features, I would be pleased to refactor my code and create a pull request.
Currently I am in the unsatisfactorily situation, that I had to fork django-shop, because I desperately needed these features.

About #80: I would not care too much about relabeling already ordered items into another language. If someone ordered a product using as language, say German, I don't think he later needs to read his order in, say French. This would be a nice feature, but difficult to implement and with a very, very small audience.
@alesdotio prices in system could be without VAT and VAT amount added in cart through cart modifier. It such case it is not possible to know vat rate without adding extra information.  This make impossible to group articles with same vat rate.
This patch is indeed very useful. In case you are interested to merge it I have re-rolled the patch against the current master. See previous message for the reference of the commit.
@cirotix Your `data`field is a TextField. Since it is convenient to store all kind of data in this field, from my point of view `jsonfield.fields.JSONField` makes more sense. Would you agree to change that to a `JSONField`?
It is late, but yes I agree :)
I think we can close this one
How did you run into this, exactly? Just trying to figure out the usecase
is this still relevant, or can i close it?
I just rechecked, this is not relevant any more. I'll close the pull request.
Yay thanks :)
Looks good. Thanks for your contribution!
Your pull request is not clean - you should make one branch per feature so that your pull requests don't overlap. In this particular case it's not a problem since I already merged the previous changes, but you should really use feature branches in the future.

Cheers.
Ok, I'll use a feature branch next time.
Looks good! Thanks.
+1, This is important, and I see no issues with this patch.

Just to make a point: most my clients are Canadian, and French and English have different numerical localizations
Ok, this looks sensible.
Very nice, thanks a lot!
Please review changes and let me know eventual concerns.
Looks good. Thanks for your good work!
Looks good - that was indeed the preferred way to fix this.
Thanks for your code! You're on fire! :)
great, I was sure I would fck something by editing file in textarea :)
Seems good to me.
good catch, thanks
Thanks a lot!
that was quick :)
I love pull requests I can merge without any controversies :)
sometimes it looks to me, that you are just awaiting for them (pull requests) to merge them in :)
Great branch! Thanks a lot!
Great! Thanks a lot!
Great! Thanks a lot!
Nice, since this is not controversial at all and backwards-compatible, you're in :)

Thanks a lot!
Great! thanks!
I just noticed this does not completely clean up after itself, like discussed in #147
We are using a post login / activation handler for this: https://gist.github.com/1247790
mbrochh: If I'm not mistaken you give priority to the new cart that is in the session, do you think that is better than the other way?
Yes this makes sense to me. If someone shops as anonymous, then leaves the shop and comes back after the session expired (which is what? one week?) I guess it is save to assume that he didn't care too much about his old card. 

But there is an exception: If the new card is empty and the old card had items, we use the old card. So you get the best of both worlds.
my case goes like this: user fills up cart while logged in, then logs out and comes back later as anonymous, fills up the cart again and then proceeds to login. which cart would you use? the old one (stored in the database) or the new one (stored in the session)?
I think I would use the new one. If the user _just_ added new items to the cart, then logs in and see completely different items, that would be confusing. I think merging the two cards would be confusing as well. I would always assume that a user who adds new items to a cart doesn't care (most probably doesn't even know) about old carts any more.
thanks mbrochh, makes more sense this way.

chrisglass, what do you think? I'll look at the failing tests later if you agree with this.
This seems to make sense, but let me rephrase to make sure I get it:

If a user logs in and has a session cart AND a cart saved in DB, the session cart overrides the DB cart except in the case where the session cart is empty, in which case the DB cart is kept instead.
Correct?

Please also add a line somewhere in the docs while you're at it :)
that is correct
OK, then +1 from me (after some tests of course ;) )
tests added :)
Good job! +1 from me!
Alright, it's in! Great job Ales!
This is replaced by #173
Seems very rational. What was I thinking?

Thanks a lot!
Yeah so actually, this is not C: we have unit tests :)

And this change breaks the test suite.
So I've updated the only test I could see that would fail due to changes. Please let me know if it works for you.
Well, here is how to test that your branch works: ./runtests.sh

If you see a F in there (like with your latest commits), it means the suite fails.

So yeah, it still fails.
looks good, thanks
Note: I also added the decorator to the payment views.

To me it seemed most logical to redirect to the cart if there was no order. This can be changed to whatever is most appropriate.
oh sorry maybe I wasn't clear enough when I said both options would be nice. I ment both direct url and a callable (the callable would be used for reverting the url).

Sorry if I'm being too picky about this, maybe the current solution in master is ok.
I did use the tests from this, so thank you.
@chrisglass @mbrochh 
could somebody review/comment on this?
Works great! I was going to comment about the django 1.3 compat but you sneakily fixed it :)
+1
This shouldn't have been done on master, I'll close it and create a new, clean one.
I like the cleanup, but this changes what the view returns and therefor breaks tests. What's the reasoning behind only showing completed orders?
There is no sense for customer to see orders that are not at least
completed. Every time he clicks checkout, order is created with status
processing, etc (this orders could be deleted after by shop stuff or
management command).

This refactor displays SHIPPED and CANCELLED orders as well.

regarding tests, you're right. If we agree for statuses I can fix tests.

Bojan
I think the underlying issue here is that garbage orders get created (or rather, not removed automatically).
This is the issue regarding garbage collection: https://github.com/divio/django-shop/issues/147

I think that consensus was not to auto remove created orders as they are valuable information.

Even if orders were removed automatically, it still do not make sense customer to see his uncompleted orders.
Outdated, closing. Thank you, @bmihelac.
My thoughts on this:
1. when payment method is Pay on delivery I want to have order confirmation step and this is handled in payment backend view
2. when customer have to enter payment information such as credit card, I guess that entering this data is already confirmation of an order and there is no need to have another confirmation page
True, you can implement a confirmation step in your own backends, but that feels a bit dirty. Also, if you use an external app backend you might not have that step.

This step comes just before the payment, so before entering your credit card info. The point is to have a view where you display the FINAL total price, which might never be displayed if you use something like flat shipping.

The intention is to also address #186.
looks good to me
is cleaning actually tested here?
You are right, it does not. I guess I got confused because sqlite reuses pks so you can't really test if an object exists. I'll fix it
So the new checkout process is as follows:
1. CartDetails
2. CheckoutSelectionView
   - POST -->  Order.objects.create_from_cart(cart) removes all orders originating from this cart that have status < CONFIRMED(30)
   - creates a new Order with status PROCESSING(10)
3. ShippingBackend
   - self.finished() sets the status to CONFIRMING(20)
4. OrderConfirmView
   - self.confirm_order() sets the status to CONFIRMED(30)
5. PaymentBackend
   - self.confirm_payment() sets the status to COMPLETED(40)
   - empties the related cart
6. ThankYouView
   - does nothing!
@chrisglass @mbrochh @bmihelac @simonluijk Could someone just quickly review this?
Also, do you think we should use something [like this as the OrderConfirmView by default](https://github.com/divio/django-shop/pull/187/files#L5L1)
code looks good to me.  Did not look at example app
Outdated, closing. Thank you, @alesdotio.
It should be 

``` python
order.status = Order.CONFIRMED
```
It should be 

```
return HttpResponseRedirect(reverse('checkout_payment'))
```
sorry, i branched this from my other pull
sure, why not :) thanks!
note to self: do not merge this, merge #195
at first glance it looks very good, thank you
Sorry, but I don't think we should have such specific template tags. Maybe create a separate discussion for that, or propose a more generic solution.

The translations look good though, could you make a pull request with them only? Thanks :)
thank you :)
fixes #198, thank you
thanks
Can't do it in a the save() method because we need to ceck the previous status of the order, and it is not possible in an abstract class. Closing the PR and opening a new one.
I think that should read:

```
confirmed.send(sender=self, order=order)
```

Also, this needs to be covered by some unit tests (the whole view is currently not covered at all).
I'll try and merge that once I add some testing code.
I wouldn't put an instance (`self`) as the sender. If you really want to have there something, then put a thing which can be referenced uniquely (is singletonish in the whole project). In this case a `class` object or `None`

```
confirmed.send(sender=self.__class__, order=order)
```

or the old one, where sender is None (or just omitted)

```
confirmed.send(order=order)
```
The django signals documentation disagrees with you, and I don't see how that would be a problem from looking at the dispatcher implementation either.

Could you back up your claim with sources?
Sorry for long post, I'll include sources here.

What I meant was that you can put "any python object" as the sender but if you want to make it filterable, then you have to use something singletonic in the whole project. So putting an instance as the sender is almost the same as putting None.

```
from django.views.generic import View
from django.dispatch import Signal
from django.http import HttpResponse

signal = Signal(providing_args=["request", ])

class Index(View):

    def get(self, request, *args, **kwargs):
        print "Sending signal as Instance"
        print signal.send(sender=self, request=request)

        print "Sending signal as Class"
        print signal.send(sender=self.__class__, request=request)

        print "Sending signal as None"
        print signal.send(sender=None, request=request)

        return HttpResponse("hello")


def receiver1(sender, **kwargs):
    return "Class receiver"

def receiver2(sender, **kwargs):
    return "Instance receiver"

def receiver3(sender, **kwargs):
    return "None receiver"

signal.connect(receiver1, sender=Index)
signal.connect(receiver2, sender=Index())
signal.connect(receiver3)

```

Output is

```
Sending signal as Instance
[(<function receiver3 at 0xb6014bfc>, 'None receiver')]
Sending signal as Class
[(<function receiver1 at 0xb60018ec>, 'Class receiver'), (<function receiver3 at 0xb6014bfc>, 'None receiver')]
Sending signal as None
[(<function receiver3 at 0xb6014bfc>, 'None receiver')]
```

I don't think there is a way how to filter when you pass an instance as the sender.
Ah ok, yeah I completely forgot about the filtering, you're right.

So actually the way we do it in django-cms seems a good compromise:

```
signal.send(sender=self.__class__, instance=self, order=order)
```
Outdated, closing. Thank you, @cirotix.
i prefer the method used in #209
I also vote for #209

alesdotio, would you pull this for the url changes if the model changes are removed?
yup, url changes are fine (make a new pull though, so the history is clean)
Great, so i'm closing this and will make a new pull request with only the url changes
is this a safe way of checking the version?
I'm glad that you have chosen my solution, but I would be really glad if you pulled it already so that the work can go on. Please.
what about addresses? https://github.com/divio/django-shop/blob/master/shop/addressmodel/models.py#L37
Sorry I forgot about this one. I've done full project scan for the User model and found it in tests. There is no need to change them. Tests are passing (except the ones which uses url tag in the templates).

I'm not sure how about migrations. But I think we don't have to care about them.
@atheiste about the tests with the url tag there is a pending pull request for that in https://github.com/divio/django-shop/pull/210
Yep, I know. And I'm glad that you are contributing as well :)
Alright, sorry this took so long, life is busy these days!

Looks good!
I just noticed we still have `install_requires=['Django>=1.2',`. Should we drop django 1.2 support then?
According to https://docs.djangoproject.com/en/dev/internals/release-process/#supported-versions Django 1.2 will no longer be supported after the release of Django 1.5
I vote for dropping django 1.2 support, fwiw.
thx :)
This was merged in da22a7fe824dde1d142e4369146883f3dc060e44
@jrief, requirements should be added to `ìnstall_requires``:

https://github.com/divio/django-shop/blob/master/setup.py#L27

Otherwise, I am for using json field instead of text field too.
So I found the problem:

Previous versions (the versions that "work") simply pass in case of ValueError... Newer versions raise a ValidationError instead (which is desirable - it is not valid JSON).

I think we should simply not allow plain ASCII, it's a JSON field so we should have at least one key/value. Having a hybrid approach seems a little unclean: either it's structured data or it's not, but not "both"...

So I think we should not allow the case of the failing test (we should just enforce data to be JSON if it goes into the JSON field).
The maintainer of jsonfield also agreed on this, see https://github.com/bradjasper/django-jsonfield/issues/33.
I made a proposal on how to solve it. Maybe its solvable there.
jsonfield is available in version 0.9.6 which fixes the pending issue, all unit tests pass.
Now, this pull request is ready for merge.
Nice! I'll try to test this on some real shops soon. I would also like to implement something similar for addresses on the order model #218
@jrief could you please add >=0.9.6 to the jsonfield dependency? Apart from that, I'm ok to merge.
@chrisglass done: jsonfield>=0.9.6
Yay! Finally merging requested feature number 1 :)
Can't you just use the relation Cart -> User, since the Cart instance is always available in every method of  a cart_modifier?
True, through `cart_item.cart.user`. But I have to determine the customers status using a DB-query. Therefore I want use the `request`-object to temporarily store the customer status there. This trick is also used by `get_or_create_cart`. Otherwise I would have to refetch the customer status for each item in the cart.
This is a rather big refactoring, as discussed with @chrisglass and @mbrochh.
Now cart modifiers do not accept a `state` dict anymore. Instead they expect the `request` object. To be backwards compatible, the `request` object contains a temporary dict named `cart_modifier_state` which replaces what once was the `state` object.
Ok this is going in now, it's been needed for too long and this approach is good. I'll tag and release a new version ASAP.
Nice, thanks a lot!
@chrisglass thanks for merging :)
Sorry, I shoud be more dilligent with pull requests...
:+1:
That seems reasonable, however could you please add a short_name property to shop.model_bases.BaseOrder doing the default case (return "%s-%s" % (order.pk, order.order_total))?
It makes extending the class more user friendly.

Also, this requires a small test.
Since suggested way of extending models is by extending BaseOrder, I consider it safe to move the logic from shop_api.get_order_short_name() to BaseOrder class. My concern is that an attribute error in overriden Order.short_name property would be catched by the except AttributeError in the shop_api.

This is just a small refactoring, so an already existing tests/api.py/test_get_order_short_name covers my change fully imho.
Thanks a lot!
Alright, that's simple enough to get in trunk, indeed. Thanks for your work!
While django-shop currently support Django 1.3, I think it would be more sensible to support latest one or two stable django versions (ie 1.4 and 1.5 currenlty)  in master branch. 

This will require less code and make our lives easier.
I do agree. Dropping support for 1.3 in master would probably be a good idea.
@chrisglass, @mbrochh, @alesdotio - agree?
+1
:star:
+1!
Alright, closing this. I can submit a PR dropping support for 1.3 later today.

@chrisglass Note that there are several plugins having the same problem, yesterday I ran across https://github.com/chrisglass/django-shop-simplevariations and https://github.com/chrisglass/django-shop-paypal
@anderspetersson Thanks for reporting, I will drop support from the plugins as well.
Great! thanks a lot!
Outdated, closing. Thank you, @MegaMark16.
Thanks!
What's the case against merging this? I'd love to be able to use this functionality.
The idea sounds good, but I didn't have time to review it yet.
The idea is good. This is completely untested.
If this is what retains this pr from being merged, I can write some tests.
Outdated, closing. Thank you, @sephii.
@sephii 
Could you please give me a use case where this is important. Currently shipping and billing addresses are shared.
One case I can think of is where you need some legal information (e.g. a VAT ID) for the billing address, but not for the shipping address, or vice versa.
Good point!
Currently they share the same database table.
So we should think about creating two proxy models, one for shipping-, one for billing addresses. In default mode they both inherit from the current address model.
Good catch! Thanks a lot.
Doesn't that require a migration?
My bad, I pushed another change where I have removed django-classy-tags. It's tested and ready to go :-)
Outdated, closing. Thank you, @atheiste.
A pull request? With _tests_? Yes sir, thanks a lot!
Forgot about Django 1.4 compatibility.
great! Thanks a lot!
You're welcome. Thanks goes to you! great work on the shop.
By the way, some translations can be subject to discussion.
Checkout for example... (in dutch 'Afronden' = 'Finish' (en), but could also be translated in dutch as 'Kassa' which means something like 'Cash Register' (en)).
Well, other Dutchies are welcome to improve my initial translation.
I'm not sure this makes a lot of sense.
This is an example app, we don't want people to extend it. I generally dislike having code in **init**.py (except when it's really necessary). 

The better way would be to make models a directory with an empty **init**.py and have books.py in there. That means you need to change your imports.
Ok, I agree.
Since you sent a pull request from your master, this will pull things completely unrelated to translations.
Those changes are welcome, but could you please sent a clean pull request from a feature branch?
Sure, sorry for that @chrisglass I did not realize it. I will make a new pull request later tonight.
Outdated, closing. Thank you, @alesdotio.
Outdated, closing this. Thanks, @jjimenezlopez.
Thanks a lot!
Muchas Gracias ;)
looks pretty straight forward, thanks :)
Outdated, closing.
Could somebody confirm that this does not break deployed shops that would upgrade django-shop? I'm a bit wary of changing the initial migration only.
South doesn't open this file, aka. `001_initial`, so I would feel very comfortable applying this patch.
+1
Outdated, closing.
thanks :)
a pleasure!
Yep, looks good! Thanks
Good stuff. Cheers.
Thanks, I think a lot of people get bitten by this.
Closing this as outdated -- thanks, @fmarchenko.
@atheiste, this looks like some great work. Python 3 compatibility for django-shop would be wonderful. Unfortunately, I cannot merge this because the code has simply changed too much. We must take a new look at Python 3 compatibility soon. Thank you.
Closing this, outdated. Thanks, @seddonym.
After checking out #257 should those foreign keys be references to the product model?
I have to close this because it's outdated. Thanks, @jrutila.
Thank you @jrutila. Unfortunately, we cannot merge this anymore because the code has changed too much in the meantime. If you can contribute Finnish translations for the new django-shop code, that would of course be great!
This looks great, but unfortunately, it is outdated because django-shop has changed heavily in the meantime. I am closing this. Thank you, @evandempsey.
+1 for that.
I think this is oudated. Closing. Thanks, @freakypie. If you think this issue still exists, please open a new PR.
I think this is oudated. Closing. Thanks, @freakypie. If you think this issue still exists, please open a new PR.
I think this is oudated. Closing. Thanks, @dinoperovic. If you think this issue still exists, please open a new PR.
Sorry, human error.
Could be this merged?
Thanks
Travis reports a broken built:
https://travis-ci.org/divio/django-shop/jobs/56893025

can you please fix this?
#285
Thank you!
I can run the project (and the tests) for django1.8 removing south from setup.py requirements (django1.8 complains with south being in virtualenv, not even in INSTALLED_APPS), however i don't know the implications for this.
Closing this. We now support Django 1.8.
Cannot merge this anymore because it's outdated. Sorry, @sebleblanc. Maybe take a look at the new and improved django-shop code :)
which function then does the URL `reverse`-sion?
[Django `RedirectView` does it for you in `get_redirect_url` if you set `pattern_name` instead of `url`](https://github.com/django/django/blob/master/django/views/generic/base.py#L178).

The `OrderConfirmView` duplicates `RedirectView.get_redirect_url`'s behaviour for when `pattern_name` is set, but incorrectly applies this behaviour to `url`.
Thank you, @cdvv7788. We cannot merge this PR because django-shop has undergone heavy changes in the meantime. However, any future PRs that improve Python 3 compatibility would be highly welcome. It is definitely on our to-do list :)
Closing this as outdated.
I'm sorry this was put in the wrong venue. Please disregard
Closing this because it is outdated (too much changed in the meantime to merge this PR). However, Django 1.9 compatibility is something we will look at soon. Thank you, @chriscauley!
Hi @kavefish. I think this PR is outdated by the many changes Jacob has made since it was created. If you still want to have some of these changes applied, please create a new PR for them. It would be ideal if you can create one PR per logical change. Thanks!
Please do not spend time on this old version of django-shop.
Currently we are working heavily on an improved version, available here https://github.com/jrief/django-shop
If you want, translate this version to Portuguese, it soon will become the official release.
I am closing this. @ourcach , if you want to add Portuguese translations for the current version of django-shop, that would of course be highly welcomed!
Great work! Thank you very much Jacob!
Closing, will create another PR from my repository.
This adds a more flexible address handling logic implemented by Jacob, and various other changes.
Thanks
@rfleschenberg please peer review, ie. test if you can run the demo shop in Python3
On Python 2, the demo seems to run fine. On Python 3, I am seeing the issue below.

```
(shoptest)rene@rex /tmp/django-shop/example (develop*) $ ./manage.py migrate                 
Operations to perform:
  Synchronize unmigrated apps: clipboard, haystack, sharable, cms_bootstrap3, treebeard, adminsortable2, segmentation, sekizai, django_select2, sass_processor, django_filters, shop_stripe, djng, parler, rest_framework, staticfiles, rest_auth, optimize, django_fsm, fsm_admin, extra_fields, sitemaps, polymorphic, compressor
  Apply all migrations: auth, shop, email_auth, sites, menus, contenttypes, myshop, djangocms_text_ckeditor, cmsplugin_cascade, cms, authtoken, sessions, filer, admin, easy_thumbnails, post_office
Synchronizing apps without migrations:
  Creating tables...
    Running deferred SQL...
  Installing custom SQL...
Running migrations:
  No migrations to apply.
  Your models have changes that are not yet reflected in a migration, and so won't be applied.
  Run 'manage.py makemigrations' to make new migrations, and then re-run 'manage.py migrate' to apply them.

(shoptest)rene@rex /tmp/django-shop/example (develop*) $ ./manage.py makemigrations --dry-run
Migrations for 'filer':
  0005_auto_20160407_2350.py:
    - Alter field subject_location on image
Migrations for 'post_office':
  0003_auto_20160407_2350.py:
    - Alter field language on emailtemplate
    - Alter field name on emailtemplate
Migrations for 'shop':
  0003_acceptconditionformpluginmodel_billingaddressformpluginmodel_breadcrumbpluginmodel_cataloglinkplugin.py:
    - Create proxy model AcceptConditionFormPluginModel
    - Create proxy model BillingAddressFormPluginModel
    - Create proxy model BreadcrumbPluginModel
    - Create proxy model CatalogLinkPluginBaseModel
    - Create proxy model CheckoutAddressPluginBaseModel
    - Create proxy model CustomerFormPluginBaseModel
    - Create proxy model CustomerFormPluginModel
    - Create proxy model DialogFormPluginBaseModel
    - Create proxy model ExtraAnnotationFormPluginModel
    - Create proxy model GuestFormPluginModel
    - Create proxy model PaymentMethodFormPluginModel
    - Create proxy model ProcessBarPluginModel
    - Create proxy model ProcessNextStepPluginModel
    - Create proxy model ProcessStepPluginModel
    - Create proxy model RequiredFormFieldsPluginModel
    - Create proxy model ShippingAddressFormPluginModel
    - Create proxy model ShippingMethodFormPluginModel
    - Create proxy model ShopAddToCartPluginModel
    - Create proxy model ShopAuthenticationPluginModel
    - Create proxy model ShopButtonPluginBaseModel
    - Create proxy model ShopCartPluginModel
    - Create proxy model ShopCatalogPluginModel
    - Create proxy model ShopLinkPluginBaseModel
    - Create proxy model ShopOrderViewsPluginModel
    - Create proxy model ShopPluginBaseModel
    - Create proxy model ShopProceedButtonModel
    - Create proxy model ShopSearchResultsPluginModel
(shoptest)rene@rex /tmp/django-shop/example (develop*) $ 
```
I encountered this myself. In django-filer a lot of stuff changed and apparently they forgot to add one migration. This can be ignored though.
Hmmm, ok, but what about the migration in django-shop? And in django-post-office?
Oh, I am actually seeing the same problem on Python 2. I guess this is just because the demo does not use a version of Cascade that has the latest hack to avoid migrations for proxy models. Alright. I think we can ignore this for the demo. 

Otherwise, it seems to run fine so far. I did not test it very extensively. Anyway, I think it is ok to go with a "risky" release policy at the moment.

Should we maybe release a new version of djangocms-cascade first, and then require that version in the next release of django-shop? Anyway, I am fine with merging this PR.
@jrief: Do you happen to know what the minimum version of django-select2 that we need is?
djangocms-link has pinned their requirement in 1.7.1. If I use djangocms-link 1.7.0, everything _seems_ to work during installation, but I expect there to be bugs that we did not find yet. @mkoistinen probably had a good reason to introduce this version pin :)
Please don't merge this. Reason:

django-shop uses djangocms-cascade's link functionality, which it extends to support internal links onto product detail pages. The link functionality is a mixin class, which Cascade adds to TextLink, Image, Picture and Button. django-shop then extends this mixin class in order to support links onto products. Otherwise we'd have to reimplement TextLink, Image, Picture and Button for django-shop again.

I don't see a way how to support this for djangocms-link without reimplementing the above plugins. Therefore unless you don't care using external URLs for linking onto product detail pages, you should stay with Cascade's link functionality. This however requires django-select2 >= 5, since it's API changed in regard to version 4.
Thanks for the review, Jacob. I guess we will just wait until djangocms-filer updates its requirement then.
@jrief: Never mind, I got confused. Sorry :)
- The docs changes look very good to me. Nice work!
- Can you please update the Haystack requirement (pin to a specific commit)?
- The rest of the changes look good to me, too. But to be honest, the diff is too big for me to really review it. Can we do smaller PRs in the future?

Cheers,
René
Let's handle this later.
This is not good. We should pin to an explicit version or commit. Otherwise, we do not know which version of Haystack we will end up with.
Jacob points out that we must of course also handle the case where `cms_pages` is not present in `fieldsets`. Also, we should provide a test before merging this.
Thanks @rfleschenberg for the hint! I used it to integrate this feature into upcoming version 0.9.2
Thank you very much!
:+1: It is my pleasure! ^.^ i will to collaborate more on a few days :D
Thanks!
Thanks. Wouldn't you write Kuna starting with a capital letter?
@jrief I thought so too, but [wiki](https://en.wikipedia.org/wiki/Croatian_kuna) says it's lowercase.
Great to see django-shop in Tunisia!
Thanks @jrief .
Probably, I should also update french translation for django-shop.
Looks good. Thank you!
Thanks
Before doing double work, please always check my development branch at https://github.com/jrief/django-shop
Thank you. I will keep an eye on your fork on next updates.

I have seen that you are removing SASS from project. Why?
Also i have made a branch with removed SASS since i was not able to compile libsass on CentOS in development server due to old version of C++ compiler.
No, I have absolutely no intention to remove SASS from the project.
BTW, if you are unable to compile SASS on your deployment platform, but able on you development, then use `./manage.py compilescss`, build a package and deploy that. This command creates css files for offline handling.
Yep, thanks. Problem was that runing pip install for djangoSHOP is crashing due to this sass package in requirements. 
I have seen that you have already removed it in your fork.
In 0.9.2 I removed this dependency - it the is optional.
You can still install django-shop from PIPy using `pip install --no-deps django-shop` without pulling in other dependencies.
Closing here, see https://github.com/awesto/django-shop/pull/375.
You're welcome, happy to contribute to Django-Shop.
Oooops. I didn't mean to merge this, sorry. I confused it with another branch. Anyway, I think we can probably keep the change? :)
hmm...
could you please point me onto these so named "best practices" for addresses. An ISO or any kind of other norm would be great.
I tried to use the most descriptive attributes, when creating that class. Something like `address2` IMHO is not very descriptive.
I don't think there is a norm for this, at least none from which we could directly derive the fields and their  names.

This is a case where it is actually better to be less descriptive, because it means making less assumptions. For example, an address [may not include a street name](http://wiki.openstreetmap.org/wiki/Addresses#Addresses_without_street_names). So `street` is not a good name here. Users may need to input data that is not a street name into this field. Similarly, `supplement` is often not a good term for the second line of an address (if ever -- I am pretty sure it's the wrong translation for German "Adresszusatz").

I did some research before starting to work on this and found this article:
http://www.uxmatters.com/mt/archives/2008/06/international-address-fields-in-web-forms.php 
See in particular the section "Generic formats".

The variance in international address formats is surprisingly huge. I think it makes sense for the default models to use a generic format, as recommended by the uxmatters article. This is also the format in use by amazon.com. 

Delivery services like Fedex and UPS also use a format like this, and they should know ;) Having said that, maybe it's worthwhile to include an "Address line 3" field (I took a look at the UPS worldship software, it has "address line 1", "address line 2" and "address line 3").

If integrators want to have a more specific format, for example because they only target customers from a certain country, they can of course still use their own address model.
@rfleschenberg thanks for this long explanation. Yes, the link you provided convinced me to change that. Please go ahead and merge it.
I merged this, but we still need to manually test the example shops. I have that on my radar anyway, for reasons not related to this PR.
Thanks
I had no time to test djangoSHOP with 1.10, but afaik, django-filer and django-treebeard are not ready yet. Therefore I presume, that it's too early to migrate ... yet.
Hi @khchine5. Thanks for the PR!

How will this affect shops that are already deployed? Will users have to take any special steps to update? If yes, we should document these steps.
The related issue is #398.
Hi @khchine5 
Thanks for you pull request, I just looked at it.
Unfortunately I can not merge it, because of some issues.
I'll add comments to the corresponding code parts.
Hi @jrief .
Thanks for all your comments.
Thanks for this pull request.
I merged it into my own develop branch. It should become part of the official branch as soon as I merge them.

@rfleschenberg could you please check in your Postgres environment.
The PR still has an issue:

```
(acceed-shop) rene@rex ~/projekte/acceed2 (master) $ ./manage.py migrate
Traceback (most recent call last):
  File "./manage.py", line 10, in <module>
    execute_from_command_line(sys.argv)
  File "/home/rene/.virtualenvs/acceed-shop/lib/python3.5/site-packages/django/core/management/__init__.py", line 353, in execute_from_command_line
    utility.execute()
  File "/home/rene/.virtualenvs/acceed-shop/lib/python3.5/site-packages/django/core/management/__init__.py", line 327, in execute
    django.setup()
  File "/home/rene/.virtualenvs/acceed-shop/lib/python3.5/site-packages/django/__init__.py", line 18, in setup
    apps.populate(settings.INSTALLED_APPS)
  File "/home/rene/.virtualenvs/acceed-shop/lib/python3.5/site-packages/django/apps/registry.py", line 108, in populate
    app_config.import_models(all_models)
  File "/home/rene/.virtualenvs/acceed-shop/lib/python3.5/site-packages/django/apps/config.py", line 202, in import_models
    self.models_module = import_module(models_module_name)
  File "/home/rene/.virtualenvs/acceed-shop/lib/python3.5/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
  File "<frozen importlib._bootstrap>", line 986, in _gcd_import
  File "<frozen importlib._bootstrap>", line 969, in _find_and_load
  File "<frozen importlib._bootstrap>", line 958, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 673, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 665, in exec_module
  File "<frozen importlib._bootstrap>", line 222, in _call_with_frames_removed
  File "/home/rene/projekte/acceed2/acceed/models.py", line 15, in <module>
    from shop.models.defaults.address import BillingAddress, ShippingAddress  # noqa
  File "/home/rene/.virtualenvs/acceed-shop/lib/python3.5/site-packages/shop/models/__init__.py", line 2, in <module>
    from .notification import Notification, NotificationAttachment
  File "/home/rene/.virtualenvs/acceed-shop/lib/python3.5/site-packages/shop/models/notification.py", line 18, in <module>
    from .customer import CustomerModel
  File "/home/rene/.virtualenvs/acceed-shop/lib/python3.5/site-packages/shop/models/customer.py", line 18, in <module>
    from shop.models.fields import JSONField
  File "/home/rene/.virtualenvs/acceed-shop/lib/python3.5/site-packages/shop/models/fields.py", line 20, in <module>
    if (psycopg2_version[0]) >= (2, 5, 4) and (postgres_version >= (9, 4)):
TypeError: unorderable types: int() >= tuple()
(acceed-shop) rene@rex ~/projekte/acceed2 (master) $ 
```
Looks like the above problem is limited to Python 3. @khchine5, can you test your changes on Python 3 and make them compatible?

Bonus points if you also provide a testcase that fails on Python 3 ;)
Hi all,
Sorry , I was busy last week.
Thanks @jrief .
Okay @rfleschenberg . It seems that you have already fixed the above problem. But I got an other problem with Python3 which it is not related to this merge but with PolymorphicManager. I will work in the bonus points ;)
Thanks, that would be great!
@rfleschenberg , What you meant by making testcases which fails with Python3 . I don't see the point.
It would be good to have test coverage for this code, so we get alerted if something breaks on Python 3 before a user hits it. But I will do this as part of the Postgres tests -- never mind. Thanks!
What is the meaning of `FALG` here?
Ah , I am sorry.It is a misspelled variable.
Fixed.
This looks like it checks the psycopg version, not the version of Postgres itself. Or are these two somehow related?
Yes. Actually the new jsonfield shipped with django required postgres >=
9.4 and psycopy2 >= 2.5.4 .since I haven't found a way to check
postgresql's version ,I plan to add it in the documentation.
https://docs.djangoproject.com/en/1.10/ref/contrib/postgres/fields/#jsonfield

On Sep 6, 2016 7:21 PM, "René Fleschenberg" notifications@github.com
wrote:

> In shop/models/fields.py
> https://github.com/awesto/django-shop/pull/399#discussion_r77690593:
> 
> > @@ -12,6 +12,8 @@
> >      import psycopg2
> > 
> > ```
> >  version = re.search('([0-9.]+)', psycopg2.__version__ or "0").group(0)
> > ```
> > -    # To be able to use the Django version of JSONField, it requires to have PostgreSQL ≥ 9.4 , otherwise some issues
> > -    #  could be faced.
> >    if POSTGRES_FLAG and (LooseVersion(version) >= LooseVersion('2.5.4')):
> 
> This looks like it checks the psycopg version, not the version of Postgres
> itself. Or are these two somehow related?
> 
> —
> You are receiving this because you were mentioned.
> Reply to this email directly, view it on GitHub
> https://github.com/awesto/django-shop/pull/399/files/19dc04eb48a9484540298aa9a15fca016486921b..57fc812d5cb3e8d08d24a9f2c54954b8c7a0b8f7#r77690593,
> or mute the thread
> https://github.com/notifications/unsubscribe-auth/ADTfRYEdSVA_s-nstRI9wWvrxRpXU0NZks5qna80gaJpZM4Ju_OR
> .
I would not use a flag here, evaluating for the vendor string is enough
```
psycopg2.__version__.split('.')
```

is a better way to check for versions
Never ever run shell command from within Django. This is very unportable and dangerous.
A better way to achieve this is to use raw SQL:

```
with connection.cursor() as cursor:
    cursor.execute("SELECT version()")
    row = cursor.fetchone()
```

`row` then contains the version you can further process.
Since we want to transparently wrap that field, I would overwrite its classname, ie.

```
class JSONField(JSONField):
    ...
```
since you set the default value, you must also override the method `deconstruct`, otherwise we get problems when loading fixtures. This is explained here: https://docs.djangoproject.com/en/1.10/howto/custom-model-fields/#field-deconstruction
Yes.
Using 'get_tuple_version()' from shop.apps could be a good option.
Yes. I thought I may need it later but I was wrong.
Yes.
Looks good. Thanks!
We need to fix the tests. Shouldn't be too hard (famout last words). I'm putting it on my todo list.
See #416
The problem I see with this PR right now are multi-DB setups where the default DB is Postgres and a JSONFIeld is used in a model on a non-default DB that is not Postgres.

However, I think we can merge this, since it is still much better than the current situation.
Thanks!
There is a warning from Sphinx, can you fix it?

```
Warning, treated as error:
/home/travis/build/awesto/django-shop/docs/changelog.rst:14: WARNING: Bullet list ends without a blank line; unexpected unindent.
```
Gave it a quick review, looks good to me, I especially like the cleanups!
If we change "location" to "city" here, we should also change it a few lines above ("contain the fields zip_code and location as shown").
it had to be changed, since that field was renamed in `shop.models.defaults.AddressModelMixin`.
Ahh, I got confused. I thought this was a change in the docs.
Hey @maltitco , thanks for the PR. Can you fix the merge conflict and update the PR?
Please discard my PR. I'll have to prepare a translation based on the current English version.
Thanks!
Please don't merge this.
A cart object can not exists without a user object, therefore, if we reach that point something else went wrong. Can you please provide steps on how to reproduce it.
To reproduce:
- Open a new / private browsing session
- Go to `/shop/api/checkout/purchase/` in the DRF browseable API
- Hit "POST"
Thanks for the feedback. The problem, as far as I understand, is that the cart has not been saved yet at that point (neither has the user), and `CheckoutViewSet.purchase()` then calls `.save()` on the unsaved cart attached to the unsaved user.

Maybe the better fix would be to modify this check:

```
if cart is None:
    raise ValidationError("Can not purchase without a cart")
```

To check for `cart.pk` instead?
Changing `if cart is None` to `if not cart.pk` should fix it.
Probably in former versions `self.get_queryset()` returned None, but now returns an empty unsaved cart, which is not allowed for a purchase.
@jrief PR updated.
Closes #443.
Do we have to call `set()` here? Are we afraid that the parent class may return duplicate field names? Or is this just for the convenience of being able to call `update()`?
I think we should avoid `issubclass()` and such whenever possible, so we don't break duck-typing. Can we replace this with an attribute test, maybe?
Yes, it's only purpose is to avoid duplicates.
I'm wondering, why DRF doesn't do this itself. Django provides a `get_FOO_display()` method for every field with choices. And DRF converts these fields into a `serializers.ChoiceField` without taking advantage of that method. Therefore IMHO that's a safe use-case.
It would be good to be a bit more specific here: What exactly do I have to do if I am not using the default customer model?
Is there a reason why we want this specifically on the CustomerSerializer and not on other serializers?

Or do we only want this for the 'salutation' field?

Would a custom Field class be better, maybe?
:+1:
We should also add this to `docs/upgrading.rst`.
All REST serializers are written in a way to handle different model implementations.
Therefore fields like `salutation` shall "appear" automatically, whenever their model implements them. Unfortunately, calling the `get_FOO_display()` method for choice fields must be implemented by hand.
Looks good, I'm merging this. Thank you, @dinoperovic!
I'm ok with merging this, but it seems to include a lot more changes than mentioned in the description. Is that on purpose?
Ah, I think this is because it also includes #451?
Please don't merge this. I'll create a smaller patch with this specific problem.
Obsoleted by #463.
I merged this in PR #460. Thanks! Can you please test the updated master branch to check if the translations are OK?
Yes, I'll do tests and let you know how to come out.
Thanks, @maltitco!
Looks good to me. Just one tiny correction in that docstring.

I think we can come up with a better English term than "recognized", but let's merge this, we can improve that later.
Lowercase (Customer's -> customer's)
I like the new variable name.
Looks good overall. The django-treebeard version pin is the only real problem I see.
Not sure I agree with that (see my general comment). Technically, we still have a Django view, and the serializer's job is to perform serialization / deserialization. But I also think our documentation should not get too much into philosophical discussions of MVC :)
Not sure if we should call this "tight coupling". Suggestion: Delete the sentence "Model serializers reflect their content and hence are tightly coupled with them.", keep the rest.
:+1:
Please don't pin to a branch. If we cannot pin to a PyPI release, we should pin to an exact commit.
Is there a simple way to implement the registry without using a metaclass?
The I'd write this as
```
backend = CMSPagesFilterBackend()
queryset = backend.filter_queryset(self.request, self.get_queryset(), self)
```
Thanks for the PR! I don't speak Russian, but from a technical point of view, this looks fine.
Closing because we merged #472.
Thank's for adding me as contributor!
Looks good to me, I suggest we merge this.
This will treat the customer as not expired if the decoding fails. Would it maybe be safer to consider them as expired (thinking of security here)?
Suggestion: log a warning if this happens.
Yes, I like this.

However the unit tests don't pass because it seems as if you import the ``ProductSitemap `` from the wrong file.
I tested by hand - it work. But I can't to reproduce the error locally. Instead of I have a ploblem: I ran test command: `py.test tests/test_money.py` and I get fails:
```
-------------- MoneySerializerTests.test_rest ---------------
Traceback (most recent call last):
  File "/home/vivazzi/projects/OTHERS/django-shop/example/tests/test_money.py", line 261, in test_rest
    self.assertDictEqual({'amount': '€ 1.23'}, serializer.data)
  File "/usr/lib/python2.7/unittest/case.py", line 835, in assertDictEqual
    self.fail(self._formatMessage(msg, standardMsg))
  File "/usr/lib/python2.7/unittest/case.py", line 410, in fail
    raise self.failureException(msg)
AssertionError: {u'amount': u'\u20ac 1.23'} != {'amount': u'\u20ac 1,23'}
- {u'amount': u'\u20ac 1.23'}
?  -                    ^

+ {'amount': u'\u20ac 1,23'}
?                      ^
```
It seems I found bug.. Please one moment..
Okey - Tests is passed!

I accidentally moved sitemap.py to parent folder, but .pyc (sitemap.pyc) remained. Howbeit, locally tests did not pass. I get error:
```
AssertionError: {u'amount': u'\u20ac 1.23'} != {'amount': u'\u20ac 1,23'}
- {u'amount': u'\u20ac 1.23'}
?  -                    ^

+ {'amount': u'\u20ac 1,23'}
?                      ^
```

@jrief , do you know what's the metter?
@vivazzi seems to be related to the current local settings. In your locale, do you use a ``.`` or a ``,`` as decimal separator?

Presumable you can fix this using https://docs.djangoproject.com/en/1.10/topics/testing/tools/#overriding-settings
Very well noticed, thanks!

Just for curiosity, does your project code invoke that method directly? I reviewed my projects, and there this method is invoked exclusively by ``Cart.get_or_create_from_request()``, hence I never encountered the problem of having different Users/Customers for the same session key.
@rfleschenberg could you also review and then merge this?
@rfleschenberg Should I simply change the comment to `create or get a previously created inactive intermediate user...`, because getting the user (and customer) would still return the mentioned intermediate user. Moving the comment might leave questions what the get returns?

@jrief Yes, I call that directly in my allauth adapter for returning a new user:
```python
class CustomerAccountAdapter(DefaultAccountAdapter):

    def new_user(self, request):
        customer = models.Customer.objects.get_or_create_from_request(request)

        user = customer.user
        user.is_active = True

        return user
```
@rubengrill Sounds good.

I wonder about the `active` flag. Is it guarantueed to be `False` for existing users? Or should we maybe limit the query to users with `active == False`? Not sure, I'd have to dig into the code more. But it's not central to this PR.
@rfleschenberg Good point, I could imagine that this might be too restrictive in case a customer gets converted:

```python
request.customer = Customer.objects.get_or_create_from_request(request)

# Later e.g. in a register form
request.customer.recognize_as_registered()
request.customer.user.is_active = True
request.customer.user.save()
login(request, request.customer.user)

# Later e.g. in a login signal handler
customer = Customer.objects.get_or_create_from_request(request)
```

Maybe its safe enough to rely on the fact that the username is the session key and if that user exists, it most probably exists because it was created in this method.

Edit:
On the other hand, then the user would be authenticated, and it would just return the authenticated user's customer...
Thanks!
Looks good to me, no objections against merging this. Very nice that it comes with tests!

Just one minor thing:

```python
            # create an inactive intermediate user, which later can declare himself as
            # guest, or register as a valid Django user
            try:
                user = get_user_model().objects.get(username=username)
            except get_user_model().DoesNotExist:
                user = get_user_model().objects.create_user(username)
                user.is_active = False
                user.save()
```
I'd move the comment inside the `except` block, since it contradicts the logic of the `try` block.
yes, seems to make sense
Gave it a quick review, didn't test it thoroughly. Looks good to me.
Just my 2 cents: ``shop_settings`` has been renamed to ``app_settings``, but what should be do with other apps using this pattern. One app which come to my mind immediately is djangocms-cascade, where an ``AppSettings `` would make a lot of sense too. We then have a naming conflict. Wouldn't it be better to us the name, say ``ShopSettings``?
Yes thats a good point. I tried to follow the naming convention of allauth, where there is both `allauth.account.app_settings` and `allauth.socialaccount.app_settings`.

It works as long as the apps are (almost) independent of each other, so that within one app only the settings of this app are used or if required the settings have to be renamed:

```
# in cascade
from cascade import app_settings
from shop import app_settings as shop_settings
```

If this convention is followed in more apps, it might be more easy for developers to find the settings because they simply have to search for a file called `app_settings`

But I really wouldn't have a problem with renaming that to `ShopSettings`.
@rubengrill yes, now I've seen that. So, in order to be compliant with other apps, we should stick on app_settings.
Can you add a small comment about the import thing for non-Dutch people? ;) Just the link would be fine with me. Then we should merge this, IMO.
At first glance, it's not obvious to me what this code does. Can you explain this in a few sentences?
Yes, I shamelessly copied that from allauth, they also point to a documentation there, maybe I should just add this comment as well:
```
# Ugly? Guido recommends this himself ...
# http://mail.python.org/pipermail/python-ideas/2012-May/014969.html
```

What is does, is basically to change the export value of a module.
So that a `from shop import app_settings` resolves to an instance of `AppSettings`.

Important sentence in the link:
```
This works because the import machinery is actively enabling this
hack, and as its final step pulls the actual module out of
sys.modules, after loading it. (This is no accident. The hack was
proposed long ago and we decided we liked enough to support it in the
import machinery.)
```
interesting approach!
Some kind of comment would be nice, just so people reading the code know where to go for information. We should probably add it both to `settings.py` and `app_settings.py`.

That's the only complaint I can find, otherwise this looks very good to me.
I am not very familiar with the deferred code, but this looks good to me.
The deferred module has now 100% test coverage.
This PR can be reviewed again.
This pull request is huge and I don't fully understand all of it's motivation.
Could we maybe chat about some of the changes, so that I understand their intention.
`type()` expects a `str` as first argument on Python 3. Suggested solution: drop the `unicode_literals` import for this module.
please do not drop ``from __future__ import unicode_literals ``
Instead use  ``Meta = type(str('Meta'), (), meta)``
or even better, create
```
def create_regular_class(name, fields={}, meta={}):
    class Meta:
        meta = ...
```
and use that
So please don't focus on the dependency stuff, but rather on the refactoring.
Did manage to review only this commit yet.
Do we still need this? I'd prefer not to have the master branch depend on a private fork.
Same question as with django-cms. If we need this state of djangoshop-stripe, we should release it on PyPI first.
Dito :)
I'm not sure if the default serializers are a good choice.
When developers decide to choose the default models, they have to do that explicitly by importing the default models into their models module. So should they do with serializers.
If developers decide to stick with the minimal working models in the beginning, then also the serializers should be the minimal working ones.

I guess it would be ok to state this in a documentation like `You can start with default models to get a running shop quickly. For this, import the default models and the default serializers`.
Is this restriction required? Should we allow developers to completely replace a serializer if they want?
Or are there some places in code that make some `isinstance` checks that I'm not aware of?
(Would also affect other serializers)
Is this worth a separate github issue to make this serializer also optional? 
I like the idea to get started with a running shop by just importing the models (and then start implementing things step by step). Would be a nice experience for developers trying django-shop the first time.
Does not exist (yet?)
Should this file be called `base.py` (seems a convention in django, e.g. `django.db.models.base`)?
I commented before, that using the default customer serializer might be a bad idea, we could just use this serializer then, and then rename it to just `CustomerSerializer`?
(Same would apply to other base serializers then)
Here we have a separate module for the cart serializers, should we also put CustomerSerializer in a `serializers.customer` module?
That's the problem I reported two weeks ag: https://github.com/divio/django-cms/pull/5809
Fortunately now it seems, as if the rejection of this patch is withdrawn, status was changed into "needs design decision".

Therefore this pull request shall be considered as step to the next release, presumably 0.10.
Nevertheless, it should become the master branch on which we can work upon.
sure, but then I would publish a release which does not work with the current version of django-SHOP.
Dito
Does not exist (yet?)
Pull Request for version 0.10.0
Changes are documented in docs/changelog.rst
I fully agree on that!

It happened, because django-SHOP-0.10 was co-developed with djangocms-cascade-0.12, which circumvented incompatible API changes in django-CMS-3.4.
Let's merge this so we have an up-to-date master. In the future, we should do smaller pull requests, one per feature / bug.
As a user, it is sometimes not easy to see which items in the changelog are internal implementation details and which are public API changes. I suggest we document API changes separately in upgrading.rst, with instructions on how users should update their projects.
Here ``BaseProductDetailSerializer`` and ``BaseProductSummarySerializer`` shall be used by merchant's implementing their own versions of product serializers. Hence its public.
``enum34==1.1.6`` is part of ``requirements/py2.txt``
@solvire If you still encounter this problem, please show us the exact commands you are running and the full output. I suspect you were using the wrong requirements file?
@jrief got it right. I was using the wrong requirements. Totally my bad. I would suggest some notes in the documentation but otherwise we are good. 
Thanks for the fast responses!
Thanks for the PR!

Does this turn the request into a GET request?

Can you explain your reason for doing it this way, rather than fixing the server side?

Thanks!
The request method, in this case PUT or DELETE, used to be specified using an extension header, but support for this header was removed in DRF v3.3.0. For examples of this, see the functions `updateCartItem`, `deleteCartItem`, and `watchCartItem` in cart.js. This change simply sends the request of the desired type directly, instead of always sending a POST with work-around header.

> Can you explain your reason for doing it this way, rather than fixing the server side?

There is nothing on the server side to be changed. This is strictly a client-side issue.

Thanks! Let me know if you have any other questions.
@amadornimbis as I remember, this change in DRF caused some trouble in combination with AngularJS. While I am generally in favor of eliminating such kind of hacks, in this case I'd like to stay with it.
There are so many improperly configured proxies out there, whose administrators believe that PUT or DELETE requests are malicious by nature, and hence block them.

Other than communicating using the proper methods, what are the benefits for your PR?
> Other than communicating using the proper methods, what are the benefits for your PR?

Mainly, being able to upgrade Django Rest Framework beyond v3.2.5 which is about 15 months old at this point. As long as the `X-HTTP-Method-Override` header is being used in cart.js, then DRF can't be upgraded because much of the functionality in this file won't work with more recent versions of DRF.
We already ship the necessary middleware with django-shop to work around this problem on the server side.

It's documented here: http://django-shop.readthedocs.io/en/latest/reference/configuration.html?highlight=override#middleware-classes

The code is here: https://github.com/awesto/django-shop/blob/master/shop/middleware.py#L41-L54

If you are using this middleware as documented and still running into problems, this would be a different issue, in that case I'd be interested in hearing more details.

Personally, I'm fine with merging your PR, but then we should maybe also update the docs to tell people that this middleware is now optional and only required if they need to support broken clients or proxies.
I'm currently using DRF 3.5.3 for most of my django-shop projects, and it works fine.
> We already ship the necessary middleware with django-shop to work around this problem on the server side.

@rfleschenberg Thank you for pointing me to this! I have verified that using this middleware allows `djangorestframework>=3.3.0` to work without problems. I could add a note to the docs mentioning that this middleware is required if you are using DRF v3.3.0 or later if you would like. Let me know and I'll open a separate PR.
@amadornimbis Yes, such a PR would be good. We should definitely mention this explicitly in the docs, good point!
closing, because everything has already been added to version 0.10
no idea why this slipped in
Upgrade to 0.10
Could you explain what makes a file compressible or uncompressible please?
I've deployed my site with django-compressor but Google pagespeed tells me:

> Possible Optimizations
> Enable compression
> Compressing resources with gzip or deflate can reduce the number of bytes sent over the network.
> Enable compression for the following resources to reduce their transfer size by 526.3KiB (76% reduction).
> Compressing http://www.domain.co.uk/static/CACHE/css/ae62338a56bc.css could save 281.4KiB (84% reduction).
> Compressing http://www.domain.co.uk/static/CACHE/js/a954bed725a0.js could save 244.9KiB (69% reduction).
Files below ``static/...`` are compressible, files loaded externally or via MEDIA_ROOT are not.
For anyone else puzzled by this, you need to enable gzip compression on the server, i.e. apache, nginx, etc.
In nginx that is:
`gzip_static on;`
And don't forget:
`COMPRESS_STORAGE = 'compressor.storage.GzipCompressorFileStorage'`
Looks good overall, ok to merge -- but maybe do the TODO item first?
Should we do this before merging?
No review required. This is a simple parameter change.
LGTM.
I'll merge this, doesn't require review IMHO, and I need it ;)
I think we need to document this a bit more clearly in the upgrading section. Users will also have to modify their project's code to work with the new version. Let's write two or three sentences so they know what to look out for. If I understand correctly, any access of `.extra.product_code` on cart items has to be replaced with `.product_code`.
Can we provide a `backwards()` function?
Looks good to me -- what was the exception?
@rfleschenberg 
``self.get_exception_template(response)`` returned a template which could not be rendered by ``template_context.update(context)``. Now I'm using a compatibility layer, ie. ``template_render(template, template_context, request=request)``
Before this fix slipped into the wrong branch, hence the "revert".
It was reviewed by @vivazzi and it fixes #494
It would be good to test this change on one or two real projects. I will try to do this as soon as I have the time.
must merge immediately to fix other unit tests
Overall, it looks good to me. Some minor English corrections, and I think we should reconsider the `get_availability()` API.
"notation" is not the right word here. Maybe just "a list of two-tuples"?
"its geo-location" -> "their geo-location"
This API might be a problem, because `True == 1`. Should we use another value to mean "infinitely many"? What about `None` or `-1`? Or maybe we can just define a new singleton for this?
"whatever can be determined using the request object" -> "anything else that depends on the request"
"Hook to check if the current product is already in the given cart. If so, it returns the corresponding `CartItem`".
I'd rather prefer to do the ordering based on the order in which products have been added to the cart. Here we would have to extend ``BaseCartItem`` and add a timestamp or an ordering field.

Alternatively you can do that in your merchant's implementation. Use a ``Meta`` class with ``ordering = (...)``.

What do you think?
sorry, the ``id`` on a cart item is a sequence, hence sequential by default.
yes, this PR fixes #539 and #537
this will trigger the 0.10.1 release
Let's merge.
What is the reason for wrapping `data` in `dict()` here?
``self.get_template_context`` conditionally returns a reference on data, hence we would modify ``data`` by modifying the ``template_context``, unless we create a copy of data.
Is this related to the topic of this PR, or is this a separate issue?
Could you please explain how to reproduce this. I was convinced that the code already handled all these use cases :(
This change is more or less unrelated. If a field is empty in one address but not in another, we should treat these as two different addresses.
Removing the ``and val`` introduced a regression.
Please go to the demo and enter an a new shipping address.
Since the address form is uploaded twice (the first time to determine context for shipping costs, and the second time to proceed), without the ``and val`` we would add the address twice.

Therefore I'll re-add it.
Alright, then we need to come up with a better fix for this. Think of this case, for example:

```
Musterfirma
Zu Hd. Herrn Hans Müller - persönlich, vertraulich!
Musterstr. 1
12345 Musterstadt
```

```
Musterfirma

Musterstr. 1
12345 Musterstadt
```

Because of the `and val`, we treat these as the same address, which is obviously not correct. I can also smell problems if the address exists with and without VAT ID, for example. That is where I ran into the problem. Unfortunately, creating a minimal reproducible case is a bit of work (my project is very different from the example project). I need to see when I find the time for it.
Tests fail on Django 1.9. Do we still support Django 1.9, or can we ignore these failures?
this validator is not working on Django-1.9, hence be prepared for it.
my bad, did not test locally with Django-1.9
Let's merge if travis is green.
Thanks!
in my opinion it would be cleaner if we would test against
```
from shop.models.order import BaseOrder

if not isinstance(instance, BaseOrder):
    ...
```

what do you think?

Presumably the cleanest solution would be to implement ``__isinstancecheck__`` on ``OrderModel``, so that ``isinstance(instance, OrderModel)`` can be used on a lazy object. Unfortunately my last attempt to do so was without any luck.
Yup. As long as we officially require that the order model is subclassed from `BaseOrder` (which we do per the current docs), `isinstance(instance, BaseOrder)` appears fine to me.

In general, I consider `isinstance()` a code smell. My idea for the "proper" way to fix this problem is to use a dedicated signal instead of relying on `post_transition`, that's why I didn't file the PR earlier. But since we have users running into this bug right now, fixing it quickly appears more important than fixing it properly :) We can still develop the "proper" fix later.
LGTM
since it is a hotfix, I'll merge without review
I believe this fix is broken / introduces a bug. If a value is empty in one address, but not in another address, these are two different addresses.
I wouldn't mind considering such two similar addresses as equal.

But removing the ``and val`` caused a much more severe problem. Please run the reference implementation and *Add a new shipping address* on top of an existing one. This creates two identical addresses which in my opinion is far worse.
Let's keep the discussion about this in one place, I suggest on #544 :)
Renamed ``TestMoneySerializer `` -> ``MoneyTestSerializer`` because otherwise **py.test** sees it as test case, not as a serializer.
Looks very good to me.
Before there have been too many `` – `` between the address fragments.

For readability, I also refactored the list comprehension against a classic approach
:+1: This is much more readable indeed.
please wait before merging this as it breaks the API
@maltitco after thinking about this feature for a while, I came to the conclusion that it breaks the atomic behaviour of the Cart -> Order transaction.

If your PSP absolutely requires an order number before creating the `Order`object, then I would create a unique number and store it within the `Cart` object. Only if the payment is successful, I would reuse that number and copy it the the ``Order.number`` field.

I will therefore discard this pull request. Thanks anyway for pointing me on this problem.
@jrief Order number is essential not only for the current PSP. I checked the documentation of other Polish PSP and it is similar. 

In that case, I'm waiting for your change in code to test it.
@maltitco 
What about using the PK of the `Cart` instance when proceeding to the payment of your PSP?
Whenever the payment was successful, you can still assign a new number to the `Order` instance.
The value I give to PSP as order number must be unique and it's so much essence because it helps to check the current payment status in the PSP panel. However, this should be the order number. The PSP registers the order number and returns a token for further authorization (to check current payment status).

No matter what the payment status is (Declined, Pending, Approved), the order must be created in the store because it will make a product reservation for the customer.
@maltitco just discussed this issue with @rfleschenberg 
Good news for you: I will merge this PR into django-SHOP 0.10 or 1.0, since it breaks the current API.
This also means, that I have to fix the third party payment modules.
@jrief Nice to hear it.
The solution has been tested and is fully functional
Looks good, thank you. It would be great to have a regression test for this.
I have not tested it, but it looks good to me.
This means that the behaviour of this renderer deviates considerably from standard DRF behaviour, so templates written for the DRF `TemplateHTMLRenderer` will be incompatible with `ShopTemplateHTMLRenderer`.

Can we keep the standard DRF behaviour of putting the serialized data into the template context and just add the cart and the paginator in addition? If we chose to do this, we should of course also update `CMSPageRenderer` and our templates, so it would be a major change.

Or can we maybe even just use a context processor instead of a custom renderer?
Each DRF Renderer class has a method named ``get_template_names``, hence it is perfectly possible, maybe even intended to created hybrid templates, such as required for Django-CMS page view or other Django Views.

If we merge the serialized context on the root level of the scope, we pollute the root scope and definitely risk to overwrite important attributes.

Currently templates for the ``ShopTemplateHTMLRenderer `` are compatible with the ``CMSPageRenderer `` which has proven to be mature and is being used for almost two years now.

Context processors are applied globally, so I don't see any benefit (unless I see a proposal on how they would improve compatibility).

Again, all HTML templates for django-SHOP are intended to be rendered by one of those two renderers ``CMSPageRenderer `` and ``ShopTemplateHTMLRenderer ``. If such a use pattern is inappropriate, please point me onto the documentation stating so.
We have to judge wether it is more important to avoid potential name collisions or to keep the behaviour closer to DRF.
It's not only about name collisions.
Django-CMS requires a few context variables on the global scope level, for instance the ``current_page``, the ``cms_menu_renderer``, the ``request`` object and many more. All these objects are pure Python instances. On the other side, data provided by the serializers are always dicts or lists of number or string primitives.
Therefore mixing these two sets of information would not only be dangerous, but inherently confusing. Therefore in my opinion having a dedicated dictionary of serialized data, is a much cleaner and safer solution.

Moreover, templates used for a mixed representation of CMS content and content emerging from REST serializers, *must* be written for the CMS specifically. Such templates normally contain tags such as ``{% render_menu %}``, ``{% cms_toolbar %}``, ``{% render_placeholder %}``, etc.

Therefore, these kind of templates will *always* be incompatible with templates used to render pure serialized data.
LGTM
The changes to the changelog describe changes that seem unrelated to this PR, I guess this is intentional?
:+1:
Please consider that ``empty`` is a special DRF type and has not ``.get()`` method, hence the tests fail.
Sorry yes I forgot to run the tests.. now fixed
this PR would break the compatibility layer with Python-2.7, therefore I will not merge it.
Just one question: What about shops that already have migration `0007_notification` applied? Is there anything we need to consider in that area to ensure data consistency?

Other than that, looks good to me.
Yes, absolutely! Money of type NaN is considered valueless and is rendered as € —. Hence falsely is correct here.
Ok. Let's hope that we don't run into any nasty surprises with Django or such :)
This is inconsistent with the behaviour of `Decimal`:

```
>>> bool(Decimal('nan'))
True
```

Do you think it's a good idea nonetheless?
I prefer to have the closing `]` on an extra line here.
fixed
I took a look at this and did not see any obvious problems with the code. However, the changes are quite big, and I don't have the time to thoroughly test them at the moment.

One thing I noticed is the absence of any docs changes. Is this backwards-compatible with deployed shops?
Typo: inherits -> inherit.
Remove the comma after "extensions".
We should also add a note to `upgrading.rst`, telling people they may need to modify customized templates. Other than that, looks fine to me.
Hi Nicolas,
I'm going to revert this pull-request because it introduces a regression when importing fixtures.

If you fixed it, please retry to import one of the provided fixtures, for instance by invoking

```
cd example
./manage.py loaddata ../workdir/i18n_polymorphic/fixtures/myshop.json
```

or, if that is not available, use

```
cd example
./manage.py initialize_shop_demo
```

Sorry for that, but I currently can't test this, because I did not migrate to Python-3.6 yet.
For better readability, I would prefer to use ``six.with_metaclass`` as a compatibility layer, or is there any special reason not to use it?
By using six as this issue #501, there is this error:
  File "/home/np/sources/Tutorial/shoptutorial/lib/python3.6/enum.py", line 135, in __new__
    enum_members = {k: classdict[k] for k in classdict._member_names}
AttributeError: 'dict' object has no attribute '_member_names'
Thanks. In the meantime I've released django-angular 2.0 which is required for SHOP 0.12.
Great information for mee, as soon as will be released 0.12 I'm going to get my first django-shop project.
django-SHOP 0.12 review version tested - not found any issues
This is the final PR for release 0.12
It has been tested with Python-3.6 and Django-1.11.7
Hi Nicolas,
finally I found a solution for this problem which works on Python 2.7, 3.4, 3.5 and 3.6
Changes: https://github.com/awesto/django-shop/commit/c4f970aabeaa2a4ee1bfcf31441b13e2812436ed

It's currently part of the 0.12 branch, but if you need Python 3.6 on version 0.11.2, it could easily be backported.

Please retry...
temporarily dropping support for Python-3.6 because it introduced a regression when loading fixtures
> With the latest version of six it works. :)

if all problems could be solved that simple, grrr!
Great to hear it's used in Sweden!
Does this still happen?
I thought it has been fixed by [this patch](https://github.com/awesto/django-shop/commit/e04f8d3f74c69446d2fda92ea3ee8dad26fdcf98).
Is this applied in your code base?
@jrief this patch doesn't prevent it.
 `instance.left_extension` returns None, so when you pass None to render_plugin, it crashes.
Thanks!
Ok, never thought about this limitation.
It is an optional requirement, since some may want to index their pages using another search engine.
Therefore I would like to leave it in the project's requirements (merchant implementation), rather than in the app requirements.
Event `django-filter` is optional, and only required if someone wants to filter his products according to given criteria.
Therefore we could add optional requirements to `extras_require = {...}` in the setup.py.

I'd really like to keep the mandatory list of requirements as short as possible.
Pull request for django-SHOP 0.11.4
Thanks! I think this needs some adjustments. I'll look into it as soon as I have some time.
I think virtualenv should be removed from this list too.
I just did pip freeze to file. Should I add only required packages?
@jainaman224 I was under the impression that the file is a list of a setup that is proven to be stable. I would personally only have a list of the packages that are 100% required rather than a list of someones current setup. @jrief will define how this file should be managed.
We should not add this line: https://github.com/awesto/django-shop/pull/714/files#diff-b80ca39e5ba09203c741fcc8e103bd16R31

We should also not add anything that is included by other files in the `requirements` directory, for example here: https://github.com/awesto/django-shop/blob/master/requirements/django110.txt
To clarify my earlier comment: Yes, please add only packages that are required.
Are these two packages required to run the shop, or are they only required to run the tests? Beautifulsoup is also included in https://github.com/awesto/django-shop/blob/master/requirements/test.txt
Django is included in the more specific files (e.g. `django110.txt`) and should not be included here.
Same as for Django.
Delete this line.
Thanks!
Merci!
for type safety reasons I would convert this explicitly to a string.
It's great news to hear that Cascade and Shop work well together with django-CMS >=3.5!
Thanks for testing!  I had no time yet.
Just a little up to say that djangocms-text-ckeditor==3.5.3 work for  'django-cms>=3.3.0' [/djangocms-text-ckeditor/setup.py#L8]( https://github.com/divio/djangocms-text-ckeditor/blob/d398fa0bbf823b8738ee909f2ede811869ca2747/setup.py#L8)
This is part of branch `drafts/cms-3.5`, so I'm going to close this in favor of the other one.
you should create your pull request against `releases/0.16.x` since all new feature should go there.
@haricot I assume this is WiP and you will add more to it before asking for a review.
Hello @jrief,

Can you do a review of this? Please.

it lacks fixtures for django-cms 3.5, I will have it well generate but it is external to the git. Also I tried to deactivate stripe but it turns in migrations external to the git.

Everything works like django-cms 3.4, apart from the bug that I mentioned, (the need to edit the container and save it to be able to edit child plugins when you edit a page with the apphook Catalog List) [djangocms-cascade#290]( https://github.com/jrief/djangocms-cascade/issues/290)
related #718 #720 #726
@haricot I will merge if you say so
@jrief I think it would take a new version for djangocms-cascade and djangocms-bootstrap3 because of issued https://github.com/jrief/djangocms-cascade/pull/291 https://github.com/jrief/djangocms-bootstrap3/pull/5
@haricot Today I finally found some time to test the demo shop with Django-CMS-3.5. Many thanks for your pull request in djangocms-bootstrap3. This was a tricky one :).
In django-SHOP, the only issue I encountered up to now, was in `CMSPageReferenceMixin.get_absolute_url()` for `self.cms_pages.order_by('depth')`.
I have seen that you fixed this already in this WiP pull request.

I haven't found any other issues. Since I'm still unsure if this pull request shall be merged, or if it still is WiP, please keep me up-to-date. I would really like to migrate towards CMS-3.5, it feels much better than 3.4.
@jrief  Do you want to delete support for Django-CMS-3.4 for the next version?
In any case, it will require new fixture for CMS-3.5 with a new name .zip

There have been changes for the test too, the most complex for me was `reload_urlconf (urlconf = settings.ROOT_URLCONF)` which is necessary for CMS-3.5, it could have been done more finely maybe.
I understand that this WIP is quite a jumble, there is too much commit for not much.
So I will understand that it is made a cleaner pull-request.
> In any case, it will require new fixture for CMS-3.5 with a new name .zip

That's not a problem, the fixtures are versioned.

If you think, that it's not possible/too messy to have one version which supports both, 3.4 and 3.5, I will do so. Generally, I prefer to have compatible layers to allow smooth migrations.
with cms34:
```
>>>response = client.get(smartcards_page.get_absolute_url())
Application url changed and urls_need_reloading signal fired. Please reload the urls.py or restart the server.
```

with cms35:
it does not have this red message, but the url must be restarted otherwise it does not find the url of the products

does this imply that there would be a problem with the signal ApphookReloadMiddleware?
I tried this im my local development system, but it didn't work as expected. Does it work for you, then I'll merge it.
👍 nice feature, always wanted to implement something like this myself!
closed in flavor #797
Oops! it's not ready for PR. I wanted to do a diff on the fork
sync master
Ups....
Since I want to migrate to Cookiecutter using Pipenv, my demo merchant implementation is this one: https://github.com/jrief/my-shop
My intention is to remove the example folder from django-SHOP in favor of the cookiecutter template. This would create a much more maintainable starting project.
Therefore, if you want to help me, it would be a great to patch the cookiecutter template using the changes I made in my-shop.
That's what it seemed to me. I understand that it's clearer now, it will be better.
Thanks.
Haven't been aware of django-smuggler yet.
However, why does this raise an error?
If you call templatetag `page_url 'shop-cart' as shop_cart_url` this shouldn't raise an error, if that page-id doesn't exist.
This happens when we are in debug mode, 

https://github.com/divio/django-cms/blob/1c6d9e05279b067e3c8233f01fe78b9900f6ab7e/cms/templatetags/cms_tags.py#L96
I close no longer need, everything works.
Thanks @jrief !
Thanks for this pull request.
I'll have to check this and look for the reason why I `extend`-ed the list rather than just assigning to it. Your solution seems simpler indeed.
Thanks
🙏
Closed in flavor of better approach.
Thanks! Seems that I missed that pull request.
I renamed that, because until version 1.1 the merchant had to inherit from it, for his own implementation. In version 1.2 it now works just out of the box.
Thanks!
In https://github.com/awesto/django-shop/blob/master/setup.py 'django-ipware', but in  https://github.com/awesto/django-shop/blob/master/tests/requirements.txt  django-ipware==2.1.0

with ipware > 2.1.0 have an error.
Thanks. The next time please also provide a line or two for the Changelog file.
Ok, just my first bug fix in opensource product. Ty.
hmm... looks like this fix isn't included yet into official installation model (https://django-shop.readthedocs.io/en/1.2.2/tutorial/intro.html)
You changes have been released in version 1.2.3. Thanks again.
Vielen Dank!
Thanks.

I didn't know that `html+django` is a valid code-block. Where is this documented?
@jrief search for it at https://github.com/github/linguist/blob/master/vendor/README.md
I'm currently refactoring django_SHOP towards using an ES model shaped according to the model. This will allow to search by tag or other attributes and will make faceted search easier to configure.

However, currently that WiP stalled, because of other more important issues.
Thanks for merging. Looking forward to this, because currently, my client has not been that happy with searhing. I tried to make it better by increasing what to index, but using N-gram for tokenizing will help me alot, so I'll use that from now until your changes are released 👍
I'll check everything thoroughly this week
Спасибо!
Your pull request is merged into version 1.2.4
Спасибо!
Great looking app btw!
Fair point! And cheers!
Thanks, merged.
This looks awesome Josh, cheers - limiting num. requests intercepted is a great shout and really like the idea of integrating cProfile.

I'll merge this all in tommorow and will fix the broken build - think it's the usual python 2/3 stuff (iteritems etc).
Fantastic.

Thanks for getting this project going!
My pleasure =).

Just merged this in and released to PyPi as 0.4. I took the liberty of making a few style changes to the cProfile stuff - just added scrolling for overflow and made Silk's own profiling section more explicit. The build fail was simply down to `StringIO` being moved into the `io` module in py >3 so no issues there

Thanks again!
Hi,

Weird. Just tried myself and works fine without your changes. What versions of pip + python are you using and what OS?

Here's mine on OSX Mavericks:

```
mtford@blah ~$ pip3.4 --version
pip 1.5.4 from /Library/Frameworks/Python.framework/Versions/3.4/lib/python3.4/site-packages (python 3.4)
mtford@blah ~$ pip --version
pip 1.4.1 from /Library/Python/2.7/site-packages/pip-1.4.1-py2.7.egg (python 2.7)
mtford@blah ~$ python --version
Python 2.7.5
mtford@blah ~$ python3.4 --version
Python 3.4.0
```
Windows 8.1
ActivePython within a virtualenv

```
D:\Dev\AssetTools\git>pip --version
pip 1.5.6 from D:\Dev\AssetTools\git\env\lib\site-packages\pip-1.5.6-py2.7.egg (python 2.7)

D:\Dev\AssetTools\git>python --version
Python 2.7.2
```
Hey @joaofrancese,

FYI I just had to revert this. All the tests are failing and things have changed too much for me to fix them quickly (and I'm really short on time for the next month or so).

Two major changes have broken the tests, the change from `execute_sql` to `SilkyCursorWrapper` and the the use of `bulk_create`. 

I seem to remember that the reason I didn't use `bulk_create` was because we needed to have an primary key of the created models so that they could use them in the relationship. And `bulk_create` didn't do this. I see that you've used `set_primary_key`. Is this new? Worried about backwards compatability to django 1.5/1.6 as I see it mentioned in this Django ticket: https://code.djangoproject.com/ticket/19527 but that ticket hasn't been resolved...

If you're willing to incorporate your changes into the unit tests and travis build I can give you commit rights to repository so that you don't have to wait for me to approve. If `set_primary_key` is not backwards compatible will also need to add some code that follows the old method of saving each individually.

Also, if you look at the `dev` branch I also quickly implemented `executemany` of the cursor wrapper. It's not entirely correct as each execution of the sql statement will have the same start + end time but I imagine will do for now. See the inline comments for my suggestions on how we could improve this...

Cheers!
I implemented set_primary_keys in bulk_create() in my fork of django-mssql, using an SQL Server-specific solution, because the inability to use bulk_create in such situations was severely hampering my project's speed. That's why I didn't make a pull request of my changes. Though, the way I used it in silk should be backwards-compatible, because I check for a flag I created in DatabaseFeatures, and fall back to saving each object individually in case the flag doesn't exist.

It's just a guess, but the test may be failing because I moved the updating of request.num_sql_queries from save() / bulk_create() to DataCollector.finalise(). The previous implementation in bulk_create wasn't working, because it was updating the Request object directly in the database using update() with F expressions, but the in-memory request object was saved afterwards, negating these changes. I'd have to fix it anyway, thought it would just be easier to have the code in only one place, so I put it in finalise() and removed the manager. It would create inconsistencies if SQLQuery objects are saved outside of this method, but I looked around it doesn't seem to be the case. Do you think it's okay to leave it this way?

I'll review the tests to fix either the code or the tests.
Ah right understood! It seems that when you've made a pull request and then commit further changes after the fact, github pushes those commits into the pull request too! So when I merged this in I got everything, not just the manifest changes... Not sure why that's the behaviour they chose.

Wrt. the flag checking, cool, somehow I missed that addition, if the tests pass and the travis build passes then we can know for sure that the backwards compatibility works.

Wrt.`request.num_sql_queries`, yep I think that's a better solution anyway. The placement in bulk_create was more a result of my experimenting... So yeah I think it's okay to leave it that way.

Awesome, much appreciate that.
Good shout, thanks.
Thanks ilvar, I'll add the test case myself as the curl test cases are broken (hence the commenting out). I'll be doing a release with fixes for a few other issues also so will release this at the same time ;).
Awesome great work! Sorry that i'm being slow to respond on this, will merge this in later today/tomorrow ;)
no worries.  i thought i was slow myself.  im glad it helped.

On Thu, Dec 18, 2014 at 9:04 PM, Michael Ford notifications@github.com
wrote:

> Awesome great work! Sorry that i'm being slow to respond on this, will
> merge this in later today/tomorrow ;)
> 
> —
> Reply to this email directly or view it on GitHub
> https://github.com/mtford90/silk/pull/47#issuecomment-67547937.
@brmc  Again much appreciated and sorry for the delay... Looks great though and works fine. Haven't tested how this affects releases to PyPi though?

I'm probably gonna be very busy for the next couple months - if you're going to making lots of changes as you mentioned it will likely be worth giving you commit rights instead as I don't want to put you off by being very slow ;)
cheers!
I think this is a great way of doing that, slots in nicely with everything else. Cheers!
Unfortunately I screwed up the implementation of this.

Since I did this by passing a reference to the function this gets set when settings are imported and before  django has added the application name to the path. What this means is that you get import errors if you want to import any application specific code for this method.

I have a fix in which you pass a string referencing the file instead of the function itself (this is what the debug-toolbar does). Would you prefer for me to remove the pass by reference option or leave both?
@kkaehler woops :).

Yeah prob best to remove the pass by ref and make sure this is all documented rather than leave something in that could leave people confused ;)

appreciate the effort!
for what its worth, i have a unit test which was specifically providing bad json in the request body, but my application code was not reached because silk was blowing up at this point
Awesome, good catch, cheers
@kkaehler 

Why not allow both formats? :D

Also - looks like the tests are failing - looks like a syntax error. I don't think you can use `return` within `lambda` expressions - I'm surprised it's working for you?
Yeah...I screwed up that commit.

I cleaned it up and now it supports both methods. Let me know your thoughts.
@kkaehler This looks like a useful addition to this project. I can definitely see the utility for this customization.

It's currently under conflict. If you could resolve it I can take a look and merge it into the master branch.

I could also look into merging this in as well but I will probably not get to it as quickly.
@avelis do you want me to give this a try on my fork and a pr for review?
@auvipy You are always welcome to try out a PR with that keeps with the spirit of this feature.
Closing this due to inactivity.  Feel free to re-open/re-pr this if relevant.
Great - cheers!
... you got me there.
cheers!
Cheers!
Good catch, cheers - sorry for the delay on getting to this.
Cheers!
awesome, cheers
@msaelices Do you know what version of Django this is happening on specifically?

This error leads me to believe you have and issue with not defining silk URL's with it's own namespace. See:
https://github.com/django-silk/silk/blame/master/README.md#L62
I'm using Django 1.8.5 and I correctly added the URL with the silky namespace.
I've spent hours debugging an issue, only to find the url configuration for silk is required. This PR prevents my entire site from crashing due to silk not having the URLs configured, so 👍
@florisdenhengst I do apologize for getting to this so late. I appreciate the effort and have merged it in.
Not a problem! Happy to help where possible :)

Would be nice to update some of the old references in `packages.json` in order to restore references to Travis/CI, but this is only useful when we can create a Travis account for the `django-silk`.
@florisdenhengst I agree. I have reached out to @mtford90 on moving the TravisCI account from his personal account into a django-silk account. I might ping him again on Gitter.im about it.
Awesome!

It shouldn't take very long to set it up, so I'm confident it won't be a problem once he's found some time to work on it :smile:
Thanks guys! I just enabled travis for the django-silk organisation. Should pick up the builds from now.
@florisdenhengst `packages.json` has been updated in commit: 02c59d172588530080eee7fb7ed24ba1a5aa4fcc
@Alkalit No apologies necessary. I really appreciate the effort to make unit tests for the models in this library.
@trik Thanks for making this effort and resolving #1 & #85 I know it was a long standing pain point for awhile.
@avelis don't mind! i like this project (and i'm using it for work) so i think i'll make some more bug fixing / enhancing
@trik I again have to express appreciation for getting to these issues. Your work is really helping revitalize this library for everyone.
@trik Wow, Thanks for getting to the unit tests. I will reiterate that I will be looking in the near future in re-enabling TravisCI.
I should note that this is not compatible with Django < 1.8, but it should work with Django 1.8 just fine.
Sorry for the delay @blag I was on vacation.

Thank you for contributing this! :tada:
No worries, thanks for making Silk! I've already used it to diagnose a problem I was having (and this PR silences one of the many warnings I was getting).
@blag Much appreciation again for adding more Django 1.9 compatibility.
@Wrhector Thanks for fixing the broken collection. Truly was a mistake on my part. Also, I appreciate the effort to the project.

In the interest of progress I have merged it in!
@Wrhector 958d843 breaks django=1.7.x, is this version of django no longer supported?
Django 1.7 has been end of life for 6 months now, though oddly travis passed checks with Django 1.7, I'll write a patch to support both.
@Wrhector I already sent a patch, thanks
@digitaldavenyc Thanks for your contribution.
@avelis No problem, glad to help!
@digitaldavenyc In regards to procedures. I don't have anything official other than passing unit tests on TravisCI.
Ok good to know. And it's ok to request the pull request from master?
@digitaldavenyc Absolutely!

I do my best to tackle issues when I have time. However, I encourage contributions as much as possible.
@wm3ndez Thanks for the contribution.
@auvipy Thanks for the effort. If you can take a look at the travis-ci.com build and resolve the build failures I can consider the PR for a merge.
as I added 1.10a so some more tasks are needed to be resolved to pass 1.10a builds. but I can add allow failure of 1.10a on the matrix too. on the other side I refactored some url pattern related code which are removed in 1.10
https://github.com/tomchristie/django-rest-framework/pull/4144 I can follow the work around and updating the patch
@auvipy thanks for adding in the allowed failures.
@auvipy Before I consider merging this in would this change drop Django 1.6 support? I ask that because if it indeed does then the merge request needs to reflect that expectation.
mmm this is one of many 1.6 feature drop :) I believe sending small changes at a time but if you have other suggestions I would love to embrace that
@auvipy Small changes at a time works for me.
@auvipy After [reading the following stackoverflow question](http://stackoverflow.com/questions/5154358/django-what-is-the-difference-between-render-render-to-response-and-direc) I am ok with merging this in. If you could resolve the failing unit tests In this PR that would be greatly appreciated.
I will try to fix the tests failing first then.
@auvipy I appreciate the effort. I also understand that there might be a failing test not associated to this change. I can be reasonable and expect that test to not get addressed in this PR.
@avelis failed tests are a lot which take time to fix. so i would suggest to merge for now as is. i'm promising to comeback soon with more patches.
@auvipy I have merged in this commit.
@chrono Thank you for your contribution.
@hanleyhansen I appreciate your contribution to this project. Anything to alleviate contributor learning curves is greatly appreciated.
@avelis thanks for the merge! i started out with a feature i wanted to add and ran into this and figured i'd put it in a better state first. New feature pr coming soon!
@hanleyhansen I look forward to it!
@hanleyhansen Since you added a field to the Request model, is it possible for you to add the migration file for that model change.
@avelis already did 😄 

see `silk/migrations/0003_request_prof_file.py`
@hanleyhansen Thank you for this feature and general contribution to this repo.
@hanleyhansen @avelis
@SzySteve Thanks for updating the Pillow requirement.
@chid Addressed with #128
@hanleyhansen @SzySteve That was exactly what I was going to do. 👍
@avelis do you mind if we simplify and just keep the `md`? then we wouldn't need `pypandoc`. Or would you prefer this approach?
@hanleyhansen Correct me if I am wrong but Pypi only accepts rst based descriptions when publishing releases. This is the main reason I have the conversion logic in there.
@avelis you are correct. makes sense now. so only the machine uploading to pypi needs the pypandoc dependency. so this should work.
@hanleyhansen I will work on a maintenance release with the manifest change shortly.

I appreciate the PR to fix this install issue.
@avelis awesome thanks!
@chrono This might indirectly help #26
@chrono Thanks for the contribution and for addressing this.
Hi, when is it planned to deploy this fix as a new version of silk?
@toSterr I will try to get to by EOD today.
@avelis thanks for the response, since there is no new version I would like to ask if it is possible to do it before Friday EOB?
@toSterr I think I can do that. Sorry for the delays on release.
@toSterr I published 0.6.2 to PyPi. I also made a release for it on Github for reference.
@aehlke Thanks for the contribution. Could you add some documentation on the different types of logger namespaces on the README?

I know the build is failing but it is for unrelated reasons. Given that knowledge I have merged this in.
@avelis I have a couple other PRs I need to make first but I'll look into README! Thanks for the quick merge.
@aehlke Thanks for your contribution.
Thanks for merging! Great timing - was just looking at this 5 minutes ago :)
@aehlke Sure thing. I try to stay diligent on pull request merges & releases if/when necessary.
I'll fix the tests. :-)
@javaguirre Thanks for the contribution.
@blag Sorry for not getting to this sooner.
@blag Thanks for the contribution.
Don't know why that specific test is failing in that specific deploy :( any ideas?
@shanx That unit test might be inconsistent with when it breaks. It is something I had on the back of my mind to address. Either way I have merged your pull request.

Thanks again for the contribution!
@leifdenby Thanks for the contribution. Glad to see support for Windows!
@avelis we can discuss on where I put the `try` `catch` and maybe think about moving it somewhere closer to the actual cause inside of so `_process_response` we don't mask any other errors. Let me know your thoughts.
@hanleyhansen Could there ever be a scenario where you could get forever stuck in the while loop? I will likely merge but wanted to poke any holes at it before I did.

In terms of placement. I think it's fine.
@avelis straight from the MySQL docs

> This exception is raised for errors which are related to MySQL's operations. For example: too many connections; a host name could not be resolved; bad handshake; server is shutting down, communication errors.

So the only way we can get stuck in a loop forever is if the DB server goes down. At the point the person has a different problem though. Too many connections will keep trying until there are some available connections. Communication errors, same thing. Other stuff in Django will break well before `silk` gets stucked in a loop forever. Otherwise just catching `OperationalError` and `AttributeError` should be safe within the `while True:` loop.
@hanleyhansen Thanks for the contribution and providing a solution for this scenario!
@aljp Is there a unit test you can add to assert that this will work as expected on Python2 & Python3?
I wrote a unit test for this but it seems that trying to test invalid json will throw an exception within the tests due to `Logger.warn('Response to request with pk %s has content type %s but was unable to parse it' % (self.request.pk, content_type))
`, i.e.

``` shell
Traceback (most recent call last):
  File "/Users/adam/Projects/silk/project/silk/model_factory.py", line 231, in body
    body = json.dumps(json.loads(content), sort_keys=True, indent=4)
  File "/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/json/__init__.py", line 319, in loads
    return _default_decoder.decode(s)
  File "/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/json/decoder.py", line 339, in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
  File "/usr/local/Cellar/python3/3.5.1/Frameworks/Python.framework/Versions/3.5/lib/python3.5/json/decoder.py", line 357, in raw_decode
    raise JSONDecodeError("Expecting value", s, err.value) from None
json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/Users/adam/Projects/silk/project/tests/test_compat.py", line 42, in test_python3_invalid_content_compat
    body, content = factory.body()
  File "/Users/adam/Projects/silk/project/silk/model_factory.py", line 233, in body
    Logger.warn('Response to request with pk %s has content type %s but was unable to parse it' % (self.request.pk, content_type))
AttributeError: 'NoneType' object has no attribute 'pk'
```
In the meantime I have commented out two tests which ensure that invalid json content returns the appropriate empty string from ResponseModelFactory in python 2 and 3

After a quick read it seems I may have to instantiate a DataCollector() and mock the request on that object to get these invalid json tests to pass?  I will gladly have another look tomorrow to test if that is the case.
@aljp Thanks for writing the unit tests and the contribution!
@avelis code changes look perfect. Exactly what I was going to do. Travis-CI is complaining about that one test for the 3.4 environment. Same intermittent test that has failed for us before:

``` bash
FAIL: test_time_spent_db_with_path (tests.test_view_requests.TestGetObjects)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/travis/build/django-silk/silk/project/tests/test_view_requests.py", line 98, in test_time_spent_db_with_path
    self.assertTrue(num_results)
AssertionError: 0 is not true
```

So I think we can ignore that. Unfortunately I'm at the car dealership right now so I only have my work laptop on me but when I get home I can test this branch against the code that was causing the error and report back.

Up to you if you want to wait for that or if you wanna just go ahead and merge. Everything looks good to me.
@hanleyhansen I have gone ahead & merged. Thanks for checking on the pull request for me.
@mattjegan Thank you for the contribution! Definitely a testing proactive approach I can get behind.
@lockie Thanks for the contribution!
@avelis You're very welcome :)
@r3m0t Thank you for your contribution.
@Drache91 Thanks for this contribution!
@phuong Thanks for the contribution! Will look into updating the factory library in a bit.
@ukjin1192 Thanks for the contribution.
Thanks @PeRDy for the contribution and addressing #161
any idea to fix the failures?
@auvipy If you have time if you could update the readme doc to update the supported versions of Django that would be appreciated.

As for the unit test failures. One is a decimal precision issue. The other requires some effort to look into.
I do have both time and interest to contribute on this project. I will try to fix and send pr. beside if you have any other lists of improvements you could create an issue and assign me to that too :)
@auvipy Any PR's are always welcome. I will do my best to review them in a timely fashion.

I can't assign this to you for some reason but if you want to look into this issue that would be great: https://github.com/django-silk/silk/issues/149
ok i will dig into it
Thanks @auvipy for the contribution! Code readability is always welcome.
whenever I saw my contributions are warmly accepted I become more motivated to contribute :1st_place_medal:
@avelis if you can review when you get a chance. Here are the 3 scenarios I tested for locally:

- Fresh install: works
- Upgrade over existing install on proper MySQL configuration with long index support: works, does not change underlying fields (they stay at width 300)
- Upgrade over modified install on MySQL with no long index support (user manually changed the field width or created a truncated index and faked the initial migration): works, does not change underlying field (they stay at whatever width the user had them)
@smaccona Thanks again for working on this PR and long standing issue. Much appreciation from me.

I am planning a release with a major version bump. I will make sure to set the expectation this will break current installations. However, the upgrade scenario's you noted might work for others and I will highlight them.
@auvipy Thank you once again for your contribution to add wheel support. I also appreciate the code style changes in the setup.py file. Have code style consistency really makes a difference 👍
:1st_place_medal:
@PeRDy Thanks for this contribution!
@goetzk Thanks for adding this tip. I am positive it will help others.
On 3/5/17 10:20, Andrew Velis wrote:
> @goetzk <https://github.com/goetzk> Thanks for adding this tip. I am
> positive it will help others.

Thanks for the quick response!
I'm having trouble interpreting the errors with the build here... 

For django==1.9.0 && python==3.5, silk cannot be installed correctly? How does that result from a static file change?
@jeffreyckchau Thanks for the contribution. That will greatly increase the readability of that view. Much appreciated.

As for the failing build. There is a one test on one environment configuration that is failing. I have not gotten around to fixing it, but I don't let that impede contributions for the time being.
@avelis Ah, got it. Glad to help!
@lammertw Thanks for addressing the deprecation warning!
@avelis I believe this covers everything from the Jazzband project guidelines (https://jazzband.co/about/guidelines#contributing-guidelines).

I don't believe that anything else needs to be changed. Let me know if you agree and I'll look into moving this over into the Jazzband organisation.
This looks good. I also read the guidelines and this change covers the repo requirements for Jazzband.
@albertyw Thanks for the contribution!
@albertyw thanks again for all the PRs they really help this library.
@danielbradburn Thanks for the contribution of a status code filtering. I am positive it will increase the utility of the UI. 👍
@danielbradburn Awesome contribution! When possible, could you add image you attached in the PR to the README.md file?
@avelis Ah, yes sorry I forgot about that. It's probably worth adding a note about the filtering and sorting changes I made to. Will make a separate PR with an updated README.
@danielbradburn Thanks for the contribution!
@danielbradburn Thanks again for the contribution! A UI method filter is a great addition here.
@danielbradburn thanks again for your previous contribution and adding thise features to the README.md file.
@avelis no problem, silk has been so useful for profiling the app I am working on. I am happy to help make it even better!
@danielbradburn Thanks for adding the library dependency. I am positive it would help on the next release
@danielbradburn Pretty straightforward and appreciated. Should help others wanting to contribute to the project as well!
@smcoll I am rerunning the CI build before merging. I believe TravisCI is in a transition to Ubuntu Trusty and some builds failed because of it.
@smcoll Thanks for the CSS enhancement!
@danielbradburn Thanks for adding this feature!
i guess that technically, this doesn't fix the underlying issue of #201, but rather kicks the can down the road.   It's still possible that a DataError would be raised, and the profiler results not saved to the db, if the path is too long.  And it's not immediately apparent from the traceback why that is.
@smcoll Could you add a small test for this change when you have a moment? I saw the failure and it's fine. It's just a precision error.
@avelis a test which asserts that the path can be up to a certain length?
@smcoll A test can assert the length or the failure if going past 300. Nothing to fancy
@avelis what is the ideal behavior if the path is too long, or if the file can't be saved?
@smcoll That raises a good question.
A couple options:

1. Graceful handling when a DatabaseError does occur.
2. If not able to gracefully handle at least an informative traceback to help users know why the save failed.

However, I feel that introduces new/different scope into this PR. If you prefer, I can merge it in as is without issue.

Thoughts?
@avelis that seems reasonable to me.  The underlying issue about how to handle a file storage failure is not addressed in this PR, so i changed the description to relate to but not fix the issue.  A PR which actually changes the behavior of the app to handle storage failures seems like a better candidate for new tests.
@smcoll Thanks for the contribution! I appreciate it.
Rebased.  Note that the docs are updated and i've moved the default storage class to a new location.
@smcoll Since this is introducing the concept of a customize-able storage. I am wondering if makes sense to add some config level tests asserting default behavior.

Thoughts?
Yes, i agree.  i'll add a test asserting the default storage class is used when the setting is not specified.  Would that be sufficient?
@smcoll Yes that would be sufficient!
@avelis added- does that work?
@smcoll Yes. Works for me. Thanks again for adding the test.
We're finding that this is pretty hard on resources.
@smcoll Would you like this revisited? If so, can you please resolve the test failures?
We're no longer using Silk, thanks for asking.
Closing this issue.  If needed, feel free to re-open this PR and/or pickup the leftover code and start a new branch.

Thanks!
@danielbradburn I appreciate you making a theme conscious change to the graphs.
Somehow the MySQL configuration is failing authentication in TravisCI will have to investigate later on it.
@nias-r I realized this after the fact. Can you fix the failing test in TravisCI. Thanks.
@nias-r Thanks for catching this and adding it here.
@basifat Thanks reviewing the README and improving its readability.
@avelis Great I could help.
@albertyw Do you see any potential issues here?
I think this is fine, though a test case would be nice.  I'm wondering what requests actually take 0 time; is it a bug that should be fixed?
@albertyw No, this is just a nice trick to filter out the views that have no (NULL) time on the database. Because otherwise they show up at the front because by default NULL are ordered first.
The same trick as actually already used over here: https://github.com/jazzband/silk/blob/master/silk/views/requests.py#L38
@nias-r Thanks for adding the extra documentation to the project!
@albertyw I appreciate the work future proofing silk for Django 2. TravisCI is highlighting an error.
```
    middleware_installed = 'silk.middleware.SilkyMiddleware' in getattr(settings, 'MIDDLEWARE', [])
TypeError: argument of type 'NoneType' is not iterable
```
Is it possible for you to look into that so I can merge this in?
@albertyw Thanks for addressing Django 2 deprecations!
Next time, can we not squash commits?  With pypi behind with releases, some people (at least me) are pinning to github hashes and if you squash commits, it means those exact commits don't get merged into master.
@albertyw Yes I can do that.
@albertyw Thanks for clarifying the installation instructions
@albertyw Thanks for updating the documentation!
@albertyw I am seeing a couple of issues with TravisCI. It appears it can't seem to download Django 2. The other issue is that the projects url settings don't seem to pass certain versions of Django during the testing matrix. Might have to do conditional url patterns or drop the version that is not ok with the pattern change.
@albertyw I also remember reading somewhere you wanted to cut a release. The version value is in `setup.py`. If you want to break that out into a different mechanic that's fine. FYI It is still currently at `1.0.0`.
@albertyw Thanks again for working on this and getting the compatibility for Django 2 in this library!
Oh wow, I'm a bit baffled too
I personally prefer the style of only returning singular variables instead of expressions.  Returning a singular variable makes functions easier to debug because one can insert a single print/log line without splitting the return and the expression that generates the returned value.  It also more explicitly declares the meaning of the value returned rather than having to guess the value only based on the return expression and function name.  

The change of `selfs` -> `self` is good.
@Stranger6667 I am fine with the consolidation effort here to reduce trivial execution lines. It does come at the cost of some readability but I think it's minor.
@Stranger6667 Thanks for your contribution to the library. Much appreciated!
@albertyw I just got back from holiday break today. Glad you merged it in. Looks good to me.
This is fine for now until #187 gets released.  I don't think we want to support this long-term since jazzband is a pretty open org and installing directly from github is a bit of a security risk.
Just to confirm, there were no other migration files generated?
@albertyw no, this was the only migration file generated by `python manage.py makemigration`
@dennybiasiolli thank you sir!
@dennybiasiolli Thanks for making the contribution. Before I approve, would you happen to know if the field will evaluate as an indexable field? I ask because MySQL has a limitation of 191 and we had issues in the past with indexable fields going past max_length of 191. I don't think that is the case here but I wanted to be double sure.
@avelis I don't think `prof_file` will evaluate as indexable field, because in `models.py` it's defined as

```
prof_file = FileField(max_length=300, blank=True, storage=silk_storage)
```

In `Class Request` the only indexed fields are the following: `path`, `start_time` and `view_name`.

`start_time` is a `DateTimeField`, whilst `path` and `view_name` have already a `max_length=190`, so I think there are no problems with MySQL in this case! 😉
@albertyw I don't mind merging this one as well. Looks like it trims a lot of cross compatibility code. Do you mind resolving the conflict here. I don't mind but I don't want to accidentally undo what you wrote in this PR. Although it seems pretty straight-forward.
@albertyw Thanks again for refactoring the codebase. Much appreciated.
@aadu Thanks for adding this to the library!
Only one job has failed in build...
Can anyone merge this PR
@lokeshatbigbasket I hear you. I wonder if it's of any use to make this as an optional setting. However, I am not sure adding that complexity is worth it.
@avelis I felt that when we have list of SQL queries for a request, we might need them to open each query in new tab not in the same tab and going back every time, when handling a larger projects like us, it would add great benefit...
@lokeshatbigbasket I agree on the benefit 👍. I appreciate you making the enhancement to the library! 😀
@avelis thank you very much...
:+1: @lokeshatbigbasket
@Yolley Great catch. I somehow glossed over that and do apologize for that. Thank you for fixing it either way!
@pikhovkin I appreciate the effort to add Oracle support for django-silk. I see 2 PR's open. Is there a reason for that? Should those be discarded and this one be the only one for consideration to merge in?
You can remove 2 others PR's.
It seems the tests are failing.  Can you fix them?

Also, does travis support oracle as a DB?  If it does, it would be nice to add to `.travis.yml` to ensure compatibility.
We must get rid of the UUID fields, because django Oracle backend interprets them in SQL as a number, because of this an error occurs.
So I added the migrations in which I deleted these fields.
But tests check these UUID fields and raise error.
@albertyw I have not worked yet with travis or other like system.
https://github.com/cbandy/travis-oracle
@albertyw, please, look erroneous tests https://travis-ci.org/jazzband/django-silk/builds/329821906
@pikhovkin This PR needs a rebase to the latest django-silk:master, can you work this?
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/258?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#258](https://codecov.io/gh/jazzband/django-silk/pull/258?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (669dcda) into [master](https://codecov.io/gh/jazzband/django-silk/commit/ef1191538f0dd33b135e420e3203eceb7e2aab57?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (ef11915) will **decrease** coverage by `51.41%`.
> The diff coverage is `40.42%`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/258/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/258?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@             Coverage Diff             @@
##           master     #258       +/-   ##
===========================================
- Coverage   82.87%   31.46%   -51.42%     
===========================================
  Files          50       52        +2     
  Lines        2055     2082       +27     
===========================================
- Hits         1703      655     -1048     
- Misses        352     1427     +1075     
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/258?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/model\_factory.py](https://codecov.io/gh/jazzband/django-silk/pull/258/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9tb2RlbF9mYWN0b3J5LnB5) | `15.72% <ø> (-66.82%)` | :arrow_down: |
| [silk/views/requests.py](https://codecov.io/gh/jazzband/django-silk/pull/258/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay92aWV3cy9yZXF1ZXN0cy5weQ==) | `44.57% <ø> (-48.20%)` | :arrow_down: |
| [silk/views/summary.py](https://codecov.io/gh/jazzband/django-silk/pull/258/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay92aWV3cy9zdW1tYXJ5LnB5) | `34.84% <0.00%> (-57.09%)` | :arrow_down: |
| [silk/migrations/0007\_add\_support\_oracle.py](https://codecov.io/gh/jazzband/django-silk/pull/258/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9taWdyYXRpb25zLzAwMDdfYWRkX3N1cHBvcnRfb3JhY2xlLnB5) | `54.54% <54.54%> (ø)` | |
| [silk/migrations/0008\_fix\_request\_prof\_file\_null.py](https://codecov.io/gh/jazzband/django-silk/pull/258/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9taWdyYXRpb25zLzAwMDhfZml4X3JlcXVlc3RfcHJvZl9maWxlX251bGwucHk=) | `100.00% <100.00%> (ø)` | |
| [silk/models.py](https://codecov.io/gh/jazzband/django-silk/pull/258/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9tb2RlbHMucHk=) | `50.44% <100.00%> (-36.46%)` | :arrow_down: |
| [project/project/urls.py](https://codecov.io/gh/jazzband/django-silk/pull/258/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-cHJvamVjdC9wcm9qZWN0L3VybHMucHk=) | `0.00% <0.00%> (-100.00%)` | :arrow_down: |
| [silk/utils/data\_deletion.py](https://codecov.io/gh/jazzband/django-silk/pull/258/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay91dGlscy9kYXRhX2RlbGV0aW9uLnB5) | `0.00% <0.00%> (-100.00%)` | :arrow_down: |
| [silk/templatetags/silk\_nav.py](https://codecov.io/gh/jazzband/django-silk/pull/258/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay90ZW1wbGF0ZXRhZ3Mvc2lsa19uYXYucHk=) | `0.00% <0.00%> (-100.00%)` | :arrow_down: |
| [silk/views/sql.py](https://codecov.io/gh/jazzband/django-silk/pull/258/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay92aWV3cy9zcWwucHk=) | `0.00% <0.00%> (-96.56%)` | :arrow_down: |
| ... and [30 more](https://codecov.io/gh/jazzband/django-silk/pull/258/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/258?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/258?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [ef11915...669dcda](https://codecov.io/gh/jazzband/django-silk/pull/258?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
Well, I messed up trying to work on the fork, I have opened another PR to continue discussion in #619
we moved to github actions, the tests needed to pass
@jdufresne Thank you for cleaning up this library and improving django-silks compatibility for Django 2.0 onward.
Looks good to me
I believe performing a date less that query is more efficient for this deletion than an id in query. Especially for garbage collection.
I just thought to check whether this bug happens on Python2.7 as well as Python3.5.  It doesn't appear to cause the same crash in Python2.7.  I did verify that my modification runs correctly on _both_ Python2.7 and Python3.5, though.  I think this comes down to the fact that in Python3, strftime stopped being lenient about translating a bytes input into a string before processing.
Just small comment regarding the FKs.

In Postgres you can truncate multiple tables with one command and if you specify all tables which have the FK dependencies just between each other (eq. all Silk tables), then you don't have to turn off the FK checks ;-) 

I have been using this for some time: 
```TRUNCATE TABLE silk_profile, silk_response, silk_profile_queries, silk_request, silk_sqlquery;```

I checked Postgres documentation and multiple-table truncation is possible since 8.1 version, so it should be safe ;-)

Unfortunately this is not possible in MySQL :-/
Hmmm I just saw how the whole command is implemented and without bigger rewrite the previously mentioned technique is not really usable :-/ Damn... Well then it is just FYI :-D 

But thanks for the PR! Lets hope it will be merged...
Merging this for now.  This should probably be refactored and tested later.
I don't mind merging this in. Maybe in the future we make this a setting that can be set True or False.
This has been superseded by #280.
I'd prefer to not use a try/except unless it's really needed.  If there's an IndexError here, then that means `len(requests) < target_count - 1`.  I'll make a separate PR to use an if statement to handle that case, and to make the later `delete()` still work.
@avelis I made that update.
@albertyw Thanks!
thatnks!
I am ok with the change. I did have a suggestion on potentially move the check with the line above. Since both if checks simply return it consolidates those statements into one.
Couldn't we combine this line with the line above on 149? I know it lengthens the if check with an or but ensures only one return statement.
Looking at the current logic in sql.py, it seems you could ignore all sql queries by setting `SILKY_IGNORE_QUERIES = ['']`?
@albertyw Ah right, indeed. I haven't noticed that!
In this case however, there's no need to alter SQLCompiler.execute_sql in middleware. But that probably doesn't make a big difference anyway.

Thanks!
@albertyw Is this PR ok to close without merging? Should we add some documentation on how to achieve @naytec's request?
Yeah, I think we should close this without merging.  Updating documentation would be nice, but we should also fix #286
The side effect here is that if someone for some reason creates a foreign key from another table into a django-silk owned table, then the table truncate will have a bad side effect.  Hopefully people will consider the django-silk tables private and not directly refer to them.
@laurentb2 Thanks for the contribution.
@albertyw I fixed your review. Would you mind getting another look? TIA!
@avelis thanks!
This shouldn't need to inherit from object anymore since we are now python 3.
Thanks for the review, indeed, that is no longer needed.

Unfortunately I'm going on vacations and I can not fix that myself, I could gladly do that as soon as I'm back around August 15th
@florianm Thanks for adding this!
@gforcada I am not a PG user here. So in theory, I am ok with the change.
Thanks @gforcada, the patch from `ALL` to `USER` works for me too in PG.
@avelis could we get a release? TIA! :+1:
@gforcada Let me see what I can do. I appreciate the patience and all the contributions this library gets.
Hi! any news about a possible release? I'm getting impacted by this as well. Thanks!
@vadimka123 Thanks for making a PR. If you could address the PR's I could take a look and potentially merge in this change.
@avelis, how to do this?
You can see the build failure here:
https://travis-ci.org/jazzband/django-silk/builds/425169004?utm_source=github_status&utm_medium=notification

```shell
======================================================================
FAIL: test_greedy_garbage_collect (tests.test_models.RequestTest)
----------------------------------------------------------------------
Traceback (most recent call last):
  File "/home/travis/build/jazzband/django-silk/project/tests/test_models.py", line 158, in test_greedy_garbage_collect
    models.Request.garbage_collect(force=True)
  File "/home/travis/build/jazzband/django-silk/project/silk/models.py", line 152, in garbage_collect
    cls.objects.all().order_by('id')[:records_count_to_delete].delete()
  File "/home/travis/virtualenv/python3.4.6/lib/python3.4/site-packages/django/db/models/query.py", line 598, in delete
    "Cannot use 'limit' or 'offset' with delete."
AssertionError: Cannot use 'limit' or 'offset' with delete.
```
@vadimka123 It looks like it doesn't like a delete method from a slice.
@vadimka123 Getting closer.
https://travis-ci.org/jazzband/django-silk/builds/469903442?utm_source=github_status&utm_medium=notification
Looks like MySQL doesn't support certain queries the tests are running.
@vadimka123 your issue should be fixed in master, i think you can close this.
@smaccona You ok with me squashing and merging or did you want me to rebase and merge?
@avelis tests are failing, let me fix them and then I'll squash and reissue the PR. Probably will be tomorrow.
@avelis I think this is good to go - let me know if you have any questions.
I updated the unit tests to account for the changes.
could you please add a failing test to verify the proposed change? beside try to make travis green :)
@avelis mind having a look?
@egichuri Merged! Thanks for contributing!
@avelis could we have a new tag/release?
@egichuri Not against making one. Just haven't had time.
Here is another vote for a new tag/release with this bug fix included. Such a serious issue would really benefit from a bit of TLC.
As I understand, work on this pull request is now not in progress, so I've started adding changes to it.
Now some additional updates for requirements have been added. Fixes for `sql_id` field will be soon.
LGTM :shipit:
Closing due to unresponsiveness - Feel free to re-open this if you'd like to revisit it.
Eh - I'd be more inclined to merge this if we stuck with `CharField` with a max of `255` - Were you able to test `255` for `path` and `view_name` ? - `method` could probably remain the same.
@Chris7 `python manage.py test` will run the tests.
Oh, i didnt look inside project for the tests. :+1:
@Chris7 Does this add docker as a requirement to development/testing with the project? If so I would push to update the docs to say so.
It doesn't add any dependencies. I'll update the docs for those who like using docker. I wanted to get a PR up to see if it was even something you'd be interested in. Personally, it's great because I no longer have to care about virtual environments/etc.
This function causes query counters not to work.
@yunier-rojas Travis seems to be failing on python 2.7. 🤔 
Honestly, I wouldn't mind `django-silk` dropping 2.x support since it's EOL as of January anyway, but for now, we'll probably want to ensure tests are passing across the board until that is removed.
I will do a final review
can you re base?
> And make the Travis green

Tests are only failing on `Python 2.7`. Once rebased, hopefully, Travis will be green too.
Rebased, let's hope that the tests will be nice and green :-)
@RaphaelKimmig Can you please rebase your branch with the master?
And make the Travis green
Looks good to me, Thanks @RaphaelKimmig :+1:
@munza any chance you could take a look at the failing tests?
keep django 2.2+3 support only
@munza Tests are failing, can you please fix them?
LGTM :+1:  @auvipy Can you please have a look too?
this is not needed. python 2 support should be dropped
@auvipy, you are right. I should have thought about that considering Python 2 support is going to be dropped from Django very soon. I will update the commit in an hour.

Thanks for the suggestion.
drop python 3.4 and add 3.5 3.6 3.7 3.8
@auvipy, thanks for the suggestion.
python 3.4 can also be dropped
3.4 should be dropped
Yep, Lemme do that.
looks like not updates to tests are needed for this
can you check here https://github.com/jazzband/django-silk/blob/master/project/tests/test_view_sql_detail.py and related files?
@ilndinesh Can you rebase this to the latest django-silk:master
This can be considered as code cleanup/performance optimization and could be merged as is (provided the tests pass)
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/387?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#387](https://codecov.io/gh/jazzband/django-silk/pull/387?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (fafc178) into [master](https://codecov.io/gh/jazzband/django-silk/commit/1fd2c4fa3bc5a1656512b85056afb787a4663ed4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (1fd2c4f) will **not change** coverage.
> The diff coverage is `100.00%`.

```diff
@@           Coverage Diff           @@
##           master     #387   +/-   ##
=======================================
  Coverage   86.33%   86.33%           
=======================================
  Files          52       52           
  Lines        2093     2093           
=======================================
  Hits         1807     1807           
  Misses        286      286           
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/387?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/sql.py](https://codecov.io/gh/jazzband/django-silk/pull/387/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9zcWwucHk=) | `78.78% <100.00%> (ø)` | |

:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
can you also update tests?
LGTM 👍
@nasirhjafri @auvipy @jezdez the `django-silk` QA improvements are ready for upstreaming. There is one false-positive case in the tests in the cProfile section that results from a small difference in timings with Python 3.6 interpreter, but otherwise all tests pass and the test bench is considerably improved.

The test also fails on PyPy3 in addition to Python 3.6 and should be refactored to account for differing cProfile outputs or disabled altogether if it is not necessary:

![image](https://user-images.githubusercontent.com/2477934/72818776-b47a2c80-3c74-11ea-8f2e-0f4e08afc36b.png)
@jezdez I believe the version is ready for merging now. Thanks for the accurate review insights!
Seems like it's the same test. For whatever reason it isn't skipping the test with the `@unittest.skipIf` decorator. I think I'll refactor the test after all to validate the format of data instead of it's exact output so that the test supports PyPy as well.
Test refactored to test output format instead of specific tool output, seems to be working. Upstreaming the changeset.
@aleksihakli Just two things, we dropped Django 1.11 support in the last release and we are still supporting python 3.5
LGMT 👍 Thanks @aleksihakli
Some minor updates needed..
Actually, some test is failing now, not sure why?
Any specific reason why have we removed python 3.5 support?
We dropped Django 1.11 support in last release.
OK, I just added that to the test matrix to see if the tests pass here. Django 1.11 is a LTS release which will still be supported by DSF until April 2020. 

I have no argument over support decisions, I'm just trying to offer improvements for the infrastructure. You decide what looks good to you!
@nasirhjafri this is is just a practice I have adopted from some other packages I maintain.

Python 3.5 is not supported by newer Django versions and it simplifies things to offer support on 3.6+ feature wise. 3.6 has a lot of forwards compatible features. Python 3.5 is also dropping in usage numbers as most Linux distributions offer 3.6+ as the stock distribution.
Django 2.2  is still supporting python 3.5 since we are supporting Django 2.2 let's keep Python 3.5 support too.
Okay, cool, let's keep Django 1.11 for now. We will drop it later in April.
@nasirhjafri if the version is supported by the codebase and there is no sudden need to remove support I'd opt to support LTS releases as long as they are being maintained by DSF as that will make a lot of people running older code bases happy :)
OK, I'll add it to the matrix!
not needed
not needed
Django 1.11 is an LTS release that will still be supported by DSF until April 2020. So we'll be providing support for 1.11 for now.
Is there an actual downside for supporting Django 1.11 LTS for 5 more months? The test matrix passes for it and everything should work smoothly as it is.
Well since the support was dropped in 4.0.0 I've removed it from the matrix as well, April will be soon and no point in reintroducing support after a major release.
Roger.
The version parameter needs to go.
Let's use the way release and version is distinguished in the setuptools-scm docs; https://github.com/pypa/setuptools_scm/#usage-from-sphinx
Hmm, the test should be written differently then.
Fixed.
Fixed.
I very much agree: however, the test is not simple to fix as the result is a more complex object and ideally the format should be validated, not the contents itself.

Hence, the test would ideally use some sort of a regex matcher for a matching list that is inside the list of profiling results.

This test and the max body size test are also the ones that fail on PyPy3 at the moment.

I would opt a skip in this PR and then a fix in a later PR that updates the test to a more appropriate format, but I am not interested in refactoring the tests at this moment due to time constraints.
Isn't 1.1.0 a very old release?
> Isn't 1.1.0 a very old release?

Hehe I know, but we have a legacy environment with django 1.7 and python 2.7...
> > Isn't 1.1.0 a very old release?
> 
> Hehe I know, but we have a legacy environment with django 1.7 and python 2.7...

This migration already exists in 1.1.0 https://github.com/jazzband/django-silk/blob/c9438044e59ae20da2406958b043a0f7fdce67e8/silk/migrations/0005_increase_request_prof_file_length.py
> > > Isn't 1.1.0 a very old release?
> > 
> > 
> > Hehe I know, but we have a legacy environment with django 1.7 and python 2.7...
> 
> This migration already exists in 1.1.0 https://github.com/jazzband/django-silk/blob/c9438044e59ae20da2406958b043a0f7fdce67e8/silk/migrations/0005_increase_request_prof_file_length.py

Yes, migration #5 is changing Request#prof_file attribute, but the problem is with storage attribute, is not evaluated in previous migrations, so in migration #6 is taking the default value:
    defaults = {
       ...
        'SILKY_STORAGE_CLASS': 'silk.storage.ProfilerResultStorage'
    }

I do not know if you want to always have previously made makemigrations before using the library, but if that is the case it makes it difficult to work in certain automated environments, requiring additional steps to have the library ready to use.

Any criticism is welcome, I hope to be useful :)
Test cases are failing, please fix them. Even if we want to merge this one we can't backport it to 1.1.0. 
That being said it would only be available in 4.0.1. I'll test it once the tests are passed.
> > > > Isn't 1.1.0 a very old release?
> > > 
> > > 
> > > Hehe I know, but we have a legacy environment with django 1.7 and python 2.7...
> > 
> > 
> > This migration already exists in 1.1.0 https://github.com/jazzband/django-silk/blob/c9438044e59ae20da2406958b043a0f7fdce67e8/silk/migrations/0005_increase_request_prof_file_length.py
> 
> Yes, migration #5 is changing Request#prof_file attribute, but the problem is with storage attribute, is not evaluated in previous migrations, so in migration #6 is taking the default value:
> defaults = {
> ...
> 'SILKY_STORAGE_CLASS': 'silk.storage.ProfilerResultStorage'
> }
> 
> I do not know if you want to always have previously made makemigrations before using the library, but if that is the case it makes it difficult to work in certain automated environments, requiring additional steps to have the library ready to use.
> 
> Any criticism is welcome, I hope to be useful :)

So It was fixed later in v2.0.0 https://github.com/jazzband/django-silk/commit/5ba085368b13a79f92db1b874ecf5d4ad083450e

If you want to use it with v1.1.0 Please take a fork from v1.1.0 release tag and cherry-pick this commit on top of it 5ba085368b13a79f92db1b874ecf5d4ad083450e
Thank you, I made a mistake with branches bringing master...
For some reason 3.9 only installs and exits. Maybe I am missing something in the tox configuration for 3.9 since it's in pre-release state.
this can be 3.9 now
Thanks for fixing it. 👍
Can you add some more test cases to handle all the nuance here?
Thanks @ThePumpingLemma LGTM 👍
👍
Dope
@eshxcmhk Could you please update your comments in English? Thanks,
> Could you add a new tests which sets this settings to false?

I'm sorry, but as a python novice, I don't really know how to add this feature. Also, I don't have time to do this right now, but it works fine on my project
Feel free to do it when you have time. Use this decorator to override settings for a test. https://docs.djangoproject.com/en/dev/topics/testing/tools/#overriding-settings
Could you add a new tests which sets this settings to false?
Chinese don't work as Unicode?
> Chinese don't work as Unicode?

The Chinese characters are shown below on the page: 
```
"\u8be5\u8f66\u5728\u3010\u53e4\u853a\u5b8f\u6c38\u3011\u68c0\u6d4b\u672a\u5b8c\u6210\uff0c\u65e0\u6cd5\u767b\u5f55"
```
Not easy to read.
did you encoded your chinease as utf-8?
> did you encoded your chinease as utf-8?

Yes, the http request send with utf-8 encode
@avelis @nasirhjafri should this be released as a new version?
> @avelis @nasirhjafri should this be released as a new version?

yep,
@nasirhjafri @aleksihakli Thank you for merging the PR so quickly, much appreciated. Do we have a timeline when this will be released as a new version?
@Tirzono @nasirhjafri will have to make the release, he is the maintainer of this project:

https://jazzband.co/projects/django-silk
Maintainers will need to make a tag for a new release and release it through the Jazzband site after that.

https://github.com/jazzband/django-silk/releases
`4.0.2` -> `4.1.0`
Thank you for spotting that, it's fixed now :)
LGTM :+1:
Thanks, @mierz00
LGTM 👍
> why not use path()?

replaced using path, pls review:)
> do we need to explicitly mention route='' , views= in the path() ?
> https://docs.djangoproject.com/en/3.1/ref/urls/
> 
> though it looks nice
it isn't required, but subjectively transparent keyword args seems to be better:)
@auvipy when should I be expecting it merged and released?:)
one question, did you try this approach locally?
> one question, did you try this approach locally?

I've ran tests, if that's what you're asking about:)
why not use path()?
do we need to explicitly mention route='' , views= in the path() ?
https://docs.djangoproject.com/en/3.1/ref/urls/

though it looks nice
Thanks, @ge0rg
Great, @nasirhjafri any chance we could have a new release with this patch? Thanks!
Thanks, @MRoci LGTM 👍
hey @nasirhjafri ,
May I ask if you have updates if this PR can be merged or some changes are needed?

Thank you!
will wait for another eye
@k4rl85 can you rebase this to the latest django-silk:master
can you please add unit tests for the proposed changes?
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/460?src=pr&el=h1) Report
> :exclamation: No coverage uploaded for pull request base (`master@8d9b48b`). [Click here to learn what that means](https://docs.codecov.io/docs/error-reference#section-missing-base-commit).
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/460/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3)](https://codecov.io/gh/jazzband/django-silk/pull/460?src=pr&el=tree)

```diff
@@            Coverage Diff            @@
##             master     #460   +/-   ##
=========================================
  Coverage          ?   81.24%           
=========================================
  Files             ?       47           
  Lines             ?     1749           
  Branches          ?        0           
=========================================
  Hits              ?     1421           
  Misses            ?      328           
  Partials          ?        0           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/460?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/460?src=pr&el=footer). Last update [8d9b48b...4958872](https://codecov.io/gh/jazzband/django-silk/pull/460?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
> LGTM 👍 
> 
> I just have one concern, last time I checked Github Actions didn't support PRs from forked repos. Do they support now(if yes do we need to enable some flag too for that)?

That should be good now, from https://github.blog/2020-08-03-github-actions-improvements-for-fork-and-pull-request-workflows/:

> In order to protect public repositories for malicious users we run all pull request workflows raised from repository forks with a read-only token and no access to secrets.

But to be on the safe side, I'll try later in a different repo to make sure.
> > LGTM 👍
> > I just have one concern, last time I checked Github Actions didn't support PRs from forked repos. Do they support now(if yes do we need to enable some flag too for that)?
> 
> That should be good now, from https://github.blog/2020-08-03-github-actions-improvements-for-fork-and-pull-request-workflows/:
> 
> > In order to protect public repositories for malicious users we run all pull request workflows raised from repository forks with a read-only token and no access to secrets.
> 
> But to be on the safe side, I'll try later in a different repo to make sure.

Ah, no need to do an extra PR, here's a PR that was created from a branch on repo fork: https://github.com/jazzband/django-robots/pull/107
looks good to me
LGTM 👍 
I just have one concern, last time I checked Github Actions didn't support PRs from forked repos. Do they support now(if yes do we need to enable some flag too for that)?
should this from unittest.mock import
from unittest.mock import
from unittest.mock import
Opps, yeah, something went wrong there.
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/463?src=pr&el=h1) Report
> Merging [#463](https://codecov.io/gh/jazzband/django-silk/pull/463?src=pr&el=desc) (368579c) into [master](https://codecov.io/gh/jazzband/django-silk/commit/bef36dc89634d3ea7d64914e5ee581fb4b08f71c?el=desc) (bef36dc) will **increase** coverage by `0.44%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/463/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3)](https://codecov.io/gh/jazzband/django-silk/pull/463?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #463      +/-   ##
==========================================
+ Coverage   81.07%   81.51%   +0.44%     
==========================================
  Files          47       50       +3     
  Lines        1749     2040     +291     
==========================================
+ Hits         1418     1663     +245     
- Misses        331      377      +46     
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/463?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [project/project/\_\_init\_\_.py](https://codecov.io/gh/jazzband/django-silk/pull/463/diff?src=pr&el=tree#diff-cHJvamVjdC9wcm9qZWN0L19faW5pdF9fLnB5) | | |
| [project/project/urls.py](https://codecov.io/gh/jazzband/django-silk/pull/463/diff?src=pr&el=tree#diff-cHJvamVjdC9wcm9qZWN0L3VybHMucHk=) | | |
| [silk/\_\_init\_\_.py](https://codecov.io/gh/jazzband/django-silk/pull/463/diff?src=pr&el=tree#diff-c2lsay9fX2luaXRfXy5weQ==) | `60.00% <0.00%> (ø)` | |
| [silk/models.py](https://codecov.io/gh/jazzband/django-silk/pull/463/diff?src=pr&el=tree#diff-c2lsay9tb2RlbHMucHk=) | `86.66% <0.00%> (ø)` | |
| [silk/urls.py](https://codecov.io/gh/jazzband/django-silk/pull/463/diff?src=pr&el=tree#diff-c2lsay91cmxzLnB5) | `100.00% <0.00%> (ø)` | |
| [silk/sql.py](https://codecov.io/gh/jazzband/django-silk/pull/463/diff?src=pr&el=tree#diff-c2lsay9zcWwucHk=) | `72.88% <0.00%> (ø)` | |
| [silk/migrations/0001\_initial.py](https://codecov.io/gh/jazzband/django-silk/pull/463/diff?src=pr&el=tree#diff-c2lsay9taWdyYXRpb25zLzAwMDFfaW5pdGlhbC5weQ==) | `100.00% <0.00%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/463?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/463?src=pr&el=footer). Last update [bef36dc...368579c](https://codecov.io/gh/jazzband/django-silk/pull/463?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/464?src=pr&el=h1) Report
> Merging [#464](https://codecov.io/gh/jazzband/django-silk/pull/464?src=pr&el=desc) (e51665a) into [master](https://codecov.io/gh/jazzband/django-silk/commit/690444e8ae58145dca8ddd11f22523bb6abc93fb?el=desc) (690444e) will **increase** coverage by `1.34%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/464/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3)](https://codecov.io/gh/jazzband/django-silk/pull/464?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master     #464      +/-   ##
==========================================
+ Coverage   81.51%   82.85%   +1.34%     
==========================================
  Files          50       50              
  Lines        2040     2042       +2     
==========================================
+ Hits         1663     1692      +29     
+ Misses        377      350      -27     
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/464?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [silk/views/clear\_db.py](https://codecov.io/gh/jazzband/django-silk/pull/464/diff?src=pr&el=tree#diff-c2lsay92aWV3cy9jbGVhcl9kYi5weQ==) | `96.00% <100.00%> (+39.47%)` | :arrow_up: |
| [silk/utils/data\_deletion.py](https://codecov.io/gh/jazzband/django-silk/pull/464/diff?src=pr&el=tree#diff-c2lsay91dGlscy9kYXRhX2RlbGV0aW9uLnB5) | `100.00% <0.00%> (+85.71%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/464?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/464?src=pr&el=footer). Last update [690444e...e51665a](https://codecov.io/gh/jazzband/django-silk/pull/464?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/466?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#466](https://codecov.io/gh/jazzband/django-silk/pull/466?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (40e16c1) into [master](https://codecov.io/gh/jazzband/django-silk/commit/529280848943c35ea998908d634390463556c1a8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (5292808) will **decrease** coverage by `0.05%`.
> The diff coverage is `66.66%`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/466/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/466?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@            Coverage Diff             @@
##           master     #466      +/-   ##
==========================================
- Coverage   82.85%   82.80%   -0.06%     
==========================================
  Files          50       50              
  Lines        2042     2047       +5     
==========================================
+ Hits         1692     1695       +3     
- Misses        350      352       +2     
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/466?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/model\_factory.py](https://codecov.io/gh/jazzband/django-silk/pull/466/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9tb2RlbF9mYWN0b3J5LnB5) | `82.53% <66.66%> (-0.51%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/466?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/466?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [5292808...40e16c1](https://codecov.io/gh/jazzband/django-silk/pull/466?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/467?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#467](https://codecov.io/gh/jazzband/django-silk/pull/467?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (138900b) into [master](https://codecov.io/gh/jazzband/django-silk/commit/30eccfe52baa735537a00fbba909ecc1f8b0ae59?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (30eccfe) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/467/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/467?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #467   +/-   ##
=======================================
  Coverage   82.83%   82.83%           
=======================================
  Files          50       50           
  Lines        2051     2051           
=======================================
  Hits         1699     1699           
  Misses        352      352           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/467?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/467?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [30eccfe...138900b](https://codecov.io/gh/jazzband/django-silk/pull/467?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/469?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#469](https://codecov.io/gh/jazzband/django-silk/pull/469?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (d3ee332) into [master](https://codecov.io/gh/jazzband/django-silk/commit/7e93d6caecc83f8aad7cdb152b578f27787a59cc?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (7e93d6c) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/469/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/469?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #469   +/-   ##
=======================================
  Coverage   82.83%   82.83%           
=======================================
  Files          50       50           
  Lines        2051     2051           
=======================================
  Hits         1699     1699           
  Misses        352      352           
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/469?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/utils/data\_deletion.py](https://codecov.io/gh/jazzband/django-silk/pull/469/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay91dGlscy9kYXRhX2RlbGV0aW9uLnB5) | `100.00% <100.00%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/469?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/469?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [7e93d6c...d3ee332](https://codecov.io/gh/jazzband/django-silk/pull/469?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
Unfortunately there are still some issues with Django 3.2 that need to be resolved before we can label it as compatible.
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/476?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#476](https://codecov.io/gh/jazzband/django-silk/pull/476?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (5b90a3a) into [master](https://codecov.io/gh/jazzband/django-silk/commit/7e93d6caecc83f8aad7cdb152b578f27787a59cc?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (7e93d6c) will **decrease** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/476/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/476?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@            Coverage Diff             @@
##           master     #476      +/-   ##
==========================================
- Coverage   82.83%   82.82%   -0.01%     
==========================================
  Files          50       50              
  Lines        2051     2050       -1     
==========================================
- Hits         1699     1698       -1     
  Misses        352      352              
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/476?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/collector.py](https://codecov.io/gh/jazzband/django-silk/pull/476/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9jb2xsZWN0b3IucHk=) | `79.41% <100.00%> (-0.16%)` | :arrow_down: |
| [silk/\_\_init\_\_.py](https://codecov.io/gh/jazzband/django-silk/pull/476/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9fX2luaXRfXy5weQ==) | | |
| [silk/urls.py](https://codecov.io/gh/jazzband/django-silk/pull/476/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay91cmxzLnB5) | | |
| [project/project/\_\_init\_\_.py](https://codecov.io/gh/jazzband/django-silk/pull/476/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-cHJvamVjdC9wcm9qZWN0L19faW5pdF9fLnB5) | `60.00% <0.00%> (ø)` | |
| [project/project/urls.py](https://codecov.io/gh/jazzband/django-silk/pull/476/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-cHJvamVjdC9wcm9qZWN0L3VybHMucHk=) | `100.00% <0.00%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/476?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/476?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [7e93d6c...5b90a3a](https://codecov.io/gh/jazzband/django-silk/pull/476?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> can you please add a test for the changes?

I currently don't know exactly for what reason this issue happens. Should check it out further.
Fairly insignificant code coverage change, and I don't believe tests are needed for just changing how the variable is assigned.

Will merge.
Reverted this merge due to this issue with meta profiling

```
Exception when performing meta profiling, dumping trace below
Traceback (most recent call last):
  File "C:\Users\username\Documents\Repositories\Conreq\.venv\lib\site-packages\silk\middleware.py", line 132, in _process_response
    collector.finalise()
  File "C:\Users\username\Documents\Repositories\Conreq\.venv\lib\site-packages\silk\collector.py", line 189, in finalise
  File "C:\Users\username\Documents\Repositories\Conreq\.venv\lib\site-packages\django\db\models\fields\related_descriptors.py", line 1015, in set
    self.add(*new_objs, through_defaults=through_defaults)
  File "C:\Users\username\Documents\Repositories\Conreq\.venv\lib\site-packages\django\db\models\fields\related_descriptors.py", line 950, in add
    self._add_items(
  File "C:\Users\username\Documents\Repositories\Conreq\.venv\lib\site-packages\django\db\models\fields\related_descriptors.py", line 1126, in _add_items
    target_ids = self._get_target_ids(target_field_name, objs)
  File "C:\Users\username\Documents\Repositories\Conreq\.venv\lib\site-packages\django\db\models\fields\related_descriptors.py", line 1062, in _get_target_ids
    raise ValueError(
ValueError: Cannot add "<SQLQuery: SQLQuery object (None)>": the value for field "sqlquery" is None
```
you should not have merge this on the first place.
I agree with you, my mistake.
can you please add a test for the changes?
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/479?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#479](https://codecov.io/gh/jazzband/django-silk/pull/479?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (7bd0a5a) into [master](https://codecov.io/gh/jazzband/django-silk/commit/7e93d6caecc83f8aad7cdb152b578f27787a59cc?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (7e93d6c) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/479/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/479?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #479   +/-   ##
=======================================
  Coverage   82.83%   82.83%           
=======================================
  Files          50       50           
  Lines        2051     2051           
=======================================
  Hits         1699     1699           
  Misses        352      352           
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/479?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/\_\_init\_\_.py](https://codecov.io/gh/jazzband/django-silk/pull/479/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9fX2luaXRfXy5weQ==) | | |
| [silk/urls.py](https://codecov.io/gh/jazzband/django-silk/pull/479/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay91cmxzLnB5) | | |
| [project/project/urls.py](https://codecov.io/gh/jazzband/django-silk/pull/479/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-cHJvamVjdC9wcm9qZWN0L3VybHMucHk=) | `100.00% <0.00%> (ø)` | |
| [project/project/\_\_init\_\_.py](https://codecov.io/gh/jazzband/django-silk/pull/479/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-cHJvamVjdC9wcm9qZWN0L19faW5pdF9fLnB5) | `60.00% <0.00%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/479?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/479?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [7e93d6c...7bd0a5a](https://codecov.io/gh/jazzband/django-silk/pull/479?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
Obsolete as of @MT-Cash 's commit yesterday
Sorry, I didn't see that there already is an open PR
@auvipy could you hit the button to approve the workflow run?
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/482?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#482](https://codecov.io/gh/jazzband/django-silk/pull/482?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (d4277ff) into [master](https://codecov.io/gh/jazzband/django-silk/commit/7e93d6caecc83f8aad7cdb152b578f27787a59cc?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (7e93d6c) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/482/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/482?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #482   +/-   ##
=======================================
  Coverage   82.83%   82.83%           
=======================================
  Files          50       50           
  Lines        2051     2051           
=======================================
  Hits         1699     1699           
  Misses        352      352           
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/482?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/views/summary.py](https://codecov.io/gh/jazzband/django-silk/pull/482/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay92aWV3cy9zdW1tYXJ5LnB5) | `91.93% <100.00%> (ø)` | |
| [silk/\_\_init\_\_.py](https://codecov.io/gh/jazzband/django-silk/pull/482/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9fX2luaXRfXy5weQ==) | | |
| [silk/urls.py](https://codecov.io/gh/jazzband/django-silk/pull/482/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay91cmxzLnB5) | | |
| [project/project/\_\_init\_\_.py](https://codecov.io/gh/jazzband/django-silk/pull/482/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-cHJvamVjdC9wcm9qZWN0L19faW5pdF9fLnB5) | `60.00% <0.00%> (ø)` | |
| [project/project/urls.py](https://codecov.io/gh/jazzband/django-silk/pull/482/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-cHJvamVjdC9wcm9qZWN0L3VybHMucHk=) | `100.00% <0.00%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/482?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/482?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [7e93d6c...d4277ff](https://codecov.io/gh/jazzband/django-silk/pull/482?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> can you check the build failures? also shouldn't we update unit tests for the change?

The build failures aren't related to the code changes in the PR. In fact, they're also present in https://github.com/jazzband/django-silk/pull/479/checks which doesn't do any code changes at all. It looks like master is broken.

Regarding updating the unit tests: I agree, that was a bit of an oversight on my end. I'll update them asap.
can you check the build failures? also shouldn't we update unit tests for the change?
@auvipy could you hit the button to approve the workflow run?
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/483?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#483](https://codecov.io/gh/jazzband/django-silk/pull/483?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (a559a7e) into [master](https://codecov.io/gh/jazzband/django-silk/commit/7e93d6caecc83f8aad7cdb152b578f27787a59cc?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (7e93d6c) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/483/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/483?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #483   +/-   ##
=======================================
  Coverage   82.83%   82.83%           
=======================================
  Files          50       50           
  Lines        2051     2051           
=======================================
  Hits         1699     1699           
  Misses        352      352           
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/483?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/views/summary.py](https://codecov.io/gh/jazzband/django-silk/pull/483/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay92aWV3cy9zdW1tYXJ5LnB5) | `91.93% <100.00%> (ø)` | |
| [silk/urls.py](https://codecov.io/gh/jazzband/django-silk/pull/483/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay91cmxzLnB5) | | |
| [silk/\_\_init\_\_.py](https://codecov.io/gh/jazzband/django-silk/pull/483/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9fX2luaXRfXy5weQ==) | | |
| [project/project/\_\_init\_\_.py](https://codecov.io/gh/jazzband/django-silk/pull/483/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-cHJvamVjdC9wcm9qZWN0L19faW5pdF9fLnB5) | `60.00% <0.00%> (ø)` | |
| [project/project/urls.py](https://codecov.io/gh/jazzband/django-silk/pull/483/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-cHJvamVjdC9wcm9qZWN0L3VybHMucHk=) | `100.00% <0.00%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/483?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/483?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [7e93d6c...a559a7e](https://codecov.io/gh/jazzband/django-silk/pull/483?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> can you check the build failures? also shouldn't we update unit tests for the change?

The build failures aren't related to the code changes in the PR. In fact, they're also present in https://github.com/jazzband/django-silk/pull/479/checks which doesn't do any code changes at all. It looks like master is broken.

Regarding updating the unit tests: I agree, that was a bit of an oversight on my end. I'll update them asap.
Since this PR doesn't affect code coverage, I do not believe additional tests are needed for a simple `sorted()` call.

Merging this PR.
this type of logic of you is not really acceptable. test is needed for verification of code. sometimes that could be avoided, sometimes the code could be OK but not always.
can you check the build failures? also shouldn't we update unit tests for the change?
@auvipy could you hit the button to approve the workflow run?
done
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/484?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#484](https://codecov.io/gh/jazzband/django-silk/pull/484?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (cd3c7c2) into [master](https://codecov.io/gh/jazzband/django-silk/commit/7e93d6caecc83f8aad7cdb152b578f27787a59cc?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (7e93d6c) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/484/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/484?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #484   +/-   ##
=======================================
  Coverage   82.83%   82.83%           
=======================================
  Files          50       50           
  Lines        2051     2051           
=======================================
  Hits         1699     1699           
  Misses        352      352           
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/484?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/views/summary.py](https://codecov.io/gh/jazzband/django-silk/pull/484/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay92aWV3cy9zdW1tYXJ5LnB5) | `91.93% <100.00%> (ø)` | |
| [silk/urls.py](https://codecov.io/gh/jazzband/django-silk/pull/484/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay91cmxzLnB5) | | |
| [silk/\_\_init\_\_.py](https://codecov.io/gh/jazzband/django-silk/pull/484/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9fX2luaXRfXy5weQ==) | | |
| [project/project/urls.py](https://codecov.io/gh/jazzband/django-silk/pull/484/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-cHJvamVjdC9wcm9qZWN0L3VybHMucHk=) | `100.00% <0.00%> (ø)` | |
| [project/project/\_\_init\_\_.py](https://codecov.io/gh/jazzband/django-silk/pull/484/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-cHJvamVjdC9wcm9qZWN0L19faW5pdF9fLnB5) | `60.00% <0.00%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/484?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/484?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [7e93d6c...cd3c7c2](https://codecov.io/gh/jazzband/django-silk/pull/484?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> can you check the build failures? also shouldn't we update unit tests for the change?

The build failures aren't related to the code changes in the PR. In fact, they're also present in https://github.com/jazzband/django-silk/pull/479/checks which doesn't do any code changes at all. It looks like master is broken.

Regarding updating the unit tests: I agree, that was a bit of an oversight on my end. I'll update them asap.
but test needed for all the proposed changes
@auvipy ref: https://github.com/psycopg/psycopg2/issues/1293 looking to see if anyone else has a solution in jazz band discussion. If not, then we can merge #486
As per [Jazzband testing guidelines](https://jazzband.co/about/guidelines#tests) I don't think this one needs a unit test.

@Andrew-Chen-Wang could you merge in the latest commits from `jazzband/django-silk:master` into this branch and see if that cleans up the test failures?
can you check the build failures? also shouldn't we update unit tests for the change?
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/485?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#485](https://codecov.io/gh/jazzband/django-silk/pull/485?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (6df4718) into [master](https://codecov.io/gh/jazzband/django-silk/commit/7e93d6caecc83f8aad7cdb152b578f27787a59cc?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (7e93d6c) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/485/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/485?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #485   +/-   ##
=======================================
  Coverage   82.83%   82.83%           
=======================================
  Files          50       50           
  Lines        2051     2051           
=======================================
  Hits         1699     1699           
  Misses        352      352           
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/485?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/urls.py](https://codecov.io/gh/jazzband/django-silk/pull/485/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay91cmxzLnB5) | | |
| [silk/\_\_init\_\_.py](https://codecov.io/gh/jazzband/django-silk/pull/485/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9fX2luaXRfXy5weQ==) | | |
| [project/project/urls.py](https://codecov.io/gh/jazzband/django-silk/pull/485/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-cHJvamVjdC9wcm9qZWN0L3VybHMucHk=) | `100.00% <0.00%> (ø)` | |
| [project/project/\_\_init\_\_.py](https://codecov.io/gh/jazzband/django-silk/pull/485/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-cHJvamVjdC9wcm9qZWN0L19faW5pdF9fLnB5) | `60.00% <0.00%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/485?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/485?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [7e93d6c...6df4718](https://codecov.io/gh/jazzband/django-silk/pull/485?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
Test failures are definitely unrelated to changes in this PR, so this seems good to go.

I just became a Jazzband member to merge this PR ;) It's actually quite easy!
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/486?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#486](https://codecov.io/gh/jazzband/django-silk/pull/486?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (1ed4f9f) into [master](https://codecov.io/gh/jazzband/django-silk/commit/7e93d6caecc83f8aad7cdb152b578f27787a59cc?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (7e93d6c) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/486/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/486?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #486   +/-   ##
=======================================
  Coverage   82.83%   82.83%           
=======================================
  Files          50       50           
  Lines        2051     2051           
=======================================
  Hits         1699     1699           
  Misses        352      352           
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/486?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/urls.py](https://codecov.io/gh/jazzband/django-silk/pull/486/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay91cmxzLnB5) | | |
| [silk/\_\_init\_\_.py](https://codecov.io/gh/jazzband/django-silk/pull/486/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9fX2luaXRfXy5weQ==) | | |
| [project/project/\_\_init\_\_.py](https://codecov.io/gh/jazzband/django-silk/pull/486/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-cHJvamVjdC9wcm9qZWN0L19faW5pdF9fLnB5) | `60.00% <0.00%> (ø)` | |
| [project/project/urls.py](https://codecov.io/gh/jazzband/django-silk/pull/486/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-cHJvamVjdC9wcm9qZWN0L3VybHMucHk=) | `100.00% <0.00%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/486?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/486?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [7e93d6c...1ed4f9f](https://codecov.io/gh/jazzband/django-silk/pull/486?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/490?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#490](https://codecov.io/gh/jazzband/django-silk/pull/490?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (0650fab) into [master](https://codecov.io/gh/jazzband/django-silk/commit/7f03cfef0b554af541dc53fc6d5bee850469098a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (7f03cfe) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/490/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/490?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #490   +/-   ##
=======================================
  Coverage   82.83%   82.83%           
=======================================
  Files          50       50           
  Lines        2051     2051           
=======================================
  Hits         1699     1699           
  Misses        352      352           
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/490?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/views/code.py](https://codecov.io/gh/jazzband/django-silk/pull/490/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay92aWV3cy9jb2RlLnB5) | `87.87% <100.00%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/490?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/490?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [7f03cfe...0650fab](https://codecov.io/gh/jazzband/django-silk/pull/490?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
Great addition, thanks!
I'm not 100% certain if it really is outdated, but comments in #455 and #305 say so
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/491?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#491](https://codecov.io/gh/jazzband/django-silk/pull/491?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (25260dc) into [master](https://codecov.io/gh/jazzband/django-silk/commit/7f03cfef0b554af541dc53fc6d5bee850469098a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (7f03cfe) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/491/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/491?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #491   +/-   ##
=======================================
  Coverage   82.83%   82.83%           
=======================================
  Files          50       50           
  Lines        2051     2051           
=======================================
  Hits         1699     1699           
  Misses        352      352           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/491?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/491?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [7f03cfe...25260dc](https://codecov.io/gh/jazzband/django-silk/pull/491?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
Looks good, from my not-very-informed point of view ;)
Once we have these tests that actually hit the DB, we can get them all passing with a try/except around the call to `explain_query_prefix`: https://github.com/marius-mather/django-silk/pull/2/
I've added a workaround for this issue. I think this is ready to be tested and reviewed, if someone wants to approve the workflow and have a look.
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/493?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#493](https://codecov.io/gh/jazzband/django-silk/pull/493?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (105d331) into [master](https://codecov.io/gh/jazzband/django-silk/commit/ef1191538f0dd33b135e420e3203eceb7e2aab57?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (ef11915) will **increase** coverage by `1.74%`.
> The diff coverage is `85.71%`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/493/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/493?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@            Coverage Diff             @@
##           master     #493      +/-   ##
==========================================
+ Coverage   82.87%   84.61%   +1.74%     
==========================================
  Files          50       50              
  Lines        2055     2061       +6     
==========================================
+ Hits         1703     1744      +41     
+ Misses        352      317      -35     
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/493?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/sql.py](https://codecov.io/gh/jazzband/django-silk/pull/493/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9zcWwucHk=) | `78.46% <85.71%> (+5.58%)` | :arrow_up: |
| [silk/models.py](https://codecov.io/gh/jazzband/django-silk/pull/493/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9tb2RlbHMucHk=) | `87.33% <0.00%> (+0.43%)` | :arrow_up: |
| [silk/model\_factory.py](https://codecov.io/gh/jazzband/django-silk/pull/493/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9tb2RlbF9mYWN0b3J5LnB5) | `83.84% <0.00%> (+1.31%)` | :arrow_up: |
| [silk/collector.py](https://codecov.io/gh/jazzband/django-silk/pull/493/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9jb2xsZWN0b3IucHk=) | `89.78% <0.00%> (+10.21%)` | :arrow_up: |
| [silk/middleware.py](https://codecov.io/gh/jazzband/django-silk/pull/493/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9taWRkbGV3YXJlLnB5) | `89.32% <0.00%> (+14.56%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/493?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/493?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [ef11915...105d331](https://codecov.io/gh/jazzband/django-silk/pull/493?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/494?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#494](https://codecov.io/gh/jazzband/django-silk/pull/494?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (0c237b3) into [master](https://codecov.io/gh/jazzband/django-silk/commit/11aa8cd8c6bb8eee46878e2e90da540c85c7bea3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (11aa8cd) will **increase** coverage by `0.03%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/494/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/494?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@            Coverage Diff             @@
##           master     #494      +/-   ##
==========================================
+ Coverage   84.61%   84.65%   +0.03%     
==========================================
  Files          50       51       +1     
  Lines        2061     2066       +5     
==========================================
+ Hits         1744     1749       +5     
  Misses        317      317              
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/494?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/config.py](https://codecov.io/gh/jazzband/django-silk/pull/494/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9jb25maWcucHk=) | `90.47% <ø> (ø)` | |
| [silk/model\_factory.py](https://codecov.io/gh/jazzband/django-silk/pull/494/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9tb2RlbF9mYWN0b3J5LnB5) | `83.84% <100.00%> (ø)` | |
| [silk/apps.py](https://codecov.io/gh/jazzband/django-silk/pull/494/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9hcHBzLnB5) | `100.00% <0.00%> (ø)` | |
| [project/project/\_\_init\_\_.py](https://codecov.io/gh/jazzband/django-silk/pull/494/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-cHJvamVjdC9wcm9qZWN0L19faW5pdF9fLnB5) | `66.66% <0.00%> (+6.66%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/494?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/494?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [11aa8cd...0c237b3](https://codecov.io/gh/jazzband/django-silk/pull/494?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
this change also need docs for usage
thanks, added usage docs under README.md for your review
related docs - https://docs.djangoproject.com/en/3.2/releases/3.2/#customizing-type-of-auto-created-primary-keys
Also was curious why was there no `apps.py` uptil now, was it not required or I am missing something.
also deliberately named it `SilkAppConfig` and not `SilkConfig` (as the `startapp` template would have named) - which already exists for config management
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/495?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#495](https://codecov.io/gh/jazzband/django-silk/pull/495?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (bf548fd) into [master](https://codecov.io/gh/jazzband/django-silk/commit/038271cc310957d69859d36b6ea9ce6fe97fa351?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (038271c) will **increase** coverage by `0.03%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/495/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/495?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@            Coverage Diff             @@
##           master     #495      +/-   ##
==========================================
+ Coverage   84.61%   84.65%   +0.03%     
==========================================
  Files          50       51       +1     
  Lines        2061     2066       +5     
==========================================
+ Hits         1744     1749       +5     
  Misses        317      317              
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/495?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/apps.py](https://codecov.io/gh/jazzband/django-silk/pull/495/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9hcHBzLnB5) | `100.00% <100.00%> (ø)` | |
| [project/project/\_\_init\_\_.py](https://codecov.io/gh/jazzband/django-silk/pull/495/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-cHJvamVjdC9wcm9qZWN0L19faW5pdF9fLnB5) | `66.66% <0.00%> (+6.66%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/495?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/495?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [038271c...bf548fd](https://codecov.io/gh/jazzband/django-silk/pull/495?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
This looks like a sensible change to me. Maybe add a test that fetches the app config?

Looks like the failing check is in test_profile_parser - I had the same one off error on my PR, it went away when rerunning the checks.
@marius-mather added basic test to check if proper class is loaded as AppConfig for silk.

Not sure how to fix the failing test_profile_parser - looks like the output is not matching some regex for DJango 3.2+mysql
another test to check if no pending migrations are there in "silk", this is to avoid unneccessary migrations to be created in silk, when end user runs `mange.py makemigrations`.
self-merging it.
@daadu Would have preferred if you had addressed or replied to the comment first.
Which comment?
That's actually my bad, seems like I forgot to click submit on the review.
you should have ask for a review before self merging this
> you should have ask for a review before self merging this

I asked for review and did not get any response, thought that there is no one to reviewer and should be merged if passed.

Bad from my side to assume that. Will not do it in future.
yeah gonna revert this PR. we need different approch for handling this
I honestly think a simpler approach would just be to commit a migration with the big auto field attached. Would also allow us to remove `makemigrations` from the readme.

Here's the output of my makemigrations for reference

```python
from django.db import migrations, models

class Migration(migrations.Migration):

    dependencies = [
        ('silk', '0008_sqlquery_analysis'),
    ]

    operations = [
        migrations.AlterField(
            model_name='profile',
            name='id',
            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.AlterField(
            model_name='sqlquery',
            name='id',
            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
    ]

```
If you dont want to set `default_auto_field` then along with migration will also need to explicitly add the `id` field in `models.py` for `SQLQuery` and `Profile` - this is to avoid cases when `DEFAULT_AUTO_FIELD` is set to something else by the user - which could cause creating "migration files in silk".
also if it is decided to remove `apps.py` and going with explicity `id` fields approach, then still I suggest keeping the `NoPendinMigrationTest` - this will help is giving red flags when migrations are not properly added?
also @auvipy You want me to file new PR - as I still think this problem needs to be addressed?
filed new PR at #498
Should we save off a migration file with this new default auto default?

Side thought: Would that make the step requiring `python manage.py makemigrations` in the readme obsolete?
I just checked readme, as you suggest it tells user to run makemigration. This looks like an anti-pattern to me. Not sure why it is required at first place? If required then we should correct this.

Migration should be the responsibility of the package as it defines and maintains its own models. There are number of problems that could occurs if not done that way - for example any migration generated for silk won't be committed to version control.

I have added additional test case in this PR to make sure this doesn't happen.
I agree that we should investigate and make any changes required to remove makemigrations from our setup.

I won't be available to check up on this for another week. But, if I recall correctly the only thing I saw makemigrations do was create the auto field, which is fairly pointless and can/should be manually committed.

Unfortunately the repo leadership isn't available to tell us why they went down this route. And I'm fairly new to this repo so I can't give any insight on this one.
I checked blame - it was introduced with #113
isn't this deprecated?
it was right, you are not getting it right, initially 3rd  party migrations framework was used, that PR just switched to django new schema migration framework.
yes, it deprecated in Django 3.2 - but required for older version. Could only be removed once the support for < 3.2 is dropped by the package.
@auvipy Do you recall any particular reason why the README suggests running `makemigrations` ?

To me it is not necessary at all. Moreover added test in this PR that will raise red flag when there are pending migration inside the package.
bigAutoField will be used for new django projects autogen primary key, that should not effect this package, for the change we had we should generate new migrations which will need to be supplied with this package.
you can follow this approach https://github.com/celery/django-celery-beat/blob/master/django_celery_beat/__init__.py#L34 in the new PR
also you can follow he docs https://docs.djangoproject.com/en/3.2/ref/applications/
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/497?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#497](https://codecov.io/gh/jazzband/django-silk/pull/497?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (de9c4d0) into [master](https://codecov.io/gh/jazzband/django-silk/commit/0c554bc7d72b75d3af902b192c1f833ad06558f4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (0c554bc) will **decrease** coverage by `0.03%`.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/497/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/497?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@            Coverage Diff             @@
##           master     #497      +/-   ##
==========================================
- Coverage   84.65%   84.61%   -0.04%     
==========================================
  Files          51       50       -1     
  Lines        2066     2061       -5     
==========================================
- Hits         1749     1744       -5     
  Misses        317      317              
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/497?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [project/project/\_\_init\_\_.py](https://codecov.io/gh/jazzband/django-silk/pull/497/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-cHJvamVjdC9wcm9qZWN0L19faW5pdF9fLnB5) | `60.00% <0.00%> (-6.67%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/497?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/497?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [0c554bc...de9c4d0](https://codecov.io/gh/jazzband/django-silk/pull/497?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/498?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#498](https://codecov.io/gh/jazzband/django-silk/pull/498?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (f005c35) into [master](https://codecov.io/gh/jazzband/django-silk/commit/bd6f7233e409a97861e16d16a004aec75bf56776?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (bd6f723) will **increase** coverage by `0.04%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/498/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/498?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@            Coverage Diff             @@
##           master     #498      +/-   ##
==========================================
+ Coverage   84.61%   84.66%   +0.04%     
==========================================
  Files          50       51       +1     
  Lines        2061     2067       +6     
==========================================
+ Hits         1744     1750       +6     
  Misses        317      317              
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/498?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/migrations/0009\_explicit\_id\_fields.py](https://codecov.io/gh/jazzband/django-silk/pull/498/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9taWdyYXRpb25zLzAwMDlfZXhwbGljaXRfaWRfZmllbGRzLnB5) | `100.00% <100.00%> (ø)` | |
| [silk/models.py](https://codecov.io/gh/jazzband/django-silk/pull/498/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9tb2RlbHMucHk=) | `87.44% <100.00%> (+0.10%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/498?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/498?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [bd6f723...f005c35](https://codecov.io/gh/jazzband/django-silk/pull/498?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
I recommend commiting a new migration file alongside this PR.
@Archmonger Appropriate migration file added.

Also I have kept id filed of type `AutoField` only, since we should not be changing it to `BigAutoField` just because the default for new project will change, to it. If need to migrate to `BigAutoField` then it should have its own reasoning.
This looks good to me but I'll defer the final review to Asif.
> This looks good to me but I'll defer the final review to Asif.

thanks, do initial review but please tag me for another round of review since you are new in this repo.
I am opting out of contributing on this issue.
instead of ading explicit per model ID we can use appconfig
I would argue this is a good opportunity to remove makemigrations from the readme.
:+1:  :done:
instead of this 2  changes the app module with appconfig and default key would be appropriate.
when remvoe the explicit per moderl ID, and reintroduce appconfig, remove this file and regen a new migration and commit on this PR please.
also tests need not to have separate commits. they should be covered with the same commit of the actual code changes.
I'd argue this is a moot point since PRs should almost always be squashed before entering the main branch.
in that case this PR would be same as #495 ? Was it reverted only because it was "self-merged", I assumed it was because issue was with new "apps.py" file.
thats another point, squash merge or rebase merge both is ok.
@daadu My understanding is Asif had reverted mostly due to no external review.

Some components that are now a part of this PR would have been needed in the previous one.

Additionally, merges should be squashed before entering the main branch, we don't want to clutter the commit log.
> @daadu My understanding is Asif had reverted mostly due to no external review.
> 
> Some components that are now a part of this PR would have been needed in the previous one.
> 
> Additionally, merges should be squashed before entering the main branch, we don't want to clutter the commit log.

you are right. that pr was prematurely merged
Migration would not be required in appconfig based approach.
@Archmonger What additional components in this PR (except for README change, for which another PR could have been filed) would have been needed in it?

As per the review done, if we do those changes then this PR would be identical to #495.

I only wrote this PR because @auvipy told "yeah gonna revert this PR. we need different approch for handling this" he also reviewed with comment "bigAutoField will be used for new django projects autogen primary key, that should not effect this package, for the change we had we should generate new migrations which will need to be supplied with this package.". Therefore, I concluded that the approach we are taking is to have have explicit ids for two models (rest already use explicit ids).

After writing this PR, it is reviewed that need to go back to the #495, therefore I suggest you "revert the revert of #495". Or if we want to go with this (explicit ids in models) approach we should work on this PR. And about the README correct, I will file new PR, if that is agreed upon.

It would not make sense to write an identical PR. Hope that makes sense.
that would be ok
first of all you shouldn't have merged that PR. that needed thorough review. that is not how open source contributions are made. and no one told you to follow this approach. in django core your contributions would went through several round of review before actually get merged.
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/499?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#499](https://codecov.io/gh/jazzband/django-silk/pull/499?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (f6c7848) into [master](https://codecov.io/gh/jazzband/django-silk/commit/bd6f7233e409a97861e16d16a004aec75bf56776?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (bd6f723) will **not change** coverage.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/499/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/499?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #499   +/-   ##
=======================================
  Coverage   84.61%   84.61%           
=======================================
  Files          50       50           
  Lines        2061     2061           
=======================================
  Hits         1744     1744           
  Misses        317      317           
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/499?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/models.py](https://codecov.io/gh/jazzband/django-silk/pull/499/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9tb2RlbHMucHk=) | `87.33% <100.00%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/499?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/499?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [bd6f723...f6c7848](https://codecov.io/gh/jazzband/django-silk/pull/499?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/500?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#500](https://codecov.io/gh/jazzband/django-silk/pull/500?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (17efcbe) into [master](https://codecov.io/gh/jazzband/django-silk/commit/74fb5c16ae5ac108efb9b45247f44914b3f71cb4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (74fb5c1) will **not change** coverage.
> The diff coverage is `95.00%`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/500/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/500?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #500   +/-   ##
=======================================
  Coverage   84.61%   84.61%           
=======================================
  Files          50       50           
  Lines        2061     2061           
=======================================
  Hits         1744     1744           
  Misses        317      317           
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/500?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/request\_filters.py](https://codecov.io/gh/jazzband/django-silk/pull/500/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9yZXF1ZXN0X2ZpbHRlcnMucHk=) | `65.40% <92.85%> (ø)` | |
| [silk/collector.py](https://codecov.io/gh/jazzband/django-silk/pull/500/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9jb2xsZWN0b3IucHk=) | `89.78% <100.00%> (ø)` | |
| [silk/model\_factory.py](https://codecov.io/gh/jazzband/django-silk/pull/500/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9tb2RlbF9mYWN0b3J5LnB5) | `83.84% <100.00%> (ø)` | |
| [silk/storage.py](https://codecov.io/gh/jazzband/django-silk/pull/500/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9zdG9yYWdlLnB5) | `100.00% <100.00%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/500?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/500?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [74fb5c1...17efcbe](https://codecov.io/gh/jazzband/django-silk/pull/500?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/501?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#501](https://codecov.io/gh/jazzband/django-silk/pull/501?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (49fe0a8) into [master](https://codecov.io/gh/jazzband/django-silk/commit/bd6f7233e409a97861e16d16a004aec75bf56776?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (bd6f723) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/501/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/501?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #501   +/-   ##
=======================================
  Coverage   84.61%   84.61%           
=======================================
  Files          50       50           
  Lines        2061     2061           
=======================================
  Hits         1744     1744           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/501?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/501?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [bd6f723...49fe0a8](https://codecov.io/gh/jazzband/django-silk/pull/501?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/503?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#503](https://codecov.io/gh/jazzband/django-silk/pull/503?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (db6d081) into [master](https://codecov.io/gh/jazzband/django-silk/commit/2a30739edab8e988601f7b0de97b363e4aef8695?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (2a30739) will **increase** coverage by `0.05%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/503/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/503?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@            Coverage Diff             @@
##           master     #503      +/-   ##
==========================================
+ Coverage   84.61%   84.67%   +0.05%     
==========================================
  Files          50       51       +1     
  Lines        2061     2068       +7     
==========================================
+ Hits         1744     1751       +7     
  Misses        317      317              
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/503?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/apps.py](https://codecov.io/gh/jazzband/django-silk/pull/503/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9hcHBzLnB5) | `100.00% <100.00%> (ø)` | |
| [project/project/\_\_init\_\_.py](https://codecov.io/gh/jazzband/django-silk/pull/503/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-cHJvamVjdC9wcm9qZWN0L19faW5pdF9fLnB5) | `75.00% <0.00%> (+15.00%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/503?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/503?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [2a30739...db6d081](https://codecov.io/gh/jazzband/django-silk/pull/503?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
goo job
no new line
no new line.also can we use pytest style assert, if the project already use unitest stlyle assert then we can go as is
Seems like this assert style is the current cadence, so I will maintain it. If we want to change to pytest style, should be a separate PR.
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/504?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#504](https://codecov.io/gh/jazzband/django-silk/pull/504?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (2d25ad0) into [master](https://codecov.io/gh/jazzband/django-silk/commit/2a30739edab8e988601f7b0de97b363e4aef8695?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (2a30739) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/504/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/504?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #504   +/-   ##
=======================================
  Coverage   84.61%   84.61%           
=======================================
  Files          50       50           
  Lines        2061     2061           
=======================================
  Hits         1744     1744           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/504?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/504?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [2a30739...2d25ad0](https://codecov.io/gh/jazzband/django-silk/pull/504?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/505?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#505](https://codecov.io/gh/jazzband/django-silk/pull/505?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (bb105bc) into [master](https://codecov.io/gh/jazzband/django-silk/commit/2a30739edab8e988601f7b0de97b363e4aef8695?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (2a30739) will **decrease** coverage by `0.01%`.
> The diff coverage is `78.69%`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/505/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/505?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@            Coverage Diff             @@
##           master     #505      +/-   ##
==========================================
- Coverage   84.61%   84.60%   -0.02%     
==========================================
  Files          50       50              
  Lines        2061     2059       -2     
==========================================
- Hits         1744     1742       -2     
  Misses        317      317              
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/505?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/storage.py](https://codecov.io/gh/jazzband/django-silk/pull/505/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9zdG9yYWdlLnB5) | `100.00% <ø> (ø)` | |
| [silk/views/profile\_download.py](https://codecov.io/gh/jazzband/django-silk/pull/505/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay92aWV3cy9wcm9maWxlX2Rvd25sb2FkLnB5) | `71.42% <0.00%> (ø)` | |
| [silk/request\_filters.py](https://codecov.io/gh/jazzband/django-silk/pull/505/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9yZXF1ZXN0X2ZpbHRlcnMucHk=) | `65.40% <28.57%> (ø)` | |
| [silk/code\_generation/curl.py](https://codecov.io/gh/jazzband/django-silk/pull/505/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9jb2RlX2dlbmVyYXRpb24vY3VybC5weQ==) | `47.22% <30.00%> (ø)` | |
| [silk/templatetags/silk\_filters.py](https://codecov.io/gh/jazzband/django-silk/pull/505/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay90ZW1wbGF0ZXRhZ3Mvc2lsa19maWx0ZXJzLnB5) | `66.17% <46.15%> (ø)` | |
| [silk/views/cprofile.py](https://codecov.io/gh/jazzband/django-silk/pull/505/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay92aWV3cy9jcHJvZmlsZS5weQ==) | `71.42% <50.00%> (-1.91%)` | :arrow_down: |
| [silk/views/profile\_dot.py](https://codecov.io/gh/jazzband/django-silk/pull/505/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay92aWV3cy9wcm9maWxlX2RvdC5weQ==) | `88.09% <50.00%> (ø)` | |
| [silk/utils/profile\_parser.py](https://codecov.io/gh/jazzband/django-silk/pull/505/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay91dGlscy9wcm9maWxlX3BhcnNlci5weQ==) | `91.66% <66.66%> (ø)` | |
| [silk/profiling/profiler.py](https://codecov.io/gh/jazzband/django-silk/pull/505/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9wcm9maWxpbmcvcHJvZmlsZXIucHk=) | `88.80% <68.75%> (ø)` | |
| [silk/views/raw.py](https://codecov.io/gh/jazzband/django-silk/pull/505/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay92aWV3cy9yYXcucHk=) | `83.33% <72.72%> (ø)` | |
| ... and [31 more](https://codecov.io/gh/jazzband/django-silk/pull/505/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/505?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/505?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [2a30739...bb105bc](https://codecov.io/gh/jazzband/django-silk/pull/505?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
Closing in favor of #506
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/506?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#506](https://codecov.io/gh/jazzband/django-silk/pull/506?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (383c4a3) into [master](https://codecov.io/gh/jazzband/django-silk/commit/432eb9620d92c3080adb8cab7b1f4efa700bc7dd?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (432eb96) will **decrease** coverage by `13.22%`.
> The diff coverage is `55.55%`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/506/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/506?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@             Coverage Diff             @@
##           master     #506       +/-   ##
===========================================
- Coverage   84.67%   71.44%   -13.23%     
===========================================
  Files          51       51               
  Lines        2068     2063        -5     
===========================================
- Hits         1751     1474      -277     
- Misses        317      589      +272     
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/506?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/profiling/dynamic.py](https://codecov.io/gh/jazzband/django-silk/pull/506/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9wcm9maWxpbmcvZHluYW1pYy5weQ==) | `55.65% <ø> (-27.97%)` | :arrow_down: |
| [silk/profiling/profiler.py](https://codecov.io/gh/jazzband/django-silk/pull/506/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9wcm9maWxpbmcvcHJvZmlsZXIucHk=) | `88.80% <ø> (ø)` | |
| [silk/request\_filters.py](https://codecov.io/gh/jazzband/django-silk/pull/506/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9yZXF1ZXN0X2ZpbHRlcnMucHk=) | `39.62% <0.00%> (-25.79%)` | :arrow_down: |
| [silk/views/cprofile.py](https://codecov.io/gh/jazzband/django-silk/pull/506/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay92aWV3cy9jcHJvZmlsZS5weQ==) | `69.23% <0.00%> (-4.11%)` | :arrow_down: |
| [silk/templatetags/silk\_filters.py](https://codecov.io/gh/jazzband/django-silk/pull/506/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay90ZW1wbGF0ZXRhZ3Mvc2lsa19maWx0ZXJzLnB5) | `42.64% <50.00%> (-23.53%)` | :arrow_down: |
| [silk/model\_factory.py](https://codecov.io/gh/jazzband/django-silk/pull/506/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9tb2RlbF9mYWN0b3J5LnB5) | `82.96% <66.66%> (-0.88%)` | :arrow_down: |
| [silk/middleware.py](https://codecov.io/gh/jazzband/django-silk/pull/506/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9taWRkbGV3YXJlLnB5) | `87.12% <100.00%> (-2.20%)` | :arrow_down: |
| [silk/models.py](https://codecov.io/gh/jazzband/django-silk/pull/506/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9tb2RlbHMucHk=) | `86.52% <100.00%> (-0.82%)` | :arrow_down: |
| [silk/views/sql\_detail.py](https://codecov.io/gh/jazzband/django-silk/pull/506/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay92aWV3cy9zcWxfZGV0YWlsLnB5) | `26.41% <0.00%> (-67.93%)` | :arrow_down: |
| [silk/views/sql.py](https://codecov.io/gh/jazzband/django-silk/pull/506/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay92aWV3cy9zcWwucHk=) | `37.93% <0.00%> (-58.63%)` | :arrow_down: |
| ... and [22 more](https://codecov.io/gh/jazzband/django-silk/pull/506/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/506?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/506?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [432eb96...383c4a3](https://codecov.io/gh/jazzband/django-silk/pull/506?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
black formatting is not needed right now
Since this repo didn't have any workflows for formatting/styling, I would argue this is just paying for the sins of the past. All styling changes in this PR were automated by `black`.

I'd personally say if the changes need to eventually occur, may as well get them out of the way sooner rather than later.
> Since this repo didn't have any workflows for formatting/styling, I would argue this is just paying for the sins of the past. All styling changes in this PR were automated by `black`.
> 
> I'd personally say if the changes need to eventually occur, may as well get them out of the way sooner rather than later.

no sin of past, just some new tools introduced thats it. old projects dont embrace this type large commits to change everything. just the config with no black for now is OK.
After removing black, although total LOCs changed has been reduced, this PR is still relatively massive in terms of total files changed due to `pyupgrade`. 

A lot of the changes made by pyupgrade are actually really good IMO. What is your thoughts?
pyupgrade changes should be hanndled in a separate PR.
I've removed `isort`, `pyupgrade`, and `flake8` with the intention of re-adding each of those as an individual PRs.

I've kept in a couple of changes I made, including removing unusued imports, removing duplicate functions, and fixing non PEP8 variable names. Let me know if I should remove those too and handle it separately.
Looks like some stuff broke through the revert (merge resolutions). Rather than debugging I've created #507
merging this massive PR as is will break git bisect. so please just add the config files. others will be incrementally fixed by smaller contributions when made. also we don;t need to switch to "" from ' ' right now.
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/507?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#507](https://codecov.io/gh/jazzband/django-silk/pull/507?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (8223974) into [master](https://codecov.io/gh/jazzband/django-silk/commit/432eb9620d92c3080adb8cab7b1f4efa700bc7dd?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (432eb96) will **not change** coverage.
> The diff coverage is `0.00%`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/507/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/507?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #507   +/-   ##
=======================================
  Coverage   84.67%   84.67%           
=======================================
  Files          51       51           
  Lines        2068     2068           
=======================================
  Hits         1751     1751           
  Misses        317      317           
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/507?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/profiling/profiler.py](https://codecov.io/gh/jazzband/django-silk/pull/507/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9wcm9maWxpbmcvcHJvZmlsZXIucHk=) | `88.80% <ø> (ø)` | |
| [silk/views/cprofile.py](https://codecov.io/gh/jazzband/django-silk/pull/507/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay92aWV3cy9jcHJvZmlsZS5weQ==) | `73.33% <0.00%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/507?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/507?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [432eb96...8223974](https://codecov.io/gh/jazzband/django-silk/pull/507?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/509?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#509](https://codecov.io/gh/jazzband/django-silk/pull/509?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (01475ac) into [master](https://codecov.io/gh/jazzband/django-silk/commit/ce2cbed0f08f9f0023e9cf9acd64244c0303583f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (ce2cbed) will **decrease** coverage by `0.01%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/509/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/509?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@            Coverage Diff             @@
##           master     #509      +/-   ##
==========================================
- Coverage   84.67%   84.65%   -0.02%     
==========================================
  Files          51       51              
  Lines        2068     2066       -2     
==========================================
- Hits         1751     1749       -2     
  Misses        317      317              
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/509?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/migrations/0004\_request\_prof\_file\_storage.py](https://codecov.io/gh/jazzband/django-silk/pull/509/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9taWdyYXRpb25zLzAwMDRfcmVxdWVzdF9wcm9mX2ZpbGVfc3RvcmFnZS5weQ==) | `100.00% <ø> (ø)` | |
| [...grations/0005\_increase\_request\_prof\_file\_length.py](https://codecov.io/gh/jazzband/django-silk/pull/509/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9taWdyYXRpb25zLzAwMDVfaW5jcmVhc2VfcmVxdWVzdF9wcm9mX2ZpbGVfbGVuZ3RoLnB5) | `100.00% <ø> (ø)` | |
| [...ilk/migrations/0006\_fix\_request\_prof\_file\_blank.py](https://codecov.io/gh/jazzband/django-silk/pull/509/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9taWdyYXRpb25zLzAwMDZfZml4X3JlcXVlc3RfcHJvZl9maWxlX2JsYW5rLnB5) | `100.00% <ø> (ø)` | |
| [silk/utils/profile\_parser.py](https://codecov.io/gh/jazzband/django-silk/pull/509/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay91dGlscy9wcm9maWxlX3BhcnNlci5weQ==) | `91.66% <ø> (ø)` | |
| [silk/views/profile\_detail.py](https://codecov.io/gh/jazzband/django-silk/pull/509/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay92aWV3cy9wcm9maWxlX2RldGFpbC5weQ==) | `84.37% <ø> (ø)` | |
| [silk/views/profile\_download.py](https://codecov.io/gh/jazzband/django-silk/pull/509/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay92aWV3cy9wcm9maWxlX2Rvd25sb2FkLnB5) | `71.42% <ø> (ø)` | |
| [project/project/urls.py](https://codecov.io/gh/jazzband/django-silk/pull/509/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-cHJvamVjdC9wcm9qZWN0L3VybHMucHk=) | `100.00% <100.00%> (ø)` | |
| [silk/auth.py](https://codecov.io/gh/jazzband/django-silk/pull/509/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9hdXRoLnB5) | `95.83% <100.00%> (ø)` | |
| [silk/code\_generation/django\_test\_client.py](https://codecov.io/gh/jazzband/django-silk/pull/509/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9jb2RlX2dlbmVyYXRpb24vZGphbmdvX3Rlc3RfY2xpZW50LnB5) | `69.56% <100.00%> (ø)` | |
| [silk/collector.py](https://codecov.io/gh/jazzband/django-silk/pull/509/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9jb2xsZWN0b3IucHk=) | `89.78% <100.00%> (ø)` | |
| ... and [17 more](https://codecov.io/gh/jazzband/django-silk/pull/509/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/509?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/509?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [ce2cbed...01475ac](https://codecov.io/gh/jazzband/django-silk/pull/509?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
I believe it's best to add flake8 changes as a separate PR. There's a lot of PEP8 violations in this repo that will need to be manually resolved in order to pass flake8 tests.
can you also add flake8 or its already in?
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/510?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#510](https://codecov.io/gh/jazzband/django-silk/pull/510?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (2bd075d) into [master](https://codecov.io/gh/jazzband/django-silk/commit/ce2cbed0f08f9f0023e9cf9acd64244c0303583f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (ce2cbed) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/510/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/510?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #510   +/-   ##
=======================================
  Coverage   84.67%   84.67%           
=======================================
  Files          51       51           
  Lines        2068     2068           
=======================================
  Hits         1751     1751           
  Misses        317      317           
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/510?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [project/project/\_\_init\_\_.py](https://codecov.io/gh/jazzband/django-silk/pull/510/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-cHJvamVjdC9wcm9qZWN0L19faW5pdF9fLnB5) | | |
| [project/project/urls.py](https://codecov.io/gh/jazzband/django-silk/pull/510/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-cHJvamVjdC9wcm9qZWN0L3VybHMucHk=) | | |
| [silk/\_\_init\_\_.py](https://codecov.io/gh/jazzband/django-silk/pull/510/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9fX2luaXRfXy5weQ==) | `75.00% <0.00%> (ø)` | |
| [silk/urls.py](https://codecov.io/gh/jazzband/django-silk/pull/510/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay91cmxzLnB5) | `100.00% <0.00%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/510?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/510?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [ce2cbed...2bd075d](https://codecov.io/gh/jazzband/django-silk/pull/510?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/511?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#511](https://codecov.io/gh/jazzband/django-silk/pull/511?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (e706960) into [master](https://codecov.io/gh/jazzband/django-silk/commit/b6c3934ff606db0a208cd4c7f0461f6f7ea2787a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (b6c3934) will **decrease** coverage by `0.03%`.
> The diff coverage is `81.48%`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/511/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/511?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@            Coverage Diff             @@
##           master     #511      +/-   ##
==========================================
- Coverage   84.65%   84.61%   -0.04%     
==========================================
  Files          51       51              
  Lines        2066     2061       -5     
==========================================
- Hits         1749     1744       -5     
  Misses        317      317              
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/511?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/code\_generation/curl.py](https://codecov.io/gh/jazzband/django-silk/pull/511/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9jb2RlX2dlbmVyYXRpb24vY3VybC5weQ==) | `47.22% <0.00%> (ø)` | |
| [silk/migrations/0001\_initial.py](https://codecov.io/gh/jazzband/django-silk/pull/511/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9taWdyYXRpb25zLzAwMDFfaW5pdGlhbC5weQ==) | `100.00% <ø> (ø)` | |
| [silk/migrations/0002\_auto\_update\_uuid4\_id\_field.py](https://codecov.io/gh/jazzband/django-silk/pull/511/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9taWdyYXRpb25zLzAwMDJfYXV0b191cGRhdGVfdXVpZDRfaWRfZmllbGQucHk=) | `100.00% <ø> (ø)` | |
| [silk/migrations/0003\_request\_prof\_file.py](https://codecov.io/gh/jazzband/django-silk/pull/511/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9taWdyYXRpb25zLzAwMDNfcmVxdWVzdF9wcm9mX2ZpbGUucHk=) | `100.00% <ø> (ø)` | |
| [silk/migrations/0004\_request\_prof\_file\_storage.py](https://codecov.io/gh/jazzband/django-silk/pull/511/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9taWdyYXRpb25zLzAwMDRfcmVxdWVzdF9wcm9mX2ZpbGVfc3RvcmFnZS5weQ==) | `100.00% <ø> (ø)` | |
| [...grations/0005\_increase\_request\_prof\_file\_length.py](https://codecov.io/gh/jazzband/django-silk/pull/511/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9taWdyYXRpb25zLzAwMDVfaW5jcmVhc2VfcmVxdWVzdF9wcm9mX2ZpbGVfbGVuZ3RoLnB5) | `100.00% <ø> (ø)` | |
| [silk/profiling/dynamic.py](https://codecov.io/gh/jazzband/django-silk/pull/511/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9wcm9maWxpbmcvZHluYW1pYy5weQ==) | `83.62% <0.00%> (ø)` | |
| [silk/request\_filters.py](https://codecov.io/gh/jazzband/django-silk/pull/511/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9yZXF1ZXN0X2ZpbHRlcnMucHk=) | `65.40% <0.00%> (ø)` | |
| [silk/views/profile\_detail.py](https://codecov.io/gh/jazzband/django-silk/pull/511/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay92aWV3cy9wcm9maWxlX2RldGFpbC5weQ==) | `84.37% <0.00%> (ø)` | |
| [silk/views/profile\_download.py](https://codecov.io/gh/jazzband/django-silk/pull/511/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay92aWV3cy9wcm9maWxlX2Rvd25sb2FkLnB5) | `71.42% <0.00%> (ø)` | |
| ... and [13 more](https://codecov.io/gh/jazzband/django-silk/pull/511/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/511?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/511?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [b6c3934...e706960](https://codecov.io/gh/jazzband/django-silk/pull/511?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/512?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#512](https://codecov.io/gh/jazzband/django-silk/pull/512?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (a241f06) into [master](https://codecov.io/gh/jazzband/django-silk/commit/8a8ac08282bcc985ad86c7a4bf28a25b1c3dcde5?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (8a8ac08) will **decrease** coverage by `0.01%`.
> The diff coverage is `72.72%`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/512/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/512?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@            Coverage Diff             @@
##           master     #512      +/-   ##
==========================================
- Coverage   84.61%   84.60%   -0.02%     
==========================================
  Files          51       51              
  Lines        2061     2059       -2     
==========================================
- Hits         1744     1742       -2     
  Misses        317      317              
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/512?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/model\_factory.py](https://codecov.io/gh/jazzband/django-silk/pull/512/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9tb2RlbF9mYWN0b3J5LnB5) | `83.84% <0.00%> (ø)` | |
| [silk/profiling/dynamic.py](https://codecov.io/gh/jazzband/django-silk/pull/512/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9wcm9maWxpbmcvZHluYW1pYy5weQ==) | `83.47% <ø> (-0.15%)` | :arrow_down: |
| [silk/templatetags/silk\_inclusion.py](https://codecov.io/gh/jazzband/django-silk/pull/512/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay90ZW1wbGF0ZXRhZ3Mvc2lsa19pbmNsdXNpb24ucHk=) | `96.55% <ø> (ø)` | |
| [silk/templatetags/silk\_filters.py](https://codecov.io/gh/jazzband/django-silk/pull/512/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay90ZW1wbGF0ZXRhZ3Mvc2lsa19maWx0ZXJzLnB5) | `66.17% <50.00%> (ø)` | |
| [silk/sql.py](https://codecov.io/gh/jazzband/django-silk/pull/512/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9zcWwucHk=) | `78.46% <75.00%> (ø)` | |
| [silk/middleware.py](https://codecov.io/gh/jazzband/django-silk/pull/512/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9taWRkbGV3YXJlLnB5) | `89.42% <100.00%> (+0.10%)` | :arrow_up: |
| [silk/models.py](https://codecov.io/gh/jazzband/django-silk/pull/512/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9tb2RlbHMucHk=) | `87.22% <100.00%> (-0.06%)` | :arrow_down: |
| [silk/views/cprofile.py](https://codecov.io/gh/jazzband/django-silk/pull/512/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay92aWV3cy9jcHJvZmlsZS5weQ==) | `69.23% <100.00%> (-2.20%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/512?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/512?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [8a8ac08...a241f06](https://codecov.io/gh/jazzband/django-silk/pull/512?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
Will manually resolve the following tomorrow

```bash
silk/models.py:5:1: F401 'collections.Counter' imported but unused
silk/models.py:11:1: F401 'django.db.models.F' imported but unused
project/tests/test_code_gen_curl.py:6:1: F401 'json' imported but unused
project/tests/test_code_gen_curl.py:7:1: F401 'subprocess' imported but unused
project/tests/test_code_gen_curl.py:8:1: F401 'unittest' imported but unused
project/tests/test_code_gen_curl.py:11:1: F401 'silk.code_generation.curl.curl_cmd' imported but unused
project/tests/test_view_profiling.py:1:1: F401 'random' imported but unused
project/tests/test_db.py:20:9: F841 local variable 'objects' is assigned to but never used
project/tests/test_db.py:30:9: F841 local variable 'profile' is assigned to but never used
project/tests/test_db.py:39:9: F841 local variable 'objects' is assigned to but never used
project/tests/test_db.py:55:9: F841 local variable 'profile' is assigned to but never used
project/tests/test_code.py:12:34: E741 ambiguous variable name 'l'
project/tests/test_execute_sql.py:7:1: F401 'silk.sql.connection' imported but unused
silk/views/cprofile.py:6:1: F401 'silk.models.Profile' imported but unused
silk/views/cprofile.py:7:1: F401 'silk.views.code._code_context' imported but unused
silk/views/cprofile.py:7:1: F401 'silk.views.code._code_context_from_request' imported but unused
silk/profiling/dynamic.py:5:1: F401 'functools.partial' imported but unused
project/gen.py:7:5: F841 local variable 'venetian' is assigned to but never used
project/gen.py:8:5: F841 local variable 'roller' is assigned to but never used
silk/templatetags/silk_filters.py:73:12: E741 ambiguous variable name 'l'
project/tests/test_profile_dot.py:55:13: E704 multiple statements on one line (def)
project/tests/test_profile_dot.py:80:36: F841 local variable 'filename' is assigned to but never used
project/tests/test_models.py:92:5: F811 redefinition of unused 'test_time_spent_on_sql_queries_if_has_related_SQLQueries_and_time_taken' from line 84
silk/middleware.py:30:1: E704 multiple statements on one line (def)
project/tests/__init__.py:1:1: F403 'from . import *' used; unable to detect undefined names
project/tests/__init__.py:1:1: F401 'from . import *' imported but unused
silk/model_factory.py:159:13: E722 do not use bare 'except'
project/tests/test_lib/mock_suite.py:1:1: F401 'calendar' imported but unused
project/example_app/tests.py:1:1: F401 'django.test.TestCase' imported but unused
project/tests/test_silky_middleware.py:1:1: F401 'unittest.mock.Mock' imported but unused
project/tests/test_sensitive_data_in_request.py:7:1: F401 'silk.model_factory.ResponseModelFactory' imported but unused
```
4.0.1
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/513?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#513](https://codecov.io/gh/jazzband/django-silk/pull/513?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (3e88d7a) into [master](https://codecov.io/gh/jazzband/django-silk/commit/22457393dcc5cbb122114f168ba3328da75aca79?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (2245739) will **not change** coverage.
> The diff coverage is `n/a`.

> :exclamation: Current head 3e88d7a differs from pull request most recent head 7baf86e. Consider uploading reports for the commit 7baf86e to get more accurate results
[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/513/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/513?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #513   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          51       51           
  Lines        2059     2059           
=======================================
  Hits         1742     1742           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/513?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/513?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [2245739...7baf86e](https://codecov.io/gh/jazzband/django-silk/pull/513?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
Only question I have is whether we should also delete `test_code_gen_curl.py`.

The whole file has been fully commented out since the very first commit, so it seems like dead code to me.
yeah you can remove that as well
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/516?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#516](https://codecov.io/gh/jazzband/django-silk/pull/516?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (c105e73) into [master](https://codecov.io/gh/jazzband/django-silk/commit/12e36541d7b9d80afad2f4c3e1033043aecc5263?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (12e3654) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/516/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/516?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #516   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          51       51           
  Lines        2059     2059           
=======================================
  Hits         1742     1742           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/516?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/516?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [12e3654...c105e73](https://codecov.io/gh/jazzband/django-silk/pull/516?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/518?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#518](https://codecov.io/gh/jazzband/django-silk/pull/518?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (a55c385) into [master](https://codecov.io/gh/jazzband/django-silk/commit/201598e2d489ed18a3049cb1c963bbdbc06786fc?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (201598e) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/518/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/518?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #518   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          51       51           
  Lines        2059     2059           
=======================================
  Hits         1742     1742           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/518?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/518?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [201598e...a55c385](https://codecov.io/gh/jazzband/django-silk/pull/518?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/519?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#519](https://codecov.io/gh/jazzband/django-silk/pull/519?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (75d7905) into [master](https://codecov.io/gh/jazzband/django-silk/commit/201598e2d489ed18a3049cb1c963bbdbc06786fc?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (201598e) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/519/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/519?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #519   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          51       51           
  Lines        2059     2059           
=======================================
  Hits         1742     1742           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/519?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/519?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [201598e...75d7905](https://codecov.io/gh/jazzband/django-silk/pull/519?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/520?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#520](https://codecov.io/gh/jazzband/django-silk/pull/520?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (50b956f) into [master](https://codecov.io/gh/jazzband/django-silk/commit/c7a7b2a84977dc47bdbcf9599e0d8873843dd9af?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (c7a7b2a) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/520/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/520?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #520   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          51       51           
  Lines        2059     2059           
=======================================
  Hits         1742     1742           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/520?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/520?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [c7a7b2a...50b956f](https://codecov.io/gh/jazzband/django-silk/pull/520?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/521?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#521](https://codecov.io/gh/jazzband/django-silk/pull/521?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (6c75301) into [master](https://codecov.io/gh/jazzband/django-silk/commit/12a28e99ec0c629aeb379b0657ebfc56925f8d61?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (12a28e9) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/521/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/521?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #521   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          51       51           
  Lines        2059     2059           
=======================================
  Hits         1742     1742           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/521?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/521?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [12a28e9...6c75301](https://codecov.io/gh/jazzband/django-silk/pull/521?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> https://github.com/jazzband/django-silk/blob/master/silk/apps.py#L4 this should work right?

@auvipy according to [docs](https://docs.djangoproject.com/en/3.2/ref/applications/#configuring-applications) this will be loaded automatically. It makes sense to use path to AppConfig class in `INSTALLED_APPS` only when there are more than one class in `apps` module.
https://github.com/jazzband/django-silk/blob/master/silk/apps.py#L4 this should work right?
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/523?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#523](https://codecov.io/gh/jazzband/django-silk/pull/523?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (44b05ba) into [master](https://codecov.io/gh/jazzband/django-silk/commit/208b5e2ecff79565e4b04ab311f594f3fff4a213?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (208b5e2) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/523/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/523?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #523   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          51       51           
  Lines        2059     2059           
=======================================
  Hits         1742     1742           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/523?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/523?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [208b5e2...44b05ba](https://codecov.io/gh/jazzband/django-silk/pull/523?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/524?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#524](https://codecov.io/gh/jazzband/django-silk/pull/524?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (c5cfd94) into [master](https://codecov.io/gh/jazzband/django-silk/commit/a06ec091932f8d6a6555abba4d4f7b22fe8e7272?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (a06ec09) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/524/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/524?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #524   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          51       51           
  Lines        2059     2059           
=======================================
  Hits         1742     1742           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/524?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/524?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [a06ec09...c5cfd94](https://codecov.io/gh/jazzband/django-silk/pull/524?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/526?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#526](https://codecov.io/gh/jazzband/django-silk/pull/526?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (94773e7) into [master](https://codecov.io/gh/jazzband/django-silk/commit/6bf0c51df5d49fac92ad018edbcca216eea1d3b7?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (6bf0c51) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/526/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/526?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #526   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          51       51           
  Lines        2059     2059           
=======================================
  Hits         1742     1742           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/526?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/526?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [6bf0c51...94773e7](https://codecov.io/gh/jazzband/django-silk/pull/526?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
@auvipy Did you do something specific to get auto version bumps on our pre-commit config, or was this setup automatically through jazzband?

Trying to get this configured for other non-jazzband repos right now.
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/527?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#527](https://codecov.io/gh/jazzband/django-silk/pull/527?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (d3d3896) into [master](https://codecov.io/gh/jazzband/django-silk/commit/6201b1af6b07732db6d254dacf66d5eb234b6d3a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (6201b1a) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/527/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/527?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #527   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          51       51           
  Lines        2059     2059           
=======================================
  Hits         1742     1742           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/527?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/527?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [6201b1a...d3d3896](https://codecov.io/gh/jazzband/django-silk/pull/527?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
Thank you @hramezani!
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/528?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#528](https://codecov.io/gh/jazzband/django-silk/pull/528?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (13210c6) into [master](https://codecov.io/gh/jazzband/django-silk/commit/c960a7971ccdd24a2006d2be62d3c3b675246653?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (c960a79) will **not change** coverage.
> The diff coverage is `40.00%`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/528/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/528?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #528   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          51       51           
  Lines        2059     2059           
=======================================
  Hits         1742     1742           
  Misses        317      317           
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/528?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/request\_filters.py](https://codecov.io/gh/jazzband/django-silk/pull/528/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9yZXF1ZXN0X2ZpbHRlcnMucHk=) | `65.40% <0.00%> (ø)` | |
| [silk/profiling/profiler.py](https://codecov.io/gh/jazzband/django-silk/pull/528/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9wcm9maWxpbmcvcHJvZmlsZXIucHk=) | `88.80% <50.00%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/528?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/528?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [c960a79...13210c6](https://codecov.io/gh/jazzband/django-silk/pull/528?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
Thanks @jezdez for your review. I've addressed your comments.
Some minor things, other than that this is good. Thanks!
Some minor things, other than that this is good. Thanks!
Good catch! Could we rename the variable to `logger`, too?
```suggestion
from django.urls import include, re_path
```
```suggestion
    re_path(
```
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/532?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#532](https://codecov.io/gh/jazzband/django-silk/pull/532?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (01cfee2) into [master](https://codecov.io/gh/jazzband/django-silk/commit/2610f9162e5e6a05bd4b2cb8136e72d23110399b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (2610f91) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/532/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/532?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #532   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          51       51           
  Lines        2059     2059           
=======================================
  Hits         1742     1742           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/532?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/532?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [2610f91...01cfee2](https://codecov.io/gh/jazzband/django-silk/pull/532?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
this is good addition, but why not in github actions as well
It is useful for locally testing, but I think dj40 is adequately covered with the django-main jobs in GHA.  Happy to add to GHA also if you think that it is better to get it done now.
ok later
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/533?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#533](https://codecov.io/gh/jazzband/django-silk/pull/533?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (c1b082c) into [master](https://codecov.io/gh/jazzband/django-silk/commit/b37eb47ecda0688ddae16224d797dd0cd689774e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (b37eb47) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/533/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/533?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #533   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          51       51           
  Lines        2059     2059           
=======================================
  Hits         1742     1742           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/533?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/533?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [b37eb47...c1b082c](https://codecov.io/gh/jazzband/django-silk/pull/533?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/535?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#535](https://codecov.io/gh/jazzband/django-silk/pull/535?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (dabbebc) into [master](https://codecov.io/gh/jazzband/django-silk/commit/ab758c5b4925822e9848bdcab359c40bd58c59d5?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (ab758c5) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/535/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/535?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #535   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          51       51           
  Lines        2059     2059           
=======================================
  Hits         1742     1742           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/535?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/535?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [ab758c5...dabbebc](https://codecov.io/gh/jazzband/django-silk/pull/535?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/536?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#536](https://codecov.io/gh/jazzband/django-silk/pull/536?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (80fae39) into [master](https://codecov.io/gh/jazzband/django-silk/commit/2a9880e18d0c53066e6bf8b011b61b175339a6d7?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (2a9880e) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/536/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/536?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #536   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          51       51           
  Lines        2059     2059           
=======================================
  Hits         1742     1742           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/536?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/536?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [2a9880e...80fae39](https://codecov.io/gh/jazzband/django-silk/pull/536?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
thank your for your contributions, lets see what the CI says :D
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/537?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#537](https://codecov.io/gh/jazzband/django-silk/pull/537?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (6d8204e) into [master](https://codecov.io/gh/jazzband/django-silk/commit/8f8d159a4209f4c294aba16bce3b1ca5789dc2d2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (8f8d159) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/537/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/537?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #537   +/-   ##
=======================================
  Coverage   84.59%   84.59%           
=======================================
  Files          51       51           
  Lines        2058     2058           
=======================================
  Hits         1741     1741           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/537?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/537?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [8f8d159...6d8204e](https://codecov.io/gh/jazzband/django-silk/pull/537?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
can you please share the screenshots of UI that changed with this PR?
### Updated filters:
![Filters](https://user-images.githubusercontent.com/3079032/148357985-da104347-1709-459b-a3aa-be70e7b892bc.png)

### New message saying there are no matching results:
![No matches found](https://user-images.githubusercontent.com/3079032/148358102-826f3df3-94e5-467c-b57b-44fda411d0ea.png)

### Changes not included in this PR

I also have some other changes to CSS which makes text inputs in filters easier to see (some of my colleagues did not notice that you can use filters like _Executed **n** seconds ago_). I can include those changes in the PR if you like it but of course for me it's fine to keep it as overrides in my project(s):
![obraz](https://user-images.githubusercontent.com/3079032/148358918-468b7bbf-7ce4-4092-9dd9-b6ea8762148f.png)
you can add the other improvements to this PR
@auvipy I've added those additional changes, the PR is good to be reviewed now.
> This branch is based off 4.2.0 tag, please let me know if I need to rebase.

that should target main branch
PR was already targeting master branch, but now my branch is rebased against master branch.
> btw, should'nt we mention the UI changes in the docs where necessary?

@auvipy I can add some docs regarding what has changed but I cannot see any section about filtering in the docs. Could you point me where I should add it?

There is also a changelog file, should I update it or will it be updated when creating a new release?
Hi @auvipy , should I do anything more to get this merged? I'm happy to improve this PR to meet your - and the whole Jazz Band's - expectations!
There's some docs under https://github.com/jazzband/django-silk/tree/master/docs/ which could be updated but none of them are invalidated by this change so I'll merge this as is.
Looks good to me too.  Thanks!
btw, should'nt we mention the UI changes in the docs where necessary?
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/538?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#538](https://codecov.io/gh/jazzband/django-silk/pull/538?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (70d78cc) into [master](https://codecov.io/gh/jazzband/django-silk/commit/2a9880e18d0c53066e6bf8b011b61b175339a6d7?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (2a9880e) will **decrease** coverage by `0.00%`.
> The diff coverage is `100.00%`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/538/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/538?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@            Coverage Diff             @@
##           master     #538      +/-   ##
==========================================
- Coverage   84.60%   84.59%   -0.01%     
==========================================
  Files          51       51              
  Lines        2059     2058       -1     
==========================================
- Hits         1742     1741       -1     
  Misses        317      317              
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/538?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/sql.py](https://codecov.io/gh/jazzband/django-silk/pull/538/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9zcWwucHk=) | `78.12% <100.00%> (-0.34%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/538?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/538?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [2a9880e...70d78cc](https://codecov.io/gh/jazzband/django-silk/pull/538?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
@auvipy I think tests should pass now and the PR is ready for review.
Look like coverage has slightly dropped because ` from django.db import connection` line was removed from `silk/sql.py`
let's see what CI says
I want to see some more feedback
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/539?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#539](https://codecov.io/gh/jazzband/django-silk/pull/539?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (33a36e7) into [master](https://codecov.io/gh/jazzband/django-silk/commit/8f8d159a4209f4c294aba16bce3b1ca5789dc2d2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (8f8d159) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/539/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/539?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #539   +/-   ##
=======================================
  Coverage   84.59%   84.59%           
=======================================
  Files          51       51           
  Lines        2058     2058           
=======================================
  Hits         1741     1741           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/539?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/539?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [8f8d159...33a36e7](https://codecov.io/gh/jazzband/django-silk/pull/539?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
Superceded by #554
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/541?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#541](https://codecov.io/gh/jazzband/django-silk/pull/541?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (a785e53) into [master](https://codecov.io/gh/jazzband/django-silk/commit/be920b21e3e2f26e8f047c4e0208362ac9bc5e63?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (be920b2) will **increase** coverage by `0.11%`.
> The diff coverage is `100.00%`.

```diff
@@            Coverage Diff             @@
##           master     #541      +/-   ##
==========================================
+ Coverage   84.60%   84.72%   +0.11%     
==========================================
  Files          51       52       +1     
  Lines        2059     2075      +16     
==========================================
+ Hits         1742     1758      +16     
  Misses        317      317              
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/541?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [...anagement/commands/silk\_request\_garbage\_collect.py](https://codecov.io/gh/jazzband/django-silk/pull/541/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9tYW5hZ2VtZW50L2NvbW1hbmRzL3NpbGtfcmVxdWVzdF9nYXJiYWdlX2NvbGxlY3QucHk=) | `100.00% <100.00%> (ø)` | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/541?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/541?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [be920b2...a785e53](https://codecov.io/gh/jazzband/django-silk/pull/541?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
Hi @nschlemm, Thanks for mentioning me in this patch and asking for a review.
Unfortunately, I am not involved in this project.
So, you may need to ask project leads for a review.
@hramezani sorry, then github must definitely step up their game for suggesting reviewers ;)

and I can't see an option to "release" you from this mention...

@auvipy as release author of 4.2.0 would you be willing to review this? thx!
Even when triggered manually through this command, it's still possible for deadlocks to happen unless the database is receiving no other writes during the period.  This isn't going to guarantee fixing deadlocks.  There should be a full solution made to fix deadlocks, though the ability to manually trigger cleanup perhaps during low-traffic hours is still useful.
There are some rebase conflicts.  @nschlemm Please rebase and this can be merged.
Changing `SilkyConfig` in flight is kind of tricky because these changes aren't propagated back into the original django project's `settings.py`, possibly making it hard to debug issues.  Unfortunately, I think this is the only way to do so because `SilkyConfig` is a singleton and instantiated only once before this code will run.
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/544?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#544](https://codecov.io/gh/jazzband/django-silk/pull/544?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (1da5559) into [master](https://codecov.io/gh/jazzband/django-silk/commit/8f8d159a4209f4c294aba16bce3b1ca5789dc2d2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (8f8d159) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/544/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/544?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #544   +/-   ##
=======================================
  Coverage   84.59%   84.59%           
=======================================
  Files          51       51           
  Lines        2058     2058           
=======================================
  Hits         1741     1741           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/544?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/544?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [8f8d159...1da5559](https://codecov.io/gh/jazzband/django-silk/pull/544?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
thank you @carltongibson, I will take a look to the `tox.ini`
@carltongibson after some issues between pyenv and tox, I could finally manage to run the tests for all the versions and databases. 

Following your comments, I removed django 3.1 and python3.6 that is also now EOL.   Could you take a look to these changes :smile: ?

I think it would be useful to update the docs. Maybe I can create a issue for that and work on that. I think that the contribute part is outdated.  So we can prevent my mistake of not considering tox for running the tests.
@eduzen See the checks: the PY36 entries haven't been correctly removed (you see the failures there...) 

Let me know if you need help lining that up. I've been using `tox-py` with great success, to simplify the GHA workflow. 

e.g. See the Channels workflow 

https://github.com/django/channels/blob/26fa1f366f82c83fd0b269155c68b7b71e852e26/.github/workflows/tests.yml#L25-L36
Thank you @carltongibson again for reviewing this. I put py36 back and remove django3.1.
@carltongibson - The project leads for django-silk are me, @avelis, and @nasirhjafri (source: https://jazzband.co/projects/django-silk)

I'd like to maintain support for all currently supported versions of Django and Python to prepare the next release (#551).  This PR doesn't remove still-supported versions of Django (which is good) but I'd like to also fully support Django 4 (see #547 and #543), testing against the official release rather than its "main" branch.  I'll put up a separate PR for full Django 4 support (and testing).
Thanks @albertyw ! 👍
And welcome aboard @eduzen! ⛵ 🙂
thank you @carltongibson and @albertyw !
Hi @eduzen 👋 

So this isn't the right _fix_ here. 

See the `tox` file: https://github.com/jazzband/django-silk/blob/master/tox.ini

`tox` lets you run against various versions of different dependencies, and check they're all working. See https://tox.wiki/en/latest/

You'll see that the tests are already running against all supported versions of Django. 4.0 was added in b684b8ccf97a5553a1312ecbf588fc7523121a94.

In fact 3.1 is now EOL — end-of-life — so you can make a PR dropping testing against that. 


**With this change** I'm half expecting to see the Django 2.2 tests failing — as it can't install the exact requirement —  but they didn't seem to so I'd need to dig into the logs there to see exactly what gets installed. 🤔
I don't know who's project lead here currently... 🤔 ... but you'd need to get them to confirm dropping PY36 support (since Django 2.2 isn't quite EOL itself yet.) 

(Although it's only a couple of months away, so if you're doing the work...) 

Otherwise, looks good. 

I'd say, Yes! Do make a separate PR with the contributing docs changes you think — never better than when you've just stepped through it. (I'm happy to give those a look too, so @carltongibson me on that.)
```
        django-version: ['2.2', '3.2', '4.0', 'main']
```

... would be all currently supported versions of Django.
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/546?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#546](https://codecov.io/gh/jazzband/django-silk/pull/546?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (ba375e0) into [master](https://codecov.io/gh/jazzband/django-silk/commit/8f8d159a4209f4c294aba16bce3b1ca5789dc2d2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (8f8d159) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/546/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/546?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #546   +/-   ##
=======================================
  Coverage   84.59%   84.59%           
=======================================
  Files          51       51           
  Lines        2058     2058           
=======================================
  Hits         1741     1741           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/546?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/546?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [8f8d159...ba375e0](https://codecov.io/gh/jazzband/django-silk/pull/546?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
Yes, there's no JS tests for django-silk.  I checked through the JS code in https://github.com/albertyw/django-silk/tree/master/silk/static/silk/js/ and I don't see anything that would cause issues with upgrading jquery and jquery-ui (I'm actually not sure if the latter is even used or if it can be safely deleted) so this PR looks good.
Yes, there's no JS tests for django-silk.  I checked through the JS code in https://github.com/albertyw/django-silk/tree/master/silk/static/silk/js/ and I don't see anything that would cause issues with upgrading jquery and jquery-ui (I'm actually not sure if the latter is even used or if it can be safely deleted) so this PR looks good.
hey @code-review-doctor good catch, LGTM.
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/550?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#550](https://codecov.io/gh/jazzband/django-silk/pull/550?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (6c74977) into [master](https://codecov.io/gh/jazzband/django-silk/commit/8f8d159a4209f4c294aba16bce3b1ca5789dc2d2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (8f8d159) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/550/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/550?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #550   +/-   ##
=======================================
  Coverage   84.59%   84.59%           
=======================================
  Files          51       51           
  Lines        2058     2058           
=======================================
  Hits         1741     1741           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/550?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/550?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [8f8d159...6c74977](https://codecov.io/gh/jazzband/django-silk/pull/550?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/552?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#552](https://codecov.io/gh/jazzband/django-silk/pull/552?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (a76a88d) into [master](https://codecov.io/gh/jazzband/django-silk/commit/8f8d159a4209f4c294aba16bce3b1ca5789dc2d2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (8f8d159) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/552/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/552?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #552   +/-   ##
=======================================
  Coverage   84.59%   84.59%           
=======================================
  Files          51       51           
  Lines        2058     2058           
=======================================
  Hits         1741     1741           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/552?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/552?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [8f8d159...a76a88d](https://codecov.io/gh/jazzband/django-silk/pull/552?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/553?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#553](https://codecov.io/gh/jazzband/django-silk/pull/553?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (4176fc0) into [master](https://codecov.io/gh/jazzband/django-silk/commit/9832fe30fe7b72224fcaf83771a28fc95c3d42c4?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (9832fe3) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/553/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/553?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #553   +/-   ##
=======================================
  Coverage   84.59%   84.59%           
=======================================
  Files          51       51           
  Lines        2058     2058           
=======================================
  Hits         1741     1741           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/553?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/553?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [9832fe3...4176fc0](https://codecov.io/gh/jazzband/django-silk/pull/553?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
Looks good. Thanks @albertyw! 👍
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/554?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#554](https://codecov.io/gh/jazzband/django-silk/pull/554?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (e03f7b3) into [master](https://codecov.io/gh/jazzband/django-silk/commit/2cae15b81a5c643d07add29c17a28e7b07bd60c0?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (2cae15b) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/554/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/554?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #554   +/-   ##
=======================================
  Coverage   84.59%   84.59%           
=======================================
  Files          51       51           
  Lines        2058     2058           
=======================================
  Hits         1741     1741           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/554?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/554?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [2cae15b...e03f7b3](https://codecov.io/gh/jazzband/django-silk/pull/554?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/555?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#555](https://codecov.io/gh/jazzband/django-silk/pull/555?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (c4ef7a3) into [master](https://codecov.io/gh/jazzband/django-silk/commit/ccec0d236b8e124407913adc75a7433dc81be923?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (ccec0d2) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/555/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/555?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #555   +/-   ##
=======================================
  Coverage   84.59%   84.59%           
=======================================
  Files          51       51           
  Lines        2058     2058           
=======================================
  Hits         1741     1741           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/555?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/555?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [ccec0d2...c4ef7a3](https://codecov.io/gh/jazzband/django-silk/pull/555?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/556?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#556](https://codecov.io/gh/jazzband/django-silk/pull/556?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (51be871) into [master](https://codecov.io/gh/jazzband/django-silk/commit/61de52893afb6df0ad1ecc17ed06dce9a0979829?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (61de528) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/556/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/556?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #556   +/-   ##
=======================================
  Coverage   84.59%   84.59%           
=======================================
  Files          51       51           
  Lines        2058     2058           
=======================================
  Hits         1741     1741           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/556?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/556?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [61de528...51be871](https://codecov.io/gh/jazzband/django-silk/pull/556?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
Is there a reason for us to drop 3.1 support, but keep 2.2?
Django 2.2 is an LTS release and supported until April.  Django 3.1 EOLed back in December.

Source: https://www.djangoproject.com/download/#supported-versions
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/557?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#557](https://codecov.io/gh/jazzband/django-silk/pull/557?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (00e9937) into [master](https://codecov.io/gh/jazzband/django-silk/commit/61de52893afb6df0ad1ecc17ed06dce9a0979829?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (61de528) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/557/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/557?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #557   +/-   ##
=======================================
  Coverage   84.59%   84.59%           
=======================================
  Files          51       51           
  Lines        2058     2058           
=======================================
  Hits         1741     1741           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/557?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/557?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [61de528...00e9937](https://codecov.io/gh/jazzband/django-silk/pull/557?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
@albertyw Any chance you could take a look? Thank you!
Merged.  Thanks for the PR.
looks good
When error occurred it would be better to show which option was a problem and append the error to the logger.
Thanks, fixed
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/560?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#560](https://codecov.io/gh/jazzband/django-silk/pull/560?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (7b8e386) into [master](https://codecov.io/gh/jazzband/django-silk/commit/036f20e1e7844f773c31a40beb8bf51c4c6c1a38?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (036f20e) will **not change** coverage.
> The diff coverage is `n/a`.

[![Impacted file tree graph](https://codecov.io/gh/jazzband/django-silk/pull/560/graphs/tree.svg?width=650&height=150&src=pr&token=jxycgsWbi3&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)](https://codecov.io/gh/jazzband/django-silk/pull/560?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)

```diff
@@           Coverage Diff           @@
##           master     #560   +/-   ##
=======================================
  Coverage   84.59%   84.59%           
=======================================
  Files          51       51           
  Lines        2058     2058           
=======================================
  Hits         1741     1741           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/560?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/560?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [036f20e...7b8e386](https://codecov.io/gh/jazzband/django-silk/pull/560?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/561?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#561](https://codecov.io/gh/jazzband/django-silk/pull/561?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (31c1356) into [master](https://codecov.io/gh/jazzband/django-silk/commit/189327fb566249376a4195db69cde9e83e03cf55?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (189327f) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #561   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          51       51           
  Lines        2059     2059           
=======================================
  Hits         1742     1742           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/561?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/561?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [189327f...31c1356](https://codecov.io/gh/jazzband/django-silk/pull/561?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/562?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#562](https://codecov.io/gh/jazzband/django-silk/pull/562?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (797d72e) into [master](https://codecov.io/gh/jazzband/django-silk/commit/be920b21e3e2f26e8f047c4e0208362ac9bc5e63?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (be920b2) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #562   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          51       51           
  Lines        2059     2059           
=======================================
  Hits         1742     1742           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/562?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/562?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [be920b2...797d72e](https://codecov.io/gh/jazzband/django-silk/pull/562?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/563?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#563](https://codecov.io/gh/jazzband/django-silk/pull/563?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (afc6b8f) into [master](https://codecov.io/gh/jazzband/django-silk/commit/0c8c2c9ea80e02fc4a7271d389623338cefe239b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (0c8c2c9) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #563   +/-   ##
=======================================
  Coverage   84.48%   84.48%           
=======================================
  Files          51       51           
  Lines        2056     2056           
=======================================
  Hits         1737     1737           
  Misses        319      319           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/563?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/563?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [0c8c2c9...afc6b8f](https://codecov.io/gh/jazzband/django-silk/pull/563?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/564?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#564](https://codecov.io/gh/jazzband/django-silk/pull/564?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (2ba3d64) into [master](https://codecov.io/gh/jazzband/django-silk/commit/189327fb566249376a4195db69cde9e83e03cf55?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (189327f) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #564   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          51       51           
  Lines        2059     2059           
=======================================
  Hits         1742     1742           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/564?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/564?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [189327f...2ba3d64](https://codecov.io/gh/jazzband/django-silk/pull/564?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/566?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#566](https://codecov.io/gh/jazzband/django-silk/pull/566?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (dcc05e6) into [master](https://codecov.io/gh/jazzband/django-silk/commit/934fe9d7c3647b9ce6ea2f9c3803e40733e50aff?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (934fe9d) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #566   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          51       51           
  Lines        2059     2059           
=======================================
  Hits         1742     1742           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/566?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/566?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [934fe9d...dcc05e6](https://codecov.io/gh/jazzband/django-silk/pull/566?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/567?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#567](https://codecov.io/gh/jazzband/django-silk/pull/567?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (d85e03e) into [master](https://codecov.io/gh/jazzband/django-silk/commit/0f5c994cf67c13fae1d53e2129303a2e53568a67?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (0f5c994) will **decrease** coverage by `0.11%`.
> The diff coverage is `n/a`.

> :exclamation: Current head d85e03e differs from pull request most recent head 62a1991. Consider uploading reports for the commit 62a1991 to get more accurate results

```diff
@@            Coverage Diff             @@
##           master     #567      +/-   ##
==========================================
- Coverage   84.60%   84.48%   -0.12%     
==========================================
  Files          51       51              
  Lines        2059     2056       -3     
==========================================
- Hits         1742     1737       -5     
- Misses        317      319       +2     
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/567?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/\_\_init\_\_.py](https://codecov.io/gh/jazzband/django-silk/pull/567/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9fX2luaXRfXy5weQ==) | `60.00% <ø> (-15.00%)` | :arrow_down: |
| [silk/model\_factory.py](https://codecov.io/gh/jazzband/django-silk/pull/567/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9tb2RlbF9mYWN0b3J5LnB5) | `82.96% <0.00%> (-0.88%)` | :arrow_down: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/567?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/567?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [0f5c994...62a1991](https://codecov.io/gh/jazzband/django-silk/pull/567?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
I see code coverage has dropped but it's only as a result of deleting code.
I landed this too soon.  I'm going to revert this for the v4.4.0 and unrevert this for v5.0.0
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/568?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#568](https://codecov.io/gh/jazzband/django-silk/pull/568?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (9b508ba) into [master](https://codecov.io/gh/jazzband/django-silk/commit/0f5c994cf67c13fae1d53e2129303a2e53568a67?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (0f5c994) will **not change** coverage.
> The diff coverage is `76.66%`.

```diff
@@           Coverage Diff           @@
##           master     #568   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          51       51           
  Lines        2059     2059           
=======================================
  Hits         1742     1742           
  Misses        317      317           
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/568?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/storage.py](https://codecov.io/gh/jazzband/django-silk/pull/568/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9zdG9yYWdlLnB5) | `100.00% <ø> (ø)` | |
| [silk/views/cprofile.py](https://codecov.io/gh/jazzband/django-silk/pull/568/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay92aWV3cy9jcHJvZmlsZS5weQ==) | `69.23% <0.00%> (ø)` | |
| [silk/views/profile\_dot.py](https://codecov.io/gh/jazzband/django-silk/pull/568/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay92aWV3cy9wcm9maWxlX2RvdC5weQ==) | `88.09% <0.00%> (ø)` | |
| [silk/views/profile\_download.py](https://codecov.io/gh/jazzband/django-silk/pull/568/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay92aWV3cy9wcm9maWxlX2Rvd25sb2FkLnB5) | `71.42% <0.00%> (ø)` | |
| [silk/request\_filters.py](https://codecov.io/gh/jazzband/django-silk/pull/568/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9yZXF1ZXN0X2ZpbHRlcnMucHk=) | `65.40% <20.00%> (ø)` | |
| [silk/code\_generation/curl.py](https://codecov.io/gh/jazzband/django-silk/pull/568/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9jb2RlX2dlbmVyYXRpb24vY3VybC5weQ==) | `47.22% <30.00%> (ø)` | |
| [silk/utils/profile\_parser.py](https://codecov.io/gh/jazzband/django-silk/pull/568/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay91dGlscy9wcm9maWxlX3BhcnNlci5weQ==) | `91.66% <66.66%> (ø)` | |
| [silk/views/raw.py](https://codecov.io/gh/jazzband/django-silk/pull/568/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay92aWV3cy9yYXcucHk=) | `83.33% <66.66%> (ø)` | |
| [silk/models.py](https://codecov.io/gh/jazzband/django-silk/pull/568/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9tb2RlbHMucHk=) | `87.22% <74.19%> (ø)` | |
| [silk/views/profiling.py](https://codecov.io/gh/jazzband/django-silk/pull/568/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay92aWV3cy9wcm9maWxpbmcucHk=) | `87.50% <78.78%> (ø)` | |
| ... and [22 more](https://codecov.io/gh/jazzband/django-silk/pull/568/diff?src=pr&el=tree-more&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | |

------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/568?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/568?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [0f5c994...9b508ba](https://codecov.io/gh/jazzband/django-silk/pull/568?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
@gholamiayub Any reason why this was closed? black + isort makes sense to me
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/571?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#571](https://codecov.io/gh/jazzband/django-silk/pull/571?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (a7541c9) into [master](https://codecov.io/gh/jazzband/django-silk/commit/0f5c994cf67c13fae1d53e2129303a2e53568a67?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (0f5c994) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #571   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          51       51           
  Lines        2059     2059           
=======================================
  Hits         1742     1742           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/571?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/571?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [0f5c994...a7541c9](https://codecov.io/gh/jazzband/django-silk/pull/571?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/572?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#572](https://codecov.io/gh/jazzband/django-silk/pull/572?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (c59acba) into [master](https://codecov.io/gh/jazzband/django-silk/commit/c59acbaa1a26057915db638903ae8b070434db0b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (c59acba) will **not change** coverage.
> The diff coverage is `n/a`.

> :exclamation: Current head c59acba differs from pull request most recent head a26bbc8. Consider uploading reports for the commit a26bbc8 to get more accurate results

```diff
@@           Coverage Diff           @@
##           master     #572   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          52       52           
  Lines        2072     2072           
=======================================
  Hits         1753     1753           
  Misses        319      319           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/572?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/572?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [c59acba...a26bbc8](https://codecov.io/gh/jazzband/django-silk/pull/572?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/575?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#575](https://codecov.io/gh/jazzband/django-silk/pull/575?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (e20cd44) into [master](https://codecov.io/gh/jazzband/django-silk/commit/5afcdeaa32a4f903df501f78aea8eadf768f34e3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (5afcdea) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #575   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          52       52           
  Lines        2072     2072           
=======================================
  Hits         1753     1753           
  Misses        319      319           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/575?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/575?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [5afcdea...e20cd44](https://codecov.io/gh/jazzband/django-silk/pull/575?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
Thanks @drfb!
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/576?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#576](https://codecov.io/gh/jazzband/django-silk/pull/576?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (53b2600) into [master](https://codecov.io/gh/jazzband/django-silk/commit/5afcdeaa32a4f903df501f78aea8eadf768f34e3?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (5afcdea) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #576   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          52       52           
  Lines        2072     2072           
=======================================
  Hits         1753     1753           
  Misses        319      319           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/576?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/576?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [5afcdea...53b2600](https://codecov.io/gh/jazzband/django-silk/pull/576?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
Fixes #574
Thanks for the fix.  I'll merge and make a new release shortly.
What's the reasoning behind removing this url?
Ah, I see now. I think that issue in the Django issue tracker actually has nothing to do with what's wrong.

The issue is the actual css within the minified file is referencing the missing images you've included on this PR.

Yanked the offending lines out of the minified css code:

```css
.ui-icon {
  background-image: url("images/ui-icons_444444_256x240.png");
}
.ui-widget-header .ui-icon {
  background-image: url("images/ui-icons_444444_256x240.png");
}
.ui-state-hover .ui-icon,
.ui-state-focus .ui-icon,
.ui-button:hover .ui-icon,
.ui-button:focus .ui-icon {
  background-image: url("images/ui-icons_555555_256x240.png");
}
.ui-state-active .ui-icon,
.ui-button:active .ui-icon {
  background-image: url("images/ui-icons_ffffff_256x240.png");
}
.ui-state-highlight .ui-icon,
.ui-button .ui-state-highlight.ui-icon {
  background-image: url("images/ui-icons_777620_256x240.png");
}
.ui-state-error .ui-icon,
.ui-state-error-text .ui-icon {
  background-image: url("images/ui-icons_cc0000_256x240.png");
}
.ui-button .ui-icon {
  background-image: url("images/ui-icons_777777_256x240.png");
}
```
Ah, after testing I was wrong you are right, this comment is an issue.
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/578?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#578](https://codecov.io/gh/jazzband/django-silk/pull/578?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (e32e1d4) into [master](https://codecov.io/gh/jazzband/django-silk/commit/ab3d86eec8b0c9970d9ae2f2371428686bf0d495?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (ab3d86e) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #578   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          52       52           
  Lines        2072     2072           
=======================================
  Hits         1753     1753           
  Misses        319      319           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/578?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/578?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [ab3d86e...e32e1d4](https://codecov.io/gh/jazzband/django-silk/pull/578?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/579?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#579](https://codecov.io/gh/jazzband/django-silk/pull/579?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (a59476e) into [v4](https://codecov.io/gh/jazzband/django-silk/commit/9d4f9fdde2fafb03f1e6a095baa3f806fd70c716?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (9d4f9fd) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##               v4     #579   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          51       51           
  Lines        2059     2059           
=======================================
  Hits         1742     1742           
  Misses        317      317           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/579?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/579?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [9d4f9fd...a59476e](https://codecov.io/gh/jazzband/django-silk/pull/579?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/580?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#580](https://codecov.io/gh/jazzband/django-silk/pull/580?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (303b377) into [master](https://codecov.io/gh/jazzband/django-silk/commit/8944c144d62984c350603b9aa5712ff17983252d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (8944c14) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #580   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          52       52           
  Lines        2072     2072           
=======================================
  Hits         1753     1753           
  Misses        319      319           
```



------

[Continue to review full report at Codecov](https://codecov.io/gh/jazzband/django-silk/pull/580?src=pr&el=continue&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/580?src=pr&el=footer&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Last update [8944c14...303b377](https://codecov.io/gh/jazzband/django-silk/pull/580?src=pr&el=lastupdated&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/583?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#583](https://codecov.io/gh/jazzband/django-silk/pull/583?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (1d8b085) into [master](https://codecov.io/gh/jazzband/django-silk/commit/c12ce22252a355d0491e4610d690a547fa81c596?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (c12ce22) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #583   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          52       52           
  Lines        2072     2072           
=======================================
  Hits         1753     1753           
  Misses        319      319           
```



Help us with your feedback. Take ten seconds to tell us [how you rate us](https://about.codecov.io/nps?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/584?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#584](https://codecov.io/gh/jazzband/django-silk/pull/584?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (d39e525) into [master](https://codecov.io/gh/jazzband/django-silk/commit/7c79f5b62c34a816c51c1de8b3e96f98f82a4119?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (7c79f5b) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #584   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          52       52           
  Lines        2072     2072           
=======================================
  Hits         1753     1753           
  Misses        319      319           
```



Help us with your feedback. Take ten seconds to tell us [how you rate us](https://about.codecov.io/nps?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/585?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#585](https://codecov.io/gh/jazzband/django-silk/pull/585?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (fec97bf) into [master](https://codecov.io/gh/jazzband/django-silk/commit/7c79f5b62c34a816c51c1de8b3e96f98f82a4119?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (7c79f5b) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #585   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          52       52           
  Lines        2072     2072           
=======================================
  Hits         1753     1753           
  Misses        319      319           
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/585?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/profiling/dynamic.py](https://codecov.io/gh/jazzband/django-silk/pull/585/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9wcm9maWxpbmcvZHluYW1pYy5weQ==) | `83.47% <ø> (ø)` | |

:mega: Codecov can now indicate which changes are the most critical in Pull Requests. [Learn more](https://about.codecov.io/product/feature/runtime-insights/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/586?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#586](https://codecov.io/gh/jazzband/django-silk/pull/586?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (009c4fa) into [master](https://codecov.io/gh/jazzband/django-silk/commit/7c79f5b62c34a816c51c1de8b3e96f98f82a4119?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (7c79f5b) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #586   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          52       52           
  Lines        2072     2072           
=======================================
  Hits         1753     1753           
  Misses        319      319           
```



:mega: Codecov can now indicate which changes are the most critical in Pull Requests. [Learn more](https://about.codecov.io/product/feature/runtime-insights/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
Django 4.1 is not fully supported, see [this](https://github.com/jazzband/django-silk/issues/594).
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/589?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#589](https://codecov.io/gh/jazzband/django-silk/pull/589?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (2f4f7f4) into [master](https://codecov.io/gh/jazzband/django-silk/commit/0e836ed8df8ea5cb8f3df38c9b0b5219f15c9c9d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (0e836ed) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #589   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          52       52           
  Lines        2072     2072           
=======================================
  Hits         1753     1753           
  Misses        319      319           
```



:mega: Codecov can now indicate which changes are the most critical in Pull Requests. [Learn more](https://about.codecov.io/product/feature/runtime-insights/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/590?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#590](https://codecov.io/gh/jazzband/django-silk/pull/590?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (a18a012) into [master](https://codecov.io/gh/jazzband/django-silk/commit/dcbc6e0fbf44ff91ea67b4f71a2200ac01c141bf?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (dcbc6e0) will **increase** coverage by `0.00%`.
> The diff coverage is `n/a`.

> :exclamation: Current head a18a012 differs from pull request most recent head 4ca96d9. Consider uploading reports for the commit 4ca96d9 to get more accurate results

```diff
@@           Coverage Diff           @@
##           master     #590   +/-   ##
=======================================
  Coverage   84.59%   84.60%           
=======================================
  Files          52       52           
  Lines        2071     2072    +1     
=======================================
+ Hits         1752     1753    +1     
  Misses        319      319           
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/590?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/model\_factory.py](https://codecov.io/gh/jazzband/django-silk/pull/590/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9tb2RlbF9mYWN0b3J5LnB5) | `82.96% <0.00%> (-0.08%)` | :arrow_down: |
| [silk/collector.py](https://codecov.io/gh/jazzband/django-silk/pull/590/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9jb2xsZWN0b3IucHk=) | `89.78% <0.00%> (+0.07%)` | :arrow_up: |
| [silk/middleware.py](https://codecov.io/gh/jazzband/django-silk/pull/590/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9taWRkbGV3YXJlLnB5) | `89.42% <0.00%> (+0.10%)` | :arrow_up: |

:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
Can you also edit `requirements.txt` and remove the `contextlib2` dependency there too?
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/591?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#591](https://codecov.io/gh/jazzband/django-silk/pull/591?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (45a40e0) into [master](https://codecov.io/gh/jazzband/django-silk/commit/0e836ed8df8ea5cb8f3df38c9b0b5219f15c9c9d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (0e836ed) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #591   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          52       52           
  Lines        2072     2072           
=======================================
  Hits         1753     1753           
  Misses        319      319           
```



:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/592?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#592](https://codecov.io/gh/jazzband/django-silk/pull/592?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (eeaeb9c) into [master](https://codecov.io/gh/jazzband/django-silk/commit/0e836ed8df8ea5cb8f3df38c9b0b5219f15c9c9d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (0e836ed) will **increase** coverage by `0.03%`.
> The diff coverage is `100.00%`.

```diff
@@            Coverage Diff             @@
##           master     #592      +/-   ##
==========================================
+ Coverage   84.60%   84.64%   +0.03%     
==========================================
  Files          52       52              
  Lines        2072     2077       +5     
==========================================
+ Hits         1753     1758       +5     
  Misses        319      319              
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/592?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/model\_factory.py](https://codecov.io/gh/jazzband/django-silk/pull/592/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9tb2RlbF9mYWN0b3J5LnB5) | `83.33% <100.00%> (+0.36%)` | :arrow_up: |

:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/595?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#595](https://codecov.io/gh/jazzband/django-silk/pull/595?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (818d941) into [master](https://codecov.io/gh/jazzband/django-silk/commit/f6216479980284c0069d8cd26eb8cd677b47c509?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (f621647) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #595   +/-   ##
=======================================
  Coverage   84.60%   84.60%           
=======================================
  Files          52       52           
  Lines        2072     2072           
=======================================
  Hits         1753     1753           
  Misses        319      319           
```



:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/596?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#596](https://codecov.io/gh/jazzband/django-silk/pull/596?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (77fcdcf) into [master](https://codecov.io/gh/jazzband/django-silk/commit/0e836ed8df8ea5cb8f3df38c9b0b5219f15c9c9d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (0e836ed) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

```diff
@@           Coverage Diff           @@
##           master     #596   +/-   ##
=======================================
  Coverage   84.60%   84.61%           
=======================================
  Files          52       52           
  Lines        2072     2073    +1     
=======================================
+ Hits         1753     1754    +1     
  Misses        319      319           
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/596?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/collector.py](https://codecov.io/gh/jazzband/django-silk/pull/596/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9jb2xsZWN0b3IucHk=) | `89.85% <100.00%> (+0.07%)` | :arrow_up: |

:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
Are there any security ramifications of using `marshal.dump` on `pstats`?  My guess is no but I'm not that familiar with what access an external user might get to `pstats.Stats`.

For backwards compatibility, would it not be better to continue to use `dump_stats` and have it write to a file object (even a fake file object)?
@albertyw Here's the original `pstats.Stats.dump_stats`
```python
    def dump_stats(self, filename):
        """Write the profile data to a file we know how to load back."""
        with open(filename, 'wb') as f:
            marshal.dump(self.stats, f)
```
I only moved this `marshal.dump()` call outside, to avoid creating a temporary file just for `ps.dump_stats()` to open it again using a filename. Creating a temporary file has some performance penalty.
Another solution would be to subclass `pstats.Stats` and add a new method that accepts a file object instead of a filename. But it'll be essentially the same code.
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/599?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#599](https://codecov.io/gh/jazzband/django-silk/pull/599?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (9610243) into [master](https://codecov.io/gh/jazzband/django-silk/commit/21b3eefe34b8a0cd8db37bd8be3ace6c384cb16d?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (21b3eef) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #599   +/-   ##
=======================================
  Coverage   84.61%   84.61%           
=======================================
  Files          52       52           
  Lines        2073     2073           
=======================================
  Hits         1754     1754           
  Misses        319      319           
```



:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/602?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#602](https://codecov.io/gh/jazzband/django-silk/pull/602?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (406df4a) into [master](https://codecov.io/gh/jazzband/django-silk/commit/4ef1159b17e81861a8584648085e2ee6aa8d375e?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (4ef1159) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #602   +/-   ##
=======================================
  Coverage   84.59%   84.59%           
=======================================
  Files          52       52           
  Lines        2071     2071           
=======================================
  Hits         1752     1752           
  Misses        319      319           
```



:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/603?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#603](https://codecov.io/gh/jazzband/django-silk/pull/603?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (a0ad8cd) into [master](https://codecov.io/gh/jazzband/django-silk/commit/c12ce22252a355d0491e4610d690a547fa81c596?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (c12ce22) will **increase** coverage by `0.02%`.
> The diff coverage is `n/a`.

```diff
@@            Coverage Diff             @@
##           master     #603      +/-   ##
==========================================
+ Coverage   84.60%   84.63%   +0.02%     
==========================================
  Files          52       52              
  Lines        2072     2076       +4     
==========================================
+ Hits         1753     1757       +4     
  Misses        319      319              
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/603?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/middleware.py](https://codecov.io/gh/jazzband/django-silk/pull/603/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9taWRkbGV3YXJlLnB5) | `89.32% <0.00%> (-0.11%)` | :arrow_down: |
| [silk/collector.py](https://codecov.io/gh/jazzband/django-silk/pull/603/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9jb2xsZWN0b3IucHk=) | `89.70% <0.00%> (-0.08%)` | :arrow_down: |
| [silk/model\_factory.py](https://codecov.io/gh/jazzband/django-silk/pull/603/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9tb2RlbF9mYWN0b3J5LnB5) | `83.40% <0.00%> (+0.43%)` | :arrow_up: |

:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/604?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#604](https://codecov.io/gh/jazzband/django-silk/pull/604?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (18759af) into [master](https://codecov.io/gh/jazzband/django-silk/commit/7ba0a55b6aa8f4c136d47347b48c06a69ec87706?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (7ba0a55) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #604   +/-   ##
=======================================
  Coverage   84.63%   84.63%           
=======================================
  Files          52       52           
  Lines        2076     2076           
=======================================
  Hits         1757     1757           
  Misses        319      319           
```



:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/605?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#605](https://codecov.io/gh/jazzband/django-silk/pull/605?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (d46a5d6) into [master](https://codecov.io/gh/jazzband/django-silk/commit/7ba0a55b6aa8f4c136d47347b48c06a69ec87706?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (7ba0a55) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #605   +/-   ##
=======================================
  Coverage   84.63%   84.63%           
=======================================
  Files          52       52           
  Lines        2076     2076           
=======================================
  Hits         1757     1757           
  Misses        319      319           
```



:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/609?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#609](https://codecov.io/gh/jazzband/django-silk/pull/609?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (73932b8) into [master](https://codecov.io/gh/jazzband/django-silk/commit/843c8984bffbbbb9d532dafb3903ff42fd08e647?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (843c898) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

```diff
@@           Coverage Diff           @@
##           master     #609   +/-   ##
=======================================
  Coverage   86.31%   86.32%           
=======================================
  Files          52       52           
  Lines        2090     2091    +1     
=======================================
+ Hits         1804     1805    +1     
  Misses        286      286           
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/609?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/views/sql\_detail.py](https://codecov.io/gh/jazzband/django-silk/pull/609/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay92aWV3cy9zcWxfZGV0YWlsLnB5) | `94.44% <100.00%> (+0.10%)` | :arrow_up: |

:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
VIRTUAL_ENV is not guaranteed to be set, so this may also return `None`.  The template file would then try to run `None not in "string"` which could result in a TypeError.

Also, is it possible for VIRTUAL_ENV to be an absolute path but the traceback to be relative and not include substrings with VIRTUAL_ENV?

Are you sure this is going to work?  There should be a test case for if `VIRTUAL_ENV` is not set.
- Added tests and default value of `''` (even if the `not in` operator handles comparison with `None`)
- VIRTUAL_ENV is not guaranted to be set [as per docs](https://docs.python.org/3/library/venv.html#how-venvs-work), but if it is, it's an absolute path
  > When a virtual environment has been activated, the VIRTUAL_ENV environment variable is set to the path of the environment. Since explicitly activating a virtual environment is not required to use it, VIRTUAL_ENV cannot be relied upon to determine whether a virtual environment is being used.
- This is a non-intrusive enhancement: no virtualenv means no CSS class added, and if the path are mixed between relative and absolute (which I doubt will happen), either all lines will be hightlighted or none will
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/611?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#611](https://codecov.io/gh/jazzband/django-silk/pull/611?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (7a9935d) into [master](https://codecov.io/gh/jazzband/django-silk/commit/4934ffef92468aa2d6f0ef7c28e524bddd96a7a1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (4934ffe) will **increase** coverage by `0.01%`.
> The diff coverage is `88.88%`.

```diff
@@            Coverage Diff             @@
##           master     #611      +/-   ##
==========================================
+ Coverage   84.63%   84.65%   +0.01%     
==========================================
  Files          52       52              
  Lines        2076     2085       +9     
==========================================
+ Hits         1757     1765       +8     
- Misses        319      320       +1     
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/611?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/models.py](https://codecov.io/gh/jazzband/django-silk/pull/611/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9tb2RlbHMucHk=) | `87.28% <88.88%> (+0.06%)` | :arrow_up: |

:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/612?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#612](https://codecov.io/gh/jazzband/django-silk/pull/612?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (90d7ee2) into [master](https://codecov.io/gh/jazzband/django-silk/commit/4934ffef92468aa2d6f0ef7c28e524bddd96a7a1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (4934ffe) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #612   +/-   ##
=======================================
  Coverage   84.63%   84.63%           
=======================================
  Files          52       52           
  Lines        2076     2076           
=======================================
  Hits         1757     1757           
  Misses        319      319           
```



:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/613?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#613](https://codecov.io/gh/jazzband/django-silk/pull/613?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (75239c7) into [master](https://codecov.io/gh/jazzband/django-silk/commit/4934ffef92468aa2d6f0ef7c28e524bddd96a7a1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (4934ffe) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #613   +/-   ##
=======================================
  Coverage   84.63%   84.63%           
=======================================
  Files          52       52           
  Lines        2076     2076           
=======================================
  Hits         1757     1757           
  Misses        319      319           
```



:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/614?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#614](https://codecov.io/gh/jazzband/django-silk/pull/614?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (e88eeac) into [master](https://codecov.io/gh/jazzband/django-silk/commit/4934ffef92468aa2d6f0ef7c28e524bddd96a7a1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (4934ffe) will **increase** coverage by `1.61%`.
> The diff coverage is `100.00%`.

```diff
@@            Coverage Diff             @@
##           master     #614      +/-   ##
==========================================
+ Coverage   84.63%   86.25%   +1.61%     
==========================================
  Files          52       52              
  Lines        2076     2080       +4     
==========================================
+ Hits         1757     1794      +37     
+ Misses        319      286      -33     
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/614?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/views/requests.py](https://codecov.io/gh/jazzband/django-silk/pull/614/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay92aWV3cy9yZXF1ZXN0cy5weQ==) | `98.85% <100.00%> (+6.07%)` | :arrow_up: |
| [silk/request\_filters.py](https://codecov.io/gh/jazzband/django-silk/pull/614/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9yZXF1ZXN0X2ZpbHRlcnMucHk=) | `83.01% <0.00%> (+17.61%)` | :arrow_up: |

:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/617?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#617](https://codecov.io/gh/jazzband/django-silk/pull/617?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (565fd52) into [master](https://codecov.io/gh/jazzband/django-silk/commit/4934ffef92468aa2d6f0ef7c28e524bddd96a7a1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (4934ffe) will **increase** coverage by `0.00%`.
> The diff coverage is `100.00%`.

```diff
@@           Coverage Diff           @@
##           master     #617   +/-   ##
=======================================
  Coverage   84.63%   84.64%           
=======================================
  Files          52       52           
  Lines        2076     2077    +1     
=======================================
+ Hits         1757     1758    +1     
  Misses        319      319           
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/617?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/sql.py](https://codecov.io/gh/jazzband/django-silk/pull/617/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9zcWwucHk=) | `78.78% <100.00%> (+0.32%)` | :arrow_up: |

:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/618?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#618](https://codecov.io/gh/jazzband/django-silk/pull/618?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (9dddfbd) into [master](https://codecov.io/gh/jazzband/django-silk/commit/4934ffef92468aa2d6f0ef7c28e524bddd96a7a1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (4934ffe) will **increase** coverage by `0.04%`.
> The diff coverage is `100.00%`.

```diff
@@            Coverage Diff             @@
##           master     #618      +/-   ##
==========================================
+ Coverage   84.63%   84.68%   +0.04%     
==========================================
  Files          52       52              
  Lines        2076     2076              
==========================================
+ Hits         1757     1758       +1     
+ Misses        319      318       -1     
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/618?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/sql.py](https://codecov.io/gh/jazzband/django-silk/pull/618/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9zcWwucHk=) | `78.46% <100.00%> (ø)` | |
| [silk/model\_factory.py](https://codecov.io/gh/jazzband/django-silk/pull/618/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9tb2RlbF9mYWN0b3J5LnB5) | `83.82% <0.00%> (+0.42%)` | :arrow_up: |

:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/620?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#620](https://codecov.io/gh/jazzband/django-silk/pull/620?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (6ee2d80) into [master](https://codecov.io/gh/jazzband/django-silk/commit/602921ecbfe9a37dbe462c5bbc7a478e2d589b42?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (602921e) will **decrease** coverage by `1.57%`.
> The diff coverage is `100.00%`.

> :exclamation: Current head 6ee2d80 differs from pull request most recent head 9c0d17d. Consider uploading reports for the commit 9c0d17d to get more accurate results

```diff
@@            Coverage Diff             @@
##           master     #620      +/-   ##
==========================================
- Coverage   86.33%   84.75%   -1.58%     
==========================================
  Files          52       52              
  Lines        2093     2093              
==========================================
- Hits         1807     1774      -33     
- Misses        286      319      +33     
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/620?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/model\_factory.py](https://codecov.io/gh/jazzband/django-silk/pull/620?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9tb2RlbF9mYWN0b3J5LnB5) | `70.63% <100.00%> (-13.20%)` | :arrow_down: |
| [silk/models.py](https://codecov.io/gh/jazzband/django-silk/pull/620?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9tb2RlbHMucHk=) | `86.44% <0.00%> (-0.85%)` | :arrow_down: |

:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
Depends on #641
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/621?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#621](https://codecov.io/gh/jazzband/django-silk/pull/621?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (ea14ee6) into [master](https://codecov.io/gh/jazzband/django-silk/commit/a54fd45a064fe7c0bff1f85b52c7b53c3b9e027a?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (a54fd45) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #621   +/-   ##
=======================================
  Coverage   86.32%   86.32%           
=======================================
  Files          52       52           
  Lines        2091     2091           
=======================================
  Hits         1805     1805           
  Misses        286      286           
```



:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/623?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#623](https://codecov.io/gh/jazzband/django-silk/pull/623?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (dc1161a) into [master](https://codecov.io/gh/jazzband/django-silk/commit/3500cbd60042fc7300fd7b5e9a324e2c198ad494?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (3500cbd) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #623   +/-   ##
=======================================
  Coverage   86.32%   86.32%           
=======================================
  Files          52       52           
  Lines        2091     2091           
=======================================
  Hits         1805     1805           
  Misses        286      286           
```



:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/626?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#626](https://codecov.io/gh/jazzband/django-silk/pull/626?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (db4e57f) into [master](https://codecov.io/gh/jazzband/django-silk/commit/843c8984bffbbbb9d532dafb3903ff42fd08e647?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (843c898) will **increase** coverage by `0.07%`.
> The diff coverage is `100.00%`.

```diff
@@            Coverage Diff             @@
##           master     #626      +/-   ##
==========================================
+ Coverage   86.31%   86.39%   +0.07%     
==========================================
  Files          52       52              
  Lines        2090     2102      +12     
==========================================
+ Hits         1804     1816      +12     
  Misses        286      286              
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/626?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/profiling/profiler.py](https://codecov.io/gh/jazzband/django-silk/pull/626/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9wcm9maWxpbmcvcHJvZmlsZXIucHk=) | `88.80% <100.00%> (ø)` | |
| [silk/views/sql\_detail.py](https://codecov.io/gh/jazzband/django-silk/pull/626/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay92aWV3cy9zcWxfZGV0YWlsLnB5) | `95.38% <0.00%> (+1.04%)` | :arrow_up: |

:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/627?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#627](https://codecov.io/gh/jazzband/django-silk/pull/627?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (a74fcb2) into [master](https://codecov.io/gh/jazzband/django-silk/commit/843c8984bffbbbb9d532dafb3903ff42fd08e647?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (843c898) will **increase** coverage by `0.09%`.
> The diff coverage is `100.00%`.

```diff
@@            Coverage Diff             @@
##           master     #627      +/-   ##
==========================================
+ Coverage   86.31%   86.40%   +0.09%     
==========================================
  Files          52       52              
  Lines        2090     2104      +14     
==========================================
+ Hits         1804     1818      +14     
  Misses        286      286              
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/627?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/code\_generation/curl.py](https://codecov.io/gh/jazzband/django-silk/pull/627/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9jb2RlX2dlbmVyYXRpb24vY3VybC5weQ==) | `47.22% <100.00%> (ø)` | |
| [silk/code\_generation/django\_test\_client.py](https://codecov.io/gh/jazzband/django-silk/pull/627/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9jb2RlX2dlbmVyYXRpb24vZGphbmdvX3Rlc3RfY2xpZW50LnB5) | `72.00% <100.00%> (+2.43%)` | :arrow_up: |
| [silk/views/sql\_detail.py](https://codecov.io/gh/jazzband/django-silk/pull/627/diff?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay92aWV3cy9zcWxfZGV0YWlsLnB5) | `95.38% <0.00%> (+1.04%)` | :arrow_up: |

:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/634?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#634](https://codecov.io/gh/jazzband/django-silk/pull/634?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (8faa28a) into [master](https://codecov.io/gh/jazzband/django-silk/commit/5677fa8ed11df97cb75eeb16fcc69fbedce4e244?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (5677fa8) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #634   +/-   ##
=======================================
  Coverage   86.33%   86.33%           
=======================================
  Files          52       52           
  Lines        2093     2093           
=======================================
  Hits         1807     1807           
  Misses        286      286           
```



:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/635?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#635](https://codecov.io/gh/jazzband/django-silk/pull/635?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (074001a) into [master](https://codecov.io/gh/jazzband/django-silk/commit/deb9b1f37c7d84e8856444f267e7d417821b8c34?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (deb9b1f) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #635   +/-   ##
=======================================
  Coverage   86.33%   86.33%           
=======================================
  Files          52       52           
  Lines        2093     2093           
=======================================
  Hits         1807     1807           
  Misses        286      286           
```



:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
@sgelis Sorry, it looks like I accidentally closed this pull request when I tried rebasing it on top of #639 to get the tests to pass.  Since the pull request is closed, I also can't push your changes back to your repository fork.  

Your branch still exists at https://github.com/albertyw/django-silk/tree/sgelis-master but you'll need to grab the code on that branch again, push the changes to github, and reopen this pull request.  You can do that with
```
git remote add albertyw git@github.com:albertyw/django-silk
git fetch albertyw
git cherry-pick 97a5d33
git cherry-pick c4cd70a
git push
```

I also created https://github.com/sgelis/django-silk/pull/1 as another way to get your commits back in your repository.
@albertyw I merged sgelis#1 but this does not seem to reopen this PR which still seems emptied :confused:
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/638?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#638](https://codecov.io/gh/jazzband/django-silk/pull/638?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (0dd5a0b) into [master](https://codecov.io/gh/jazzband/django-silk/commit/415529cf3ad5cd362a49f31ec0982b603ea84466?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (415529c) will **increase** coverage by `0.08%`.
> The diff coverage is `100.00%`.

```diff
@@            Coverage Diff             @@
##           master     #638      +/-   ##
==========================================
+ Coverage   86.42%   86.51%   +0.08%     
==========================================
  Files          52       52              
  Lines        2078     2091      +13     
==========================================
+ Hits         1796     1809      +13     
  Misses        282      282              
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/638?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/config.py](https://codecov.io/gh/jazzband/django-silk/pull/638?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9jb25maWcucHk=) | `90.47% <ø> (ø)` | |
| [silk/collector.py](https://codecov.io/gh/jazzband/django-silk/pull/638?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9jb2xsZWN0b3IucHk=) | `90.60% <100.00%> (+0.89%)` | :arrow_up: |

:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
@k4rl85 can you try rebasing this pull request to get the tests to pass?
@albertyw rebased the pr
I'm concerned that there are some other characters that could be in the request path that would cause issues.  For example, if `..` was in the path, it might lead to path traversal.  A `\` might also cause problems on windows systems.

I think it would be safer to strip all characters not in `[a-z0-9_\-]+` (and maybe a few more) and also to limit the path to N (50?) characters.
@albertyw I changed the logic to remove any not ASCII char and replace with `_` any char not contained in `[a-z0-9_]`.

I took as limit for path name length 50.
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/639?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#639](https://codecov.io/gh/jazzband/django-silk/pull/639?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (6c34833) into [master](https://codecov.io/gh/jazzband/django-silk/commit/5677fa8ed11df97cb75eeb16fcc69fbedce4e244?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (5677fa8) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #639   +/-   ##
=======================================
  Coverage   86.33%   86.33%           
=======================================
  Files          52       52           
  Lines        2093     2093           
=======================================
  Hits         1807     1807           
  Misses        286      286           
```



:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/640?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#640](https://codecov.io/gh/jazzband/django-silk/pull/640?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (4d9d6c6) into [master](https://codecov.io/gh/jazzband/django-silk/commit/deb9b1f37c7d84e8856444f267e7d417821b8c34?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (deb9b1f) will **not change** coverage.
> The diff coverage is `n/a`.

> :exclamation: Current head 4d9d6c6 differs from pull request most recent head 4cf7ee8. Consider uploading reports for the commit 4cf7ee8 to get more accurate results

```diff
@@           Coverage Diff           @@
##           master     #640   +/-   ##
=======================================
  Coverage   86.33%   86.33%           
=======================================
  Files          52       52           
  Lines        2093     2093           
=======================================
  Hits         1807     1807           
  Misses        286      286           
```



:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
I'm ok with that but we could also fix tests and adopt `request.headers` (instead of `request.META`) to be more future-proof
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/641?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#641](https://codecov.io/gh/jazzband/django-silk/pull/641?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (3c7a9c8) into [master](https://codecov.io/gh/jazzband/django-silk/commit/4784e2a573586da2de9e0c65b287ad2f239ccb5f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (4784e2a) will **decrease** coverage by `0.03%`.
> The diff coverage is `100.00%`.

> :exclamation: Current head 3c7a9c8 differs from pull request most recent head 3bdd577. Consider uploading reports for the commit 3bdd577 to get more accurate results

```diff
@@            Coverage Diff             @@
##           master     #641      +/-   ##
==========================================
- Coverage   86.40%   86.37%   -0.04%     
==========================================
  Files          52       52              
  Lines        2089     2084       -5     
==========================================
- Hits         1805     1800       -5     
  Misses        284      284              
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/641?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/code\_generation/curl.py](https://codecov.io/gh/jazzband/django-silk/pull/641?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9jb2RlX2dlbmVyYXRpb24vY3VybC5weQ==) | `47.22% <ø> (ø)` | |
| [silk/model\_factory.py](https://codecov.io/gh/jazzband/django-silk/pull/641?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9tb2RlbF9mYWN0b3J5LnB5) | `84.07% <100.00%> (-0.35%)` | :arrow_down: |

:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
It seems this line is no longer covered, but I can't think of a situation where `content_type` would not be a string and thus would trigger an `AttributeError`, maybe we can remove this try-catch?
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/642?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#642](https://codecov.io/gh/jazzband/django-silk/pull/642?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (3bd3de9) into [master](https://codecov.io/gh/jazzband/django-silk/commit/602921ecbfe9a37dbe462c5bbc7a478e2d589b42?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (602921e) will **increase** coverage by `0.06%`.
> The diff coverage is `n/a`.

```diff
@@            Coverage Diff             @@
##           master     #642      +/-   ##
==========================================
+ Coverage   86.33%   86.40%   +0.06%     
==========================================
  Files          52       52              
  Lines        2093     2089       -4     
==========================================
- Hits         1807     1805       -2     
+ Misses        286      284       -2     
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/642?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/model\_factory.py](https://codecov.io/gh/jazzband/django-silk/pull/642?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9tb2RlbF9mYWN0b3J5LnB5) | `84.41% <ø> (+0.58%)` | :arrow_up: |

:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/643?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#643](https://codecov.io/gh/jazzband/django-silk/pull/643?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (f7b35e7) into [master](https://codecov.io/gh/jazzband/django-silk/commit/4784e2a573586da2de9e0c65b287ad2f239ccb5f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (4784e2a) will **increase** coverage by `0.05%`.
> The diff coverage is `100.00%`.

```diff
@@            Coverage Diff             @@
##           master     #643      +/-   ##
==========================================
+ Coverage   86.40%   86.46%   +0.05%     
==========================================
  Files          52       52              
  Lines        2089     2083       -6     
==========================================
- Hits         1805     1801       -4     
+ Misses        284      282       -2     
```


| [Impacted Files](https://codecov.io/gh/jazzband/django-silk/pull/643?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/model\_factory.py](https://codecov.io/gh/jazzband/django-silk/pull/643?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9tb2RlbF9mYWN0b3J5LnB5) | `84.88% <100.00%> (+0.47%)` | :arrow_up: |

:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/644?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#644](https://codecov.io/gh/jazzband/django-silk/pull/644?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (e86eba3) into [master](https://codecov.io/gh/jazzband/django-silk/commit/a1f6f5ee39b57ba6d14480cc911ea0976bbda865?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (a1f6f5e) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #644   +/-   ##
=======================================
  Coverage   86.37%   86.37%           
=======================================
  Files          52       52           
  Lines        2084     2084           
=======================================
  Hits         1800     1800           
  Misses        284      284           
```



:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
# [Codecov](https://codecov.io/gh/jazzband/django-silk/pull/645?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#645](https://codecov.io/gh/jazzband/django-silk/pull/645?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (aa8d473) into [master](https://codecov.io/gh/jazzband/django-silk/commit/a53d4adf201f14dcc6c247565d5b603183d94fd1?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (a53d4ad) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #645   +/-   ##
=======================================
  Coverage   86.51%   86.51%           
=======================================
  Files          52       52           
  Lines        2091     2091           
=======================================
  Hits         1809     1809           
  Misses        282      282           
```



:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
## [Codecov](https://app.codecov.io/gh/jazzband/django-silk/pull/647?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#647](https://app.codecov.io/gh/jazzband/django-silk/pull/647?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (c179c2d) into [master](https://app.codecov.io/gh/jazzband/django-silk/commit/274898fc8a728b0eed6c49f74e906e7be5d86cd8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (274898f) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #647   +/-   ##
=======================================
  Coverage   86.51%   86.51%           
=======================================
  Files          52       52           
  Lines        2091     2091           
=======================================
  Hits         1809     1809           
  Misses        282      282           
```



:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
## [Codecov](https://app.codecov.io/gh/jazzband/django-silk/pull/658?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#658](https://app.codecov.io/gh/jazzband/django-silk/pull/658?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (3f1cace) into [master](https://app.codecov.io/gh/jazzband/django-silk/commit/274898fc8a728b0eed6c49f74e906e7be5d86cd8?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (274898f) will **not change** coverage.
> The diff coverage is `100.00%`.

```diff
@@           Coverage Diff           @@
##           master     #658   +/-   ##
=======================================
  Coverage   86.51%   86.51%           
=======================================
  Files          52       52           
  Lines        2091     2091           
=======================================
  Hits         1809     1809           
  Misses        282      282           
```


| [Impacted Files](https://app.codecov.io/gh/jazzband/django-silk/pull/658?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/sql.py](https://app.codecov.io/gh/jazzband/django-silk/pull/658?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9zcWwucHk=) | `78.78% <100.00%> (ø)` | |

:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
## [Codecov](https://app.codecov.io/gh/jazzband/django-silk/pull/659?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#659](https://app.codecov.io/gh/jazzband/django-silk/pull/659?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (06dc02b) into [master](https://app.codecov.io/gh/jazzband/django-silk/commit/ed3e3261af96dc054fe72b80cd567313f835515b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (ed3e326) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #659   +/-   ##
=======================================
  Coverage   86.51%   86.51%           
=======================================
  Files          52       52           
  Lines        2091     2091           
=======================================
  Hits         1809     1809           
  Misses        282      282           
```



:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
## [Codecov](https://app.codecov.io/gh/jazzband/django-silk/pull/661?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#661](https://app.codecov.io/gh/jazzband/django-silk/pull/661?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (d68e17b) into [master](https://app.codecov.io/gh/jazzband/django-silk/commit/ed3e3261af96dc054fe72b80cd567313f835515b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (ed3e326) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #661   +/-   ##
=======================================
  Coverage   86.51%   86.51%           
=======================================
  Files          52       52           
  Lines        2091     2091           
=======================================
  Hits         1809     1809           
  Misses        282      282           
```



:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
## [Codecov](https://app.codecov.io/gh/jazzband/django-silk/pull/662?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#662](https://app.codecov.io/gh/jazzband/django-silk/pull/662?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (f5e6acf) into [master](https://app.codecov.io/gh/jazzband/django-silk/commit/ed3e3261af96dc054fe72b80cd567313f835515b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (ed3e326) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #662   +/-   ##
=======================================
  Coverage   86.51%   86.51%           
=======================================
  Files          52       52           
  Lines        2091     2091           
=======================================
  Hits         1809     1809           
  Misses        282      282           
```



:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
## [Codecov](https://app.codecov.io/gh/jazzband/django-silk/pull/664?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#664](https://app.codecov.io/gh/jazzband/django-silk/pull/664?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (7b0002d) into [master](https://app.codecov.io/gh/jazzband/django-silk/commit/172c3eff1fcbff43ca5669ea485aec1074c2ff5b?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (172c3ef) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #664   +/-   ##
=======================================
  Coverage   86.51%   86.51%           
=======================================
  Files          52       52           
  Lines        2091     2091           
=======================================
  Hits         1809     1809           
  Misses        282      282           
```



:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
## [Codecov](https://app.codecov.io/gh/jazzband/django-silk/pull/668?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#668](https://app.codecov.io/gh/jazzband/django-silk/pull/668?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (4c75222) into [master](https://app.codecov.io/gh/jazzband/django-silk/commit/8d602dc5fbba8094b0264dda6e1aefbffb7fc7d2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (8d602dc) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #668   +/-   ##
=======================================
  Coverage   86.51%   86.51%           
=======================================
  Files          52       52           
  Lines        2091     2091           
=======================================
  Hits         1809     1809           
  Misses        282      282           
```



:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
## [Codecov](https://app.codecov.io/gh/jazzband/django-silk/pull/671?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#671](https://app.codecov.io/gh/jazzband/django-silk/pull/671?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (0f33057) into [master](https://app.codecov.io/gh/jazzband/django-silk/commit/8d602dc5fbba8094b0264dda6e1aefbffb7fc7d2?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (8d602dc) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #671   +/-   ##
=======================================
  Coverage   86.51%   86.51%           
=======================================
  Files          52       52           
  Lines        2091     2091           
=======================================
  Hits         1809     1809           
  Misses        282      282           
```



:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
## [Codecov](https://app.codecov.io/gh/jazzband/django-silk/pull/674?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#674](https://app.codecov.io/gh/jazzband/django-silk/pull/674?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (d573d5a) into [master](https://app.codecov.io/gh/jazzband/django-silk/commit/25b319197bda5f423cee2ecc9a01bd6f9624e36f?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (25b3191) will **decrease** coverage by `0.01%`.
> The diff coverage is `100.00%`.

```diff
@@            Coverage Diff             @@
##           master     #674      +/-   ##
==========================================
- Coverage   86.51%   86.50%   -0.01%     
==========================================
  Files          52       52              
  Lines        2091     2090       -1     
==========================================
- Hits         1809     1808       -1     
  Misses        282      282              
```


| [Files Changed](https://app.codecov.io/gh/jazzband/django-silk/pull/674?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) | Coverage Δ | |
|---|---|---|
| [silk/model\_factory.py](https://app.codecov.io/gh/jazzband/django-silk/pull/674?src=pr&el=tree&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband#diff-c2lsay9tb2RlbF9mYWN0b3J5LnB5) | `84.47% <100.00%> (-0.08%)` | :arrow_down: |

:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
Hi @albertyw,

I have made some improvements to the handling of sensitive headers in the `RequestModelFactory.encoded_headers` method. 
Could you please take a moment to review the changes ? 

Thanks!
@albertyw,  I appreciate the merge 😊

Could you please let me know when the new version is scheduled?
New version will be released with #678
maybe it's worth using 
```
set(SilkyConfig().SILKY_SENSITIVE_KEYS)
```
just for right type guarantee
let's do k.lower() maybe to avoid issues, if smth changes in Django?
Oh, really
I missed that
you're right
done
## [Codecov](https://app.codecov.io/gh/jazzband/django-silk/pull/677?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#677](https://app.codecov.io/gh/jazzband/django-silk/pull/677?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (b422176) into [master](https://app.codecov.io/gh/jazzband/django-silk/commit/9c2aba26e2c7643633347f4429804e49f8250cc6?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (9c2aba2) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #677   +/-   ##
=======================================
  Coverage   86.50%   86.50%           
=======================================
  Files          52       52           
  Lines        2090     2090           
=======================================
  Hits         1808     1808           
  Misses        282      282           
```



:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
## [Codecov](https://app.codecov.io/gh/jazzband/django-silk/pull/678?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#678](https://app.codecov.io/gh/jazzband/django-silk/pull/678?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (2516c92) into [master](https://app.codecov.io/gh/jazzband/django-silk/commit/82b045a6b853a3c08b8a9e5bc24f0f0bfcc9d961?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (82b045a) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #678   +/-   ##
=======================================
  Coverage   86.50%   86.50%           
=======================================
  Files          52       52           
  Lines        2090     2090           
=======================================
  Hits         1808     1808           
  Misses        282      282           
```



:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
## [Codecov](https://app.codecov.io/gh/jazzband/django-silk/pull/679?src=pr&el=h1&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) Report
> Merging [#679](https://app.codecov.io/gh/jazzband/django-silk/pull/679?src=pr&el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (8394472) into [master](https://app.codecov.io/gh/jazzband/django-silk/commit/3888cc3b499fe1bc77a2b89dd8ca7bd0667efd28?el=desc&utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband) (3888cc3) will **not change** coverage.
> The diff coverage is `n/a`.

```diff
@@           Coverage Diff           @@
##           master     #679   +/-   ##
=======================================
  Coverage   86.50%   86.50%           
=======================================
  Files          52       52           
  Lines        2090     2090           
=======================================
  Hits         1808     1808           
  Misses        282      282           
```



:mega: We’re building smart automated test selection to slash your CI/CD build times. [Learn more](https://about.codecov.io/iterative-testing/?utm_medium=referral&utm_source=github&utm_content=comment&utm_campaign=pr+comments&utm_term=jazzband)
# [Codecov](https://codecov.io/gh/axnsan12/drf-swagger/pull/9?src=pr&el=h1) Report
> Merging [#9](https://codecov.io/gh/axnsan12/drf-swagger/pull/9?src=pr&el=desc) into [master](https://codecov.io/gh/axnsan12/drf-swagger/commit/3f428d0cd127d11c3445199c65fe3a692c971baa?src=pr&el=desc) will **increase** coverage by `0.31%`.
> The diff coverage is `79.23%`.

[![Impacted file tree graph](https://codecov.io/gh/axnsan12/drf-swagger/pull/9/graphs/tree.svg?width=650&height=150&src=pr&token=KuStDYJdUH)](https://codecov.io/gh/axnsan12/drf-swagger/pull/9?src=pr&el=tree)

```diff
@@            Coverage Diff             @@
##           master       #9      +/-   ##
==========================================
+ Coverage   85.69%   86.01%   +0.31%     
==========================================
  Files          10       11       +1     
  Lines         643      772     +129     
  Branches       93      128      +35     
==========================================
+ Hits          551      664     +113     
- Misses         53       60       +7     
- Partials       39       48       +9
```


| [Impacted Files](https://codecov.io/gh/axnsan12/drf-swagger/pull/9?src=pr&el=tree) | Coverage Δ | |
|---|---|---|
| [src/drf\_swagger/openapi.py](https://codecov.io/gh/axnsan12/drf-swagger/pull/9/diff?src=pr&el=tree#diff-c3JjL2RyZl9zd2FnZ2VyL29wZW5hcGkucHk=) | `87.06% <100%> (ø)` | :arrow_up: |
| [src/drf\_swagger/inspectors.py](https://codecov.io/gh/axnsan12/drf-swagger/pull/9/diff?src=pr&el=tree#diff-c3JjL2RyZl9zd2FnZ2VyL2luc3BlY3RvcnMucHk=) | `73.68% <72.54%> (+3.94%)` | :arrow_up: |
| [src/drf\_swagger/utils.py](https://codecov.io/gh/axnsan12/drf-swagger/pull/9/diff?src=pr&el=tree#diff-c3JjL2RyZl9zd2FnZ2VyL3V0aWxzLnB5) | `88% <88%> (ø)` | |
| [src/drf\_swagger/generators.py](https://codecov.io/gh/axnsan12/drf-swagger/pull/9/diff?src=pr&el=tree#diff-c3JjL2RyZl9zd2FnZ2VyL2dlbmVyYXRvcnMucHk=) | `88.42% <96.77%> (+2.11%)` | :arrow_up: |

------

[Continue to review full report at Codecov](https://codecov.io/gh/axnsan12/drf-swagger/pull/9?src=pr&el=continue).
> **Legend** - [Click here to learn more](https://docs.codecov.io/docs/codecov-delta)
> `Δ = absolute <relative> (impact)`, `ø = not affected`, `? = missing data`
> Powered by [Codecov](https://codecov.io/gh/axnsan12/drf-swagger/pull/9?src=pr&el=footer). Last update [3f428d0...652795f](https://codecov.io/gh/axnsan12/drf-swagger/pull/9?src=pr&el=lastupdated). Read the [comment docs](https://docs.codecov.io/docs/pull-request-comments).
OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`.

If you change your mind, just re-open this PR and I'll resolve any conflicts on it.
👍 I'm going to rebase this on #20 and merge it
Thank you for merging!
Looks good, thanks 👍
Since this only applies to response schemas, would it make sense to always return a `read_only` Schema here?
I just realized that doing that would involve moving some code around (from [here](https://github.com/axnsan12/drf-yasg/blob/a2c21539f783480e99177c64b0fb79bd61f3e318/src/drf_yasg/utils.py#L216) to [here](https://github.com/axnsan12/drf-yasg/blob/a2c21539f783480e99177c64b0fb79bd61f3e318/src/drf_yasg/utils.py#L179)) and adding some checks to prevent the value on the field overriding the value passed as argument; if you don't to deal with that I could handle it.
Hello and thank you!

Looks good and makes sense at first glance.

Could you provide some examples for this usage? Perhaps even some tests would be useful to make sure this keeps working in the future.
sure thing. I will add the test.
the time being, here is the link explaining why it might comes handy.
http://www.django-rest-framework.org/api-guide/serializers/#including-extra-context
I think the real problem you are encountering is not that context is not added to the serialzier, but that `context['request']` is `None`. Unfortunately, this is just the way it is, there is no request when the schema generator inspects views, because they are artificially instantiated.

What do you mean that your serializer "needs the request to render properly"? Could you provide an example of such a serializer?
request is None when the generator is configured with `public=True`

https://github.com/axnsan12/drf-yasg/blob/master/src/drf_yasg/generators.py#L85

That's in fact enough to have the request.
Thank you.
Do note that this request will be, for all views, the request that arrived **against the schema view** (e.g. `GET /swagger.json`) and not a request that would normally hit your serializer, with query parameters, different HTTP methods or whatnot.
Sure, as a side effect we have a different documentation rendered, depending if user is connected or not and so on.
Our permission policy is reflected on the documentation that way.
In 1.0.6, views should now always have the schema view request bound, regardless of `public=True`.
I don't follow, though. In [the link you sent](https://github.com/encode/django-rest-framework/blob/a81e60ff390b9b6788b2cac24a01ee4dd2dcffd2/rest_framework/generics.py#L111), you can see that `get_serializer` already adds the serializer context before instantiating `serializer_class`.
In fact, this line is exactly like the line you linked to, and it is in the same function that is called above.
damn, you are right!
I would say your best option in a situation like this would be to add a `help_text` to the `owner` field describing what happens in the default case. The treatment proposed here doesn't seem like a good idea to me.
I have no idea about what I'm doing here. I haven't study in depth openapi/swagger specs.I completely trust your guidance.
Anyway, writing the regression test was the hardest part.
I'll try to make it better following your comments.
I will try to fix this so that it will at least not generate an invalid schema (see #25). I think I have a solution in mind which would be able to show the user ID of the currently logged in user that is viewing the schema for CurrentUserDefault. That wouldn't be perfect, but at least it's something, and together with the description suggested above would be decent I guess.
Hello,

Can you confirm if 1.0.6 fixes your problem?
I confirm it works well. Thank you.
reviewing myself again, I'm not sure about the fix. Maybe I should do like DRF is doing...
https://github.com/encode/django-rest-framework/blob/master/rest_framework/fields.py#L253
yeah, seems better.
Unused import
I don't see how this is appropriate. 

The string `CurrentUserDefault()` does not represent a valid user ID, so cannot be a "default value" for the owner field which is a PrimaryKeyRelatedField.

As far as I know, the OpenAPI specification provides no way to specify a default based on external state such as currently authenticated user, so this can't really be expressed by spec. The best you could hope for would be to document the behavior in a description, e.g. "if `owner` is not provided, it will be assumed to be the currently logged in user".

Since this project aims for spec compliance and codegen tool compatibility, we cannot just use arbitrary strings just for documentation purposes in the `default` field.
In fact, if [this TODO](https://github.com/axnsan12/drf-yasg/blob/7683a28816f85478fda96a60eb2fa2fe10bc4c38/src/drf_yasg/utils.py#L242) were to be implemented, the owner field would be inferred to be of type `int` (like `pk` of `User`), and "CurrentUserDefault()" would not even conform to the type.

According to [the OpenAPI spec](https://github.com/axnsan12/drf-yasg/blob/7683a28816f85478fda96a60eb2fa2fe10bc4c38/src/drf_yasg/utils.py#L242), the value of `default` must conform to the `Schema` it is declared in.
Seems good, thanks!
This is not right, a Model's primary key can have a lot more different types than `int`. You would have to check the actual `queryset` on the field to check the `ModelField` details. 

For example, the primary key could be a string, or a datetime, or it could be a compound key. There is a semi-attempt at guessing type from the Model's `pk` in `generators.py` in the function that inspects path parameters, but it's not perfect/complete there either.
Note - I added some suggestions here https://github.com/beaugunderson/drf-yasg/pull/1
@beaugunderson looks good to go for me. Do you have anything else you would like to add?
I'm going to go ahead and merge this, feel free to reopen if you have anything to add!
@axnsan12 awesome, thank you!
Hello @fazpu,

Did you read the [contributing guidelines](https://github.com/axnsan12/drf-yasg/blob/master/CONTRIBUTING.rst)? Specifically, point 3 should cover all of this 😄
I did not. I will review the PR later today. Anyway, it would be good to include link to the contribution guidelines in the README.rst. Will change that as well.

Anyway, thank you for this amazing project! Truly awesome!
Well, github itself links to CONTRIBUTING.rst any time you open an issue or pull request, and there is also a link in the documentation at [drf-yasg.readthedocs.io](http://drf-yasg.readthedocs.io).
But you are right, a note in the README that you can look into the test project for more examples could be useful.
I rebased this and added my suggestion - opinions?
I apologize for the the little bit chaotic PR. I left only the changes in README.rst since I believe there will be others like me, who will be looking for the test project installation guidelines.

The one thing that was not clear without looking to guidelines is the `pip install -e .[validation]` step.
Maybe this could be a useful addition, but should link to or provide the same instructions as point 3 [here](https://github.com/axnsan12/drf-yasg/blob/master/CONTRIBUTING.rst#pull-requests).

Having to maintain two separate sources for dependencies is something I'm trying to avoid
This should not be required if you have drf_yasg installed (development mode or not).
Half of the requirements here are for drf_yasg itself, and the other half are listed in /requirements/test.txt...

Maybe it would make sense to move the testproj requirements into a requirements,txt file in testproj and reference that from test.txt, but duplicating them is not acceptable.
Django is intentionally not listed in requirements since it is expected that people installing a **Django library** already have Django.
I believe this expectation is not correct. I believe it is considered to be a bad practice to have packages installed globally, including Django
Done! https://github.com/axnsan12/drf-yasg/commit/33199aec59593746129f90e31455f9ef08f28842
I think it should be 3.7.7, since 3.7.4-3.7.6 has problems with missing files from packaging.
Whoops. Thank you!
/cc @mats-claassen
Ok, no problem, I'll merge if all tests pass :)
The implementation looks about right, but it could use some simple tests (basically just add a HiddenField somewhere in ``testproj`` and regenerate ``reference.yaml`` - https://github.com/axnsan12/drf-yasg/blob/master/CONTRIBUTING.rst#pull-requests).

The docs for ``DEFAULT_FIELD_INSPECTORS`` should also be updated to match its new reality.
done
Seems ok 👍, thanks!
The ``else`` here is not needed, and could be removed to keep the style consistent with the other classes above.
👍
Hello,

I seem to get this error every time I load my swagger docs (hosted on a server). 
`TypeError: Expected a openapi.Swagger instance`

But then after a couple seconds it loads everything perfectly.

Unable to replicate it locally for some reason.

Would there be a way for me to somehow disable this check?
Hello,

Your error doesn't seem related to this PR, you should open a new issue and try to give additional information (for instance, a complete traceback of the exception).

Being able to replicate the error with a minimal project would be huge help to find the problem.

Lastly, a `TypeError` most likely does not indicate a failed check but an error in the code and thus can't be disabled, only fixed by finding the root cause.
A regression test for this would also be great, if you would like to add one (as described [here](https://github.com/axnsan12/drf-yasg/pull/79#issuecomment-371736246))
Sorry for not thinking of getattr(), I'm pretty tired and didn't think beyond "does it work?"…
I'll have a go at trying to add a regression test as soon as I can but not before tomorrow unfortunately.
Anyway, thanks for this project :-)
No problem and no rush! :smile: always great to have other people contributing
Hello,
Sorry for the delay, I didn't have access to my computer for a week.

I striped my other code down until I found a "minimal" breaking scenario and I then put it in the "people" app. This app isn't very useful in itself but you can check that my previous commits do indeed remove an Exception.

Do you need anything else? :slightly_smiling_face:
Nope, seems great. Thanks!
``hasattr(model_field, 'help_text') and model_field.help_text`` could be replaced by ``getattr(model_field, 'help_text', '')``
...and this by ``getattr(model_field, 'primary_key', False)``
Seems legit :+1:
Seems legit :+1:
Seems good, thanks 👍
@tuky why you've changed `None` to `'none'` [here](https://github.com/axnsan12/drf-yasg/pull/108/commits/fc422e735c4e9ccfe0a13933eeab820af6f1051b#diff-f47f8ca652dac550c8bc9d449ca0d253R215)?
Simply put because `None` has no effect. It is also documented for `docExpansion` at https://github.com/swagger-api/swagger-ui/blob/112bca906553a937ac67adc2e500bdeed96d067b/docs/usage/configuration.md#parameters. The setting accepts `String=["list"*, "full", "none"]`.
Yep, seems right, thanks! 👍
The idea seems ok.

Can you try rebasing on master? https://github.com/axnsan12/drf-yasg/commit/209201b9a52826d3b8d617b571921cd6eb8ebda2 should fix your build errors
Done.
I think ``JSONRenderer`` would be more fitting here, seeing that this is a JSON/YAML endpoint generally. The idea makes sense though :+1:
Thanks for incorporating your feedback!
This is not the right approach. ``FileField`` is always ``read_only`` when represented as a ``Schema``, since you can't upload files via JSON, and the representation is just the file's url.

Instead, the loop [here](https://github.com/axnsan12/drf-yasg/blob/a4a11ad1ab0a594da7b5844126924466638db496/src/drf_yasg/inspectors/field.py#L70) should be modified to prevent ``read_only`` properties from being added into the ``required`` array, which would also be a more generic fix for the issue.
(In my defence, the build was failing before this PR 😄)
Whoops.
Alright, seems fair.
Awesome, thanks for the catch!
Thanks for the test fix and quick merge!
Thanks!
Okay I don't really get in what way the ci failures are related to my changes, but if it's the case I'd be glad to fix :)
Looking at the code again, we should probably use ``get_user_model`` instead of directly importing ``User``. But the idea of this patch is good, 

> Okay I don't really get in what way the ci failures are related to my changes, but if it's the case I'd be glad to fix :)

It seems unrelated to what you did, it's ok.
Thanks for your suggestion, I've made changes, is that better ?
Yep, thanks!
Hello, can you tell me if you're planning on releasing soon ? I'm waiting for the next pypi release to have this feature integrated cleanly in a project I'm working on. Thank you !
Hey! Sorry for the delayed release, it's been a pretty busy period for me. I'll try to make it happen soon!
I'll wait, no problem. Thank you for your time !
In case you haven't noticed, this was released in 1.9.2 last Friday. Cheers!
Oops. Thank you!
Merged via bbc70a7e3d5c586cb75991ba8443f578ea07d167
I'll create a fresh squashed branch to tidy the history.
Closing in favour of squashed version, #179
There was no need for that, I always squash and merge anyway :smiley:
shouldn't this be the other way around?
This should probably start with an underscore like for swagger_auto_schema
This seems ok. Maybe the method docstring should be used as fallback if there is no help_text.
Also I'm not sure about forcing a serializer class to be passed. Most other places accept either a class or an instance.
Tests are failing because this does not have ``read_only`` set.
Should pass read_only=True here
yep, fixed
the comments seem to have been moved due to later commits. I think this is done
Agreed, I've updated to allow class or instance
fixed in later commit
Seems reasonable - so there's maybe 3 places help_text could come from:

a) ```SerializerMethodField(help_text)```
b) ```@swagger_serializer_method(serializer=OtherStuffSerializer(help_text))``` (if an instance of serializer was passed)
c) the get_blah method's docstring.

Is that a reasonable priority order?  Or should it be b, then, a, then finally fallback to c?
Your order makes most sense to me
done.
Seems good, will merge asap :+1:
I have that done in this PR, along with tests, but it seems nothing is being merged for quite sometime.
https://github.com/axnsan12/drf-yasg/pull/194
Duplicate of #194.
I dunno why the Python 3.7 fetch failed, but that doesn't seem to be because of my code...
See #201.

I would rather see a more general implementation of #41 instead of piecemeal chunks.
This PR also lacks required documentation and tests.
Hey - sorry for the delayed response.

This seems allright, it's pretty non-intrusive and seems to be accepted by many tools. 

However it seems to me that it should only apply to JSON Schemas, not path/query/form/header parameters, am I wrong?
Hi, thanks for the feedback.

I did not dive much in drf-yasg so I'm not sure what you are refering to.
Reading the docstring of `_get_partial_types` I thought my change would only be reflected on fields (`Helper method to extract generic information from a field`) so JSON Schemas and form data I think.

I do not know much of the usage of vendor extensions on Swagger but the resulting YAML seems fine to me.
Hey! Thanks for the PR, but I don't like the idea of hardcoding display strings in the library.
I don't really like this idea since it brings in support for yet another flavor of non-standard markdown, complicating both implementation and usage. It seems better suited in a project-specific schema class.
Not sure that this will be accepted since #207
> Not sure that this will be accepted since #207

I see... thanks for the heads up!
It will be accepted if there is a compelling reason 😄 But for me, I don't see any problems with the current set of included files, and it has helped me personally when working from multiple computers.
Hello and thanks for your PR!

However, due to the long time since this was opened (my bad), it was superseded by a2b35f336396eaeba2bfed4350a5361af90a83fc, so I'll be closing.
This library is not a tool for debugging broken REST framework views. In general, if the view would not work as-is, we don't care about it.

Ideally any broken view would be silently skipped, at most logging a warning with the stack trace. It might make sense to do this with a catch-all try-except [here](https://github.com/axnsan12/drf-yasg/blob/f587785eb4b1830dd28eb9a815200c82ee7ca371/src/drf_yasg/generators.py#L355-L360).
You are Correct forget about this Pull Request
Fair enough, thanks!
this is great, i just did a workaround by myself
@axnsan12 Hi, please review my changes and tell if I need to improve it. Thanks.
Hey, I looked over it, seems good. Also great that you added a test for it, thanks!
I can add a regression test for the case if you wish, but it looks quite usual for python language. (So crazy)
Yeah... good spotting, thanks!
Also, I have no idea how to add tests for the case. I can suggest creating a unit tests for the function `get_basic_type_info_from_hint`. What do you think?
@axnsan12  I have added several more functions to `inspectors/field.py` file. 
Would you mind if I go and convert it to a package with files like `choice_field_inspector.py`, `serializer_method_field_inspector.py`, `type_hint_class_inspector.py` etc? I will do it only if you like the idea.
Hello!

This is a good initiative, thanks for taking the time to implement and test it!

>Would you mind if I go and convert it to a package with files like choice_field_inspector.py, serializer_method_field_inspector.py, type_hint_class_inspector.py etc? I will do it only if you like the idea.

I don't really like this idea, I don't want to give too much attention to the type hinting feature. It's a nice-to-have for simple cases but should not be overdone. The current structure seems good enough to me.

I've added some comments for specific parts of the code.
@axnsan12 Hi Cristi, all requested changes are made, please review.
Thank you for the PR! Bagged and tagged.
This can be replaced by `getattr(hint_class, '__origin__', None) or hint_class`
This is ugly, we can't just assume by default that an Union is represented by its first alternative. Since OpenAPI 2.0 doesn't provide a good way to express unions (i.e. `oneOf`), we should just ignore them - users can decide exactly how to handle them, if they so wish.
The addition of this array and the whole inspector logic seems to me like it's making stuff more complicated than it needs to be. 
All the logic can be expressed by adding support for callables instead (type, format) tuples to `hinting_type_info` - i.e. when `hint_class` is subclass of `typing.Sequence`, a function will be called to get type info.
I don't quite like this. I don't think we should start providing an interface for type hint inspection, I don't see it as something important enough. 

Users can append to the global array themselves, if they so wish, but do so while acknowledging that it's not an explicitly supported extension point.
Big like for the comprehensive test!
I want to make it clear and well-documented feature instead of hiding it under the hood.
A case in which I'm already using it: 
There are custom value types (like Color) and I have extended JSONEncoder to support such types (the same way as it's done in DRF for UUID and datetime). As a consequence, I want to be able to serialize those values natively using DRF serializers and also be able to return from SerializerMethodField.
Please approve that it doesn't make sense for you and I will go and remove the public function.
Got it. One more reason has left to work with Union is that `Optional[T]` is represented as `Union[T, None]`. So I will rework it support the only case and leave other non-obvious untouched.
Alright, a special case for `Optional` seems good. In that case it would probably make sense to add `x-nullable` to the type info.
Fair enough, thanks!
Hey, thanks for the issues, I've amended the quickstart code.
Awesome! Thanks for the quick follow-up. You rock :+1:
Thanks!
If we go this route, might as well move python 3.7 to the main matrix and remove this.
:+1:
Makes sense, thanks.

It would be great if you would also add a test for this somewhere, to show the intention and prevent future regressions.
sure, then i'll need to add new view and the url. i'll add endpoint that retrieve list of all objects that related to certain user with url `path('user/model/<int:user_id>/', views.ModelList.as_view())` and for the view, should i add it to [snippets](https://github.com/axnsan12/drf-yasg/blob/master/testproj/snippets/views.py) since it will use generics or to [articles](https://github.com/axnsan12/drf-yasg/blob/master/testproj/articles/views.py) since it will need to have `pagination_class`?
You can add it anywhere you want, there's no real structure to the test project view, most of them don't even work.
@axnsan12 added the test for this fix, please check again. thank you
Looks OK, thanks!
@axnsan12 is this issue already covered by your [last commit](https://github.com/axnsan12/drf-yasg/commit/298a9745df213bedf78fd8e096287fe951ea33a2)?
if yes, i'll close this PR, or do you want to keep test created in this PR?
The last commit was targeted at #330. I'll be meeting this when I get the chance to rebase it on the latest master (or if you can do that).

Sorry for being so slow about this.
I meant #331
trigger too many tests, please re-run it. thanks
Well, this is quite bad... Thanks for reporting this, I totally missed it!

Changing it like this might completely break some existing code, but at the same time we can't keep hiding the items method. And I can't think of a way to cleanly print a deprecation warning.

I'm going to merge this in and hope not too many people shout at me.

Closes #307, I guess.
trailing comma
trailing comma
Does this mean that for all existing projects all the model names will change? If so i'd say it's not acceptable since it will break *every* client app that uses existing apis.
Hello, @rsichny , thanks for your feedback!
Actually, this is a very good question and I don't know complete answer to it.

Yes, it will change names for all models in existing projects, but these names are not part of API itself, so I don't think it should not break anything.

Once generated with `swagger-codegen` client will not revise `swagger.json`, so these changes should not be a problem in this case.
But this means that whenever someone generates a new client using codegen - they'll need to change ALL the code which uses the generated client.

Example 1: in our case QAs generate the new client using codegen for api schemas on each release and then they run test suite (thouthands of test cases) using the newly generated client. Global change of the names which are being output by codegen will produce enormous amount of work (they'll need to change each of the references to the old names).

Example 2: our partners use swagger definitions to generate the swagger client and use that client in their code. As soon as we decide to add a new field to api they'll need to re-generate the swagger client and all the integration will break.

My suggestion is to leave the old behavior by default, and either make this new behavior configurable, or only add prefixes for the cases when the schema is added to the list of definitions if the same definition already exist.
However in case of dynamic clients like [`bravado`](https://github.com/Yelp/bravado/blob/f8f98c00c3422f977ae44b4ef7e37350b05f6ea5/bravado/client.py#L138) it will be definitely a problem(don't know if it will be a problem for [`swagger-js`](https://github.com/swagger-api/swagger-js), doesn't seem so)
Actually, since all the name conflicts can be resolved by using ref_name in serializer i don't think any change is necessary at all.

https://drf-yasg.readthedocs.io/en/stable/custom_spec.html#serializer-meta-nested-class
Yes, I was also thinking about adding some settings to switch this behaviour on keeping old one as a default.

However I still believe that it would be nice to have such unambiguous behavior by default, maybe in the next major release. Right now this behavior is very awkward: you will get improper API documentation in case on names clash without any warning and it is really hard to debug.

I will leave this PR open for now to gather more opinions and have a look if it is possible to make this problem more clear(raise a warning when app finds ambiguous name, e.g.)
@kammala how about adding a warning into https://github.com/axnsan12/drf-yasg/blob/master/src/drf_yasg/openapi.py#L540 when the ref names overlap?
Others may use the swagger spec for live API clients or form generators, so changing stuff suddenly like this is still kinda awkward.

Plus, the problem this solves is not that common, I think. This solution might work behind a setting. Maybe a better one would be to always raise an exception when encountering multiple serializers with the same name, forcing explicit disambiguation by the user.
The warning should already be there:

https://github.com/axnsan12/drf-yasg/blob/583e404ed826416bade3505d1c77dba36b98ba9b/src/drf_yasg/inspectors/field.py#L130-L133
@axnsan12 maybe just change to `warnings.warn` to make it more visible? (people often turn off logging for 3rd party libs)
I think I'll just change it to an exception :smile:
However, this `$ref` is still not required in OpenAPI — we can either create definitions for schemas or put these definitions in place they are needed. I think, ideally this part should not be treated as a part of API cause it does not affect actual client-server protocol.

this warning doesn't work for some reason :(
`actual_serializer` is always `None` because of https://github.com/axnsan12/drf-yasg/blob/master/src/drf_yasg/openapi.py#L109

so this warning will never be printed :(
looks like #156 wasn't fixed
Oh well, taking this can't hurt, I guess. Thanks!
Seems good, thanks!
Hello! Thanks for the pull request and ideas.

The solution proposed here is really inconsistent with the rest of the `drf-yasg` API. All other overrides are done via decorators, so there's no reason we should start doing them by method attributes now.

You can solve the paginator problem by selecting the paginator class in the `paginator` method instead of the `paginate_queryset` method. Both DRF and drf-yasg will then see the same paginator class and behave in the same way.

For the `is_list` problem, I would much rather add an overridable method in `SwaggerAutoSchema` for maximum flexibility. The presented use case is fairly uncommon and I don't believe it warrants a declarative way to override.
The proposed hooks should suffice to satisfy this need.
Can't you use `self.view.action`?
Unfortunately, retrieving the action is more complex than that: https://github.com/encode/django-rest-framework/blob/master/rest_framework/schemas/generators.py#L412
Operation keys have also more information
Fair enough. In that case, I would rather move the `operation_keys` parameter to the `SwaggerAutoSchema` constructor and set it as an instance attribute, to make it available to any method which might need it without changing all signatures.

Any change to method signatures must also take backward compatibility into account, both for callers and for overriders.
Please provide an example of this happening.
Duplicate of #306
Every ListAPIView that ends with some parameter will:

```
    # if the last component in the path is parameterized it's probably not a list view  
    path_components = path.strip('/').split('/')  
    if path_components and '{' in path_components[-1]:  
        return False  
```

e.g.
```
path('mylist/<int:id>',  
        SomeListAPIView.as_view(),  
        name='mylist',  
)
```
Thanks!
Is it going to be merged?
Yeah, seems okay.
Seems good, sorry this got left up in the air!
As per the [OpenAPI specification](
#include "falx_constants.h"), the `format` property is a free-form string whose semantics can be chosen arbitrarily by implementations. The spec then gives a non-exhaustive list of reasonable formats to support, but it is completely correct to generate other values too.
Seems OK, thank you!
Thanks!
I don't think this is a good idea. Ensuring escaped ascii output in JSON and YAML helps compatibility.

You would only care abut this if you 

- use broken tools
- want to look directly read the yaml file as documentation
- care about file size

For all of those cases the burden is on the user to properly convert their data into a more appropriate encoding, a task which is made easier by using non-ambiguous ASCII output.
Shadowed by #786
Seems good, thank you!
Thanks for the initative, but your changes seem to break compatibility with older versions: https://travis-ci.org/axnsan12/drf-yasg/builds/558380899 (not sure why the PR status was not updated by Travis)
Sure. I will have a look in an hour. DRF just released 3.10 a couple of hours ago. Yasg is broken as of now. A coworker just ran into exactly this issue 5 min ago :)
ok took longer than anticipated but i got it done. there are multiple things: 

- to keep compatibility with old versions I needed to add an version check for >3.10 and below.
- to make the tests work with 3.10 (and below) i had to add my PR of [djangorestframework-camel-case](https://github.com/vbabiy/djangorestframework-camel-case/pull/58) to the testproj requirements until its gets merged. As of now the lib is broken.
- added tox target for `drf310`
- `djmaster` is only failing because `corsheaders` also uses `from django.utils import six` which got removed from master. honestly, didn't want to open up a third PR.
Awesome, thanks!
Hello @axnsan12,
Could you please take a look at this PR?
Thank you!
Hey, sorry for letting this sit. Proposed changes seem good. Is there a reason for `djmaster: https://github.com/ottoyiu/django-cors-headers/archive/master.tar.gz`?
JSONField is not necessarily an object - it can also be a list or a primitive.
However, I guess that object is the most common case so it would be good to make that the default instead of string.
Thanks, I figured the same; the type can still be overridden if necessary but in most cases it will probably be `object`.

I could't think of a way to guess the expected value anyway, except maybe guessing it from the field's default value if any. But that would make it inconsistent depending on whether there is a default value or not, which is better avoided.
>  the type can still be overridden if necessary

@etene Can you elaborate on how you would do this for a single `JSONField`? I've been trying to use the [`Meta` field option](https://drf-yasg.readthedocs.io/en/stable/custom_spec.html#serializer-meta-nested-class) but haven't been able to figure out how to do that from the docs.
- you could use a custom `FieldInspector` that returns your wanted schema (and give it priority over the default `JSONFieldInspector`)
- or if it's for a single instance, leverage serializer introspection and use a custom serializer (as mentioned in #478)
I'm working at adding some tests of this to the test suite.
Shadowed by #786
Thanks!
The test breaks Python 2.7 compatibility, I'll try to fix it.
is it going to be merged? I have the same issue
Seems good, thanks!
It looks like this is no longer breaking with 0.16.1.
@axnsan12 ? Would it be ok to merge this PR?
Fixed on master, thanks for the PR!
Oh, I probably know why this is not possible and why it decide to switch on application/json media type by default if we don't have only form media type : this is because multipart/form-data doesn't allow nested parameter... !!
I just refresh the pull request in order to add some comments about this because this is really tricky and it could help to understand why (if this is the good reason anyway)
Yeah, your comments pretty much hit it on the head. The problem is both that there is no widely accepted standard for nested values in multipart/form-data, and that OpenAPI 2.0 enforces this separation via Parameters for form fields and Schemas for json body.

OpenAPI 3 is a real big step forward in this regard since it allows all request body types to be specified as a Schema, with a lot of knobs for media types. However building a lib to generate that is probably a nightmare.
Thanks!
@WasinTh  How would I use the attached code?
@vladdoster I've added the sample code in the documentation. Please look at this link
[https://github.com/Hipo/drf-extra-fields/tree/b59c23857fd84d7612bdd7e0714dc317f19602da#drf-yasg-fix-for-base64-fields](url)

The simplest way to use is add all that code block into your views.py.

Regards,
Wasin.th
> @vladdoster I've added the sample code in the documentation. Please look at this link
> [https://github.com/Hipo/drf-extra-fields/tree/b59c23857fd84d7612bdd7e0714dc317f19602da#drf-yasg-fix-for-base64-fields](url)
> 
> The simplest way to use is add all that code block into your views.py.
> 
> Regards,
> Wasin.th

That link seems to 404?
A potentially cleaner solution: https://github.com/Hipo/drf-extra-fields/issues/66#issuecomment-626755554
Thanks!
Thanks!
Thanks!
It would probably be better to do this at a deeper level, where the values are actually used. Most likely you could just throw decent onto all usages of `force_real_str`.
Yeah, that seems better. I was wary of changing the behavior of `force_real_str`.
Looks like tests weren't updated with this, so now it's failing tests on master: https://travis-ci.com/axnsan12/drf-yasg/builds/136509688
Yeah, sorry, I got too excited and went too fast :)   This should now be good for Python 3, and includes a test to verify the behavior.
It would likely be more efficient to use `'\n' in text or '\r' in text` here. Serializing to YAML is already very slow so let's not make it worse than needed.
Will this work on python 3?
Answer is no: https://travis-ci.org/axnsan12/drf-yasg/jobs/592217419
Done
Thanks!
@axnsan12 do you have any comments on this change?
Nope, seems good, thanks!
@axnsan12 Thanks for merging this change! Do you think is possible to release a new version with this change?
hi, I'm still a problem.
help plz

<img width="759" alt="스크린샷 2020-11-20 오후 4 32 35" src="https://user-images.githubusercontent.com/14883810/99772642-81335300-2b4e-11eb-99c0-2164b12100fc.png">
> Will the collection format setting over-ride that set in the Parameter?

To my knowledge, there's no explicit collectionFormat set by default (except for the case of MultipleChoiceFields). So the aim of this PR is to give control to users to set the `collectionFormat` they may wish to use.

Although, to be honest I'm not familiar with swagger and/or drf-yasg enough to be fully confident if this is the best approach. I for one needed this functionality during development.
After some time has passed, I found a way to achieve the desired behavior using just the tools already provided in the `drf_yasg` library.

So I'll close this PR and leave my solution as a comment below.
### My solution:

1. Define a custom `FieldInspector` somewhere in your project code, e.g. `/utils/swagger_related.py`
```py
# /utils/swagger_related.py

class MultiCollectionFormatInspector(drf_yasg.inspectors.FieldInspector):
    """Enforces collectionFormat: multi for array-type parameters."""
    def process_result(self, result, method_name, obj, **kwargs):
        if isinstance(result, openapi.Parameter):
            if result['type'] == openapi.TYPE_ARRAY:
                if result['in'] in (openapi.IN_FORM, openapi.IN_QUERY):
                    result.collection_format = 'multi'

        return result
```

2. Add the custom field inspector to the list of field inspectors in settings (along with all the other defaults)
```py
# settings/base.py

...
SWAGGER_SETTINGS = {
    ...
    'DEFAULT_FIELD_INSPECTORS': [
        # custom
        'utils.swagger_related.MultiCollectionFormatInspector',
        # drf_yasg defaults
        'drf_yasg.inspectors.CamelCaseJSONFilter',
        'drf_yasg.inspectors.RecursiveFieldInspector',
        'drf_yasg.inspectors.ReferencingSerializerInspector',
        'drf_yasg.inspectors.ChoiceFieldInspector',
        'drf_yasg.inspectors.FileFieldInspector',
        'drf_yasg.inspectors.DictFieldInspector',
        'drf_yasg.inspectors.JSONFieldInspector',
        'drf_yasg.inspectors.HiddenFieldInspector',
        'drf_yasg.inspectors.RelatedFieldInspector',
        'drf_yasg.inspectors.SerializerMethodFieldInspector',
        'drf_yasg.inspectors.SimpleFieldInspector',
        'drf_yasg.inspectors.StringDefaultFieldInspector',
    ],
    ...
}
```
(According to `drf_yasg` docs, custom inspectors should go at the top of the list, like the above.)
Thank you for sharing your solution!
That workaround didn't work for me; I seem unable to be able to get it to use the FieldInspector in my request at all. It's a GET if that matters. Did you overcome anything confusing to get this working for you? @dlemfh

I tried including it in settings and also passing it directly to swagger_auto_schema().
Will the collection format setting over-ride that set in the Parameter?
@etene Mind reviewing this PR?
Not at all, I'll take a look. At first glance, from a git history standpoint, wouldn't it be better to rebase your branch on master instead of including a merge commit ?
> Not at all, I'll take a look. At first glance, from a git history standpoint, wouldn't it be better to rebase your branch on master instead of including a merge commit ?

I was presuming that @axnsan12 would use GitHub's Squash Merge functionality to render that moot.
@etene I believe I have addressed all of your review comments. Let me know what you think.
Build failures appear unrelated?
Yeah, seems good. Thanks!
I think this PR will be an helpful addition to the documentation.
It would be even better to mention (in the *Serializer ``Meta`` nested class* section) that it applies not only to serializers, but also to serializer *fields*. It is not obvious at all even though the new examples are based on this.
Thanks for addressing my comments, everything looks OK for me, now it's up to @axnsan12 :)
I think you should mention that it's not the only way to do it, and maybe point to the relevant documentation (see below) so you don't have to explain everything, which would be outside the scope of drf-yasg's documentation.

https://www.django-rest-framework.org/api-guide/validators/
https://www.django-rest-framework.org/api-guide/fields/#validators
I would rephrase that as 
> Suppose you wanted to model an email using a ``JSONField`` to store the subject and body for performance reasons:
I think you wanted to make a pr in the new fork https://github.com/JoelLefkowitz/drf-yasg and not here, right?
Hence https://github.com/JoelLefkowitz/drf-yasg/pull/48 :smile:
Complete PR in #786
Thanks for the correction, sorry for the delay.
Looks good to me.  Waiting on @axnsan12 for final merge.
Thanks for the contribution and sorry for ignoring this for so long. 

coreschema is as of now deprecated, and I'm going to drop the compat support, so this is obsolete. Closing.
> Thanks for the contribution and sorry for ignoring this for so long.
> 
> coreschema is as of now deprecated, and I'm going to drop the compat support, so this is obsolete. Closing.

Understandable, no worries! :+1:
I was reading docs and found this typo. This is totally minor, but fixing it via Github takes 2 minutes, so I thought: "Why the hell not?" :)
Thank you for the corrections.
Thanks for the correction.
Fair enough, thanks.
Those checks above are not valid for this PR since I didn't change anything in `.py` files. It was bad formatted before.
Seems good, curl is probably more commonplace.
+1 on this
CI check is false.
Errors mentioned in there are Python related and are not connected to anything done in this PR.
@rafalolszewski94 I Installed the requirement from your Branch at solved the issue on my end.
Thank you 🙏
I found that the problem `fix broken sticky sidebar in Chrome 80` can be solved if you enlarge your window in chrome. Just pressing command and + button saved me.

And I don't know for some reason, but resizing to normal couldn't reoccur the problem.

I hope this would be helpful to others.
I'm using macbook 13-inch with 1680 x 1050 and chrome 80.
+1 to merge because of `fix broken sticky sidebar in Chrome 80`
I forked this repo to update redoc and swagger: https://github.com/vndly-oss/drf-yasg
+1 Really need to fix this asap. The current release is basically broken for Chrome which is 80% of our user base.
It's a shame this project is basically dead.
To get around this, I added my own template & redoc min-js.

```python
from drf_yasg.views import UI_RENDERERS, ReDocRenderer, get_schema_view


class NewRenderer(ReDocRenderer):
    template = "thisapp/new_docs.html"


UI_RENDERERS["redoc-new"] = (NewRenderer,)
...
url(r"^$", api_schema_view.with_ui("redoc-new"),),
```

The template is basically the same, but with the script tag replaced with a static tag pointing to my updated version of the JS.
There are a couple of related issues (like #548) and PRs (like #625)  already open , but no-one is merging them :( 

If someone is interested in in my workaround with Dockerfile:

```Dockerfile
FROM redocly/redoc:v2.0.0-rc.40 as redoc
FROM swaggerapi/swagger-ui:v3.32.5 as swagger-ui
FROM python:3.8-alpine3.12 as base

# building all the requirements in temp container
FROM base as builder

WORKDIR /install
ENV PIP_PREFIX /install

RUN pip install -r /requirements.txt

# workaround to update ReDoc UI, because project drf-yasg seems to be close to dead
# but no nice substitution for it yet, see issue: https://github.com/axnsan12/drf-yasg/pull/543
COPY --from=redoc      /usr/share/nginx/html/redoc.standalone.js    lib/python3.8/site-packages/drf_yasg/static/drf-yasg/redoc/redoc.min.js
# same with swagger ui
COPY --from=swagger-ui /usr/share/nginx/html/swagger-ui*            lib/python3.8/site-packages/drf_yasg/static/drf-yasg/swagger-ui-dist/
COPY --from=swagger-ui /usr/share/nginx/html/oauth2-redirect.html   lib/python3.8/site-packages/drf_yasg/static/drf-yasg/swagger-ui-dist/
COPY --from=swagger-ui /usr/share/nginx/html/favicon*               lib/python3.8/site-packages/drf_yasg/static/drf-yasg/swagger-ui-dist/
```
@axnsan12 Do you think you will be able to get these important PR's merged? Do you need new maintainers #590? Or should this project be forked so it can continue?
This has been implemented and fixed in the active fork, [`drf-yasg2`](https://github.com/JoelLefkowitz/drf-yasg).

See: https://github.com/JoelLefkowitz/drf-yasg/pull/69
Fixed in master now, updated to rc40, sorry for disappearing.
@axnsan12 this should be a pretty easy PR to review, I bumped it to run the CI tests again.
Looks like the GitHub settings need to be updated for a recent travis change https://travis-ci.community/t/known-issue-travis-ci-reports-expected-waiting-for-status-to-be-reported-on-the-github-status-api-but-the-status-never-arrives/1154
@johnthagen it looks like you might also have commit access to the repo? Do you mind reviewing? I just update the changes and kicked off the CI.
@axnsan12 any chance I can get a review on this / have this merged?
@JoelLefkowitz Has been most active as of late. He'd be the best person to review.
@terencehonles I've experienced the same problem, so thank you for your fix!

@JoelLefkowitz  @axnsan12 would it be possible to merge & release this soon?
I'll take a look
I've merged this into 1.20.x. I'm going to release 1.20.1 to include this and the other minor changes that were added to the master branch over the past couple weeks.
@JoelLefkowitz thank you!
@JoelLefkowitz hi! was wondering if we could get 1.20.1 released soon 🙂
> @JoelLefkowitz hi! was wondering if we could get 1.20.1 released soon 🙂 

Cheers for the reminder, I'll triage everything a little later today
For anyone following this thread, I'm a little behind on completing the release, checking the tests cover everything and writing out the changelog is taking a little longer than expected as I don't want to rush.
This is now present in 1.20.3 and onwards
@JoelLefkowitz thanks!
Superseded by https://github.com/axnsan12/drf-yasg/pull/558
Thanks for the corrections, merged manually.
Looks good to me! I was running into this issue myself.
If you fixed the Issue with Travis, the chances are higher the PR might be merged.
Presumably due to Tox also specifying django-oauth-toolkit versions https://github.com/axnsan12/drf-yasg/blob/master/tox.ini#L21
Fixed on master, thanks for the debugging.
Hi, made these changes in the project but still it throws the same error. Could you please help me out
See https://github.com/axnsan12/drf-yasg/blob/master/tox.ini#L21 for where else it's pulling the dep from
Any chance of merging this any time soon?
> Any chance of merging this any time soon?

I think @axnsan12 has either been burnt out or is affected by everything that's going on (directly or indirectly), since they haven't done anything with this repo since Feb
Makes sense to me, thanks.
This makes sense, especially if it improves usability with bravado. I imagine the title field is generally pretty uselss anyway. Thanks!
@onegreyonewhite Curious was this was closed. Is it not possible to drop the `coreapi` import/dependency?
@johnthagen sorry for long answer. The most part of code use functionality from drf coreapi.
It takes a lot of time for refactoring.
@axnsan12 hi Cristi!
I am not sure if failing tests are related to my change, but I am happy to assist there if needed.
CI seems unrelated, thanks for typo fix.
The active fork, [`drf-yasg2`](https://github.com/JoelLefkowitz/drf-yasg) is now tested and fully supports Django 2.2-3.1.
Implemented in master, dropped support for django <2.2, thanks for investigating and sorry for not responding.
Thanks for the corrections.
Seems good, thanks.
This has been implemented in the active fork, [`drf-yasg2`](https://github.com/JoelLefkowitz/drf-yasg/).

See: https://github.com/JoelLefkowitz/drf-yasg/pull/69
Updated to rc40
@webjunkie, Please, tell me what else needs to be done to get PR considered?
> @webjunkie, Please, tell me what else needs to be done to get PR considered?

I'm sorry, I'm not a maintainer here.
Hello, this can be achieved by overriding the appropriate template and blocks in your own project. No need to commit it to the base library, but thank you for the good intentions.
Makes sense, thanks
I think my solution won't work with the upcoming 3.9 changes as `dict` is not supported either in this solution. 

https://docs.python.org/3.9/whatsnew/3.9.html#pep-585-builtin-generic-types
Yes, the issue was due to 3.9 generics. Thanks for the report
oh lol you can do `@swagger_serializer_method(MySerializerClass(many=True))`
This has been implemented in the active fork, [`drf-yasg2`](https://github.com/JoelLefkowitz/drf-yasg/).
Tests are all good now on master, my bad for slipping up.
This has been implemented in the active fork, [`drf-yasg2`](https://github.com/JoelLefkowitz/drf-yasg).

See: https://github.com/JoelLefkowitz/drf-yasg/pull/54
> This has been implemented in the active fork, [`drf-yasg2`](https://github.com/JoelLefkowitz/drf-yasg).
> 
> See: [JoelLefkowitz#54](https://github.com/JoelLefkowitz/drf-yasg/pull/54)

Yep I know, I am closing this PR. Thanks
Makes sense, thanks.
Thanks!
merging party can resume
This PR has more or less been implemented in the active fork, [`drf-yasg2`](https://github.com/JoelLefkowitz/drf-yasg).
Thanks for fixing the tests!
The commented test is related to a known bug in DRF 3.12.x.
https://github.com/encode/django-rest-framework/issues/7442
#640 and #641
@axnsan12 what about merge this fix? On more projects this bug stopping use new versions of drf(
> @axnsan12 what about merge this fix? On more projects this bug stopping use new versions of drf(

The maintainers of this repo are not replying, we've moved to my fork [drf-yasg2](https://github.com/JoelLefkowitz/drf-yasg) to patch issues and continue development
Fortunately my team is not blocked but it's weird that we cannot have the latest version of DRF due to this issue 😟
We need this too! My Team is blocked with DRF 3.12 because of this. Whats the timeframe for a merge looking like?
> We need this too! My Team is blocked with DRF 3.12 because of this. Whats the timeframe for a merge looking like?

It's unlikely anything will be merged anytime soon. You may want to create a fork of the repo and install with `pip install -e git+git://github.com/<your-org>/drf-yasg.git@master#egg=drf_yasg` this is usually what I have done when things were actually moving forward and I needed to depend on code that was not released to PyPI yet, but it's likely something your team can do also. You can specify this in a requirements.txt file by starting at the `-e` so... `-e git+git://github.com/<your-org>/drf-yasg.git@master#egg=drf_yasg`

The example above assumes your branch is `master` but you can change it to whatever you want (including using a sha)
> We need this too! My Team is blocked with DRF 3.12 because of this. Whats the timeframe for a merge looking like?

Released today.
pip install drf-yasg2
Implemented in master, dropped support for django <2.2, drf<3.10, thanks for investigating and sorry for not responding.
Let me know how to handle this test, it's failing due to the bug I highlighted into the conversation comments.
and I wanna avoid commenting it but I've tried with pytest.mark.xfail but the test raises an error and the marker seems not to work and I don't know how to mark it to be skipped instead of commenting it.
@pytest.mark.skip - will skip the test
I've tried it as I used to do but the `pytest -n auto --cov ` still raises error for it
I will try again, my idea was to use pytest.mark.skipif and check the DRF version, because until 3.11.x, the test will pass
Nice idea
I've found a solution and I will push it in a while
Just pushed the fix and updated docs.
Now pytest won't collect the test if DRF version is greater than 3.11.x. the pytest.mark.skip does not work if there's an error during the collection process.
Dropped support for django<2.2, drf<3.10, thanks for investigating and sorry for not responding.
Wrong branch, please ignore
@johnthagen it looks like you might also have commit access to the repo? Do you mind reviewing? I just update the changes and kicked off the CI.
@axnsan12 any chance I can get a review on this / have this merged?
I’ll review this now
updated this to the latest version of `1.21.x`
updated this to the latest version of `1.21.x`
@terencehonles thank you!
@axnsan12 this should also be a pretty easy PR to review, I bumped it to run the CI tests again.
I'm pretty sure these will be available, but I can change this to `gettar` like below if that is preferred.
@axnsan12 @JoelLefkowitz Would you mind looking this over?

It does not fully remove `coreapi`, but it is the first step. Since I don't know how much time I'll have to work on fully removing `coreapi`, I think this PR can be merged as a first step towards full removal of `coreapi`.
Awesome. 

Travis status seems broken for some reason but I reset it and I think it will work on future PRs.
Well, that was fast. I had tested just 2 days before and 3.9 was still 404. Awesome!
Just a note, `tuple`s can semantically be arbitrarily long, but after creation they are immutable, unlike `list`s. You can see this in the type system with a type hint such as `Tuple[str, ...]`.
@johnthagen Agreed, functionally, either can be used (`types.Sequence` would probably be best, if this used type annotations). However, `list` is documented by DRF and is more appropriate for use in this sort of case, where particular element locations do not have semantic meaning (as opposed to something like "RGB").
Makes sense to match the DRF examples/docs here. In #518 we'd probably use Sequence.
This has a minor conflict with #666, since they touch adjacent lines. If accepted, please merge #666 first. I'll rebase this to fix any conflicts afterwards.
Please merge this :+1: it's basically not usable with Serpy Serializers. https://github.com/axnsan12/drf-yasg/issues/687
Hey, would it be possible to merge this pull request or are there any other issues that need to be fixed?
@d3QUone Can we get this merged? My code can't pass OpenAPI2.0 without it
I think yes, it's fine. But only project collaborators have access to merge..
Hi It's still pending to merge @krectra  could you take a look at it!. Thanks
> Hi It's still pending to merge @krectra could you take a look at it!. Thanks

Pending workflow approval
> > Hi It's still pending to merge @krectra could you take a look at it!. Thanks
> 
> Pending workflow approval

Hello, any update on this issue? @axnsan12
you can simplify these two ifs:
```python
if getattr(field, 'allow_null', None):
    instance_kwargs['x_nullable'] = True
```
Updated. thanks.
Relates to #412
The use of `packaging` was removed in https://github.com/axnsan12/drf-yasg/commit/64ceb91b4f16bbe1fb3a8e7f59da9d712eb79c66.
I would also label this a bug because when a pytz object is serialized the docs are not working at all
@MilanPecov I agree this is good idea. If the user doesn't want the pytz objects to be parsed to strings they still have the option to modify the serializer. If there are other common field types that are limiting json encoding then we may need a separate method to handle them.
Hi @JoelLefkowitz, could you please help us to review this  PR for add support to Django 3.2? Thank you so much in advance!!
> Hi @JoelLefkowitz, could you please help us to review this PR for add support to Django 3.2? Thank you so much in advance!!

Happy to, thanks for your contribution 😊
@JoelLefkowitz Thank you for your support = )
After #739 is addressed, CI checks can run again and then a merge will be possible.
Since we've made changes to the tox.ini file in #741 we've included this change there rather than as two separate PRs. Thank you again @NeOneSoft for contributing.
Excelent @JoelLefkowitz !! Thank you so much!
I would like approval from at least one more frequent contributor before changing over the required checks settings.
@JoelLefkowitz I left a few comments, but in general **thank you** for putting the time into this. This looks great.
I think only @axnsan12 has permission to remove the travis status check and set the github actions ones to be required.
In the case that @axnsan12 has this repo muted (understandable given he's mentioned he's moved on to other things), his email address can be viewed in the commit log: https://github.com/axnsan12/drf-yasg/commit/a9ec562196a697c2fbfa16ad741f53831b8ab654.patch

Might be a way to get into contact with him.
Hello, I do indeed have the repo muted 😢 but I do check on the notifications from time to time.

From what I see Travis still offers CI credits for open source projects: https://docs.travis-ci.com/user/billing-faq/#what-if-i-am-building-open-source

I could write to them to request this for drf-yasg and see how it goes. 

Or, if you'd prefer to switch to actions, I can remove the Travis check and be done with it.
@axnsan12 I personally think that GitHub Actions is the way forward. Most open source projects I've worked on have switched, and it's been a net benefit for the project (faster CI, the marketplace helps avoid boilerplate, etc.).

And since @JoelLefkowitz has done the hard work getting the configs switched over, I think it would be the best path forward for `drf-yasg`.

> Or, if you'd prefer to switch to actions, I can remove the Travis check and be done with it.

I also think that if we go this path, along with removing the Travis checked, *adding* the GitHub Actions checks as required would also be a good move.
I think I removed the Travis check however it doesn't seem to apply retroactively...
The actions checks, like all checks that run on PRs, are required by default.
I hope you don't mind if I force merge this and see what happens.
> The actions checks, like all checks that run on PRs, are required by default.

I don't think this is correct. The checks will show up in the PR, but if they are not required, then someone with merge rights to the repo can still merge even if the GitHub Actions checks fail.
Seems the Travis removal worked 🎉 , thanks for the PR!

Looks like the GitHub ones are now required too: https://github.com/axnsan12/drf-yasg/pull/730
I've also set up the PYPI_API_TOKEN secret required by the publish job.
Thanks for changing the settings @axnsan12. I'm going to label the recent bugs reported while the CI was down for a 1.20.1 release. What do you think about giving one of the frequent collaborators admin access to the repo? That way we can respond to these type of unforeseen support changes.
Given @JoelLefkowitz's commitment to the project, for what it's worth I would nominate he be given admin access if @axnsan12 concurs.
I'm not sure that's possible on a personal repo, we'd have to make an organisation to be able to have multiple owners.

Personal repos can only add "collaborators" - which both of you are.
@JoelLefkowitz Since you were talking about cutting a new release, it probably wouldn't hurt to also update the bundled swagger-ui / redoc that is included in this project:

- https://github.com/axnsan12/drf-yasg/tree/master/src/drf_yasg/static/drf-yasg

https://github.com/axnsan12/drf-yasg/blob/effc8f2c06e66813a0ab5bad5a4478c0a8e1969c/package.json#L4-L5
@axnsan12 @johnthagen, I had to migrate from **travis-ci.org** to **travis-ci.com** a while ago, because the builds simply stopped working. 

They do provide credits for OSS, but it's a painful process. You have to write a support ticket and and apply for OSS credits. That works fairly fast, but they only credit X amount at a time. Since migrating, I had to re-request credit 4-5 times. Multiple questions regarding a recurring "monthly allowance" were ignored.
Thanks for the info, but we decided to just ditch Travis in the end. Seems like that was the right choice, your experience sure does sound like a lot of hassle 😄
Just a thought, but is there any reason we need to test `django-cors-headers` main branch? I get testing `django` main, but it seems like third party libraries should probably stay pinned?
Is the idea that we publish using the oldest supported Python version? It might be worth a comment if so, for future people looking at this.
Could we also swap out the build status badge in `README.rst` for GitHub actions badge(s)?

https://docs.github.com/en/actions/monitoring-and-troubleshooting-workflows/adding-a-workflow-status-badge
Looks like it was added #415 to provide the dependency for each django version there. Somewhere along the line those were removed except its listing under djmaster.  I agree with you it is superfluous since the djmaster test is only diagnostic anyway.
This is just the version used to package the code. Since the code has been tested against python 3.6 - 3.9 it will work with any of those runtimes. I do agree it's worth bumping this to 3.8 and leaving a note.
Added in the next commit.
Added in the next commit.
Removed in the next commit.
Could we add Django 3.2 testing while we are here?
Add newline at end of this file to make it consistent with the others?
Stolen from the error handling code path https://github.com/encode/django-rest-framework/blob/f0a5b958a134e8cd94e3ef3263e8fa623ac9b82f/rest_framework/renderers.py#L199-L202
Fair. Thanks!
Thanks!
@PetrDlouhy @axnsan12 Could you please help with the next steps for this fix and make new PyPI release ?
@PavanTatikonda What steps could I do? I don't have any rights to this GitHub nor the PyPI repository.
> @PavanTatikonda What steps could I do? I don't have any rights to this GitHub nor the PyPI repository.

@PetrDlouhy Oh ok, it looks like only @axnsan12 has permissions to cut a new release then. 
Anyway, thanks for providing the fix here!
Hey guys, bumping this. If this PR fixes #761 can we get it merged in?
@axnsan12 ping!
Can we pls get this in? @axnsan12
Maybe @JoelLefkowitz can merge this?
> Maybe @JoelLefkowitz can merge this?

I'll take a look, thanks for flagging
This is now present in 1.21.0
Is this project dead or will Django 3.2 support released soon?
For some history on this...

In [django 2.1 in 2018](https://github.com/django/django/blob/0dd29209091280ccf34e07c9468746c396b7778e/docs/releases/2.1.txt) NullBooleanField was marked as likely to be deprecated, was deprecated in [3.1 in 2020](https://github.com/django/django/blob/0dd29209091280ccf34e07c9468746c396b7778e/docs/releases/3.1.txt), and removed in [4.0 in 2021](https://github.com/django/django/blob/a0608c4b111555023c24ab7333a42ec53dca6b42/docs/releases/4.0.txt)

A warning was issued in [DRF 3.12 in PR 7122 from May of 2020](https://github.com/encode/django-rest-framework/commit/e888fc11c76d1a671f6f7d3c080915ffe722f3f6) stating that "The `NullBooleanField` is deprecated and will be removed starting with 3.14. Instead use the `BooleanField` field and set `null=True` which does the same thing", and NullBooleanField was finally removed today in [DRF 3.14](https://github.com/encode/django-rest-framework/commit/b658915846c257531db5d869feaada7af71980f0).

The fix is to change `models.NullBooleanField()` to `models.BooleanField(null=True)` in any models. `NullBooleanField` in forms is still [appropriate for use](https://docs.djangoproject.com/en/4.1/ref/forms/fields/#nullbooleanfield).

Hopefully this long after warnings and deprecation were issued, this feature can be dropped in drf-yasg as well.
@yamac-kurtulus thank you for this PR. To support users that may wish to update their drf-yasg version in the future without bringing their version of drf past 3.14 I've put forward a PR (#814) that only removes the NullBooleanFields if the version of drf is greater than 3.14.
Makes sense. Thanks for fixing this.
Before merging I would like someone to have a look at this PR for a soundness check. Once merged I'll deploy a new release to pypi.
Just a heads up, models.NullBooleanField is still there, serializer field is deprecated. Though it is completely understandable if you want to remove that too.
indeed, at this moment when a user installs the latest drf and  drf-yasg, there is a crash in "serializer_field_to_basic_type" (field.py). 
I should note that the error the user gets is really cryptic. Because the original error is caught, it is replaced by a "module does not define a %s attribute/class", which is not the error at all, and puts people on a wild goose chase
@JoelLefkowitz So when is the release going to be?
@JoelLefkowitz I'm preparing a PR here that will get rid of coreapi. Judging by how quickly the checks go, I will have time to add a fix. It would be cool to add this to the release, because DRF 3.15 intends to get rid of this dependency.

Expect PR tomorrow.
> @JoelLefkowitz I'm preparing a PR here that will get rid of coreapi. Judging by how quickly the checks go, I will have time to add a fix. It would be cool to add this to the release, because DRF 3.15 intends to get rid of this dependency.
> 
> 
> 
> Expect PR tomorrow. 

Thanks @onegreyonewhite
> @JoelLefkowitz So when is the release going to be?

Today
@JoelLefkowitz sorry for triggering you so frequently :-) When we can see new release and this PR will be pulled?
Merged, big thanks to all contributors :)
This looks like it was accidentally squashed and it should have been merged instead to preserve the history so Git knows where the commits merged. I created a PR for that in https://github.com/axnsan12/drf-yasg/pull/867 which can either be FF'd or merged (to create 2 merges)
From my own uses of this project is works on Python up to 3.10 with Django up to 4.1. It is not Python 3.11 compatible due to ruamel-yaml-clib not supporting Python 3.11. Issue #833 suggests moving to PyYAML instead which is the default YAML serializer for Django which would probably resolve that issue as well
@nikosmichas, thanks for the PR. Im changing the base to 1.21.x so the tests can run with latest set of release changes. The NullBooleanField changes have been handled in #814 and are present there too.
Tests are failing because github no longer supports py36 for GH actions. I will take a look on this.
> Tests are failing because github no longer supports py36 for GH actions. I will take a look on this.

Thanks @nikosmichas, this is now fixed in the last commit
@iorlandini thanks for catching this
@StevenMapes already done with #837.  Might need to be closed to keep order.
> @StevenMapes already done with #837. Might need to be closed to keep order.

Okay I see your later issue/PR has been merged so I'll close this and tag it in a comment on that for reference
I decided to immediately add tests for Python 3.11.
@JoelLefkowitz The project needs a goooood refactoring... ))
@JoelLefkowitz ping
Hey @onegreyonewhite, looks like unit tests failed for the python3.8, fancy having a look?
@JoelLefkowitz 
> looks like unit tests failed for the python3.8, fancy having a look?

It was not the tests that were broken, but the documentation. I have no idea how it used to work. Perhaps this test was simply not checked before, and I fixed its launch.  Take a look.
@JoelLefkowitz can you approve CI run?
@JoelLefkowitz I finally found and solved the problem: the old mechanism does not work with the new tox. I think it is necessary to solve the problem of new tox in a separate PR.

Please, approve PR and check the code.
@JoelLefkowitz it becomes to hard to maintain this PR )) Started from enums and ended with refactoring, fixing bugs and CI and added support for feature django version.

I fixed dj-master tests. Django master branch bumped minimal python version to Python 3.10. In latest version was added check for uniq basename. That's was fixed and I think it's enough for this PR ;) Please, approve it and release it.
@onegreyonewhite Thanks for the contribution :)
Also includes the equivalent changes from my PR for the older #836 so that's been closed now support is being tested :)
@JoelLefkowitz As far as I can see it hasn't been released yet. Perhaps these changes will be useful for the next release. By the way, we are waiting for it.
@JoelLefkowitz ping
@JoelLefkowitz are u still support this project? Should I fork this?
Yup, I'll have a look at merging this today
Thanks @onegreyonewhite
> Thanks @onegreyonewhite

@JoelLefkowitz you're welcome) When are you going to release it?
> > Thanks @onegreyonewhite
> 
> @JoelLefkowitz you're welcome) When are you going to release it?

Will cut a new release in the next couple of days after a little more testing
@JoelLefkowitz did you check it?
Thanks @onegreyonewhite
@JoelLefkowitz hey! This code moved from my project (https://github.com/vstconsulting/vstutils) and [fix regression](https://github.com/axnsan12/drf-yasg/issues/389#issuecomment-1599080055) with #854 on defaults. Tested with coreapi only with drf310. Other versions use new inspector.

May be should release new version.
@JoelLefkowitz should I fork it like independent project? Because looks like that you dont have enough time to maintain it.
@onegreyonewhite no thank you, I'm reviewing these changes more gradually and ensuring they don't break anything.

This is a mature project so the most important thing is stability and our test cases don't cover everything
> @onegreyonewhite no thank you, I'm reviewing these changes more gradually and ensuring they don't break anything.
> 
> This is a mature project so the most important thing is stability and our test cases don't cover everything 

@JoelLefkowitz I'm going to cover it and send PRs periodically for peacefully sleeping at night))

This project important for vstutils, so I'm interested in the success of the project.
@onegreyonewhite Thanks, appreciate it
Thanks for this patch @onegreyonewhite! 

I tested this in my project with the following packages and it fixed the issue. Kudos!

```
Django==4.2.2
djangorestframework==3.14.0
django-filter==23.2

```
Ping @axnsan12 @onegreyonewhite @JoelLefkowitz!
Hey @JoelLefkowitz! Any idea why the CI is failing for Python 3.6 ? 

I changed the base branch from `master` to `1.21.x`.
Hi @pandafy & @JoelLefkowitz, it is related to `runs-on: ubuntu-latest`.

As it is mentionned [here](https://github.com/actions/setup-python/issues/544#issuecomment-1324999753):
> The issue seems to simply be that there is no available build of Python 3.6 for ubuntu-22.04 (yet) 

The solution is to replace the line by `runs-on: ubuntu-20.04`.
@wbwlkr thanks for the suggestion. The workflow file has been updated already on the 1.21 branch. @pandafy if you bring you branch up to date with it the tests should run :)
@JoelLefkowitz I have rebased the PR.
Completed in #859 thanks @anthonyalmarza!
@JoelLefkowitz As I promised)

Previous coverage:
```
Name                                                   Stmts   Miss Branch BrPart     Cover   Missing
-----------------------------------------------------------------------------------------------------
src/drf_yasg/__init__.py                                   5      0      0      0   100.00%
src/drf_yasg/app_settings.py                              23      0      4      0   100.00%
src/drf_yasg/codecs.py                                    94      7     20      1    92.98%   18, 22-25, 121->123, 209-210
src/drf_yasg/errors.py                                    10      0      6      0   100.00%
src/drf_yasg/generators.py                               273      8    124     10    95.47%   35-36, 67, 82->90, 218, 227, 241->244, 282, 483->478, 521, 526, 530->532
src/drf_yasg/inspectors/__init__.py                        9      0      0      0   100.00%
src/drf_yasg/inspectors/base.py                          150      0     58      0   100.00%
src/drf_yasg/inspectors/field.py                         370     15    176     14    94.32%   74-75, 191, 269-270, 274, 281-284, 300, 365->363, 499-500, 538->541, 591, 664->676, 666->676, 673->676, 685->690, 820-821
src/drf_yasg/inspectors/query.py                          52     16     20      1    62.50%   18-20, 54-58, 62-65, 73-88, 119->122
src/drf_yasg/inspectors/view.py                          177      1     70      2    98.79%   266, 337->341
src/drf_yasg/management/__init__.py                        0      0      0      0   100.00%
src/drf_yasg/management/commands/__init__.py               0      0      0      0   100.00%
src/drf_yasg/management/commands/generate_swagger.py      73      0     20      0   100.00%
src/drf_yasg/middleware.py                                16      0      2      0   100.00%
src/drf_yasg/openapi.py                                  366      4    108      3    98.10%   142, 277->279, 341, 690-692
src/drf_yasg/renderers.py                                 96      1     32      2    97.66%   98, 99->102
src/drf_yasg/utils.py                                    189      4    110      6    96.66%   332, 335-336, 357->355, 360->355, 432->434, 469
src/drf_yasg/views.py                                     72      1     12      2    96.43%   71->73, 75
-----------------------------------------------------------------------------------------------------
TOTAL                                                   1975     57    762     41    95.91%
```

Current local:
```
Name                                                   Stmts   Miss Branch BrPart     Cover   Missing
-----------------------------------------------------------------------------------------------------
src/drf_yasg/__init__.py                                   5      0      0      0   100.00%
src/drf_yasg/app_settings.py                              23      0      4      0   100.00%
src/drf_yasg/codecs.py                                    90      0     20      0   100.00%
src/drf_yasg/errors.py                                    10      0      6      0   100.00%
src/drf_yasg/generators.py                               273      0    124      2    99.50%   82->90, 530->532
src/drf_yasg/inspectors/__init__.py                        9      0      0      0   100.00%
src/drf_yasg/inspectors/base.py                          150      0     58      0   100.00%
src/drf_yasg/inspectors/field.py                         378      6    178      9    97.30%   307, 372->370, 506-507, 545->548, 598, 673->683, 680->683, 692->697, 827-828
src/drf_yasg/inspectors/query.py                          62      1     32      1    97.87%   19, 54->57
src/drf_yasg/inspectors/view.py                          177      1     70      2    98.79%   266, 337->341
src/drf_yasg/management/__init__.py                        0      0      0      0   100.00%
src/drf_yasg/management/commands/__init__.py               0      0      0      0   100.00%
src/drf_yasg/management/commands/generate_swagger.py      73      0     20      0   100.00%
src/drf_yasg/middleware.py                                16      0      2      0   100.00%
src/drf_yasg/openapi.py                                  366      4    108      3    98.10%   142, 277->279, 341, 690-692
src/drf_yasg/renderers.py                                 96      1     32      2    97.66%   98, 99->102
src/drf_yasg/utils.py                                    189      4    110      6    96.66%   332, 335-336, 357->355, 360->355, 432->434, 469
src/drf_yasg/views.py                                     72      1     12      2    96.43%   71->73, 75
-----------------------------------------------------------------------------------------------------
TOTAL                                                   1989     18    776     27    98.30%
```

This cover all critical parts of code. 

I have never been able to come up with tests for some of the uncovered branches. But they don't seem to affect anything.
Thanks @onegreyonewhite this is great
I think you did a bang up job self!
We should really have a ticket in CPC for this, guy.

I can edit my comment, lol.
No go.
Ack, this looks serious.
I'm going to close this, it doesn't work with current pip.  I'm keeping my branch around as a proof of concept.
Closing this pull request since the other pull request has the same commits.
This has been merged in.
Looks good, just doing a couple quick tests to validate and then I'll merge it in.  Thanks!
pulled in
We will be re-doing translations as a part of our fresh-start branch. I am going to close this.
We will be re-doing our CMS bits as part of our fresh-start branch. I am going to close this.
At this time, I am not sure what the roadmap is for the pinax.apps.blog app, as we've been building and using biblion (https://github.com/eldarion/biblion) for blog related needs within pinax projects as of late.
Hi paltman,

I wish i had the info, the pinax blog app did seem quite unuseable as-is and i though nobody but me was actually trying to use it ^^

I'll upgrade to biblion.

Thanks for the info

Cheers from Spain

James
I plan on reviewing your work this evening. Thanks!
So, i pulled into a local branch and tried to install on a clean virtualenv and had some libraries break as they didn't appear to be on pypi anymore.  I upgraded biblion and idios by putting new releases on dist.pinaxproject.com and got a little further -- everything installs cleanly now, however, I get the following error when running "python runner.py":

Error: No module named tests

I have pushed my additional commit along with your commits to pinax/fixtests branch
Hi Patrick, thanks for having a go at it. As mentioned in my pull request message, are you using my patched versions of django-oembed and biblion? Did you create the __init.py__ file for idios? After doing this, if you still get the same error, can you post a bit more of the stack trace?
Hi Patrick, I've been able to reproduce your problem. Now I understand why you didn't post a stack trace, as it was just a one-line error message. The problem is related to idios. Tests are not included in the distribution package of idios that get installed by pip. I had been working against a git clone, that's why it was working for me and not for you. 

This error is cause by this line I added to runner.py:

"idios": ["idios.tests"],

The reason why I added it is that Pinax tests were failing because they were missing a profile class, see commit 7ad17e748179271e6589bb554961f0d387a03704 and commit 12e623f67c4cddf72d42622bca16769f814d17c5  I thought it would make sense to use the test profile class that is included with idios (only in the development tree, as I've now learnt).
Is there still any interest in this? _nudge_ _nudge_
Closing (considering the planned redesign of pinax.apps.photos for the 0.9 release).
Thanks!
I am inclined to not accept this code as-is as the commit message says "untested" yet there are tests. Has the code even been ran? The growing utility functions for events is a bit worry some from a high level and this is causing me to re-think that approach.
Fresh-start was at that weird spot where account_project wasn't complete when I wrote this, and the test runner could not run/wasn't finished.  Now that we're there, I'll run/verify the tests, if you have any recommended changes to the code, please let me know.
Pulled into master. Thanks!
I really meant to get downstairs, but got caught up in some work. All of your work here looks excellent and absolutely useful to us. Thanks for taking the time to help out. I will get this merged in ASAP.
I've pulled in your commits. Thanks!
Awesome. Glad it was useful :)

Sorry about the whitespace thing. Reading the code guidelines I now see that you're supposed to indent empty lines, but I use WingIDE in VIM mode and I have no idea how to do that.
Github didn't automatically close this...weird.
merged
This has to be re-based off the new code before it can be merged
bitmole,

Thanks for the patch.

We will soon be breaking out these projects into independent repos as external starter projects to be managed independently from Pinax core.

In addition, we still use staticfiles as it tends to get fixes/updates faster than Django releases come out.

Therefore, at this time I don't think it would be very fruitful to merge this pull request. I hope you understand. Really appreciate your thoughts though.

Thanks,
Patrick
Patrick, of course. Let me know if you need help with anything Pinax.
would love your help. you can join/hang out in #pinax-dev on Freenode. it's where we plan and discuss things.
By default for existing Projects this will do nothing. But if they define either a LOGOUT_REDIRECT_URLNAME, or LOGOUT_REDIRECT_URL setting then logout will redirect to that page. All current projects settings.py have been updated to have this setting by default.
Don, can you please update the commit to just use LOGOUT_REDIRECT_URLNAME instead of having both settings? I'll merge and release a new dev release ASAP after you update the pull request. Thanks!
I can do that, however I did it this way to match the available settings for login.

See: https://github.com/pinax/pinax/blob/master/pinax/apps/account/views.py#L74

I thought it would make more sense to support the same settings for both views?
Please use double quotes.
Thanks Darii.
Appreciate the work to add this translation, however, it's no longer applicable.
Good catch. Thanks for taking the time to provide a fix.
No problem, I would have even created a ticket :) but I got the following
error http://cl.ly/431U0s2U022m1P0u201o when signing up to
code.pinaxproject.com

On Tue, Jan 17, 2012 at 11:15 PM, Luke Hatcher <
reply@reply.github.com

> wrote:
> 
> Good catch. Thanks for taking the time to provide a fix.
> 
> ---
> 
> Reply to this email directly or view it on GitHub:
> https://github.com/pinax/pinax/pull/38#issuecomment-3540741

## 

Nathan Duthoit

The information contained in this e-mail message and any attachments may be
privileged and confidential. If the reader of this message is not the
intended recipient or an agent responsible for delivering it to the
intended recipient, you are hereby notified that any review, dissemination,
distribution or copying of this communication is strictly prohibited. If
you have received this communication in error, please notify the sender
immediately by replying to this e-mail and delete the message and any
attachments from your computer.
I  this is great and it should be merged. The behavior of the new version with regards to uploaded media in development confuses many people and I have to keep telling them to add 
 "+ static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)"
 to their projects urls.py.
 I wold be nice if the base projects included this line since it must often be be included manually.
Also this is basically what the version of the django-staticfiles (0.2.0 ) that shipped with the last Pinax release did
Yeah, we need to get this merged. I'll do this in a bit (either tonight or in the morning) and we'll just remove SERVE_MEDIA altogether. It's not my favorite thing, but it's consistent with staticfiles docs.
This has been done in [django-user-accounts](https://github.com/pinax/django-user-accounts) (the future of Pinax account app)
What's happened with this commit?.. there are other way to validate a strength password?.
The commit works, I didn't find other way, just realize there is not a feature pinax need.
How can i use this?.. I don't see this changes in a master branch, and can't find a branch with this changes to install from pip.
The change was only proposed here and is only a fork of the 2 files u can't see in the commit diff, so:
- The files still haven't change so you can simple replace them in a clean pinax instalation or deal with diff
- Declare a variable ACCOUNT_STRENGTH_PASS in u'r project settings.py
  *\* if ACCOUNT_STRENGTH_PASS is True, strengh = 34
  *\* if ACCOUNT_STRENGTH_PASS is Number, strengh = ACCOUNT_STRENGTH_PASS

look at http://phiras.wordpress.com/2007/04/08/password-strength-meter-a-jquery-plugin/ to estimated strengh
Thanks, do you know why they don't merge this with the master branch?
I guess I close it to early :P

Me alegra que te haya servido
Pues si, aunque me hubiese gustado que el cambio hubiese sido agregado a la rama master .
Gracias por todo.
I am not a fan of using `now` as a global variable name. I see `now` as a better local variable name capturing the `datetime` object in local scope. Can we rename the function to `nowf`? I am open to other suggestions. I've chosen `nowf` due to its length and how it very slightly describes itself. I like the pronunciation of /naʊɛf/ ;-)
I totally agree. I'm actually used to using fully namespaced `datetime.datetime.*` and `datetime.date.*` because I don't like to import `date` into module namespace.

I'm still looking for a better alias for `now`. The `nowf` seems fine although it may look as a typo at first.
`tznow` maybe?
Due to some discussions during PyCon 2012 we've decided to take some new direction with Pinax. As I've pointed out in https://github.com/pinax/pinax/pull/43 we are putting new efforts in more external apps. django-user-accounts will target 1.4. This solves any aliasing we were discussing.
I need to do a bit more thinking with how I want this to work. I have been thinking a lot lately with how to fix `pinax.apps.account`. I don't think this is quite what I want. However, I am glad that you have made a start on this and getting me to think about `pinax.apps.account` differently.
We are changing the direction of account related bits in Pinax. We've held some discussions during PyCon 2012 and have decided it is best to move `pinax.apps.account` outside of Pinax. We've created [django-user-accounts](https://github.com/pinax/django-user-accounts) where all future efforts will take place. I do believe it solves the issues you've tried to solve here.

I am very appreciative of the work you've put in here and I hope I can get you directed towards the new effort. I look forward to any new ideas you can bring to the table. Thank you!
With our new approach we'll be using Django 1.4 for project templates.
Looks like you closed these, but two things stick out to me:
- django-staticfiles isn't redundant — the app still provides newer features (like the {% static %} template tag) across all versions of django we support
- using editables in requirements files is not something we do unless a clear need arises (like when we were iterating on the theme daily or when a bug is fixed but and app has not been released)
Thanks for the info, but the 1.3 release notes:

https://docs.djangoproject.com/en/dev/releases/1.3/#s-extended-static-files-handling

Show that `django.contrib.staticfiles` is included. Was that a different module? - I remember reading somewhere that django-staticfiles is redundant from 1.3.

How is the Pinax support for Django 1.4b1?
As I said above, `contrib.staticfiles` does not include all of the features of the standalone app. If I merged your changes to requirements to remove django-staticfiles the project would fail as we use the `{% static %}` template tag which won't land in Django until 1.4 is released.

As for 1.4, I believe we have folks using Pinax and Django 1.4b1 together already (see https://github.com/crateio/crate-site). We'll iron out any changes that are needed to support Django 1.4/1.3 at PyCon.
Ahh, I see.

I've been running 1.4, so didn't notice the unsupported `{% static %}` tags.

Will keep an eye on the Pinax page.

Thanks for your work :)

Samuel
Pinax is moving towards [django-user-accounts](https://github.com/pinax/django-user-accounts). I'd recommend taking a look there and suggesting improvements. Already some things you've fixed here have been fixed there.
Wish I had seen that before. Anyway it is too late for me now.
Can you explain why you did this? The real requirement name is with the underscore: https://github.com/jezdez/django_compressor/blob/develop/setup.py#L114
@brosner One motivation is to match "pip freeze" output so it can be diff-ed with the requirements file without raising false positives, see details on #51
In theory, `pip freeze` is reporting it incorrectly. I've seen situations where using a hyphen has produced wrong results. We're going to keep the real name of the package until that is officially changed.
From the point of view of setuptools/distribute or any tool depending on it (e.g. pip), underscores are an escape character, and are always transformed to dashes on output. This is not going to change; there is one explanation of it by PJ Eby, setuptools author, here (http://python.6.n6.nabble.com/quot-Safe-quot-Project-Names-and-underscores-in-Project-Names-issue-td2011757.html). Thus as far as pip/setuptools are concerned, the "real" name of django_compressor is django-compressor. `pip install django-compressor` works fine.
The reference to "using a hyphen producing wrong results" may be referring to the `#egg=` component of an editable requirement; I vaguely recall having issues with that years ago when I made more use of editable requirements. I don't know of any possibility of the change in this pull request causing a problem.
Yesterday, I actually worked the problem I've seen with hyphen versus underscore. PyPI and Crate handle redirection of hyphen to underscore on simple pages. However, mirrors and "dumb indexes" won't do the redirection causing pip to fail to find the package.
Ah, makes sense. Perhaps pip could do this redirection internally, but that would be kind of messy. I guess the best solution in the short term is to avoid using underscores in project names on PyPI.
I will admit to being vague on detail prior to my discovery yesterday. I think it would be fine to make the change, but something still throws me off a bit not using the actual name used in setup(name=) of django_compressor. I am pretty sure pip does eventually call something (possibly `pkg_resources.Requirement.parse`) which does the normalization anyways thus meaning it doesn't matter what we put in the requirements file.
This is no longer applicable to this repo. Thanks.
This is no longer applicable to this repo. Thanks.
This is is no longer applicable to this repo.
Thanks so much! This looks awesome! Congratulations on your very first open source contribution 🎉
@ossanna16 You're welcome and thank you!
@shoshseiden Your changes are now live here http://pinaxproject.com/pinax/quick_start/ :) Keep the contributions coming and please let me know if I can ever help you in any way :)
Note that I did not correct the title "pinax-project-waitinglist" which is actually saved as ["pinax-waitinglist"](https://github.com/pinax/pinax-waitinglist) on github.
Looking great @shoshseiden just a few items of feedback and then we can merge!  thanks!
Hey @paltman I just made the two corrections you provided in the feedback. Feel free to let me know if there is anything else you need me to do. Thanks!
Thanks @shoshseiden, you're awesome :) @paltman Do you think this can be merged now?
Thanks @shoshseiden
It's just `static/src/less/`
I think it's worth mentioning running `npm run watch` in a separate terminal window than `./manage.py runserver` so changes will be rebuilt on save and you can just refresh your browser as you are developing styles.  But then to make a production build, you run `npm run build` before committing.
YES!
This looks great @grahamu! Thank you :)
Typo: ."..and several different version**s** of Django". Also: "The supported combination**s**..."
Awesome! Thanks so much!
Thanks!
Happy to contribute!
No sweat @d0ugal. Glad I could help out by spotting that.
Thanks so much for your PR @ethankent and congrats on making your first open source contribution 🎉
Thank you!
@jpic what parts of Pinax does django-cms-light use?
@paltman it's on a social project base, it uses pinax_theme_bootstrap, pinax.eventlog and pinax.webanalytics, and the same static file management patterns of course.
👍
Thank you!
You're welcome, happy to help! :+1:
@grahamu Thank you for updating that. I hadn't caught that reference.
LGTM @KatherineMichel. Why don't you follow these directions and see what happens!
Thank you @grahamu!
Hi @Amanjakhetiya, thank you for your interest in Pinax. The part that you added seems a bit redundant. Pinax is already explained to be "an open source ecosystem of reusable Django apps, themes, and starter project templates." It's not a single "website" and the docs focus more on the dev aspect of Pinax, not so much market. Not sure that this fits the voice of the Pinax docs.
Thank you for your PR! I'm closing it, because (c) is the convention that Pinax uses throughout all of its repos.
This looks great, thanks!

Just a couple of things:
- is there supposed to be a compat.py file? I saw it imported but it's not in the commit.
- could the _exec function go into this compat.py file?
- I'm a bit concerned with the list use in Python 2 at [self.stack_self_time.items()](https://github.com/joerick/pyinstrument/pull/8/files#diff-39129e579f3bc643bc97e0abe938e188R123)

Glad you're finding it useful. :)
Oops, I forgot to remove the import. I originally had one, but it seemed silly as there was only one function. 

> I'm a bit concerned with the list use in Python 2 at self.stack_self_time.items()

So use Python 3 :)

But seriously, is this typically a large dictionary? I'm not a fan of `iteritems` wrappers. I'm also sceptical that it's really that important. It's not like `range` where you create a lot of new objects. The items of the dictionary already exist. You are just putting them in a list. I haven't profiled it, though, so I could be wrong.
Well, I was still skeptical, so I ran some tests and you know what? You're completely right. Makes no difference. I guess the maintainer of a profiling library should know better than to make baseless optimisation claims!
In fairness, it's a memory thing, not a speed thing.
Please take a look at the update. Thanks!
I've pushed these changes with a few of my own to my develop branch. Could you verify that it all still works @codelol? Thanks!
Hi, I just merged your change, and tested it. It works!
Please bear with me that I'm a new user on github :)
On Windows, it's gonna except if "self.file_path" and "path" are not for the same drive. If this happens, we are definitely comparing with the wrong "path", so continue.
Thanks for your contributions! Could you explain what's going on here?
Ah, I think I see.. the drive part of the path contains a `:` on windows. This is bad. I'm going to change the delimiter in the identifier to be something illegal in both, perhaps '\0'...
Why don't you just use `os.path.split`?
Maybe put this as a comment.
`os.path.split` only splits into `(dirname, basename)`, whereas the code above splits the path into a list of all the directories up to the filename. I've cleaned this up a bit by using `os.sep`, just waiting for @codelol to merge it!
Sure. That's a good idea.
I'm on it. Thanks for your suggestion.
Thanks @asmeurer! I've released this as v0.13.
You added an error

``` pytb
Traceback (most recent call last):
  File "/Users/aaronmeurer/anaconda/envs/_test/bin/pyinstrument", line 6, in <module>
    sys.exit(main())
  File "/Users/aaronmeurer/anaconda/envs/_test/lib/python2.6/site-packages/pyinstrument/__main__.py", line 28, in main
    usage = ("usage: pyinstrument [options] scriptfile [arg] ..." % invocation)
NameError: global name 'invocation' is not defined
```
Apologies. I've just released the fix as v0.13.1.
Thanks!
I think there are functions in the `inspect` module that can help here.
"\x00" is used as a separator in pyinstrument.profiler.Frame class for it's properties. The inspect module could find it's use here - I simply chose to stick to the manner it is coded already and pull info from the frame that's passed down to it.
Hi @zer0def, thanks for your contribution. I've been looking it over and I can see the attraction for small programs.

My main problem with it at the moment is tacking the arguments onto the function name. This means the same function is represented by different frames in the tree, which isn't correct in my mind. Also the repr of arguments is of uncontrollable length, which makes it unsuitable for some outputs, like the text output, where the formatting doesn't work if it wraps over the first line.

The only way I can see this working is if the argument information is somehow classed as 'invocation specific' and is not used in the aggregation of timing data.

Then it could be exposed to a renderer separately and incorporated as needed. For example, in the HTML output, you could click to see the arguments that caused the longest run times (although you wouldn't necessarily know if that was due to a large _number_ of calls or long duration of each, this is a limitation of statistical sampling)

What situations were you finding this useful for?
Hey @joerick,

Sure, I probably should've thought about splitting arguments from the function name in a frame and handling repr accordingly. Then again, every frame is a seperate invocation of the same function, hence, from my perspective, a different object.

I'm, however, unsure, whether we are able to collect invocation arguments post-mortem, unless we start storing whole frame objects (or their copies) on the stack and parse it on print calls. Either that or appending arguments to the end of a frame identifier, neither of which are particularly slick solutions, although I'd probably prefer the former because it simply takes in all the data and does all the processing later. Just not sure if copying the whole frame ends up effectively costing more resources during timing.

Never thought of timing functions based on their arguments, but I find the manner of how the stack is displayed very convenient for hunting down misbehaving functions from other packages.

P.S. Thanks @asmeurer for the suggestion. It's proven very clutter-cleansing. :)
I'm closing this out because of inactivity, and because there have been too many changes in master for this to still work. In general there could be a good idea here, but I think the approach needs consideration of how this data would **a)** be treated by the processors (especially the time-aggregator) and **b)** be rendered. I have a couple of ideas about this so let me know if it's still interesting and we can talk more!
Why the `\x00`s?
Hey, thanks for the PR. I just downloaded and run it, but I'm a bit confused about the output.

![image](https://cloud.githubusercontent.com/assets/1244307/5846171/992a7a94-a1b9-11e4-849f-37680988b277.png)

This is what I get when I run it on the django_test project. Maybe it's not a good example.

Perhaps you have an example or screenshot that shows a better use-case?
Ah, interesting. I actually hadn't tried it using the django integration, so I'm not 100% sure how well that'll work.

Here's an example of a test run from an issue I was debugging:

![flamegraph](https://cloud.githubusercontent.com/assets/30236/5858585/524eb004-a222-11e4-9c1e-8042693b7f8a.png)

You can see that `test_generate_find_timings` was the main test (as it takes up 100% of the width) and then that xml parsing took up noticable time (the `import_from_xml -> _import_course_asset_metadata -> from_xml` chain). You can hover over any elements to get more detailed information (which file they come from, how much absolute time they take).

I actually think that some of the details on the display could be improved. The highest level stack frame doesn't get a full frame height, for some reason, and I think I left some debugging info in the text popup.

Seems like a legend might also be useful, to help interpretation.
Also, it would be nice to give a better indication of what's going on when you've zoomed into the graph (a more gradual transition, and dimming of the stack above your zoom level, for instance).
Hi @cpennington 

Just to keep you updated- I really want to get flamegraphs into pyinstrument, and I think your method of rendering using SVG is great.

I'm actually working on some refactoring so we can put in time-based profiling, so the chart actually has time running along the x-axis. You might have noticed this already, but because the chart above is made using a call tree that's aggregated and sorted, the longest-running of the child frames always comes first, and repeats are not represented anywhere.

I should have a branch you can pull from soon and then we can get this thing moving! :)
Oh, that's cool. I think both the time-based and the aggregate versions would be interesting for different purposes, and it shouldn't be hard to adapt the d3 code I have to handle either one.
I've just pushed the refactorings to my develop branch. You can merge, or if you like, you could add me to the collaborators of your fork and I'll do the merge and push it back up to this PR.

I've added stubs for the code to go into a FlameRenderer object in renderers.py.
I rebased this on top of develop, but this PR is against master. I'm going to open a new one against develop.
Closed in favor of #25.
As of 47db94ed72cd398fc31bcc6dc10b4b5ad57a4464 the option `--flame` is missing from the section https://github.com/joerick/pyinstrument#i-want-to-profile-a-python-script in the README. The changes in this commit add `--flame` to that section.
Ooops, I didn't mean to close this, I noticed this PR was targetting `develop`, so I deleted that and it closed the PR!
So this kind of extension is a great fit for the architecture in 2.0, so now would be a great time to pick this PR up again. sorry that this has been neglected for so long! 😳

Any interest in picking this up again @cpennington? Otherwise I might use it for a starting point myself
I've got other things on my plate at this point, but by all means take this an run with it.
Closing this due to inactivity - haven't gotten around to it. Flame charts can be shown using @iddan's tool https://python-flame-chart.netlify.com/ . Which reminds me, does that work with the v3.0 JSON output yet :) ?
Hey! Not yet but PRs are welcome. I'll try to get to it soon
@superbobry Thanks for the comments. 

Are you involved with the project - i.e. if I make those changes will this get merged?
Nope, I'm just a user. Maybe @joerick can comment?
Hi guys, thanks for this. I'm not a big ipython user but can see how this could be helpful, for sure. I'd like to merge this if we fix the import stuff as @superbobry mentioned, and move all the ipython code into a separate file ipython.py or similar, so it's clear that it's extending on functionality in the core of pyinstrument.

p.s. thanks for the review @superbobry!
Closing due to inactivity... unless you still have interest in this @maxim-lian ?
Ah, sorry I let this drop! Particularly given it was close to the line. 

I'm not doing much profiling at the moment. That said, if there are people who would find this helpful, comment here and I'll commit to push this over the line if there's a few. 

Otherwise I may anyway when I'm profiling more
same as https://github.com/omarish/django-cprofile-middleware/issues/10
Thanks @prashanthmadi !
The C extension (pyinstrument_cext) has [wheels](https://pypi.org/project/pyinstrument_cext/#files) for most packages (using [cibuildwheel](/joerick/cibuildwheel) :)). Does anyone think I need to provide a pure-python fallback (that will have a larger overhead and therefore might distort timings) for the few users that maybe can't use wheels or compile it from source for some reason?
That's exciting. Are you building the wheels for all three platforms?

I guess it's up to you for the pure python, if you want to maintain the code. Even the standard library has a pure python version of the profile module (though I was never really clear why).
> I guess it's up to you for the pure python, if you want to maintain the code

We can think about providing a pure python alternative if we get some people complaining in the issues :)

> Are you building the wheels for all three platforms?

Yep, using a tool I made called cibuildwheel. It's pure C with no additional dependencies so pretty easy to build.
Here's the changelog entry for the curious:

> ### What's new in v1.0 ###
>
> -   Pyinstrument refactored to use a new profiling mode. Rather than using
>     signals, pyintrument uses a new statistical profiler built on
>     PyEval_SetProfile. This means no more main thread restriction, no more 
>     IO errors when using Pyinstrument, and no more 'setprofile' mode!
> 
> -   Renderers. Users can customize Pyinstrument to use alternative renderers
>     with the `renderer` argument on `Profiler.output()`, or using the `--renderer`
>     argument on the command line.
> 
> -   Recorders. To support other use cases of Pyinstrument (e.g. flame charts),
>     pyinstrument now has a 'timeline' recorder mode. This mode records captured
>     frames in a linear way, so the program execution can be viewed on a
>     timeline.
This is now available in beta! Try it out with `pip install pyinstrument==2.0.0b1`, and please let me know if there are any issues for you!
haha thanks @x1ah, this has been broken for way too long :P
i'm actually about to merge an update to this table in #29
@joerick uhh. all right😃
No problem! Thanks for doing the conda-forge work!
I just released 2.0.1 with this change. it does include the license so all good!
Just found issue #15, this PR would satisfy that request.
Thanks for this mjpeiters! Let me have a think, I'm wondering if it would be useful to specify the output arguments in the `with` statement, so the user doesn't even need to capture the profiler object in a variable. What do you think?
You don't *have* to capture the profiler with the `as` keyword, that's optional, just like with the file objects. You can also use:

    profiler = Profiler()
    with profiler:
        # profiled code

I don't think it makes sense at all to specify the output options the `with` statement. You may want to profile separate sections, and using the profiler as a CM should just echo the way you use `.start()` and `.stop()`.
Fair enough. I like your second code sample the best - makes `profiler` look relevant outside the block. I think this way works best with the API as it stands :)

Thanks very much for the contribution!
Neat trick! Which Django versions does this add support for?
For versions prior to the 1.10.x series; For us, we were running the 1.7.x series. We could run it with this change.
Nice one! Not at a computer so can't cut a release now but feel free to bug me in a few days if I haven't got around to it :)
Thanks @imran-iq, this looks good.
Thanks @MrBlaise!
@joerick can you please review it?
sure thing. thanks for the contribution! i'll get around to it, just busy at work this week. I'll see if i can take a look at the weekend. thanks!
Changed to runpy and made test succeed
If you can please post when it is released to PyPI.
Sorry for the delay - just addressing a bug I found before releasing... I had to make a minor change to this for programs that use ArgumentParser to work. Most programs assume sys.argv has at least one entry. see 2c0599063ba7ac026aba74249cc0e7ec697f5a6c
released as 2.1.1!
Maybe update should be state in README?
Thanks for the PR! comments inline. There are no tests covering this at the moment, I've actually added a couple to master so could you pull that in before continuing? I've added a test with xfail for the module use-case, you can remove that to test your feature.
Looks good! Thanks @iddan !
I can't find documentation for this on 2.7.... running on Python 2.7 gives me this:

```
Traceback (most recent call last):
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/runpy.py", line 162, in _run_module_as_main
    "__main__", fname, loader, pkg_name)
  File "/System/Library/Frameworks/Python.framework/Versions/2.7/lib/python2.7/runpy.py", line 72, in _run_code
    exec code in run_globals
  File "/Users/joerick/04-Open-source-projects/pyinstrument/pyinstrument/__main__.py", line 7, in <module>
    from importlib.util import find_spec
ImportError: No module named util
```

Might need a polyfill for Python 2?
I'm not sure this is right - when I run `find_spec('pyinstrument').origin` in a shell it gives me the `__init__.py` file. It should be running the `__main__.py` file as I understand it.

The [cProfile module](https://github.com/python/cpython/blob/master/Lib/cProfile.py#L157) uses [runpy](https://docs.python.org/2.7/library/runpy.html) for this - it's probably best to copy that.
Issued the comments
Here is the app expecting the result: https://python-flame-chart.netlify.com
Just waiting on the `indent=2` change and then I can merge this! :)
Done!
Cheers @iddan !
Please let me know when it is released
Apologies for the delay - working on a few more changes and tests before the next release. In the meantime, you can install from the master branch directly - `pip install https://github.com/joerick/pyinstrument/archive/master.zip`
Released as 2.2.1!
Thanks iddan - I think the general output format is the right approach. 

Could you add at least one test that reads the output of this renderer and checks there are the expected functions there?
In the interests of creating a generally useful solution, I'd rather this was called file_path_short, in case we want to add file_path in the future.
Can this be a method on the JSONRenderer object?
might be nice to add `indent=2` to make the output prettier on the terminal
I though about it: many outputs can generate big outputs so adding spacing chars would increase their size significantly. Maybe this should be another renderer / CLI option?
If you go the UNIX way you can always do: `python -m pyinstrument script.py | python -m json.tool`
No problem
Cool
Hmm. I don't agree. JSON is a really verbose format. All those repeated key names! All those numbers written out as strings. 

The big advantage of JSON is human-readability - you can look at it and quickly understand it. To strip indentation is to lose that. 

If size becomes a meaningful issue the right answer would be to remove frames with tiny durations, or use something like Protobuf.

(Re. piping through `python -m json.tool` - it's a good idea, but I don't think the burden of a good user experience should be on the user)
Okay, will add
hello @iddan - quick question - to support the HTML renderer i've made a breaking change to the JSON output schema, now the root frame is at a property `root_frame` on the JSON output. would you be willing to change your online tool to look at `root_frame` and then fallback to the current behaviour if it's not found? I think your tool is the only consumer of the JSON at the moment so I'm thinking this breaking change will be simpler than doing two different JSON schemas within pyinstrument. any thoughts?
Yeah, I'll change it. But I don't think backwards compatibility is crucial as it is easy to upgrade and there is no a lot of users currently
awesome, thanks @iddan !
If anyone is interested in giving it a test, a prerelease is now available on PyPI - `pip install pyinstrument --pre` for the latest. I'd love some bug reports / feedback!
Thanks @laurentbetti !
Thanks!
Brill, thanks @asmeurer !
Thank you @sandrohuber !
Thanks @asmeurer ! This is a nice feature to pull into the Python API.
Well, some of calls were ignored because of rounding errors: the `time_since_last_profile` was `0.9987283` or the like.
Sorry it's taken me so long to get around to this! I've taken a look and it seems the reason the number of calls is increasing is that the first profile event occurs in `profiler.start()`or `profiler.__enter__()`, with a really short duration (e.g. 46µs). I'd rather not have the profiler itself show up in the observations, mostly since it makes these tests confusing.

I'll have a look at some other options, since I agree that there's one too many checks in the code at the moment.
I've pushed an update to pyinstrument_cext to avoid the first immediate profile call, which should fix the problem without requiring changes to the tests.
Look okay to you?
Yes, perfect! Thanks @joerick
Interesting! Thanks for the PR. I guess this is a remnant from when pyinstrument was using setprofile directly.

Why does this change the number of captured frames in the tests?
Oh cool, thanks for this. Any chance we could limit this just to Windows?
Sure, os.name == 'nt' seems the cleanest way to do this. That being said, Cygwin-compiled Python won't "pass" this test, but that seems less and less used with both native Windows dev improvements and increasing use of WSL (which won't have a problem if they use the Linux file system).

Let me know if that sounds good, or I can try something hackier :)
Sorry, opened up another pull request... Bad form. https://github.com/joerick/pyinstrument/pull/66
Great!
Sorry to be difficult (I can see you've been around the houses on this!) but the docs say about `platform.platform()` "The output is intended to be human readable rather than machine parseable"

I think `sys.platform` might be the best approach here. How about `if sys.platform in ['win32', 'cygwin']:`?
Seems totally reasonable to me :) Coming soon!
Updated - thanks for sticking with it!
Thank you!
Nice one @AlessioBazzanella ! This looks good.
Looks like mixin-deep is no longer updatable, so this is no longer needed.
Looks like js-yaml is up-to-date now, so this is no longer needed.
Looks like lodash is up-to-date now, so this is no longer needed.
Looks like lodash.defaultsdeep is up-to-date now, so this is no longer needed.
Looks like webpack-dev-server is up-to-date now, so this is no longer needed.
Thanks!
Hey @RyanKung - thanks for taking a crack at this - the problem with this solution is that by doing this we've overwritten (lost) stack frames that were previously recorded, meaning the profile is giving inaccurate data. So I'm afraid we can't remove this assert without rewriting some other parts. I'll add more detail in #84
OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`.

If you change your mind, just re-open this PR and I'll resolve any conflicts on it.
OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`.

If you change your mind, just re-open this PR and I'll resolve any conflicts on it.
Great! Looks good to me.
Added a test, a check for --module and --path being mutually exclusive, and tweaked the argparse help. Let me know what you think. Thanks!
By the way, if you want things to be more uniform with what Python does, it might be relevant to use `runpy.run_path` for the default case too. It is the _other_ function in `runpy`, the complement to `run_module`. It is a Python 3.2+ feature, so it could not be used back when Pyinstrument supported Python 2.7 too. But now that Pyinstrument is supporting only modern Python, that would not be a problem. It would simplify the code too: the only difference with `--path` then would be to actually lookup the program in the $PATH.

The doc for run_path: https://docs.python.org/3/library/runpy.html#runpy.run_path

I'll let you think if the increase in consistency and decrease in amount of code is worth the potential change in behavior for corner cases...
Thanks for the review. Just to be clear, the reason `--from-path` (👍 for the name) is done like that is that I want to transform easily arbitrary invocation of Python programs into profiling run of said programs. With `--from-path` this way, if `program` is a Python program, you can go from running it to profiling it by simply prepending the pyinstrument invocation to the existing command-line:

`program --switch arg1 etc.` -> `pyinstrument -o report.out --other-options --from-path -- program --switch arg1 etc.`

That's the intention. Everything after the `--` is the same. No need to do brittle transformations, shell stuff, etc.

I'd be happy to refactor things to use `run_path` for the "else" branch too and at least have a look at what the tests say, if you're confident that the tests will catch potential problems there / you can have a poke if needed to validate that this wouldn't break things for users overall. If this breaks a lot of tests, I may punt this to another pull request... but my guess is it won't. Just 👍 this comment, and I'll have a look at that.
Change done. Didn't seem to cause problem locally, but I'm not setup to run all the tests. Not sure how to restart the CI run that got interrupted, though. I also added a comment for a change that wasn't clear to me. Please double-check that and generally that the change doesn't break too many things. :-)
I made a few changes @chrish42 , mostly more tests to assure myself that we haven't changed anything from the target script's point of view, from our change. I also found some unrelated bugs in the module execution, and fixed them. So this looks good I think. Anything else you'd like to add before I merge?
Looks very good overall. This became a nice cleanup from dropping support for old Python versions, I feel. Thanks for the additional work into my pull request.

The only thing that makes me a little bit sad is `--from-path` not being supported on Windows (even though I wouldn't need it for what I have in mind). What was the issue with there? Not something easy to fix, I'm kinda guessing...?
I must admit I'm not an expert in Windows, but it seems like you can't do the POSIX thing of putting a file in PATH, adding a shebang and an executable bit, and it becomes a program. Seems like executables on PATH have to be proper binaries in Windows. This was the error when I tried to run a Python script as an executable on Windows:

> E                                    OSError: [WinError 216] This version of %1 is not compatible with the version of Windows you're running. Check your computer's system information and then contact the software publisher


So by extension, they can't be Python scripts that are profileable by pyinstrument. That said, I do wonder what `pip` does when it installs a package with an entry point - perhaps there's some kind of shim that it installs that invokes Python. But it's not going to work with the same `runpy.run_path` approach that we did for POSIX.
Hmm. Oh, yeah. From memory, `pip` does install some kind of a shim on Windows for scripts. But yeah, script execution on Windows is a bit of a mess. I guess if there's a fix for it, it's probably better handled as a separate pull request.

👍 for merging for me, then.
Great! Thanks @chrish42 !
Hey @chrish42 , thanks for this (and your patience!). I've taken a look and this looks good generally, I wanted to add another test so I've pushed that to this branch, and I've made a couple of review comments.

> By the way, if you want things to be more uniform with what Python does, it might be relevant to use `runpy.run_path` for the default case too. It is the _other_ function in `runpy`, the complement to `run_module`

Yeah, this would be a good idea! It might be worth nailing down the corner cases in execution environment by adding a new test that checks all that stuff (like I did in the new unit test). If you're interested, feel free to add that to this PR, otherwise, I might get around to it myself once this is merged :)
Ah, this is interesting. I had expected that `--path` would be more like `-m`, but in fact the way it's written here as a flag is maybe nicer! But I think, as a boolean flag the name could also be more descriptive, like

```suggestion
    parser.add_option('', '--from-path',
        dest='path', action='store_true',
        help="Instead of the working directory, look for scriptfile in the PATH environment variable")
```
I think the run_module option is only available as `-m`, not `--module` (this is mirroring the Python command-line interface)
Yes, you are correct. Fixed.
Ooh, whoops! Thanks :)
Alrighty... I think this is ready for prime time!
Thanks. Yes, this is correct. To be honest, the library could use a lot more documentation, but I wasn't sure how many people would be using the Python interface when I originally wrote it. Turns out, quite a few! So I need to document it a bit better. But I want to crack async profiling first :)

Thanks for this.
Ahhhhh, good catch. Thank you!
I saw a couple of test failures in the testcases that use greenlet with this change in place (incorrect number of records with sleep both times), but that went away after I rebuilt my venv. Not sure if that was a fluke or not.
Did you mean to merge that into the main repository?
No I was checking it worked with Python 3.10, which was merged recently. I just have a couple of experiments to run locally before merging...
Hi @jnsquire, I just added a few tweaks to this, we can drop the PyEval calls entirely because pyinstrument is 3.7+. Let me know if this looks okay to you?
Interesting, thanks @jnsquire. I can't find the deprecation warnings you mention, could you find/link/paste them? I'm interested in which APIs are deprecated.

I'm not sure if this method will be much quicker, because this C function always calls into Python code, but maybe it skips the malloc of the args tuple? That would be nice.
I wonder if [PyObject_CallFunctionObjArgs](https://docs.python.org/3/c-api/call.html#c.PyObject_CallFunctionObjArgs) would be neater here?
I don't think these increfs are needed any more, I believe they were there because the PyTuple_SET_ITEM steals a refcount.
There's a blurb about the deprecation of the PyEval_CallObject* routines in favor of PyObject_CallObject* in the Python 3.9 release notes. The vectorcall variant is supposed to be the fastest when you can arrange the preconditions right, since it doesn't require construction of a tuple. The extra NULL slot at the beginning of the callargs array allows reused of the structure when using bound methods, I think.
Yeah, I wondered about that. I'll remove those.
Ah, cool, I'll take a look.  PyObject_CallFunctionObjArgs is one of the new APIs, I think?
Oh, I see, the vectorcall calling convention allows for more efficient bound method calling. Cool, let's keep this.
Thanks @jnsquire. I spotted a memory leak (no code decref if `code->co_flags & 0x80` is false) so I pushed a fix to that. Let me know if it still makes sense to you.
Yeah, that seem's fine to me.
Thanks for this @musicinmybrain and @asmeurer! I had no idea I was installing `test` as a site package! 😅
Wouldn't it be better to only `include='pyinstrument'` instead? This would still include any other directory that happens to contain an `__init__.py`.
Sure, that’s reasonable. I’ll force-push an updated version that does that.
```suggestion
    packages=find_packages(include=["pyinstrument", "pyinstrument.*"]),
```
Thanks 👍
thanks!
@joerick I have pushed lint fixes, please run again CI checks.
Closing in favor of #156
Hi @naspeh ! Thanks for this, I really like how this would improve readability, it would be a great improvement if we can get it working.
I don't know, but for some reason, I get `counter_1.count = 1` already in this line, so `while loop` is skipped all together
For the `main` branch, a stack looks like this for `trio`
```

0.600 async_wait  test/test_profiler_async.py:92
├─ 0.500 sleep  trio/_timeouts.py:60
│  └─ 0.500 sleep_until  trio/_timeouts.py:43
│     └─ 0.500 sleep_forever  trio/_timeouts.py:34
│        └─ 0.500 wait_task_rescheduled  trio/_core/_traps.py:67
│           └─ 0.500 [await]
└─ 0.100 sleep  test/fake_time_util.py:80
   └─ 0.100 jump  trio/_core/_mock_clock.py:153
```
For my branch, a stack looks like this
```
0.600 unrolled_run  trio/_core/_run.py:2028
├─ 0.500 async_wait_and_capture  test/test_profiler_async.py:128
│  └─ 0.500 async_wait  test/test_profiler_async.py:92
│     └─ 0.500 sleep  trio/_timeouts.py:60
│        └─ 0.500 sleep_until  trio/_timeouts.py:43
│           └─ 0.500 sleep_forever  trio/_timeouts.py:34
│              └─ 0.500 wait_task_rescheduled  trio/_core/_traps.py:67
│                 └─ 0.500 [await]
└─ 0.100 test_profiler_task_isolation.<locals>.async_wait_and_capture  test/test_profiler_async.py:128
   └─ 0.100 test_profiler_task_isolation.<locals>.async_wait  test/test_profiler_async.py:92
      └─ 0.100 FakeClockTrio.sleep  test/fake_time_util.py:80
         └─ 0.100 MockClock.jump  trio/_core/_mock_clock.py:153
```
Seems just checking `root_frame`, it's fine here.
Inspired by https://stackoverflow.com/a/52762678
Hm... while clever, this code is ringing some alarm bells for me. I don't love depending on GC (which I feel is an implementation detail of CPython, not a part of the feature set of the language). I also think it might be a performance risk. `gc.get_referrers` [iterates over all Python objects known to the GC](https://github.com/python/cpython/blob/9f7a94fd66e05ae040a67e32c397091fe5939ced/Modules/gcmodule.c#L1665) (all objects in memory?), so it will slow down when Python has lots of objects loaded.

(Performance is important here because we don't want to slow down the program being profiled as it can distort the results)

I did a test, modifying `./metrics/overhead.py` to load some data before testing over head:

```python
import cProfile
import profile
from timeit import Timer

import django.conf
import django.template.loader

import pyinstrument
import json
from statistics import mean

data = []
for i in range(10):
    # from https://github.com/json-iterator/test-data/blob/master/large-file.json
    with open('/Users/joerick/Desktop/large-file.json') as f:
        data.append(json.load(f))

django.conf.settings.configure(
    INSTALLED_APPS=(),
    TEMPLATES=[
        {
            "BACKEND": "django.template.backends.django.DjangoTemplates",
            "DIRS": [
                "./examples/django_example/django_example/templates",
            ],
        }
    ],
)
django.setup()


def test_func_template():
    django.template.loader.render_to_string("template.html")


t = Timer(stmt=test_func_template)
test_func = lambda: t.repeat(number=4000)

# warm up
test_func()

# base
base_timings = test_func()

# # profile
# p = profile.Profile()
# profile_timings = p.runcall(lambda: test_func())

# cProfile
cp = cProfile.Profile()
cProfile_timings = cp.runcall(test_func)

# pyinstrument
profiler = pyinstrument.Profiler()
profiler.start()
pyinstrument_timings = test_func()
profiler.stop()

# pyinstrument timeline
# profiler = pyinstrument.Profiler(timeline=True)
# profiler.start()
# pyinstrument_timeline_timings = test_func()
# profiler.stop()

with open("out.html", "w") as f:
    f.write(profiler.output_html())

print(profiler.output_text(unicode=True, color=True))

graph_data = (
    ("Base timings", mean(base_timings)),
    # ('profile', mean(profile_timings)),
    ("cProfile", mean(cProfile_timings)),
    ("pyinstrument", mean(pyinstrument_timings)),
    # ('pyinstrument timeline', min(pyinstrument_timeline_timings)),
)

from ascii_graph import Pyasciigraph

graph = Pyasciigraph(float_format="{0:.3f}")
for line in graph.graph("Profiler overhead", graph_data):
    print(line)
```

On `main`, this prints:

```
Profiler overhead
###############################################################################
███████████████████████████                                 0.131  Base timings
██████████████████████████████████████████████████████████  0.277  cProfile    
███████████████████████████████████████████                 0.208  pyinstrument
```

on this PR:

```
Profiler overhead
###############################################################################
█████████                                                   0.130  Base timings
████████████████████                                        0.277  cProfile    
██████████████████████████████████████████████████████████  0.782  pyinstrument
```

Perhaps there's another way to get the qualified name? The only way I know is to look at the type of the first argument to the function, if it's called `self`. But that's not completely water-tight, maybe there's a better way 🤔
Another note, whatever we settle on for this function, we'd need to recreate it in C, [here](https://github.com/joerick/pyinstrument/blob/04f0a03d7f9bc335240715a5ddf9a145e7ad84f1/pyinstrument/low_level/stat_profile.c#L333-L334). I can help out with that if you like. It might be better to just use the C implementation, from both C and Python.
Any particular reason this is iterating, rather than inlining these calls in the test?
This output looks great :)
This seems like it's probably an error, to me. I think it's because the Python way that the identifier stack is built is now different from the [C version](https://github.com/joerick/pyinstrument/blob/04f0a03d7f9bc335240715a5ddf9a145e7ad84f1/pyinstrument/low_level/stat_profile.c#L333-L334).
Maybe related to the C/Python identifier stack mismatch too.
Thanks for your detailed response.

I considered `self`, but then I started to think about class methods with `cls` and static methods - other cases and decided to find a more general solution. I have noticed the overhead with `gc.get_referrers` and modified code with `functools.cache` to cache the results for the next call with the same `frame.f_code`.

I have spent some time to find another solution, but without luck.

If we can say that checking `self` and probably `cls` is good enough - it can be a more optimal solution.

----

Regarding C part, I see, I can try by myself first.
The first version was this way, but then I wanted to add `partial` and decided to change to call only one method from the test and introduced `iterate` as this method inside the class, but I can change this back into the test.
Could this be related to overload with `gc.get_referrers` once again? With first calls, it takes a bit longer time and the profiler can already track some stacks.
PR with `self` and `cls` here #156. @joerick do you think it would be enough? Do you like it more?

Regarding C part, it would be good if you can take care of it, I'm not comfortable updating the C extension.
@joerick have you seen my comments and new PR?
apologies, it slipped out of my inbox
Thanks @naspeh, would you mind checking the overhead using `metrics/overhead.py`, comparing `main` to this PR? I just want to make sure this isn't slower in any way.
Sure, I have checked `metrics/overhead.py` before pushing the PR, here is a run for main and for this branch
```
!!! main

[15:39] tfns:~/f/smalls/pyinstrument [env: env] [main ●]
$ python metrics/overhead.py

  _     ._   __/__   _ _  _  _ _/_   Recorded: 15:39:35  Samples:  1058
 /_//_/// /_\ / //_// / //_'/ //     Duration: 1.058     CPU time: 1.058
/   _/                      v4.0.4

Program: metrics/overhead.py

1.058 <module>  overhead.py:1
└─ 1.058 <lambda>  overhead.py:29
   └─ 1.058 repeat  timeit.py:183
         [4 frames hidden]  timeit, <timeit-src>
            1.058 inner  <timeit-src>:2
            └─ 1.056 test_func_template  overhead.py:24
               └─ 1.052 render_to_string  django/template/loader.py:52
                     [292 frames hidden]  django, re, <built-in>, contextlib


Profiler overhead
###############################################################################
██████████████████████████                                  0.137  Base timings
██████████████████████████████████████████████████████████  0.294  cProfile
█████████████████████████████████████████                   0.210  pyinstrument
python metrics/overhead.py  3.50s user 0.02s system 98% cpu 3.569 total
[15:39] tfns:~/f/smalls/pyinstrument [env: env] [main ●]
$ python metrics/overhead2.py

  _     ._   __/__   _ _  _  _ _/_   Recorded: 15:39:23  Samples:  1074
 /_//_/// /_\ / //_// / //_'/ //     Duration: 1.075     CPU time: 1.074
/   _/                      v4.0.4

Program: metrics/overhead2.py

1.074 <module>  overhead2.py:1
└─ 1.074 <lambda>  overhead2.py:37
   └─ 1.074 repeat  timeit.py:183
         [4 frames hidden]  timeit, <timeit-src>
            1.074 inner  <timeit-src>:2
            └─ 1.070 test_func_template  overhead2.py:32
               ├─ 1.054 render_to_string  django/template/loader.py:52
               │     [291 frames hidden]  django, re, <built-in>, contextlib
               └─ 0.016 [self]


Profiler overhead
###############################################################################
██████████████████████████                                  0.137  Base timings
█████████████████████████████████████████████████████████   0.298  cProfile
█████████████████████████████████████████                   0.215  pyinstrument
python metrics/overhead2.py  7.88s user 0.59s system 99% cpu 8.482 total

!!! pretty-frame-identifier 

[15:39] tfns:~/f/smalls/pyinstrument [env: env] [pretty-frame-identifier ●]
$ python metrics/overhead.py

  _     ._   __/__   _ _  _  _ _/_   Recorded: 15:39:46  Samples:  1069
 /_//_/// /_\ / //_// / //_'/ //     Duration: 1.070     CPU time: 1.069
/   _/                      v4.0.4

Program: metrics/overhead.py

1.069 <module>  overhead.py:1
└─ 1.069 <lambda>  overhead.py:29
   └─ 1.069 Timer.repeat  timeit.py:183
         [4 frames hidden]  timeit, <timeit-src>
            1.069 inner  <timeit-src>:2
            └─ 1.067 test_func_template  overhead.py:24
               └─ 1.061 render_to_string  django/template/loader.py:52
                     [292 frames hidden]  django, <built-in>, re, contextlib


Profiler overhead
###############################################################################
██████████████████████████                                  0.137  Base timings
██████████████████████████████████████████████████████████  0.298  cProfile
█████████████████████████████████████████                   0.211  pyinstrument
python metrics/overhead.py  3.56s user 0.02s system 98% cpu 3.623 total
[15:39] tfns:~/f/smalls/pyinstrument [env: env] [pretty-frame-identifier ●]
$ python metrics/overhead2.py

  _     ._   __/__   _ _  _  _ _/_   Recorded: 15:40:02  Samples:  1065
 /_//_/// /_\ / //_// / //_'/ //     Duration: 1.065     CPU time: 1.065
/   _/                      v4.0.4

Program: metrics/overhead2.py

1.065 <module>  overhead2.py:1
└─ 1.065 <lambda>  overhead2.py:37
   └─ 1.065 Timer.repeat  timeit.py:183
         [4 frames hidden]  timeit, <timeit-src>
            1.065 inner  <timeit-src>:2
            └─ 1.063 test_func_template  overhead2.py:32
               └─ 1.054 render_to_string  django/template/loader.py:52
                     [281 frames hidden]  django, <built-in>, re, contextlib


Profiler overhead
###############################################################################
██████████████████████████                                  0.137  Base timings
██████████████████████████████████████████████████████████  0.300  cProfile
█████████████████████████████████████████                   0.213  pyinstrument
python metrics/overhead2.py  7.84s user 0.55s system 99% cpu 8.399 total
```
Seems all good.

P.S. `overhead2.py` is your version from https://github.com/joerick/pyinstrument/pull/154#discussion_r725097675
I had run tests locally before pushed PR and all were green, but I just have noticed one failed test on CI, and seems I can reproduce it locally today

```
        fake_work_frame = next(f for f in walk_frames(root_frame) if f.function == "async_wait")
>       assert fake_work_frame.time() == pytest.approx(0.1 + 0.5, rel=0.1)
E       assert 0.04999999998835847 == 0.6 ± 6.0e-02
E         +0.04999999998835847
E         -0.6 ± 6.0e-02

test/test_profiler_async.py:160: AssertionError
------------------------------------------------------------------------------------------------------------- Captured stdout call -------------------------------------------------------------------------------------------------------------

  _     ._   __/__   _ _  _  _ _/_   Recorded: 15:37:17  Samples:  8
 /_//_/// /_\ / //_// / //_'/ //     Duration: 0.001     CPU time: 0.001
/   _/                      v4.0.4

Program: /arch/naspeh/free/smalls/pyinstrument/env/bin/pytest -v

0.600 _UnixSelectorEventLoop._run_once  asyncio/base_events.py:1815
├─ 0.500 _run  asyncio/events.py:78
│  └─ 0.500 async_wait  test/test_profiler_async.py:92
│     └─ 0.500 sleep  asyncio/tasks.py:636
│        └─ 0.500 [await]
└─ 0.100 Handle._run  asyncio/events.py:78
   └─ 0.100 async_wait  test/test_profiler_async.py:92
      └─ 0.100 FakeClockAsyncio.sleep  test/fake_time_util.py:46
```

This one is similar to https://github.com/joerick/pyinstrument/pull/154#discussion_r723457837

I will push the same fix shortly.
@joerick please rerun CI, should be fine now.
That latest commit shouldn't be needed, we'll have to update the C extension instead.
Apologies for the delay on this, I need to write the C extension modifications before this can be released.
No worries!

I think this PR is the way to go, so we can close #154.
I wasn't able to push to this PR with the C extension work, so I've opened a new one at #166.
Work continues in #166
Any thoughts @joerick?
Oh - one other thing - would it be at all feasible to write a test for this? Not essential, but if there's an existing known scaffold/practise for ipython magic testing that would be very useful to ongoing maintenance/improvements.
Thanks for the feedback! I'll fix these shortly
Comments addressed.

> Oh - one other thing - would it be at all feasible to write a test for this? Not essential, but if there's an existing known scaffold/practise for ipython magic testing that would be very useful to ongoing maintenance/improvements.

I tried following something like [this](https://medium.com/@davide.sarra/how-to-test-magics-in-ipython-extensions-86d99e5d6802) and [this](https://pmbaumgartner.github.io/blog/testing-ipython-magics/), but ran into us needing to stop capturing stdin in pytest to make it work.

Here was the code I started with and tried a few variants of if you wanted to give it a try.
```
from IPython.testing.globalipapp import get_ipython
from IPython.utils.io import capture_output

code = '''
def a():
    b()
    c()
def b():
    d()
def c():
    d()
def d():
    e()
def e():
    time.sleep(0.1)
a()
'''
ip = None
ip = get_ipython()
ip.magic('load_ext pyinstrument')

def test_magics():
    with capture_output() as captured:
        ip.run_cell_magic('pyinstrument', None, code)
        # This works as we defined a in the cell above
        ip.run_line_magic('pyinstrument', 'a()')
```
I'd like to have a go at this, seems like there might be a way to incorporate a test based on your starting point.
So. I have the IPython test working, but for some reason, even importing the IPython codebase on Windows causes a memory/stack overflow crash in the overflow test. No clue what's going on there, but it's probably not worth the time to debug. IPython is more of an application than a library, I expect there's some global/system manipulation going on that's causing an issue. I'll just sidestep the whole thing and run the IPython tests in their own process.
Cool, I think this is ready. Does it look good to you @mlucool?
This looks great! Thanks for all the work on this!
Thanks for merging @joerick. When do you expect to release this?
Should be in the next few days, I want to get #160 in and then we should be good to go
Broadly, this looks good to me. I don't really fully understand the ipython interface, but it seems pretty reasonable.
Could we move this to `pyinstrument/__init__.py` so it's importable as `%load_ext pyinstrument`?

We could put the import inside the function to keep those dependencies separate from the rest of the project.
```suggestion
        Run a cell with the pyinstrument statistical profiler.
```
```suggestion
```
This was merged in #163
Thanks a lot! Couldn't do complete earlier.
Cool feature! Just a few tweaks needed.
I have used `print` statement to print error message. Let me know if I need to use logger.
should we catch `ImportError` when the renderer is missing?
No, `ImportError` seems reasonable for a misconfiguration I think.
Probably not discouraged, if we implement the class variable approach above.
These extension values could be accessed through the Renderer object. E.g. a class variable on each could specify `output_file_extension`. That would allow custom renderers to participate.
So... this is only the configured renderer for the `profile_dir`. Perhaps a better name for the option would be `PYINSTRUMENT_PROFILE_DIR_RENDERER`? Then also, we could move the rendering into the `if profile_dir:` section. That would save cycles rendering something that isn't used.
I have added the `output_file_extension` attribute.
Keeping this here since  this renderer is used in the `if/else` block to produce output.
```suggestion
```
Pyright was pointing out this can return None. So when the renderer is not a subclass of Renderer, we will be using HTMLRenderer. Let me know if this is fine?
I think it would be better to raise an error, instead. I'll update it.
I've made the update. For some reason I wasn't able to push to this branch. I've pushed it to https://github.com/joerick/pyinstrument/commit/69b195b6649344b04861df4ca54f8b372a5c88e0 - if you could cherry-pick that here, I think we're good to go.
Any reason not to use `ubuntu-20.04` here?
Changed it!
I think this PR is probably ready for a second review.
@joerick Thanks! And thank you for your review and for writing this profiler! Your design has made it straightforward to add this new feature. As you've suggested, I've added `SpeedscopeRenderer` to the tests in `test/test_overflow.py` and `test/test_profiler.py`. Because the functions `long_function_a` and `long_function_b` within `test/test_profiler.py` call the `sleep` function, calling both `long_function_a` and `long_function_b` suffices to generate an event timeline with nested function calls, so I elected to make the `test_speedscope_output` test similar to the other `test_*_output` tests for simplicity.

As a result of testing, I noticed something peculiar in `SpeedscopeRenderer` and wanted to get your insight about what might be happening. When I run `test_profiler.test_speedscope_output` in a debugger and:

* set a breakpoint at `test/test_profiler.py:149` and continue until I reach it
* step into `pyinstrument/renderers/speedscope.py`
* set another breakpoint at `pyinstrument/renderers/speedscopy.py:220` and continue until I reach it

I notice that the value of `session.duration` at that line is less than the value of `self._event_time`, and I'm not sure why `session.duration < self._event_time`; I would have expected `session.duration >= self._event_time`.

You should be able to reproduce this phenomenon yourself by running in a terminal:
```bash
> pytest --trace ${PATH_TO_PYINSTRUMENT_REPO}/test/test_profiler.py -k "test_speedscope_output"
(Pdb) b 149
(Pdb) c
(Pdb) s    # should step into speedscope.py.__init__() here
(Pdb) b 220
(Pdb) c
(Pdb) p session.duration     # on my machine, this command prints the value 0.00041103363037109375
(Pdb) p self._event_time      # on my machine, this command prints 0.75, as expected, within a tolerance of 0.3
```

where the first `>` denotes a shell prompt, and the `(Pdb)` denotes a `pdb` debugger prompt.

Do you have any insight as to why this behavior might occur?
Hi @goxberry! Yes, I can offer an explanation. The session.duration is computed by calling `time.time()` before and after profiling. But we are using 'fake time', which is defined here:

https://github.com/joerick/pyinstrument/blob/96dcb80ea480a93fabe9912a9d0089da3485f088/test/fake_time_util.py#L23-L32

This monkeypatches `time.sleep` and some internal machinery, but not `time.time`. So in the reality the session duration is correct, very little time has passed, but the test has a simulated reality, where time has passed!

If this is causing a problem, you could edit the `fake_time` function to also monkeypatch `time.time` (returning `fake_clock.get_time` should do the trick). Or we can just ignore the difference :)
Thanks for the explanation! 

> If this is causing a problem, you could edit the fake_time function to also monkeypatch time.time (returning fake_clock.get_time should do the trick). Or we can just ignore the difference :)

In the interest of pragmatism, let's ignore the difference. I'll revert the change in `SpeedscopeRenderer` regarding `session.duration` vs `self._event_time` and remove the assertion checking the `endValue` field in the Speedscope output.
Rebased on `main`.
Whoah :O Thank you guys so much!! This is so cool!! :D
Thank you @goxberry ! This could be a nice addition. I haven't had time for a full review, but here are some thoughts.
Brilliant, this is looking really good, @goxberry! I appreciate the effort you've put into this :)

Would you be able to add the Speedscope renderer to the overflow test and write a simple test for the speedscope output?

I'm thinking something like:

- test starts profiler
- test calls function a
  - function a calls function b
    - function b sleeps (you can use 'fake time' for this, see other tests)
    - function b returns
  - function a returns
- test stops profiler
- test renders speedscope JSON
- test loads speedscope JSON
- test checks a few things about the JSON, I suppose, a few things about events and metadata. I'm not sure of the specifics, perhaps the events should be [open, open, close, close]?
Hi @goxberry! Thanks for adding the test. I have a couple requests :)
Looks good!
The existing jsonmodule.py uses this structure to encode JSON due to limits on the depth of objects that the built-in `json` module can't handle. This code would be neater just using `json.dumps`.
To declare a typed namedtuple, could you use the the class-style format? https://docs.python.org/3/library/typing.html#typing.NamedTuple
```suggestion
```
```suggestion
```

This probably isn't wanted for a speedscope renderer, as I think the output is timeline-based?
Time is also available on the `Session` object, as `duration`, if that's simpler.
I see there are a few other places where the code is building json as strings. The thing to try here is to add your renderer to the overflow test - `test/test_overflow.py` - if that passes, and you can use the built-in `json` module, that would be preferable.
I've converted the `SpeedscopeFrame` and `SpeedscopeEvent` namedtuples to class-style format in [`c01a771a`](https://github.com/joerick/pyinstrument/pull/160/commits/c01a771ab55895fcf49db2d9a2d4430565fd9aae) and [`ea38ec37`](https://github.com/joerick/pyinstrument/pull/160/commits/ea38ec37a6f87b93e86b9da078ed438728a2a6cf), respectively.
Deleted in [`6212f38d`](https://github.com/joerick/pyinstrument/pull/160/commits/6212f38df085efff05de0ae7d3afa83744d47ac0).
The speedscope evented format requires keeping a running total of time elapsed in order to add time stamps indicating when each event occurred. I kept that running total in `self._total_time`, and have renamed it to `self._event_time` in commit [`a485ad15`](https://github.com/joerick/pyinstrument/pull/160/commits/a485ad15dea5976cdc7459024b9153965ec1ccd0) to clarify its purpose.
To make the code neater, I have:

* added JSON encoders for `SpeedscopeEvent` and `SpeedscopeFrame` in [`beb07eac`](https://github.com/joerick/pyinstrument/pull/160/commits/beb07eac8fdd65a7dd890b2c5c88ab2853fb4c9e) and [`9d32a191`](https://github.com/joerick/pyinstrument/pull/160/commits/9d32a19135dd9b1860928abd336301a700d577a0), respectively
* replaced the `encode_speedscope_event` and `encode_speedscope_frame` calls with calls to `json.dumps` in [`582925f5`](https://github.com/joerick/pyinstrument/pull/160/commits/582925f5981719fcedbf62329d3c01985dbf43de) and [`a78ee717`](https://github.com/joerick/pyinstrument/pull/160/commits/a78ee7176223929ceb5ad636232b39f591d6834f), respectively
* deleted the `encode_speedscope_event` and `encode_speedscope_frame` functions in [`7a4f2e8b`](https://github.com/joerick/pyinstrument/pull/160/commits/7a4f2e8b13d24063346d09f74ba69b60e4a0ee6c) and [`4a9ccfd4`](https://github.com/joerick/pyinstrument/pull/160/commits/4a9ccfd4e003ed097c480a4a1281301a0e6768c1), respectively

So far, the overflow test passes. I think converting other parts of `SpeedscopeRenderer` to use `json.dumps` should be straightforward.
As part of porting the rest of the `SpeedscopeRenderer` implementation to use `json.dumps`, I ended up replacing the `NamedTuple` types with `dataclasses`, because those are easier to serialize to JSON via the `__dict__` field. This work should be done as of [`e66984e4`](https://github.com/joerick/pyinstrument/pull/160/commits/e66984e496dc0826c6eba461a044aac6ca661960).
Agreed; deleted in [`abba8448`](https://github.com/joerick/pyinstrument/pull/160/commits/abba844874ac77abd0429a078972e4038e02851c).
I really appreciate the craft and effort in these assert messages! But when you're running a test with pytest, and an assert fails, pytest will output a lot of useful information that is relevant to that fail, including the contents of variables etc. So it's probably not worth including that information as an assert message, I think. Also, it will help the test be easier to read.
Removing them will also reduce the need for a lot of local variables, which should help readability a bit.
We can use pytest.approx(rel=...) for this, instead of the function call. It would be `uncertainty_per_second = 0.4`... which seems very large! Are you sure we need this? I'd have thought that the fake_time would make CI jitter irrelevant.
Personally, I'd prefer to keep tests pretty explicit. I think it's okay to hardcode things in tests, rather than computing stuff like this.
So here I'd just put literal `0`, or `sleep_a_time_in_seconds`, or `sleep_a_time_in_seconds + sleep_b_time_in_seconds`
I think this section will be quite a lot simplified by removing the assert statements (and associated local variables), as mentioned above.
Maybe try doing pytest.approx() without setting abs or rel, I think it might work...
Works for me.
Those comparisons don't require tolerances on my machine. I pattern-matched the tolerances to the following section of code, which motivated the 0.1s absolute tolerance per 0.25s of fake time:
https://github.com/joerick/pyinstrument/blob/c2e98aaca9581dd9a25373c51b704bf45fce62e8/test/test_profiler.py#L105-L108.

I'll remove the tolerances. All of the floating point numbers involved should be exactly representable per the IEEE-754 standard, so as long as the fake times aren't affected by external factors, tolerances should be unnecessary.
I replaced those calls with literals and removed the local variables re: sleep time.
Removed assertion messages and associated local variables in [`97925fb2`](https://github.com/joerick/pyinstrument/pull/160/commits/97925fb284a34a111b7b99bbef8cd0bb72e7c584).
Replaced function calls with literals in [`97925fb2`](https://github.com/joerick/pyinstrument/pull/160/commits/97925fb284a34a111b7b99bbef8cd0bb72e7c584).
Tolerances and local methods removed in [`97925fb2`](https://github.com/joerick/pyinstrument/pull/160/commits/97925fb284a34a111b7b99bbef8cd0bb72e7c584).
Removed assertion messages and associated local variables in [`97925fb2`](https://github.com/joerick/pyinstrument/pull/160/commits/97925fb284a34a111b7b99bbef8cd0bb72e7c584).
Ah, gotcha, thanks for the explanation! Those tolerances look like a mistake, a hangover from the time before I had fake_time implemented. Sorry they misled you!
I omitted `codespell` from the documentation because it was taking a very long time to run, even after adding flags to skip directories. I also omitted `pre-commit-hooks` from the requirements file because it appeared as though it wasn't possible to run it as a command on the command line, but I could be mistaken.
Rebased on more recent version of `main`.
Thanks @goxberry !
Thanks @goxberry ! I was looking for this information earlier in fact!

I think it's perhaps easier to use these tools through the pre-commit tool, which handles the installation and configuration. So I've suggested changing it to that.
```suggestion
To run linting checks locally:

    pre-commit run --all-files

Some of the pre-commit checks, like `isort` or `black`, will auto-fix the problems they find. So if the above command returns an error, try running it again, it might succeed the second time :)

Running all the checks can be slow, you can also run checks individually, e.g. to format source code that fails `isort` or `black` checks:

    pre-commit run --all-files isort
    pre-commit run --all-files black

To diagnose why `pyright` checks are failing:

    pre-commit run --all-files pyright
```
It probably makes sense just to use these through pre-commit, especially pyright, which pre-commit can install from the official npm package rather than this 3rd party one.

```suggestion
```
Sounds good to me; removed in [`235795ad`](https://github.com/joerick/pyinstrument/pull/161/commits/235795ad4551635819ad04719b19b6160dcc050f).
Made this change in [`235795ad`](https://github.com/joerick/pyinstrument/pull/161/commits/235795ad4551635819ad04719b19b6160dcc050f); the only additional edit I made to the text above was changing the substring "slow, you" to "slow, so you".
Soooo I have this working, and I'm 99% happy with it. However, there's still a problem in async support that's causing me issues. This is a profile of an async test.

```
  _     ._   __/__   _ _  _  _ _/_   Recorded: 10:30:22  Samples:  8
 /_//_/// /_\ / //_// / //_'/ //     Duration: 0.001     CPU time: 0.001
/   _/                      v4.0.4

Program: /opt/hostedtoolcache/Python/3.8.12/x64/bin/pytest

0.600 _UnixSelectorEventLoop._run_once  asyncio/base_events.py:1784
├─ 0.500 NoneType._run  asyncio/events.py:79
│  └─ 0.500 async_wait  test/test_profiler_async.py:92
│     └─ 0.500 sleep  asyncio/tasks.py:641
│        └─ 0.500 [await]  
└─ 0.100 Handle._run  asyncio/events.py:79
   └─ 0.100 async_wait  test/test_profiler_async.py:92
      └─ 0.100 FakeClockAsyncio.sleep  test/fake_time_util.py:46
```

async_wait should be one frame in the stack, it's doing some sync work followed by some async work. But it's being recorded as two frames, one under Handle._run, the other under NoneType._run.

The reason for this is in the asyncio code base:

https://github.com/python/cpython/blob/b7360ae395e9e633d384d16064c5dc04a9841e19/Lib/asyncio/events.py#L78-L96

We're checking the type of `self`, but this code sets `self` to None! Normally I'd say that this wasn't an issue, but it really is an issue because this is in the asyncio library so breaks pyinstrument's async support.

Not really sure what to do to work around this, going to have to think some more on it...
Had an idea to work around this. The class name is not required for the 'identifier' purpose of the frame identifer, it's more 'execution information'. So we could store this information as a separate field in the frame identifier.... it's no longer a frame identifier, it's more 'frame info'. But Frame objects can still be created from this string and Renderers can use it how they like.

Gonna be a decent refactor! But could be useful for future features too.
Superceded by #203
👍
Yeah I think I forgot to actually add the py.typed!
Nice one, thanks @koaning !
Hi @Khreas, thanks for sending this over! I personally think that percentages relative to the total as seen in #171 might be more useful. Would that suit your use case also? Additionally, I wanted to have a look at how we might generalise the renderer options so that other renderers can add options without further expanding the command line interface. So I might take a crack at this myself and see where I end up.
Thanks for the project, this is great stuff! Sending a few tiny PRs that would make it more useful for me.
Closing this because you seem to have an implementation ready at #183 .
This is cool, but I am thinking it might be better as a Renderer, because I guess you're foregoing the normal output in this mode... `pyinstrument -r pyisession -o out.pyisession myscript.py`

That does mean that the renderer API needs to be a bit more general. I think that's okay. I'll take a look at that refactor.
This is cool, but I am thinking it might be better as a Renderer, because I guess you're foregoing the normal output in this mode... `pyinstrument -r pyisession -o out.pyisession myscript.py`

That does mean that the renderer API needs to be a bit more general. I think that's okay. I'll take a look at that refactor.
Seems like this would remove the need for https://github.com/joerick/pyinstrument/pull/180 !
@dependabot rebase
@dependabot rebase
@dependabot rebase
thanks!
Just saw #177 so this would be an alternative implementation to that suggestion.
Just saw #177 so this would be an alternative implementation to that suggestion.
I'm no expert in FastAPI, so I'm very happy to take your word on it! :) Nice to have a pytest example, too.
I wonder if the FastAPIProfiler class is needed at all? Any reason not to call straight to pyinstrument in this function?

```suggestion
    from pyinstrument import Profiler
    async def profile_request(request: Request, call_next):
        profiling = request.query_params.get("profile", False)
        if profiling:
            profiler = Profiler(interval=settings.profiling_interval, async_mode="enabled")
            profiler.start()
            await call_next(request)
            profiler.stop()
            return HTMLResponse(profiler.output_html())
        else:
            return await call_next(request)
```
~~~suggestion
Pyinstrument can be invoked via the command-line to run pytest, giving you a consolidated report for the test suite.

```
pyinstrument -m pytest [pytest-args...]
```

Or, to instrument specific tests, create and auto-use fixture in `conftest.py` in your test folder:
~~~
Closed in favour of #199
Thanks @felixriese ! But we in fact already have a PR for pytest documentation at #193. I'll close this in favour of that.
Even better, thanks! Did not see this PR :)
@dependabot ignore this major version
OK, I won't notify you about version 3.x.x again, unless you re-open this PR or update to a 3.x.x release yourself.
Superseded by #201.
Thank you Anthony! I've been meaning to get around to this. I'm pleased that the modifications are limited to f_back, I had feared it might be worse. 

~Not sure what's going on with CI, I've restarted it.~ Main was broken, should be fixed now.
Looks like this is waiting on https://github.com/python-greenlet/greenlet/pull/306. I'll try to test locally with that PR.
> Looks like this is waiting on https://github.com/python-greenlet/greenlet/pull/306. I'll try to test locally with that PR.

I couldn't get GreenLet to install on 3.11, but also CI was broken on  main.
Looking at the implementation of PyFrame_GetBack, it returns a new reference, whereas frame->f_back is using a borrowed reference. This PR should probably decrement that reference once its completed, although frame objects are destroyed by the interpreter anyway..
Thanks @tonybaloney! I'll get a release out now.
Ah. Now there is a problem with the class name resolution on CPython 3.11! Two steps forward, one step back...
I have a 3.11 version working, but I'm not sure about it... see this [forum post](https://discuss.python.org/t/getting-the-class-name-of-a-code-frame-object-in-cpython-3-11-c-api/17396).
The 3.11 support is firmed-up. I think I'm ready to go with this. I might just do a little extra testing to make sure there are no perf regressions.
All good! Merging...
Just a note, this is merged into master but wasn't part of the 4.3.0 release, I wanted to hold this feature since it _might_ warrant a 5.0.0 release...
@dependabot merge
Thanks !
Not sure if [the failing `test_interval` test on `macos-latest, 3.11-dev`](https://github.com/joerick/pyinstrument/runs/7744548124?check_suite_focus=true) was due to the larger interval in `test_interval` (0.005s) compared to the default (0.001s) meaning there is a non-negligible probability of some of the function calls not being captured and its just chance this was only on the `macos-latest, 3.11-dev` run, or there is something more specific going on here. I have tried reducing the interval down to 0.002s to see if that helps and also fixed the missing new line at end of file causing the pre-commit fail.
Yeah, looks good! Thank you
Yeah, really nice work @tomaarsen ! Thanks
Maybe nice to firm this up a bit?

```suggestion
      } else if (appState.timeFormat === 'proportion') {
        return `${(this.frame.proportionOfTotal * 100).toLocaleString(undefined, {
          minimumFractionDigits: 1,
          maximumFractionDigits: 1,
        })}%`;
      } else {
        throw new Error("unknown timeFormat")
      }
```
Good call, I've pushed the changes!
Thanks telemonian, this is really cool. Before you continue, though, it would be worth taking a look at #203 because I think this feature you have here would work better in the new format that i've been working on over there. 

Mostly, I've been trying to avoid 
- adding runtime information to the frame identifier (that has caused issues in the past, because if a frame identifier changes at runtime, it splits the tree in two at that point)
- calling fast-to-locals in the c extension - my concern is that doing so will distort the timings because it changes how CPython internally stores locals.

In #203, there's a new format for the frame identifier, which is renamed to 'frame info', where the first part is an 'identifier', and then there are extra fields afterwards that store runtime information. The existence of traceback_hide would fit neatly as one of those fields.

The other thing I can think of is that perhaps it's not necessary to actually read `__traceback_hide__`, merely the existence of the variable could be enough to trigger the behaviour. So you could just check for existence of a variable with that name in [`co_varnames`](https://github.com/python/cpython/blob/3.10/Include/cpython/code.h#L30). That would avoid the fast-to-locals step.

Note also, that a lot of these apis have changed in Python 3.11, there might need to be some `#if` defines to toggle behaviours. But I think the required APIs are still available, e.g. https://docs.python.org/3.11/c-api/code.html#c.PyCode_GetVarnames

So, if you're able, do you think you'd be able to rebase this onto #203?
> So, if you're able, do you think you'd be able to rebase this onto https://github.com/joerick/pyinstrument/pull/203?

Probably. Two questions:

- what's the likely eta for #203 getting pulled into main?
- can you give me a few pointers/links to relevant lines in the `invocation-attributes` branch?

> calling fast-to-locals in the c extension - my concern is that doing so will distort the timings because it changes how CPython internally stores locals.

What exactly is fastToLocals and why do I need it to populate the equivalent of the locals dict in the c extension? I still don't totally grok all the fine points of the c extension.

> The other thing I can think of is that perhaps it's not necessary to actually read __traceback_hide__, merely the existence of the variable could be enough to trigger the behaviour

I initially had it like this, but then I was like "what if some perverse person has `__tracebackhide__==False` explicitly, or hacks in some stupid ipython-esque automatic hiding scheme? I should support the dumb edge case". But I also didn't know about `co_varnames`, so if it's more efficient to skip fastToLocals and use that instead I'm fine with it
> * what's the likely eta for [Refactor to track information other than just time #203](https://github.com/joerick/pyinstrument/pull/203) getting pulled into main?

I need to devote some brain-time to the Python 3.11 support, based on the responses in [this forum post](https://discuss.python.org/t/getting-the-class-name-of-a-code-frame-object-in-cpython-3-11-c-api/17396). The latest tranche of API changes landed in 3.11rc1, but it's stable now, so I'll give it another try at some point in the next few weeks.

> * can you give me a few pointers/links to relevant lines in the `invocation-attributes` branch?

Sure. Your code to add the hidden flag to frame info should go in the C extension around here (use the class name as a reference):

https://github.com/joerick/pyinstrument/blob/2c69b0241385339f041b13297488fcee8db3848f/pyinstrument/low_level/stat_profile.c#L419-L430

Then the code to parse the attribute should go around here:

https://github.com/joerick/pyinstrument/blob/2c69b0241385339f041b13297488fcee8db3848f/pyinstrument/frame.py#L289-L292

After that, the processor should be updated to use frame_ops, like this:

https://github.com/joerick/pyinstrument/blob/2c69b0241385339f041b13297488fcee8db3848f/pyinstrument/processors.py#L25-L38

I don't think the rest will change much. But it's a tricky merge, for sure. Sorry about that! It might be easier to start with #203 and add back components from this branch manually.

> What exactly is fastToLocals and why do I need it to populate the equivalent of the locals dict in the c extension?

(disclaimer, I am no expert, I only understand a few things from reading the source code here-and-there)

In CPython, local variables are stored on the 'frame' object. There are two ways that CPython does this - either in 'fast' mode, or in a `dict`. The fast mode stores pointers to the values in a C array on the frame, and there's a mapping in the 'code' object that specifies which variables are stored at which index. But CPython can also store locals in a dict, that's how you can do things like:

```
>>> a = 1
>>> locals()['a'] = 2
>>> a
2
```

Once the frame object has a locals dict, it just uses that, and doesn't use the 'fast' locals anymore.

> But I also didn't know about co_varnames, so if it's more efficient to skip fastToLocals and use that instead I'm fine with it

Yeah, it seems like an okay trade-off in favour of simplicity and performance to me.
Just a note, I'm gonna be working on the Python 3.11 support for #203 soon, so it might be worth holding off on that aspect of your PR until I've done the refactor.
#203 is now merged, so you can rebase onto main instead.
> #203 is now merged, so you can rebase onto main instead.

Awesome! Thank you @joerick for getting that pulled in so quickly. That should make things quite a bit simpler for me, or at least for my git workflow
closing in favor of #217
To test the code, just add this to a notebook:
```python
# Cell 0
%load_ext pyinstrument
# Cell 1
%%pyinstrument
import time
import asyncio

time.sleep(0.1)
await asyncio.sleep(0.1)
```
Thanks @WoLpH. This is cool. Do you think it would be possible to run this in the same thread, rather in a separate one? Perhaps by starting a asyncio run loop before the execution? I'm just wondering if things like threading.locals and contextvars could introduce bugs to users' programs.
That's not easily possible due to the upstream bug unfortunately. IPython needs to run its own event event loop and by default `asyncio` won't allow you to run a second event loop in the same thread.

One option would be to monkey-patch asyncio to allow for this, but I'm not sure if that's a better solution: https://github.com/erdewit/nest_asyncio
Gotcha. Well, maybe we can make it a different magic, perhaps `%%pyinstrument_async`? Or maybe we could detect the presence of await/async keywords in the code and switch this behaviour on that? I'd rather not have this hack affect the majority of non-async users, as I suspect that it might change behaviour in some cases.
This hack is already conditional of having asyncio enabled so we could default to having asyncio disabled. 

I don't see a scenario where that would break existing behaviour for people, unless they already manually set the asyncio parameter
@joerick I've disabled async mode by default now.

To run the cell magic normally people can use:
```
%%pyinstrument
```
For asyncio they can use:
```
%%pyinstrument --async_mode=enabled
```
Great! Yeah this'll work. Last thing - if users don't know about this and try to do an `await`, they'll get the asyncio exception. Do you think it would be possible to catch the asyncio RuntimeError, check that `'event loop is already running' in str(exc)` and if that's the case, print a message to users to let them know about the `--async_mode=enabled` option? I don't know if that would be in the ast transformer or just where the `ip.run_cell` function is called.
I can't prevent the exception output, but I can display a warning :)
I've updated it to this now:

![image](https://user-images.githubusercontent.com/270571/192865895-264e2508-8efa-4c87-9cbf-8f7c583e8c05.png)
I tweaked the detection logic to make a bit stricter - hopefully this works.
It seems to work great for me :)
@dependabot mergeSent from my phoneOn 26 Sep 2022, at 23:21, dependabot[bot] ***@***.***> wrote:﻿Bumps joerick/cibuildwheel from 2.10.1 to 2.10.2.

Release notes
Sourced from joerick/cibuildwheel's releases.

v2.10.2

🐛 Fix a bug that caused win32 identifiers to fail when used with --only. (#1282)
🐛 Fix computation of auto/auto64/auto32 archs when targeting a different platform to the one that you're running cibuildwheel on. (#1266)
📚 Fix an mistake in the 'how it works' diagram. (#1274)




Changelog
Sourced from joerick/cibuildwheel's changelog.

v2.10.2
25 September 2022

🐛 Fix a bug that caused win32 identifiers to fail when used with --only. (#1282)
🐛 Fix computation of auto/auto64/auto32 archs when targeting a different platform to the one that you're running cibuildwheel on. (#1266)
📚 Fix an mistake in the 'how it works' diagram. (#1274)




Commits

7c45799 Bump version: v2.10.2
f766904 Merge pull request #1258 from henryiii/henryiii/chore/dev
73a435b Merge pull request #1266 from henryiii/henryiii/fix/crossplatform
8b0aa9b Merge pull request #1282 from pypa/fix-1281
6b0e1bc Merge pull request #1274 from pypa/diagram-fix
5e5fdd1 Fix win32 identifiers with --only
1e3f3fd Add failing test
faa3ab4 Refactor a little to minimise changes and clarify naming
7969f7c [Bot] Update dependencies (#1275)
4447618 Merge pull request #1276 from pypa/pre-commit-ci-update-config
Additional commits viewable in compare view




Dependabot will resolve any conflicts with this PR as long as you don't alter it yourself. You can also trigger a rebase manually by commenting @dependabot rebase.


Dependabot commands and options

You can trigger Dependabot actions by commenting on this PR:

@dependabot rebase will rebase this PR
@dependabot recreate will recreate this PR, overwriting any edits that have been made to it
@dependabot merge will merge this PR after your CI passes on it
@dependabot squash and merge will squash and merge this PR after your CI passes on it
@dependabot cancel merge will cancel a previously requested merge and block automerging
@dependabot reopen will reopen this PR if it is closed
@dependabot close will close this PR and stop Dependabot recreating it. You can achieve the same result by closing it manually
@dependabot ignore this major version will close this PR and stop Dependabot creating any more for this major version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this minor version will close this PR and stop Dependabot creating any more for this minor version (unless you reopen the PR or upgrade to it yourself)
@dependabot ignore this dependency will close this PR and stop Dependabot creating any more for this dependency (unless you reopen the PR or upgrade to it yourself)





You can view, comment on, or merge this pull request online at:
  https://github.com/joerick/pyinstrument/pull/216

Commit Summary

  152ae1c  Bump joerick/cibuildwheel from 2.10.1 to 2.10.2


File Changes  (1 file)

  
    M
    .github/workflows/wheels.yml
    (2)
  


Patch Links:

  https://github.com/joerick/pyinstrument/pull/216.patch
  https://github.com/joerick/pyinstrument/pull/216.diff


—Reply to this email directly, view it on GitHub, or unsubscribe.You are receiving this because you are subscribed to this thread.Message ID: ***@***.***>
OK, I won't notify you about version 2.x.x again, unless you re-open this PR. 😢
Looks like this PR is already up-to-date with main! If you'd still like to recreate it from scratch, overwriting any edits, you can request `@dependabot recreate`.
@dependabot recreate
@Dependabot merge
@Dependabot merge
I think I've gotten the c api code correct, so this should be ready for your eyeballs now @joerick. One specific question I had about my code:

https://github.com/joerick/pyinstrument/blob/96831856d1d7dfa167fb634b89fa42d982004f40/pyinstrument/low_level/stat_profile.c#L490-L491

In the meantime, I'll try to add a test function a la:

https://github.com/joerick/pyinstrument/blob/eae9e14df7498ee93beb553254ab0d7480de527a/test/test_processors.py#L28-L79
i just fixed up the code defining the `Frame.hidden` property on the python side, but that raised another question. @joerick Why is this a property of `Frame`:

https://github.com/joerick/pyinstrument/blob/eae9e14df7498ee93beb553254ab0d7480de527a/pyinstrument/frame.py#L139-L142

but not something like:

```python
    @property
    def line_number(self) -> int | None:
        l = self.get_attribute_value(ATTRIBUTE_MARKER_LINE_NUMBER)

        return None if l is None else int(l)
```

(ie why is `ATTRIBUTE_MARKER_LINE_NUMBER` defined but not used)?

This probably isn't super important, but I just want to make sure that I'm handling `Frame.hidden` correctly
I added/expanded some unittests to cover the low level behavior for `__tracebackhide__==True` and the high level`remove_hidden_frames` processor. However, I ran into a seemingly tricky issue involving updates to the locals dict on the C side. The following version of `test_frame_info.py` fails both for my branch and main:

```python
import inspect

from pyinstrument.low_level import stat_profile as stat_profile_c
from pyinstrument.low_level import stat_profile_python


class AClass:
    def get_frame_info_with_cell_variable(self, getter_function):
        def an_inner_function():
            __tracebackhide__ = True

            frame = inspect.currentframe()
            assert frame

            # reference self to make it a cell variable
            if self:
                pass

            return frame

        frame = an_inner_function()
        return getter_function(frame)


def test_frame_info_with_classes():
    instance = AClass()

    test_functions = [
        instance.get_frame_info_with_cell_variable,
    ]

    for test_function in test_functions:
        c_frame_info = test_function(stat_profile_c.get_frame_info)
        py_frame_info = test_function(stat_profile_python.get_frame_info)

        assert c_frame_info == py_frame_info
```

On main branch the failure is:

```
>           assert c_frame_info == py_frame_info
E           AssertionError: assert 'an_inner_fun...y\x009\x01l19' == 'an_inner_fun...AClass\x01l19'
E             Skipping 62 identical leading characters in diff, use -v to show
E             - _foo.py9cAClassl19
E             ?           --------
E             + _foo.py9l19
```

on my branch the failure is:

```
>           assert c_frame_info == py_frame_info
E           AssertionError: assert 'an_inner_fun...\x01l19\x01h0' == 'an_inner_fun...\x01l19\x01h1'
E             Skipping 62 identical leading characters in diff, use -v to show
E             - _foo.py9cAClassl19h1
E             ?           --------     ^
E             + _foo.py9l19h0
E             ?                ^
```

@joerick Any ideas?

Not sure how significant the failure of the class attribute showing up in the c frame info string in this test is. It's possible that in the normal functioning of pyinstrument the locals dict gets "rung" enough on the c side for this not to happen anyway.

Also note I'm still dev-ing everything in py 3.10. I'll test this out in py 3.11 later
i did some simultaneous python/c debugging (using my fancy-schmancy devcontainer, which is neat) and got to the bottom of the inconsistency in how the c func was marking frames as hidden. Basically, one of my sanity checks at the start of the `_get_tracebackhidden` func was malformed and checking the wrong thing.

@joerick I fixed that, and updated the unittests in `test_frame_info.py` to more thoroughly cover the various cases related to the behavior of `__tracebackhide__`. I'm now fairly confident that all of the code related to hiding frames in response to `__tracebackhide__` is correct, both on the c and python sides. However, I am still getting basically the same error related to the class name attribute as I pointed out in the previous message above:

```
>           assert c_frame_info == py_frame_info
E           AssertionError: assert 'an_inner_fun...\x01l26\x01h1' == 'an_inner_fun...\x01l26\x01h1'
E             Skipping 70 identical leading characters in diff, use -v to show
E             - nfo.py16cAClassl26h1
E             ?           --------
E             + nfo.py16l26h1

test/low_level/test_frame_info.py:60: AssertionError
```

It's got something to do with `self` being treated as a cellvar in the nested func (i think. I found some [related docs here](https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy)). How should I proceed?
> i just fixed up the code defining the `Frame.hidden` property on the python side, but that raised another question. @joerick Why is this a property of `Frame`:

Yeah, that's a little confusing. The reason is that the 'line number' refers to the code object of that frame - e.g. the line number of the first line of the function. That uniquely identifies the function, and remains static throughout the execution, so is part of the identifier. But the line number _attribute_ is runtime information - it changes as the program executes. 

The runtime attribute isn't used anywhere in the codebase yet, I'm currently working on a branch that uses it to output line-by-line information. Hopefully that will work soon!
> It's got something to do with `self` being treated as a cellvar in the nested func (i think. I found some [related docs here](https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy)). How should I proceed?

That's an interesting one. In a way, the C version is correct - the inner function isn't a method on a class. The difference is that now you've defined the hidden property, I'm guessing the first local is your local `__tracebackhide__` var, and not the `self` variable.

Clearly, it's not an issue for your code. I'd remove the `__tracebackhide__` from the `test_frame_info_with_classes` test. Maybe there's a better way to test the cell self variable, I might revisit that one day.

BTW, it would also be good to have a frame_info test case where the `__tracebackhide__` variable isn't set, just so we test the opposite too.
> I'd remove the `__tracebackhide__` from the `test_frame_info_with_classes` test. Maybe there's a better way to test the cell self variable, I might revisit that one day.
> 
> BTW, it would also be good to have a frame_info test case where the `__tracebackhide__` variable isn't set, just so we test the opposite too.

@joerick done

For the sake of clarity 6 months from now when someone looks at this bit of code again, I also added another test case with `__tracebackhide__ == False` and a note about how it should behave the same as the `True` case.
@joerick What is your thinking on this PR? Is there anything else that needs to be done before it can be pulled in?
I've just done a pass on this, I think it should be good-to-go.
Thanks @telamonian ! I'll see about a release.
Thanks! Can you add `__version__` to that too?
Oh, and `load_ipython_extension` will be needed, I expect.
Updated branch to clear unused code and make history clean.
Thanks for this @abhinand-c ! Sorry for the delay, I hadn't heard of falcon but it appears to be quite widely used.
@joerick I've addressed your comments. Mostly I just made the changes you suggested.

The output looks good with `--show-all` present, but without it the placement and explanation of the hidden nodes still seems kinda iffy. I think it has something to do with the grouping logic in `remove_unnecessary_self_time_nodes` from `processors.py`. I'll keep working on that. Regardless, I think this might be a good place to wrap up this particular PR, but that's up to you.

To clarify, I'm profiling this script:

```python
import time

def D():
    time.sleep(0.7)

def C():
    __tracebackhide__ = True
    time.sleep(0.1)
    D()

def B():
    __tracebackhide__ = True
    time.sleep(0.1)
    C()

def A():
    time.sleep(0.1)
    B()

A()
```

For command:
```
pytinstrument --show-all thide.py
```

output:
```
  _     ._   __/__   _ _  _  _ _/_   Recorded: 12:28:51  Samples:  4
 /_//_/// /_\ / //_// / //_'/ //     Duration: 1.002     CPU time: 0.001
/   _/                      v4.4.0

Program: thide.py

1.002 <module>  thide.py:1
└─ 1.002 A  thide.py:16
   ├─ 0.901 B  thide.py:11
   │  ├─ 0.801 C  thide.py:6
   │  │  ├─ 0.701 D  thide.py:3
   │  │  │  └─ 0.701 sleep  None
   │  │  └─ 0.100 sleep  None
   │  └─ 0.100 sleep  None
   └─ 0.101 sleep  None

To view this report with different options, run:
    pyinstrument --load-prev 2023-01-17T12-28-51 [options]
```

For command:
```
pyinstrument thide.py
```

output:
```  _     ._   __/__   _ _  _  _ _/_   Recorded: 12:30:56  Samples:  4
 /_//_/// /_\ / //_// / //_'/ //     Duration: 1.002     CPU time: 0.001
/   _/                      v4.4.0

Program: thide.py

1.002 <module>  thide.py:1
└─ 1.002 A  thide.py:16
   ├─ 0.701 D  thide.py:3
   │  └─ 0.701 sleep  None
   │        [2 frames hidden]  <built-in>
   └─ 0.301 sleep  None
         [2 frames hidden]  <built-in>

To view this report with different options, run:
    pyinstrument --load-prev 2023-01-17T12-30-56 [options]
```
Hi. I am interested in pushing forward with this PR to get the feature in. @telamonian there is a linting issue. Can you invite me as a collaborator to your fork so I can push directly to the branch, or should I issue a new PR based on this one, cherry-picking your commits and adding one to fix the linting?
superceded by #239
This does fix the initial confusion around show_all. However, some gremlins do still exist, as seen in the output:
```
pyinstrument /tmp/profilet.py     main

  _     ._   __/__   _ _  _  _ _/_   Recorded: 19:04:16  Samples:  5
 /_//_/// /_\ / //_// / //_'/ //     Duration: 1.021     CPU time: 0.002
/   _/                      v4.4.0

Program: /tmp/profilet.py

1.019 <module>  profilet.py:1
└─ 1.019 A  profilet.py:16
   ├─ 0.704 D  profilet.py:3
   │  └─ 0.704 sleep  None
   │        [2 frames hidden]  ..
   └─ 0.315 sleep  None
         [2 frames hidden]  ..
```

Where tb-hidden frames were shown as [2 frames hidden] under the sleep.

However, I do think the change in semantics of show-all in this PR is justified.
IMO this is clearer without the DRYness
```suggestion
    if options.timeline:
        render_options["timeline"] = True
    if options.show_all:
        render_options["show_all"] = True
```
It's very hard for me to review this with the order of the processors changed. Could you put the functions back into the original order?
Looks like leftover debug code
```suggestion
```
Hmm. Interesting. This does highlight that the --show-all option is now deviating from the semantics of `--show` and `--hide`. However, now that we're changing it to also reveal `__traceback_hide__`, it does kinda make sense relative to that. 

Okay, I think I agree. The only one i'd remove from above is `remove_unnecessary_self_time_nodes` - these were always synthetic frames, and do just clutter output in most cases.
The only change I made to processors here is to alphabetize the order of the functions in the file. I did this in order make it easier to enumerate the processors while figuring out what to put in the `for` loop in `base.py`.

If you don't like alphabetic I'm fine with reverting this. But I would ask that we put the functions in `processors.py` in some rational order
`remove_unnecessary_self_time_nodes` removed
Superseded by #234.
I responded to the review and added a test
I think this is ready for another round of review. Perhaps enabling the CI run would give some confidence that the tests are correct?
Thanks and apologies for the delay! I'll try to look in the next few days
I've pushed some fixes to this, if you get a sec could you check this is still working for you @mattip? There were a couple issues with the prof rendering as well as some internal issues (like total_self_time always returning zero), but I think I got them all.
I think this looks good on a toy script I tried. Is there any end-to-end testing you do offline to verify that the renderers all give similar results?
Normally I just play with some of the examples scripts in /examples. I checked these with snakeviz. But it would be good to double check the callers dict somehow, maybe there's some way to visualise the call graph? I seem to remember some tool that had blobs that represent functions and lines representing calls...The other thing we could do is assert more deeply in a unit test, but I'm not sure I'm confident enough how the data should look...! I suppose one could compare a toy script with cProfile to verify.
> maybe there's some way to visualise the call graph

Running the code in the new test, and then using `gprof2dot`
```
gprof2dot -f pstats /tmp/test_renderer.prof | dot -Tpng -o /tmp/output.png
```

I get 
![output](https://user-images.githubusercontent.com/823911/234851556-24c28449-76ba-4de1-805f-591a8c73c300.png)
Sorry, that was cProfile. The ProfRenderer from pyinstrument gives me this. Note the `50% -1` in the call to `e` and `sleep`. I wonder what is wrong

![output](https://user-images.githubusercontent.com/823911/234852091-7606fa2c-0603-4a98-9644-437822450e0c.png)
nice, thank you! well the "-1" is because the number of calls is -1, due to statistical profiling we don't know that. but the 50% below the branches is odd, and looks wrong. Perhaps it is getting confused with the numcalls being -1? we could try 1 to see if that helps. Otherwise it's probably something to do with the callers dict
Ah, yeah it must be the callers dict - I made the same mistake as we had with the stats dict - the code overwrites rather than adding to the caller entry. I can try a fix now
I thiiiink that might fix it. Are you able to try the viz again?
Yes, that did fix the per-cent. The rendering is a bit off, it is hard to read 100%. But that is certainly not pyinstrument's problem :). I think this is about as good as we can do?
![output](https://user-images.githubusercontent.com/823911/234856575-30258d87-265f-4e52-8b0b-b54e7931189f.png)
yeah that looks good to me. I'd rather the numcalls said -1 rather than 1 or 0 as it's clear that there is no data.

I think i'd like some more detailed unit tests on the things we've discovered during this PR about the pstats file format. mostly, just basic stuff around frames, timings, and asserting that the fix we made above still holds. If you have time, that would be great, otherwise I'll get around to it at some point.

Something else I'd wondering - is `pstats` a better name for this than `prof`?
> is pstats a better name for this than prof?

yes, I am horrible at naming things. I will take a look at adding tests. Since the `stats` output is a dictionary, I think it should be straightforward to assert some of what you suggest.
Added some tests and renamed the renderer.
These test errors can be circumvented using fake time. I can look at that now
Any idea why the readthedocs build failed?
I fixed that in #239, should be resolved by merging `main`.
Rebased off main, and CI is passing.
Good catch. I changed the file extension for this renderer to `*.pstats`.
Looks good! Thanks @mattip !
Thanks for shepherding this through to the end.
Is there a plan for a new release?
Sorry for the wait, gonna get #240 in and then cut a new release
Cool, thanks
Hey Matti! Thanks for this, it looks good. Would it be possible to add just a test that checks that [`pstats.Stats`](https://docs.python.org/3/library/profile.html#module-pstats) doesn't crash when loading the output of a simple script?
This is complicated by the fact that the prof renderer outputs bytes, not strs. I'll have a think how we can resolve this neatly.
Looking over the diff, still a few instances of the renderer referred to as 'prof' and not pstats
The code in lines 36-38 below is not used. I thought there would be a way to collect better statistics, but none came to mind.
```suggestion
                "import path to a Renderer class.\n"
```
```suggestion
        # format is (call_time, number_calls, total_time, cumulative_time, callers)
        val = [-1, -1, frame.time, frame.total_self_time, {}]
```
would you mind removing them if so?
done
done
This seems like it's in the wrong place, perhaps an accidental addition? I think these lines should be removed.

```suggestion
```
Actually, there's something weird going on here... the outfile is opened twice. Must be an existing defect. I'll take a look.
I've refactored this to remove the preexisting issue, I'll push the changes
I think this is an issue - we shouldn't discard frames when they've already appeared in stats, we should combine their data. so times should accumulate. I think I have a fix for this, will push shortly.
Nice, thanks for fixing that.
@dependabot merge
Add the workflow itself as something that should be monitored
excellent, thank you @mattip !
slight adjustment to this comment
```suggestion
                # note: we're not removing these processors
                # processors.remove_unnecessary_self_time_nodes,
                #    (still hide the inner pyinstrument synthetic frames)
                # processors.remove_first_pyinstrument_frames_processor,
                #    (still hide the outer pyinstrument calling frames)
```
Nice, thanks! I'll take a look soon. Just a quick note, 'exclusive time' is known as 'self time' in this project. I think it's already available as total_self_time on Frame. But, there may have been a bug in that property until recently, can't remember if it's merged or not!
> Nice, thanks! I'll take a look soon. Just a quick note, 'exclusive time' is known as 'self time' in this project. I think it's already available as total_self_time on Frame. But, there may have been a bug in that property until recently, can't remember if it's merged or not!

Thanks! I tried this with `total_self_time`, but it always returned zero. Looking at the other PRs, I think this might be a fix: https://github.com/joerick/pyinstrument/pull/236/files#diff-34c9ac7ed6042dfd8c5340562bb37088e871be076ce870b1325da6e3f8f4d5cb
> > Nice, thanks! I'll take a look soon. Just a quick note, 'exclusive time' is known as 'self time' in this project. I think it's already available as total_self_time on Frame. But, there may have been a bug in that property until recently, can't remember if it's merged or not!
> 
> Thanks! I tried this with `total_self_time`, but it always returned zero. Looking at the other PRs, I think this might be a fix: https://github.com/joerick/pyinstrument/pull/236/files#diff-34c9ac7ed6042dfd8c5340562bb37088e871be076ce870b1325da6e3f8f4d5cb

I added that fix to this PR and modified the code to use `total_self_time`. Could you please approve the CI workflow?
> The last commit you added isn't correct though, it's not possible to say anything about 'ncalls' in pyinstrument because it is a statistical profiler - they could be many calls that pyinstrument didn't record because it's only recording every {interval}s.

You're right, of course. I reverted that commit in bcca59c.
leave this with me @matthiasdiener, I have some more thoughts on code structure that are probably easier to do than describe!
Would you mind checking this still works as you intended @matthiasdiener ? I think I'm happy with it.
Thanks @joerick! This is still working as intended.
thank you @matthiasdiener for this! gonna get a release out really soon
Looks good @matthiasdiener, thank you! A few comments inline. The last commit you added isn't correct though, it's not possible to say anything about 'ncalls' in pyinstrument because it is a statistical profiler - they could be many calls that pyinstrument didn't record because it's only recording every {interval}s.
Thanks @joerick! This still works as intended.
`frame.identifier` should do the job of uniquely identifying a frame's code location for the purpose of this computation, I don't think we'd need this dataclass.
I'm wondering if there's any potential for code reuse of this bit. perhaps we can factor out a bit of  `render_frame` above - as an example, I note that this code won't print class names of functions... i think that there might be a potential for a `frame_description(self, frame: Frame, time: float) -> str` that captures all the text display stuff
Thanks! I believe [9765b70](https://github.com/joerick/pyinstrument/pull/240/commits/9765b70f52e3adcde390ea7cbad1d0a48d868d77) addresses this.
That's a good idea, thanks! I added `frame_description()` in [1171f3e](https://github.com/joerick/pyinstrument/pull/240/commits/1171f3e8d8f8e7b503e34d78d9a7e2ec19a898d7)
I'd suggest keeping them in the same order as in the `__init__` parameters.

```suggestion
        :param flat: Display a flat profile instead of a call graph.
        :param time: How to display the duration of each frame - ``'seconds'`` or ``'percent_of_total'``
```
Should this be affected by `--show-all`?
yeah good catch! i'll chuck that in too
Hi @matthiasdiener ! Sorry it's taken so long for me to get to this, it took a while for me to understand the problem! I'm not convinced that another dependency is required to solve this. I'll put some more thoughts in the issue thread.
Struggling with windows test. The github config previously was ignoring errors in the tests. as a result, there is an error in the pstats renderer which wasn't picked up at the time.

Additionally, on 3.12 we have a problem that [importing trio is segfaulting](https://github.com/python-trio/trio/issues/2714), caused by https://foss.heptapod.net/pypy/cffi/-/issues/565#note_304559 .

Will have to skip those tests for now.
Superseded by #253.
nice, thank you!
Profiling the code from the issue now shows this, which is better but still has `../<builtin>` which is strange
```
1.020 <module>  profile.py:1
└─ 1.020 A  profile.py:16
   ├─ 0.704 D  profile.py:3
   │  └─ 0.704 sleep  ../<built-in>
   │        [2 frames hidden]  ..
   └─ 0.316 sleep  ../<built-in>
         [2 frames hidden]  ..

```
I think `../<built-in>` is coming from the logic in `frame.file_path_short`. It should have a fast-path for `self.file_path == "<built-in>"`.
Weirdly I don't see this `..` issue, how do you invoke pyinstrument to get this?

Though I think your solution sounds right.
Using this python on macOS
```
%  python
Python 3.10.10 (v3.10.10:aad5f6a891, Feb  7 2023, 08:47:40) [Clang 13.0.0 (clang-1300.0.29.30)] on darwin
```

I create a venv
```
python -m venv /tmp/venv3
```

then install pyinstrument with `pip install -e .`. I put the script in `/tmp/profile.py` then run
```
% python -m pyinstrument /tmp/profile.py
```

If I stop inside `frame.file_path_short`, I don't see `''` in sys.path, so the shortest `relpath` does not start with `''`, rather with `'..'`
Weird.... I get

```console
$ python -m pyinstrument /tmp/profile.py

  _     ._   __/__   _ _  _  _ _/_   Recorded: 19:13:42  Samples:  5
 /_//_/// /_\ / //_// / //_'/ //     Duration: 1.020     CPU time: 0.003
/   _/                      v4.5.0

Program: /tmp/profile.py

1.018 <module>  profile.py:1
└─ 1.018 A  profile.py:16
   ├─ 0.704 D  profile.py:3
   │  └─ 0.704 sleep  <built-in>
   │        [2 frames hidden]  <built-in>
   └─ 0.314 sleep  <built-in>
         [2 frames hidden]  <built-in>

To view this report with different options, run:
    pyinstrument --load-prev 2023-07-13T19-13-42 [options]
```

I'm on python 3.10.7, on mac.
Are you on homebrew python? could that be the difference?
Ah, I managed to recreate it, by using a venv in a different directory

```console
$ python -m pyinstrument /tmp/profile.py 

  _     ._   __/__   _ _  _  _ _/_   Recorded: 19:18:10  Samples:  4
 /_//_/// /_\ / //_// / //_'/ //     Duration: 1.019     CPU time: 0.001
/   _/                      v4.5.0

Program: /tmp/profile.py

1.019 <module>  profile.py:1
└─ 1.019 A  profile.py:16
   ├─ 0.703 D  profile.py:3
   │  └─ 0.703 sleep  ../Users/joerick/Projects/pyinstrument/<built-in>
   │        [2 frames hidden]  ..
   └─ 0.315 sleep  ../Users/joerick/Projects/pyinstrument/<built-in>
         [2 frames hidden]  ..

To view this report with different options, run:
    pyinstrument --load-prev 2023-07-13T19-18-10 [options]
```
Thanks @joerick, this looks good!
this screenshot doesn't look good, it breaks the layout.

perhaps something like this would work better?

![Desktop Copy](https://github.com/joerick/pyinstrument/assets/1244307/bd93481f-da43-4d1a-b20a-f47d1eda1ad6)
font settings for this are-

<img width="225" alt="image" src="https://github.com/joerick/pyinstrument/assets/1244307/10ea0c5b-182a-4203-a9bc-4096a34ea327">
> this screenshot doesn't look good, it breaks the layout.
> 
> perhaps something like this would work better?
> 
> ![Desktop Copy](https://user-images.githubusercontent.com/1244307/260242043-bd93481f-da43-4d1a-b20a-f47d1eda1ad6.png)

This looks great! Do you have a patch already that shows the session like that, or would you like me to go ahead and create one?
i don't this was just something I mocked up in Sketch a while ago
so if you're interested in making a patch for this, please do!
Here is what I came up with:

![image](https://github.com/joerick/pyinstrument/assets/1772435/dee31327-eb42-4a8d-a133-daf92a392610)
Cheers @matthiasdiener, I just tweaked it a bit to put the code in App.svelte, I prefer to keep the 'header' component just rendering the header block.
Thanks @joerick ! Is there any chance for a new release? The changes in this PR and in #258 have been very useful!
yes, I will do soon, I have been working on 3.12 support but just merged that so I'll do a release very soon. Thanks for the ping :)
Thanks @matthiasdiener! I'm working on 3.12 support over in #246, it's complicated by lots of the dev dependencies not supporting 3.12 yet themselves. The trickiest one being cffi, relied on by trio, is segfaulting on import! I think I'll just have to disable those tests.
Ah, I see. Sorry for the spam!
Looks like joerick/cibuildwheel is up-to-date now, so this is no longer needed.
Excellent, thank you! I had a look through the guide and everything looks right to me. (And looks like you caught the step 5/10 mixup.

Merging.
Thank you for putting all this together! I will go through and make some small expansions/changes shortly, and then I'll merge it.

This is excellent, thank you!
Thank you! Merged. There will be conflicts with #3 but I'll sort those out.
> Thank you! Merged. There will be conflicts with #3 but I'll sort those out.

Perfect, thank you!
I resolved #3 to work with this PR
Thanks for putting this together! I'll go through and make a few small changes this weekend before hopefully merging.

One important thing, though: can we move the migrations and sanity checks out of `webserver.sh`? I think `webserver.sh` needs to have as few side effects as possible. It needs to run the webserver—and nothing else. Maybe you could separate those checks into a separate `setup.py` file?
Thanks for putting this together!
Squashed all commits, added Entrypoint.sh, removed commands from Webserver.sh, changed Dockerfile to reference new entrypoint, changed minor grammar as requested.

Let me know if that fits your vision more.
Cheers
Looks good; I will do a final review and some small edits this weekend, then merge.
@Windyo I've merged these changes onto the `dev` branch, pending merge this afternoon ET. Would you mind taking one final look through to make sure everything works? No worries if not, just thought I’d give you a heads up. I made a few changes (e.g. moving all environment variables into `TEMPLATE.md`) that might have broken things, and want to make sure everything looks good to you before I merge.

One change of note I made was creating the `PERFORM_CHECKS_AND_SETUP` environment variable. `entrypoint.sh` will only call `startup_checks.sh` if `PERFORM_CHECKS_AND_SETUP` is `True`—that way, the changes are made on an opt-in bases and shouldn't catch existing installations by surprise.
Did a bit of testing myself, and everything seems to work well! Thanks @Windyo and @dhbahr for all of your hard work here.
Looks good to me :) sorry, was otherwise occupied.

I'll try to see if there's any way to lighten the image next, the 1.3GB weight seems weird to me for such an app.
Great, thanks!
Can we move this into its own file? I'm concerned about putting this in `webserver.sh`. For multi-tenant systems, running migrations unexpectedly could have serious side-consequences.
Grammar fix; can we change to "Performs sanity checks on the Shynet setup"?
I'm going to rephrase this a bit to better fit the way the rest of the documentation is written, but I'll do this on my end before merging.
We can, no issue, but technically it only does the migrations if the tables don't exist, not if migrations are needed. If migrations are needed but the tables exist, the admin will have to run the commands manually, which I think is normal as per your comment.

As an aside the only way to have this run on first run is to have it be in the docker entrypoint. A resolution to this would therefore be to have another .sh "entrypoint.sh" which calls the checks and then calls webserver.sh.

Otherwise we'd need a less lightweight solution which would be to actually set a flag in postgres on first run that says "first run done", so that the checks don't ever get evaluated again after init, but that sounds like overkill to me... Thoughts ?
I like the idea of having two entry points. Does docker-compose allow specifying container commands? If so, we can leave the unmodified webserver.sh as the default CMD, and add another script that the compose file can use which would run these checks and then the webserver script. Does that work?
compose technically supports overriding the entrypoint, but only in the context of `run`, which is a one-time command.
`up` doesn't support entrypoint override, and is the standard way of running services with Compose.

The main "problem" here is that the shynet container itself is purely throwaway - it doesn't need to store anything persistent, that's what the postgre db is here for. So we have no volume to store the "yeah I ran once, don't run checks again and just call webserver.sh plz kthxbye" flag.
Now of course we could just create a volume for that, but that seems a bit... cumbersome, or store that flag in postgre itself, though that'll require a database callout to store the information of where the setup is (in case it gets interrupted).

The simplest way IMO is simply to:

- take migrations and spin it into its own migcheck.sh
- take the other checks and do "firstrun.sh" with it
- have an entrypoint.sh that:
	- runs firstrun.sh, and if any check comes back FALSE (meaning first run was done at least once), just calls webserver.sh
    - runs migcheck.sh only if all three checks before returned TRUE (meaning there's literally no admin user no nothing, so we can safely setup the database because it's empty)
    - uns webserver.sh as if both checks above see all's fine.
... or we expose an environment variable FIRST_RUN and tie the checks to that being set to true manually in the Compose file. I'm actually OK with that on a design perspective - it'll work even if you want to spawn multiple instances of shynet and be easily adaptable to swarm mode.
Another option is to change the default entry point to some kind of “launch” script that does these checks, and keep “webserver.css” exposed for those who want the server to run without side effects? I’m not opposed to changing the default script, as long as we keep “webserver.sh” available.
that's what I meant with entrypoint.sh, lemme whip that up for ya, see if it matches your expectations more :)
done
Ah got it, sounds good!
Actually, just realized that one of the additional checks that was added only works in bash, not sh, so the script won't really work. Server does, however.

Will mess around with startup_checks.sh a bit more in the following days to have it be sh compatible and resolve this.
I actually thought about it for two more seconds and instead of refactoring 5 scripts and introducing potentially breaking changes, I added Bash as a dependency to the image, which brings the new total to a whopping... 337.5 MB.
I thinkyou'll forgive me the extra 6 MB :)

Did a Git-Revert-Hard and then repushed, so things look good now. Pull ofificially available for review :)
Merged into dev, pending merge into master once I run this on my own Shynet instance for a bit and make sure everything goes smoothly. Thanks!
LGTM! I may make a few small changes to the ordering (e.g., groups can be done at the beginning I believe; this is holdover from the original file) and add a few comments here and there, but those are just additional improvements; these changes are all excellent.
Good catch, thanks! Merged.
Great, thanks! I’ll have a look over this tomorrow. I might request just a few small changes to keep this code consistent with some other internal changes in Shynet recently. Either way, this is a great PR. Thanks!
If @milesmcc or someone else has any other consideration please point me out. 
I believe to be all set, well stable and it's ready to merge!
Alright, I’ll have a look at this during the weekend and merge it into `dev`, then hopefully into master! There are a few small things here and there that I’m probably going to tweak, but nothing that’s worth requesting upstream changes in the PR for.
Merged into `dev`. I removed all references to the deprecated environment variables (`SHYNET_*`) and instead added instructions to the guide on how to configure the instance using `heroku run`. Will do some testing, then merge into `master`.
**Merged.** I made a number of important changes to `GUIDE.md` and `app.json`, but overall, not much was needed.

Thanks for building this!
Thanks for putting this all together. There are a few things we need to change before merging, but otherwise this looks great.
Thanks for cleaning this up. Just left a few more comments on the old review. Once we figure out the initial setup process, we'll be ready to merge!
Can we call this section "Quick Deploy to Heroku"?
(Same as before; can we call this "Quick Deploy to Heroku"?)
This 404's. I think the `s` is a typo.
I think I might be missing something here. If we're adding support for `DATABASE_URL`, why do we need to provide these? Can we rely on Heroku's automatically set `DATABASE_URL`?
These settings were removed in Shynet v0.5.0; the updated usage guide uses separate commands to set these options.

The reason I removed these variables is that they were only used on the first run during initialization of the database; people rightfully got confused when they tried to change their values but nothing happened. Moving the initialization process to use _commands_ better matches peoples' mental model of how these will behave.

We need some other way to setup the host, whitelabel, and admin account. Is there a way to tell Heroku to run some commands when this is being initially created?
I'm not comfortable with adding MySQL support. I have no real way to test Shynet on MySQL, and I can't really imagine any scenarios when someone would _need_ to use MySQL over Postgres (except in orgs with a lot of red tape, in which case Shynet probably isn't the best option anyway).

Furthermore, Shynet relies on some of Postgres' more advanced aggregation and annotation capabilities to calculate stats _inside_ the database that I'm not sure MySQL supports.
yes, I think we can.  
Because even in other programming languages "heroku's stack" I receve `DATABASE_URL`. 

It is set when you add cleardb or heroku-postgresql addons. Either one will add the same variable.
> These settings were removed in Shynet v0.5.0; the updated usage guide uses separate commands to set these options.
> 

It was realy removed? I found references of {`SHYNET_ADMIN_EMAIL`, `SHYNET_WHITELABEL` and `SHYNET_HOST`} on {`GUIDE.md`, `startup_checks.sh`} and I thought they were still being used.


> The reason I removed these variables is that they were only used on the first run during initialization of the database; people rightfully got confused when they tried to change their values but nothing happened. Moving the initialization process to use _commands_ better matches peoples' mental model of how these will behave.
> 
I think this can be handle on "create admin user upon first boot on initialization" feature because even if I already got a database to restore, I may want to be able to use this environment variables to make sure I always have the same user/credentials.
Since environment variables are handle for your own infrastructure valt solution don't see any secure issues.


> We need some other way to setup the host, whitelabel, and admin account. Is there a way to tell Heroku to run some commands when this is being initially created?
>

For that I usually solve this in the `postinstall` script (only runs when `NODE_ENV == dev`) of package.json in a nodeJS project. I dont realy know how phyton stack handle fit this idea.
Somehow, currently this PR deploy shynet on heroku by running it as a container. It means Heroku only follow entrypoint defined on [Dockerfile](https://github.com/milesmcc/shynet/blob/master/Dockerfile#L35).

I think this gives the ability to deploy multiple environments managed {on,by} heroku.

Note that solving this problem on Dockerfile give us a more vendor independent solution.
It is actually a new smaller image. Curious this scenario where my contribution in fact must point to a broken-URL that still does not exist yet.

### Current:
![](https://raw.githubusercontent.com/thomasgroch/shynet/features/heroku-quick-deploy/images/slogo.png)

`https://github.com/thomasgroch/shynet/raw/features/heroku-quick-deploy/images/slogo.png`

### after merge
![](https://raw.githubusercontent.com/milesmcc/shynet/master/images/slogo.png)

`https://github.com/milesmcc/shynet/raw/master/images/slogo.png`


_Note: the intention is just a quick and dirty crop to look nice on heroku at first. (I'm not realy a designer)_
Great, that makes sense.
Alright, got it. Can we then specify that these are explicitly not required if you're using the builtin Heroku Postgres addon?
Just checked to be sure--these _have_ been removed. Maybe you started this PR before v0.5.0, but fortunately the current setup guide doesn't mention these variables. They also aren't present in startup checks.

(It may be helpful to rebase your PR on the newest version of Shynet, as it's likely your fork doesn't have these edits.)

Does Heroku offer some way to specify a script to run on first deploy? Or some commands to run? It would be nice if people could just put in the email address, whitelabel, and hostname and then have Heroku run the necessary setup commands for them.
Any chance we can remove the MySQL part completely, instead of just commenting it out?
Heroku uses the entrypoint from the [container itself](https://github.com/milesmcc/shynet/blob/master/Dockerfile#L35). 

For [avoid this warning](https://github.com/milesmcc/shynet/blob/1b344fb90cfb6b9e38cabc101ad1067ec9d736d9/shynet/startup_checks.sh#L19) on boot I [require to  set `SHYNET_HOST` on `startup_checks.sh`](https://github.com/milesmcc/shynet/blob/1b344fb90cfb6b9e38cabc101ad1067ec9d736d9/shynet/startup_checks.sh#L18).
For that reason I kept `SHYNET_HOST` in` app.json`.

This way `startup_checks.sh` started each boot successfully and migrating database only on first boot. 👍 


What do you have in mind?
_Remove `SHYNET_HOST` from `startup_checks.sh`?_

After forked the main repo, clone my forked version and I started my work within a new branch `features/heroku-quick-deploy` from `origin/master`.
Commit SHA:
`1b344fb90cfb6b9e38cabc101ad1067ec9d736d9`
The same commit are the last on `origin/dev`, `origin/master` and `v0.5.0` tag.
By removing `{DB_NAME, DB_USER, DB_PASSWORD, DB_HOST}` from `app.json` we wont be able to use with a different database then "addon heroku" itselfs.

Heroku only sets `DATABASE_URL` when you **add the addon** it with `heroku addons:create heroku-postgresql:hobby-dev`, for that reason I kept in on ` app.json`.
No problem 👍
Will merge shortly, just need to do a few final checks. I’ll release this as v0.5.2 by the EOD.
Merged into `dev`, performing some final tests before releasing 0.5.2.
Thank you! I just ran `python manage.py runserver` which worked well enough to make the change. Local dev setup documentation would've definitely saved me some time though!
This PR is perfectly done. Sorry that the local dev setup documentation hasn’t been built out more—regardless, seems like you figured it all out without any problem.
Related to #49
Merged, thanks!
The linting is fine, don't worry. Thanks for the catch. I'm _shocked_ that this went unnoticed for so long, though. I guess this is a good example of how everything is designed to fail _safe_ (i.e., disabled signups).
@milesmcc Glad to hear your open to adding us! 

> It reads too much like an ad, and doesn't contribute to the quality or usefulness of the guide

Understandable. Render isn't quite a household name like Heroku is (yet), so I was trying to give a little bit of background on why someone would choose Render. But it admittedly takes up a lot of space on your doc. I've removed those lines!
Hi! I see no reason why we should _only_ offer Heroku, so I'd be happy to merge this PR in the interest of fairness and competition. (And Render seems neat!)

That said, I think we need to cut down on the marketing speak. Adding a one-click deploy button to our guide is already providing some degree of advertising to your company; a list of nine selling points is just a bit overboard, no matter how cool the platform is.

Thanks!
Could we remove this, as well as "Every Render service automatically includes:" from the sentence before? It reads too much like an ad, and doesn't contribute to the quality or usefulness of the guide.
Epic PR. Thank you, I've ben waiting for a proper docker-compose guide before installing this :)
Thanks so much! I’ve made a few content edits and merged.
Thank you !
Fixes #75
Closing due to failed Quality Review workflow.
Looks good to me! I'll merge this into `dev` shortly.
Great! I’ll do a bit of testing and merge+release within the next few days.
Thanks, let me know if there is anything to fix or improve.

On Tue, Jan 19, 2021, 14:09 R. Miles McCain <notifications@github.com>
wrote:

> Great! I’ll do a bit of testing and merge+release within the next few days.
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/milesmcc/shynet/pull/91#issuecomment-762827340>, or
> unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAXC2G4A3PNC4YH77PHGGC3S2V76RANCNFSM4WISDRUA>
> .
>
Great PR. I will do some testing this weekend before merging.
Sorry this took so long!
No worries, thanks for merging

On Mon, 29 Mar 2021 at 00:23, R. Miles McCain ***@***.***>
wrote:

> Sorry this took so long!
>
> —
> You are receiving this because you authored the thread.
> Reply to this email directly, view it on GitHub
> <https://github.com/milesmcc/shynet/pull/93#issuecomment-808969052>, or
> unsubscribe
> <https://github.com/notifications/unsubscribe-auth/AAXC2GZMSPE7UNCSEYO4WUTTF6T4ZANCNFSM4WMOGFQA>
> .
>
Thanks! I'll plan on merging this in shortly (i.e., in the next release). Quick question—would it make sense to make it `async defer`?
As far as I know, async scripts can start runing anytime they are fully loaded while scripts with `defer` attribute run just before `</body>` but maintain the order they were declared.

The tracking script gives exposes some API, so it could load so slow, that the script using the API loads first. When it tries to call it - then `Shynet is undefined`  would appear in the console.

`defer` is just in case someone puts it in the `head` tag, then it starts downloading as soon as the tag is parsed without blocking the render (so it can be placed between stylesheets. Of course, there's also DNS lookup time because it's most likely on a separate domain, so I'd rather put it at the end of the `head` tag) and executes, like I said, after the DOM has been fully parsed.

What happens when you use both? To be honest I don't really know, if you find something on this topic, then let me know, I'm curious :D
Looks like urllib3 is up-to-date now, so this is no longer needed.
Great catch. Will merge into `dev` shortly, then into the next release.
I like this! Windows users will no longer be missing out :)
Codacy Static code analysis seems to expect 2 spaces as indentation but everything in that file has 4 spaces so I'll just leave it
Rebased, squashed, and merged into dev.
Close it then :X
@JuniorJPDJ pull requests are automatically closed when they are merged into master (i.e., for release). Is something wrong?
Oh nvm, I thought it bugged bcs of squashing.
> Oh nvm, I thought it bugged bcs of squashing.

Got it, cool. I'm planning on packaging the new release later today so it shouldn't be long.
Cool! Thanks for these changes. I'll take a closer look near the next release, but just had a quick question about the new `<a>` tags in the meantime.

Looks great!
We should probably also add `role="button"` to the `<a>` tag to keep this semantic.
Reason for this change was because the outline stayed visible after toggling, which I found a bit ugly. I should find better solution so it is still focusable by keyboard aswell
Used `$LATITUDE$` and `$LONGITUDE$` as placeholders in the environment variable. I don't know if there are any standards for placeholders in environment variables.
Maybe a nit, but I think typically we just wouldn't have the trailing `$`. So our vars would be `$LATITUDE` and `$LONGITUDE`. Anyway, feel free to change that if you have time. Otherwise, this looks good and I'll merge and test for the next release!
I would maybe limit the options to 7 to not make the ui look weird with whitespace under the calendar
I agree with Casper. I think this is a positive change, but this is too many options. I would remove Today, Last 7 Days, and Last Year. (Those seem like the least useful to me.)
I know it's not perfect. I'm not sure which to delete.
I can try to add this functionality without litepicker plugin.
Maybe add separete select next to date range input?
Maybe it could be customizable for the user.
> I would remove Today, Last 7 Days, and Last Year. (Those seem like the least useful to me.)

Remove those?
Done
Yesterday range is useless due to #129. 
I replaced it with last 3 days.
I think this is a great user experience improvement! Visually, though, it needs a bit of work. The two gray boxes compete visually, resulting in a muddled visual hierarchy. I'll play with the design a bit to get things a bit more structured.

Thanks for the PR!
Ok, I made a revision! I just hide the summary stats. I think this looks great. Will merge shortly.
Looks solid to me :)
Merged into dev.
Great PR! I wonder — would it make sense to do this for any time period under one week? Or 3 days? Just because 2 days is only two data points, and perhaps we should show that on an hourly basis as well?
I think 3 days and 2 days periods can benefit from hourly basis. I'm not so sure about one week.
I agree that up to 3 days, the chart would benefit from hourly data points. 

Ideally tough, the user would get the option since there is  probably an overlap on what chart would be useful for specific date ranges. A future improvement would then be to allow hourly chart option for up to 7 days, allow daily chart from 3 days up to 356 days (?) and monthly option from 2 months up to unlimited months. Or something like that. I wanted to avoid having to add this for now though, but I will change it to show hourly chart starting from 3 day ranges.
Cool, thanks. Will test & merge for next release.
What do you think about adding click event in daily view to show hourly view of the day?
The implementation in chart config could look like:
```javascript
events: {
    click: function(event, chartContext, config) {
        const day = config.config.series[config.seriesIndex].data[config.dataPointIndex].x
        window.location.href = `?startDate=${day}&endDate=${day}`
    },
},
```
@haaavk  good idea! I changed your code a bit to use the `markerClick` event instead of the `click` one so it doesn't trigger when labels are clicked
Awesome, thanks! Just take a look at that one comment and then we'll be set to merge into the next release.
Also show percentage for referrer, country and operating system?
Division by zero fixed. 
Operating system was always implemented.
Country will be replaced with map possibly?
I'm not sure if referrer should have percents. 
If everybody wants percents in all data I can add it.
My bad, I just meant the other cards. I think it would be best to show it consistently in all cards.

About country: my original tought was to just have the data available in both map and table form, feel free to comment on that issue #92 where I posted some screenshots. Still don't know what form it should be and where it should be placed on the dashboard.
I added percent to country card. 
I have problems with referral card size on my small laptop even without percents. 
Long links trigger horizontal scroll.
![Shynet - referral - Screenshot 2021-04-30 09:01:26](https://user-images.githubusercontent.com/818385/116660395-40f4be00-a993-11eb-8b4a-4aaa4bfa610c.png)
That horizontal scroll issue is something I fixed in #120
What do you think about visualization of percents? For example with progress bar.
![Shynet - progress Screenshot 2021-05-06 16:43:42](https://user-images.githubusercontent.com/818385/117318311-972d9980-ae8a-11eb-94af-5ee271593dda.png)
I like it, but I would make the blue a bit lighter so it looks subtler. Also maybe extend the visualization to the full width of the table
I agree re: extending it to be the full width of the table. This looks great! And I'm glad you are using the built-in color theme. You might consider making it lighter by setting the opacity (e.g., `opacity-75` or `opacity-50`).
Extended progress bar + opacity-75 + percents value moved
![Shynet - progress 4 Screenshot 2021-05-07 09:52:04](https://user-images.githubusercontent.com/818385/117416727-f686ba80-af19-11eb-92ca-5c739db5b56f.png)
Hey @haaavk! Just wanted to share a few updates/requests for this PR. First, thank you for working on it! I just merged all your other PRs, and am excited to merge this one ASAP as well.

Two quick things:

1. @CasperVerswijvelt made several UX/style improvements, mostly to do with flex arrangements and layouts on the service page. Would you be able to rebase/rework in order to keep those improvements? (They should be clear from the merge conflicts.)
2. Right now, putting the percentages on their own line causes everything to be a bit too spaced out. I wonder if you could put them to the right of the raw number, not unlike what you originally did.

Finally, I wonder if we could maybe make this look even better by putting a low-opacity progress bar behind the text itself, sort of like what Plausible does:

![image](https://user-images.githubusercontent.com/3037552/118306461-79c68400-b4b7-11eb-99d3-b3e70f8b987e.png)

That might help us maintain high information density while also adding this visual nicety.
Could we just add a quick check if `total` is `0`? So:

```suggestion
    if total == 0:
        return "N/A"
    percent = value / total
```
Add env variable to `app.json` and `TEMPLATE.env`
Maybe in the future this value can be overrideable by a per user setting.
I think it's ok not to preserve the date parameters on pages that don't have a date range element. Otherwise, this is looking good! I just need to do a bit of testing, but let's slate this for the next release.
@CasperVerswijvelt made some changes to make this more generalized. Merged into dev. Releasing soon!
I would put this style on the 'bar' element to make it look a little spacier/better:
```
    top: 4px;
    left: 4px;
    height: calc(100% - 8px);
```

Maybe the width should also be based on the maximum amount of sessions for an element:
so in your screenshot, 100% would be 44 in the browsers category

And then maybe add those bars for country and operating system tables
Seems like I checked out an outdated version where not all tables had the bars yet, my bad
I do think a width relative to the element with most sessions would be nice, so the differences in bar lenghts are more clear at first glance
I made my suggested changes in my repo on the [percent-visualization-changes](https://github.com/CasperVerswijvelt/shynet/tree/percent-visualization-changes) branch if you want to use them.

About the relative maximum: Plausible also visualizes the top element as a bar with width 100%, what do you think @milesmcc ?
Yeah I do think it would be good to scale the bars so that the first/highest element has full width. Makes it easier to distinguish the relative sizes.
I think showing actual percent feels more natural. It's easier to understand and shows more information.
With absolute max it is possible to compare date between cards. 
Relative max make it easier to compare date in one card and it's notable advantage.
On the other hand it may confuse some users and makes it impossible to compare data from different cards. 
In my opinion there are more arguments for absolute max. 
Plausible is popular but it doesn't mean they are right about everything.
I do think, for example in this case, that making the bars as big as possible would improve the clarity of the differences between bar widths a lot. 

I understand that you would then no longer be able to compare the bars between tables, but that is not something I do anyway. Can't speak for others though. 

I just think there is a lot of _unused_ whitespace that could be used to make the differences between the bars clearer.

![image](https://user-images.githubusercontent.com/25928551/119567781-040ec200-bdad-11eb-84f2-4f8d6ce3a50b.png)
We just want to achieve different things with this visualization. Maybe it should be customizable in settings?
> We just want to achieve different things with this visualization. Maybe it should be customizable in settings?

That sounds good to me :)
This is fantastic. Merged. Will be in the next release! :)
replace `class="absolute" style="top: 8px; left: 8px"` with `class="relative"` for same effect

Same thing for the other tables
add back `flex items-center` classes to correctly align icon and text better
add back `flex items-center` classes to correctly align icon and text better
Maybe move style attributes to css file to minimize duplicate code like in [this commit](https://github.com/CasperVerswijvelt/shynet/commit/19520279de8e5f89794bb23e14dd9596ae9c3868)
`left: 0;` to align bar with the table header/body seperator line and make it not get cut off by the `td` tag when bar is full or close to full width
Code style, remove spaces around `=`
`USE_RELATIVE_MAX_IN_BAR_VISUALIZATION = os.getenv("USE_RELATIVE_MAX_IN_BAR_VISUALIZATION", "True") == "True"`
simplify to 
```
<div
    class="absolute h-6"
    style="width: {% if use_relative_max %}{{count|percent:max}}{% else %}{{count|percent:total}}{% endif %}; top: 6px; left: 0px; height: calc(100% - 12px); background-color: var(--color-urge-200-fallback)"
></div>
```
?
Add `flex-none` class here to make flag not get squished
I know it probably should be done this way. This line just looks so ugly.
I know :p
It's ugly code vs duplicate code
`flex-none` needs to be on the 
```
<span class="{{country.country|flag_class}}"></span> {{country.country|country_name}}
```
line, not the one above
EDIT: Commented on wrong PR, comment moved to #139
Sorry for lack of description in this PR. It is about hits data in sessions chart ( #140).
I think you should look at #139. There are some visual changes. Bars are applied to all data.
We can talk about relative maximum there but I'm not a big fan of that.
Oops indeed, I commented on the wrong PR, my bad.
Sweet. Merged (with just one small change).
@haaavk I see that the cool looking gradient in the chart is gone, was it not possible to keep that with a combined chart like this?
I don't know. Maybe it's possible.
In my opinion the most important thing in visualization is information. 
I like to keep it simple. Prettier chart isn't always better. 
For example 3d charts look nice but they are broken because of human perception.
I agree with you, just tought the fading effect looked sleek and clean
Sweet. I made a few changes, but nothing _that_ drastic — namely, I adjusted the colors to match the rest of the dashboard, and moved this interface into the smaller country table. Ready for the next release!
@milesmcc I'm not sure if removing the table version of the country data was the right move. Although the Geo map looks pretty cool, it doesn't show the same kind of overview like the table does and I do miss that a bit. Also on mobile the table is alot more useful. Maybe we can bring back  the table by being able to toggle between map/table view?

Something else I noticed is that in the released version, the map does not extend to the edge of the card anymore (see screenshot) , which it did in my version. Is this intentional? 

![Screenshot_20210614-232232835~2](https://user-images.githubusercontent.com/25928551/121962394-fc698a00-cd68-11eb-98f2-f1b278a73078.jpg)
I knew someone would suggest bringing the country list back 🙂. Having both would be redundant, but feel free to submit a PR that adds a toggle.

I thought about this but didn’t implement it because we don’t yet have a good way to support client-side interactivity, and manually hiding/showing two different divs using JS felt janky. Perhaps we use StimulusJS? I’m not sure.

As for adding padding to the sides, that was intentional. We maintain padding everywhere else, so it looked off to me with it removed.
Why do you think using vanilla js would be janky? We could just use some inline js on the toggle button and then add a couple css rules, like this:

HTML
`onclick="document.getElementById('geo-card').classList.toggle('geo-card--use-table-view')" `

CSS
```
.geo-table {
  display: none;
} 

.geo-card--use-table-view .geo-map {
  display: none;
} 

.geo-card--use-table-view .geo-table {
  display: inline-block
} 
```

I don't really think adding a js framework for this is needed, but that might be something to look at for the long term
Vanilla js is the best for small amount of code. This project may never need a full js framework. 
There are some interesting micro frameworks like Stimulus or Alpine.js. 
I personally don't trust young js frameworks because they come and go too often.
Got it working like this now:

| Table view | Map view |
|------------|----------|
| ![image](https://user-images.githubusercontent.com/25928551/122107037-eddbab00-ce1a-11eb-8587-3eaca6821860.png) | ![image](https://user-images.githubusercontent.com/25928551/122106882-c4228400-ce1a-11eb-9e19-f0e9e933f604.png) |

Not really happy about the toggle button in table view but can't think of anything else atm.

Code is on my [geo-table-map](https://github.com/CasperVerswijvelt/shynet/tree/geo-table-map) branch
@CasperVerswijvelt this looks like a good start! What if we instead put the `map` and `table` buttons left aligned (i.e., after `Country` and `Sessions by Geography`) and renamed them to "(Switch to Table View)" and "(Switch to Map View") or something like that?
Yea that does make more sense visually 😛 I'll try that out tomorrow
Thanks!
Awesome, thanks!
Superseded by #150.
Awesome, thanks Casper.
Is `site.domain` used anywhere beyond that?
It probably should be removed entirely from config.
It is in a few other templates and in .po files, though @milesmcc, should I replace them?
I just searched for it and it will be hard to replace occurrences in e-mail templates.
IMO It would be cool to remove those which are on-page tho.
This is probably also must-have:
https://github.com/milesmcc/shynet/blob/9d9d4a7b1e2644b058163b3df7168b5d7d0bb625/shynet/analytics/templates/analytics/scripts/page.js#L22
hahahha, I did ```git commit -m "Remove `hostname` command"``` and it put my hostname :D
Are you sure that get_host will work in email templates?
In which context are those sent?
request should be in the context: https://github.com/pennersr/django-allauth/blob/353386216b79f16709e97bb487c0bbbba2bc0c71/allauth/account/forms.py#L556

at least in theory. I do not have the opportunity to test emails.
@wvffle You can test if email content is correct by checking shynet logs. Mails are also outputted there
Works well.

![image](https://user-images.githubusercontent.com/13330620/123530809-341fec80-d6ee-11eb-9546-6c9b5c9e309d.png)
Supercool then :D
Well done.
@wvffle 

How do I make sure the hostname is correct when running Shynet using Docker Compose?

When using the edge image from Docker Hub `request.get_host` seems to return `127.0.0.1`.

For now I reverted back to using version 0.10.0.
You quacked up something badly. Are you accessing it using http://127.0.0.1?
It should just return host from client's request.
No, I'm accessing it from a regular domain.

If I go to the Manage tab to get the script code it also says `127.0.0.1`.

I'm running the container using docker compose, DNS is managed by Cloudflare and reverse proxy is nginx.
so this is probably misconfigured reverse proxy
try `tcpdump`ing requests coming to shynet container
@Henridv I'm also using Docker Compose, nginx as reverse proxy and cloudflare as DNS, and it works correctly for me.

This is my reverse proxy setup:

```
server {

        server_name analytics.casperverswijvelt.be;

        include /etc/nginx/snippets/listen-ssl-cloudflare.conf;
        include /etc/nginx/snippets/cloudflare-allow.conf;

        location / {
                proxy_pass http://localhost:9595;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
                proxy_hide_header 'x-frame-options';
                add_header X-Frame-Options ALLOWALL;
        }
}
```
Thanks @CasperVerswijvelt 

This is the line I needed to add:
```
                proxy_set_header Host $host;
```
Great, glad this is fixed!
This is not a good idea to make private key for your domain accessible to everyone on a host.
Closing because this solution introduces a security vulnerability. If anyone could add some guidance to the installation guide that helps address this issue, that would be great!
With:
```
$ docker-compose ps
     Name             Command          State        Ports  
-----------------------------------------------------------
shynet_shynet_1   ./entrypoint.sh   Up (healthy)   8080/tcp
```

Without:
```
$ docker-compose ps
     Name             Command       State    Ports  
----------------------------------------------------
shynet_shynet_1   ./entrypoint.sh   Up      8080/tcp
```
@milesmcc is anything still missing?
Pretty much looks good! Just to confirm, what's the difference between the two `o`/`O` flags (in `-o /dev/null -O /dev/null`)?
```
-O,  --output-document=FILE      write documents to FILE
[..]
-o,  --output-file=FILE          log messages to FILE
```

Which means -O is for output file downloaded using wget and -o is for wget errors/logged messages.
Cool, thanks
Hi,

It's not good, my container doesn't start because healthcheck is ko:

```bash
[root] ~ # docker exec -ti shynet bash -c 'wget -o /dev/null -O /dev/null --header "Host: ${ALLOWED_HOSTS%,*}" "http://127.0.0.1:$PORT/healthz/?format=json"'; echo $?
1
```

With verbosity:

```bash
[root] ~ # docker exec -ti shynet bash -c 'wget --header "Host: ${ALLOWED_HOSTS%,*}" "http://127.0.0.1:$PORT/healthz/?format=json"'; echo $?
Connecting to 127.0.0.1:8080 (127.0.0.1:8080)
wget: server returned error: HTTP/1.1 400 Bad Request
1
```

Why the host header is important here? It's not a best idea, because ALLOWED_HOSTS are domain1.com,domain2.com,domain3.com and not compatible with RFC.
and `ALLOWED_HOSTS` is being cut on first colon

`${ALLOWED_HOSTS%,*}` on `ALLOWED_HOSTS=domain1.com,domain2.com,domain3.com` should evaluate to `domain1.com`

Without setting HOST header it wasn't working at all.

I've two domains in allowed hosts and it works for me.
Could you modify healthcheck in docker-compose to show everything more verbose?

EDIT: Yes. It's my fault. It was cut on LAST not the FIRST colon. It actually evaluates to this:
```
root@big-boy:~# ALLOWED_HOSTS=domain1.com,domain2.com,domain3.com
root@big-boy:~# echo ${ALLOWED_HOSTS%,*}
domain1.com,domain2.com
```

I've not checked with more than 2 domains. Quick fix will be send as PR in a few minutes. Sorry ;)
Should be fixed now ;)
Could you please check my new branch?

EDIT: Already merged. Check now ;)
Isn't `-q` acting same as `-o /dev/null`?

Also, wouldn't `curl -fso /dev/null -H "Host: ${ALLOWED_HOSTS%,*}` be better?
This is about exit status code and I'm using busybox wget which is always available on alpine images.
I had trouble with making curl return error code like I'd like it to do.
It needs special flag for this and it returns other code than I want - masking it with ` || exit 1` would be needed which is not clean.
I'd like to stay with busybox wget.

> Isn't -q acting same as -o /dev/null?

To be honest: I've no idea. You may be right but I would need to check.
It's not the same:

```sh
$ busybox wget -q http://googlesdfds.com
wget: bad address 'googlesdfds.com'
$ busybox wget -o /dev/null http://googlesdfds.com
<nothing>
```
though `-o /dev/null` should cover `-q` functionality
removed `-q`, thanks ;)
Hey! Thanks for putting this together.

One thing I want to consider is potentially leveraging the existing 'hit' model. Maybe that complicates things, but I do like keeping our data model simple. We could simply add a "type" to the hits, and leverage all the existing associations to sessions that hits have.

I worry that this approach could create unnecessary complexity?
@milesmcc Thanks for your feedback. I made some adjustments according to your comments and generalised the Hit model to include events. 

It has the byproduct of turning the Hit into a more sparse table. Do you want to give additional feedback before I proceed? 

Next step it's a bit intimidating, as I need to refactor the ingress task a bit. Do you have any advice there?
Closing due to inactivity; feel free to reopen if you're still interested in this change.
(Happy to chat about architecture if you'd like; we can setup a time to chat synchronously?)
Testing setup is working on my fork: 
https://github.com/sergioisidoro/shynet-genisys/pull/1

Looks good to merge and start adding tests :)
Thanks for the feedback. Issues should be fixed now
Thanks for this initial test harness! Just a few small comments below.
Should we also do this on all pushes?
Could we add a newline here and remove the extra newline on line 29 to keep the file format clean and consistent?
This seems very cool, but would also probably need instructions for maintainer how to handle images in repository and some info about compatibility as it seems like backwards compatibility is lost.

EDIT: Would also be cool if you could handle Codacy Static Code Analysis failed check.
@JuniorJPDJ I tried to keep backwards compatibility as much as I could, and I think I achieved it to some degree The last stage of the docker build is production, which means the default behaviour of `docker build` is to build the production image just as before  

But the `docker-compose up` behaviour indeed now defaults to the development environment, but I think that's the usual behaviour when using docker-compose extends (ie, default to development, and specifying a production file)

I updated the docs of the docker compose section the best I could

I'll take a look at the Codacy issuse, although it was a pre-existing one. It just got flagged because I moved the line
I worry that this might be too complicated. I really like having one Docker image for Shynet, and it really helps with debugging. While I really appreciate this proposal, I don't think it's the right path for us at this point.

I'll leave this PR open for a bit more deliberation (and I'm totally happy to merge a simpler PR that just improves the Dockerfile), but I think that having so many different stages and environments just makes things too complicated.
>  I really like having one Docker image for Shynet

I don't think this really changed, since in the end the default is the Docker production image. 

The alternative is to either pollute the production image with testing and development dependencies or make a duplicate Dockerfile for running tests (which also creates another Docker image). 

I have multiple projects running in parallel with different dependencies and requirements, and Docker is my defacto development environment. Not adding testing deps would be a major blocker for me being able to contribute.
It's a tough call, but I think this approach is too complex. Let's just put the development dependencies in the final image. It's only a few megabytes of difference (this is what I do for the debug toolbar, and I think it's fine).

I'd rather have a single Docker image to work with than two different versions. I'm also concerned about making it harder for new users to setup Shynet for the first time.

Thanks for working with me on this one.
I'm sorry @milesmcc, let me just be clear about some points before we close this PR:

* The default behaviour of `docker build` is the same as before. It will output the same image as before without any changes, and the people who use pure docker will have to make no changes to their setup.

* This PR does make some changes on the docker-compose setup. The setup of having `docker-compose.yaml` + `docker-compose.override.yaml` for development and a `docker-compose.production.yaml` for production is a very standard practice seen in thousands of repositories, documented in the official docker repository. It's the _recommended_ setup to use docker-compose for development and production.

I can understand that having multiple docker-compose files can be, however, a bit intimidating. So we could instead have a single `docker-compose.production.yaml` for production, and have `docker-compose.yaml` for development? (we would remove the override) 

Finally, I must ask. Is this problem about having multiple docker-compose files, or multiple stages of the docker build?

PS: "It's only a few megabytes of difference" I would add that adding testing and dev dependencies to the production image also adds security issues, such as accidentally enabling debugging and testing tools in production.
My concern is less with the complexity of the build, though that's certainly a consideration. (Currently the builds take 30m+, which is fine but less than ideal.) Instead, my concern is more with the complexity of the setup.

Would it be possible to keep `docker-compose.yml` for the production image, and then add a separate `docker-compose.development.yml` for development?
I can get behind that, and go for a simpler setup for now.

The benefit of this setup is that both the development compose file `docker-compose.override.yaml` and `docker-compose.production.yaml` inherit the base structure from the base `docker-compose.yaml`, reducing the probability of them diverging.

The downside of having 2 separate docker-compose files will be having to keep 2 separate "hard-copies" of `docker-compose.yaml`, which might end up diverging and not accurately reflect production when developing locally. But if that's that's an accepted tradeoff for simplicity, let's go with it.

To summarise: 
- I will remove the multi stage build. I might need to also make `root` the production container user, because I remember having issues with running development tools as the `appuser` due to docker volume and file ownership.

- Remove inheritance of `docker-compose.yaml` and just make 2 hard copies of docker-compose
Sounds good. If possible, I'd really prefer to not run as the root user so that the risks of a container escape are smaller. I do wish there was a way for `docker-compose.development.yml` to override `docker-compose.yml` (to reduce duplication), but if there's no way to do that, oh well.
> I do wish there was a way for docker-compose.development.yml to override docker-compose.yml

Well, the only 2 ways: either specifying 2 files with the `-f` flag, or with the override.

I have an idea. What if we keep a `docker-compose.override.yaml` in `.gitignore` and ask people to do `cp docker-compose.development.yml docker-compose.override.yml` so that they can override the docker compose easily. 

The downside is that everytime we update the `docker-compose.development.yml` it won't reflect immediately on developers envs and they will have to re-copy it
I think it's ok to make it slightly more complicated for developers (i.e., ok to specify two files with `-f`) -- really I just want to make sure that the correct thing to do for the production deployment is also the simplest.
@sergioisidoro thanks again for this PR! I just wanted to check whether you think the approach where developers use `-f` to override makes sense?
Hi, sorry for the delay in returning to this topic. 

In my opinion, using the `-f` flag make more sense in the environment where you type the command less often. I think that is why most docker setups opt for crating a separate docker compose like `docker-compose.prod.yml` as an override of the base file, or as a copy of the file itself.

**If you think that for now it's better to make it slightly more complicated for developers then yes, I think the `-f` would be reasonable.**

Something that also came to mind while writing this is that there starts to be a growing number of configurations:
- With / without Ngnix 
- With / without celery 

So using the `-f` in production continues to make a bit more sense to me in order to support those usecases, like so:
```
# Simple setup
docker compose up -f docker-compose.production.yml 

# with celery 
docker compose up -f docker-compose.production.yml -f docker-compose.celery.yml 

# with nginx 
docker compose up -f docker-compose.production.yml -f docker-compose.nginx.yml 

# with nginx + celery
docker compose up -f docker-compose.production.yml -f docker-compose.nginx.yml -f docker-compose.celery.yml 
```
Yeah, the approach you outlined does make sense. Let’s go with that.
Closing due to inactivity. Please feel to reopen if you're interested in implementing these changes.
Blocked on #169
Hi, I'd like to participate in [hacktoberfest](https://hacktoberfest.digitalocean.com/)

Could you please add `hacktoberfest-accepted` label to this PR? This would help me winning come t-shirt ;D
> Could you please add `hacktoberfest-accepted` label to this PR? This would help me winning come t-shirt ;D

@milesmcc, you could simply add `hacktoberfest` topic to the repo. That could help gain some new people wanting to help with the development :)
Added the label! Going to hold off on adding `hacktoberfest` to the repo because I'm not sure I want a huge influx of low-quality PRs, and I'm not sure I have the bandwidth to review them at the moment. But I could change my mind if you all think the submissions will be good.
Just wanted to thank you for putting in the work for this PR. I think that before we add an API we should stabilize what our method for handling new "custom" events will be, so while I'm not ready to merge quite yet, I think we'll be there soon. Going to leave this open for the time being.
I propose we do this a bit differently: instead of having a complex API token setup, we simply add a "refreshable" API URL for every service (and in that URL is a token, but that token is tied to . In the service's management page, we can show that URL — along with a button to "regenerate" it. So for example, a service might have the following API URL: `https://shynet.com/api/service/286ff19d-6062-4033-ba83-d27f3c0f8ef8/?token=fjkhdslfhlkjdsahf` (where the `token` is stored inside the service model, and not another model).

This approach might be simpler because it allows us to not think about authorization as much, and it means that API tokens don't need to be coupled to users.
It will work for me because I'm the only user of my shynet instance and I have only a few services.
The problem begins with multi-users instance with a dozen services.
For example there are 10 services and 5 users.
All users get access to all services so everybody gets 10 links and add them to some kind of a client. 
If we want to revoke the access to one user we need to refresh 10 tokens and resend them to 4 users and they need update them in a client.
I really want to keep Shynet small and focused, so maybe we just make it one refreshable API token per user instead? I really hesitate to introduce an additional model.
One token per user is a good idea. I will apply changes. 
Should I add new view for API token or add it to security view or leave it to django admin?
Great. Let’s create a new view for token management. We can also show the token on the service management page.
Is there anything else I should change in this PR?
Alright, thanks again for making this PR. I just played around with it in my local environment, and I think we're nearly there! Still, there are a few more things we need:

- We need some documentation about how the API works. I mostly mean in places like GUIDE.md, but I also mean in the interface itself. Right now if you visit the API page, it has no context — we need to explain what is going on. For example, we should explain that this is the user's _personal_ API token.
- I don't think there should be a separate API tab. Perhaps we put it under "Account" or "Security"?
- I'm not sure it makes sense to put the API key without any context on the service management page. Instead, I think we should provide the link to the API where the user can access that service's information. I think that would be more directly useful.

I can make the interface look a bit more consistent/prettier myself before we merge, so don't worry too much about that. Thanks!
I moved API token info to security tab and rename it to 'Personal API token'.
I added some basic API usage description to service management page and GUIDE.md.
I tried to add django-cors-headers but it generated conflict in poetry.lock.
I'm not sure how to resolve this conflict.
In my local dev environment, I get the following error when I try to query the API for a particular service:

```
ERROR Internal Server Error: /api/dashboard/
Traceback (most recent call last):
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.9/lib/python3.9/site-packages/django/core/handlers/exception.py", line 47, in inner
    response = get_response(request)
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.9/lib/python3.9/site-packages/django/core/handlers/base.py", line 181, in _get_response
    response = wrapped_callback(request, *callback_args, **callback_kwargs)
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.9/lib/python3.9/site-packages/django/views/generic/base.py", line 70, in view
    return self.dispatch(request, *args, **kwargs)
  File "/Users/miles/Source/shynet/shynet/api/mixins.py", line 23, in dispatch
    return super().dispatch(request, *args, **kwargs)
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.9/lib/python3.9/site-packages/django/views/generic/base.py", line 98, in dispatch
    return handler(request, *args, **kwargs)
  File "/Users/miles/Source/shynet/shynet/api/views.py", line 38, in get
    services_data = [
  File "/Users/miles/Source/shynet/shynet/api/views.py", line 43, in <listcomp>
    'stats': s.get_core_stats(start, end, basic),
TypeError: get_core_stats() takes from 1 to 3 positional arguments but 4 were given
```
@haaavk see https://github.com/haaavk/shynet/compare/api...milesmcc:shynet:api
Once that error is fixed, I think we're good to go.
Sorry for this. Commit was lost in different branch somehow.
Could we please make this a `POST` request (since it changes state)? As it stands, this could be a minor security vulnerability.
Thanks!
Looks like django is up-to-date now, so this is no longer needed.
Closing due to inactivity; feel free to reopen (and test 🙂) if you're interested in merging. Thanks!
Weird that Gunicorn does that. Oh well. Thanks for the PR. Before I merge, would you mind also removing https://github.com/milesmcc/shynet/blob/master/shynet/dashboard/static/dashboard/js/base.js as well? That way we don’t have an empty unused file lying around.
Great, thanks!
Thanks @haaavk.
Superseded by #216.
Thanks!
Thank you @christianwgd!
It seems that on some templates you may have forgotten a "load i18n" directive, which makes rendering these pages fail. I've detected this problem on `dashboard/pages/service_delete.html` and `dashboard/pages/service_session.html`, because opening `/dashboard/service/<...>/sessions/<...>` and `/dashboard/service/<...>/delete` shows a big "Server Error (500)" page.
Sorry for that. I've checked and added the missing "i18n" tags with a new pull request.
PR merged.
Thank you for putting in the time to make these changes. I'm eager to merge them. Just see my two notes about migrations — are these necessary?
Do we need this migration? I'd feel much more comfortable if there weren't changes hitting the database.
Same note here; do we need a migration?
I don't think that these are really needed, but it's common practice in Django to create a migration if - like i did - a verbose_name field is added to the model fields. You can find a more detailed explanation here: https://stackoverflow.com/questions/58555007/does-django-create-useless-migrations

It seems like there are ways to avoid these migrations, but at the moment i don't see why we should do that. 
Let me know, what you think about it...
Thanks for the context; let's keep the migrations.
Need to just verify locally but lgtm.
@doamatto could you verify which of `HTTP_SEC-GPC`/`HTTP_SEC_GPC` is correct? Once that's done, ready to merge!
Apologies, it seems the notification went to the bottom of my feed. I've since changed it to be an underscore; should be good to go now, touch wood.
Looking good! See comments.
Just want to confirm that the header shows up here correctly in your testing — is there a reason that it's not all uppercase like the other headers?
Hmm, perhaps this should be `True` (Python booleans are capitalized):

```suggestion
        dnt = True
```

Per the [Black](https://black.readthedocs.io/en/stable/the_black_code_style/current_style.html) style guide, I also typically put a space around `=`.
Ah, my bad; Python may have been my first language, but I don't remember it all the best haha.
I *think* it would behave fine all capitalised as well. I did it that way to be verbatim with the spec, but I don't think it should cause any issues otherwise.
Rephrase: it will be fine. RFC 2616 (or whatever's newer) does say that header names aren't case sensitive. I'll switch it to all caps, and it should be dandy.
Does this work properly when you test on your local machine? My understanding is that Django converts all dashes to underscores in header names. Have you verified this behaves properly? I may be mistaken.
I think you're right in this regard. I've since changed it to an underscore.
FYI, Once this is merged, I'll raise another MR with tests for `api` app.
Nice work with 100% code coverage. 
Usually it's not a best idea to mix refactoring with other changes in one commit. 
Adding pure subjective code style changes may not be worth it. 
Some of them are likely to be undone next time I'll work on API.
Hey, @haaavk understood, I'll move tests and refactoring to separate commits.
Hey, @haaavk I have separated my changes into different commits. Please review.

Also, I'm hoping you guys don't have any issues using `black` for code formatting.
Black is cool. I personally prefer to keep lines length under 100.
@milesmcc Are there any official code style rules for Shynet?
> Black is cool

✅ 🙌🏽 

> I personally prefer to keep lines length under 100.

I see, I keep them around 120.

> Are there any official code style rules for Shynet?

It'll be great if we can have official code style rules or a `.editorconfig` file.
Yeah @haaavk Black is what I prefer. We should codify this.
@milesmcc Got any spare time to review this as well? 🤔
Any specific reason for not including, flake8 to pre-commit config?
Black doesn't always agree with flake8. For example E203.
Was trying to write tests for methods in `core.models` but the methods are too big and are doing a lot of things. That's why refactored in smaller methods.

@milesmcc  If you think this MR is creating noise or not required, I'll close it. Please let me know.
I like it! We've definitely accumulated cruft over time. I just need to properly test it locally.
@sumit4613 apologies for the delay. Any interest in rebasing this PR?
@milesmcc Rebased.
Thank you.
Thanks again for this contribution! I'm running into this error when I test your change. Is it possible there's an edge case missing here?

```
Environment:


Request Method: GET
Request URL: http://localhost:8000/dashboard/service/1d2d1404-73c9-4b71-b48f-8370bb4f6b8e/

Django Version: 4.1.6
Python Version: 3.10.0
Installed Applications:
['django.contrib.admin',
 'django.contrib.auth',
 'django.contrib.contenttypes',
 'django.contrib.sessions',
 'django.contrib.messages',
 'django.contrib.staticfiles',
 'django.contrib.sites',
 'django.contrib.humanize',
 'health_check',
 'health_check.db',
 'health_check.cache',
 'rules.apps.AutodiscoverRulesConfig',
 'a17t',
 'core',
 'dashboard.apps.DashboardConfig',
 'analytics',
 'api',
 'allauth',
 'allauth.account',
 'allauth.socialaccount',
 'debug_toolbar',
 'corsheaders']
Installed Middleware:
['django.middleware.security.SecurityMiddleware',
 'whitenoise.middleware.WhiteNoiseMiddleware',
 'django.contrib.sessions.middleware.SessionMiddleware',
 'corsheaders.middleware.CorsMiddleware',
 'django.middleware.common.CommonMiddleware',
 'django.middleware.csrf.CsrfViewMiddleware',
 'django.contrib.auth.middleware.AuthenticationMiddleware',
 'django.contrib.sites.middleware.CurrentSiteMiddleware',
 'django.contrib.messages.middleware.MessageMiddleware',
 'django.middleware.clickjacking.XFrameOptionsMiddleware',
 'debug_toolbar.middleware.DebugToolbarMiddleware']


Template error:
In template /Users/miles/Source/shynet/shynet/dashboard/templates/dashboard/includes/stats_status_chip.html, error at line 3
   can't compare datetime.datetime to datetime.date
   1 : {% load humanize %}
   2 : 
   3 :  {% with stats=object.get_daily_stats %} 
   4 : {% if stats.currently_online > 0 %}
   5 : <span class="chip ~positive !high whitespace-nowrap">
   6 :     {{stats.currently_online|intcomma}} online
   7 : </span>
   8 : {% endif %}
   9 : {% endwith %}

Traceback (most recent call last):
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/core/handlers/exception.py", line 55, in inner
    response = get_response(request)
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/core/handlers/base.py", line 220, in _get_response
    response = response.render()
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/response.py", line 114, in render
    self.content = self.rendered_content
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/response.py", line 92, in rendered_content
    return template.render(context, self._request)
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/backends/django.py", line 62, in render
    return self.template.render(context)
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/base.py", line 175, in render
    return self._render(context)
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/test/utils.py", line 111, in instrumented_test_render
    return self.nodelist.render(context)
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/base.py", line 1005, in render
    return SafeString("".join([node.render_annotated(context) for node in self]))
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/base.py", line 1005, in <listcomp>
    return SafeString("".join([node.render_annotated(context) for node in self]))
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/base.py", line 966, in render_annotated
    return self.render(context)
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/loader_tags.py", line 157, in render
    return compiled_parent._render(context)
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/test/utils.py", line 111, in instrumented_test_render
    return self.nodelist.render(context)
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/base.py", line 1005, in render
    return SafeString("".join([node.render_annotated(context) for node in self]))
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/base.py", line 1005, in <listcomp>
    return SafeString("".join([node.render_annotated(context) for node in self]))
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/base.py", line 966, in render_annotated
    return self.render(context)
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/loader_tags.py", line 157, in render
    return compiled_parent._render(context)
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/test/utils.py", line 111, in instrumented_test_render
    return self.nodelist.render(context)
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/base.py", line 1005, in render
    return SafeString("".join([node.render_annotated(context) for node in self]))
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/base.py", line 1005, in <listcomp>
    return SafeString("".join([node.render_annotated(context) for node in self]))
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/base.py", line 966, in render_annotated
    return self.render(context)
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/loader_tags.py", line 63, in render
    result = block.nodelist.render(context)
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/base.py", line 1005, in render
    return SafeString("".join([node.render_annotated(context) for node in self]))
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/base.py", line 1005, in <listcomp>
    return SafeString("".join([node.render_annotated(context) for node in self]))
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/base.py", line 966, in render_annotated
    return self.render(context)
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/loader_tags.py", line 63, in render
    result = block.nodelist.render(context)
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/base.py", line 1005, in render
    return SafeString("".join([node.render_annotated(context) for node in self]))
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/base.py", line 1005, in <listcomp>
    return SafeString("".join([node.render_annotated(context) for node in self]))
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/base.py", line 966, in render_annotated
    return self.render(context)
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/loader_tags.py", line 208, in render
    return template.render(context)
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/base.py", line 177, in render
    return self._render(context)
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/test/utils.py", line 111, in instrumented_test_render
    return self.nodelist.render(context)
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/base.py", line 1005, in render
    return SafeString("".join([node.render_annotated(context) for node in self]))
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/base.py", line 1005, in <listcomp>
    return SafeString("".join([node.render_annotated(context) for node in self]))
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/base.py", line 966, in render_annotated
    return self.render(context)
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/defaulttags.py", line 540, in render
    values = {key: val.resolve(context) for key, val in self.extra_context.items()}
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/defaulttags.py", line 540, in <dictcomp>
    values = {key: val.resolve(context) for key, val in self.extra_context.items()}
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/base.py", line 715, in resolve
    obj = self.var.resolve(context)
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/base.py", line 847, in resolve
    value = self._resolve_lookup(context)
  File "/Users/miles/Library/Caches/pypoetry/virtualenvs/shynet--o1YXJxF-py3.10/lib/python3.10/site-packages/django/template/base.py", line 914, in _resolve_lookup
    current = current()
  File "/Users/miles/Source/shynet/shynet/core/models.py", line 144, in get_daily_stats
    return self.get_core_stats(
  File "/Users/miles/Source/shynet/shynet/core/models.py", line 158, in get_core_stats
    main_data = self.get_relative_stats(start_time, end_time)
  File "/Users/miles/Source/shynet/shynet/core/models.py", line 282, in get_relative_stats
    chart_data, chart_tooltip_format, chart_granularity = self._get_chart_data(
  File "/Users/miles/Source/shynet/shynet/core/models.py", line 439, in _get_chart_data
    sorted_chart_data = sorted(chart_data.items(), key=lambda k: k[0])

Exception Type: TypeError at /dashboard/service/1d2d1404-73c9-4b71-b48f-8370bb4f6b8e/
Exception Value: can't compare datetime.datetime to datetime.date
```
@milesmcc I'll check it out.
Going to close this for now but go ahead and reopen when the bug is fixed.
Just want to confirm — will this work correctly on databases with multiple users? Dynamic `defaults` combined with unique constraints always make me nervous. :)
> Just want to confirm — will this work correctly on databases with multiple users? Dynamic `defaults` combined with unique constraints always make me nervous. :)

Ah, I don't know, I haven't tested it on a live multi-user deploy.

I was checking the referenced commit and noticed that there is already a migration adding the `User.api_token` field, so why would Django be trying to alter it again? There might be something fishy going on, let me research it a bit.

https://github.com/milesmcc/shynet/commit/787ce1775f5bd56991a47eb6218e29afcd93d813#diff-2ae8edd0c5dcc60a4f98b32e7a2ede51f213275567ae72c33356e8e6f0d18acaR14-R18
Migration was edited manually in c34388e6c9d08f7974f36407444716f07c79dc5b. 
Default value was removed from migration but it is present in model. 
I think that's why Django generated new migration. 
Default value for api token is 32 long random string and it shouldn't cause problems with multiple users. 
On the other hand, most users won't use api token so it may be a good idea to keep it disabled by default. 
In that case default value should be removed from model.
Superseded by #252.
Superseded by #254.
OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`.

If you change your mind, just re-open this PR and I'll resolve any conflicts on it.
OK, I won't notify you again about this release, but will get in touch when a new version is available. If you'd rather skip all updates until the next major or minor version, let me know by commenting `@dependabot ignore this major version` or `@dependabot ignore this minor version`.

If you change your mind, just re-open this PR and I'll resolve any conflicts on it.
@doamatto do we need to also handle the GPC header here? You're the expert on this :)
Is GPC header really about tracking? It looks like it's about selling and sharing data. According to MDN:
`The Sec-GPC (Global Privacy Control) request header indicates whether the user consents to a website or service selling or sharing their personal information with third parties.`
True. In that case we should consider not lumping it in with DNT on the server side either.
:+1:
Global Privacy Control is an implementation of the CCPA [1] and GDPR [2] meant to be the equivalent of "Do Not Sell" and "Object to Processing."[3] It's seen as an actual standard for the DNT header, which, even though we call it "Do No Track", doesn't really hold any merit outside of that people *should* respect it, not what they *have* to respect it.

GPC can be seen as a "Do Not Track" header— as far as I know, it's meant to even replace it, considering the amount of legistlation behind it.

[1]: GPC signal conveys limitation of sale for the browser, device, or consumer; I have zero clue what section exactly, but I imagine that's on the GPC's website since it's been basically endorsed by the attorney general and other CA figures.
[2]: GPC signal conveys limitation of sale or sharing of user's personal data; Art. 7 & 21
[3]: https://globalprivacycontrol.org/

cc @milesmcc
Maybe we should treat GPC as DNT for sake of simplicity. There is always an option to ignore DNT. 
Another option is to add new setting to enable GPC as DNT. 
Ideally Shynet should not give possibility to track user personal data.
Looks good; I need to test more robustly but I think it's on the right track. Would you mind posting some screenshots on the PR?
I used sessions list template as starter. 

https://user-images.githubusercontent.com/818385/232865657-b36b2ac1-f72b-4d17-bfc2-ff90c422d4bc.mp4
Hmm, the video isn't working for me but it might be my computer.

I apologize for my slowness here. The underlying issue is that I got a new laptop, and I no longer have a good local development environment for Shynet where I can easily pull your changes and test them out. (And alas, we don't have a way to seed mock data.) This is my fault.
Maybe this will work. 

https://user-images.githubusercontent.com/818385/233265840-5c291ea0-7637-49f9-9e45-50683487d4cb.mov

I had the same problem with mock data but I found management command call "demo". I made some cosmetic changes to it but it mostly works really good out of the box.
Good work.
Will fix the tag shortly
Thanks!
I'm quite curious what caused the compressed image size to go from 200-300MB to jump to 750MB from version v0.10.0 to v0.11.0 though.

When uncompressed right now, the image is taking up 1/10 of the space of my 20GB VPS. Which ultimately inspired me to do this PR, but I wonder if we can find a way to reduce the image size even more after this is merged.

EDIT 1:
Looking at the [commit diffs](https://github.com/milesmcc/shynet/compare/v0.10.0...v0.11.0), it seems it's after the addition of [rust](https://pkgs.alpinelinux.org/package/edge/main/aarch64/rust) might be attributed to the rise in image size.
```
# libffi-dev and rust are used for the cryptography package,
# which we indirectly rely on. Necessary for aarch64 support.
```
If it's not needed in amd64, maybe we could do an architecture check during build time (using `arch` or `uname -m`) and determine if `libffi-dev`, `rust`, and `cargo` are required.

EDIT 2:
I tried building the initial apk installation layer like this instead:
```
RUN apk update && \
	apk add --no-cache gettext bash npm postgresql-libs && \
	test "$(arch)" != "x86_64" && apk add libffi-dev rust cargo || echo "amd64 build, skipping Rust installation"
	# libffi-dev and rust are used for the cryptography package,
	# which we indirectly rely on. Necessary for aarch64 support.
```

This yields even better sizes for `amd64` systems, but unfortunately `arm64` still has to take a hit unless we can remove `rust` as a dependency entirely.
```
 ❯ docker images                                                                                                                                                                                                                                                                                    [08:32:47]
REPOSITORY   TAG       IMAGE ID       CREATED          SIZE
<none>       <none>    2cda0b101cd3   10 seconds ago   744MB <- rust removed
<none>       <none>    41af2fc866fc   3 minutes ago    1.64GB <- with rust
```

@milesmcc @CasperVerswijvelt do let me know if you guys are okay with this approach, I can append this change to this PR as well.
@jarylc while I'm not really familiar with all the dependencies of Shynet, if the `libffi-dev and rust are used for the cryptography package, which we indirectly rely on. Necessary for aarch64 support` comment is accurate, I am all for this change.

I'm also curious why such huge dependencies are needed at all, just for the cryptography package (and why they are only needed when building for aarch64). Could you maybe shed some more light on that, @milesmcc?
I don't entirely remember; I think the issue was that for the aarch64 build, a lot of binaries do not come pre-compiled, so we need to install the rust/libffi-dev toolchains to compile those dependencies ourselves. Perhaps the story has gotten better since then.

If aarch64 builds (and runs) correctly without rust or libffi-dev, then that suggests that precompiled binaries are now available for aarch64, in which we can drop those deps.
I'll try to find some time to test removing the dependencies with my RPI4 sometime soon.
I'm currently testing [1628820](https://github.com/milesmcc/shynet/pull/276/commits/1628820dc27de52e95bb51d3caaccf921e5913ec) live on my websites now (on amd64), will update EoD if any issues

EDIT: Alright, looks like all is good on amd64 without these 2 dependencies, shaving half of the image size! Hope we can get this change in first.
Thanks!
This change is already included in open pull request #276
Thanks @PeterDaveHello! Closing per #276.
@milesmcc In order for this to be pushed correctly, we need to enable permissions for workflows to modify packages in the repository setting under actions.
Thanks @Kashalls. I'll update those permissions and review this PR shortly.
Sorry about the no information being posted, needed a bit to type this up.
_I'm unfamiliar with Python so I'm doing my best here._

According to the [celery backends and brokers documentation](https://docs.celeryq.dev/en/stable/getting-started/backends-and-brokers/redis.html#configuration), when connecting to a Redis Sentinel Cluster you need to bind `app.conf.broker_transport_options` with `{ 'master_name': "cluster1" }` with `cluster1` being the name of the cluster.

So in the case of using [shynet inside of a kubernetes cluster](https://github.com/Kashalls/home-cluster/blob/main/kubernetes/apps/default/shynet/app/helmrelease.yaml) using bitnami's redis chart ([see my use case here](https://github.com/Kashalls/home-cluster/blob/main/kubernetes/apps/default/redis/app/helm-release.yaml)), you would need to pass your env with this:
```
BROKER_TRANSPORT_OPTIONS: "{'master_name':'redis-master'}"
CELERY_BROKER_URL: "sentinel://redis-node-0.redis-headless.default.svc.cluster.local:26379/6;sentinel://redis-node-1.redis-headless.default.svc.cluster.local:26379/6;sentinel://redis-node-2.redis-headless.default.svc.cluster.local:26379/6"
```

AFAIK, this should be all that is needed to make this work after talking with @ZandercraftGames who avidly uses shynet itself.
Thanks!
Thanks! I just need to get someone else who can read Traditional Chinese to take a quick pass and then we can merge.
Looks good.
Superseded by #293.
Superseded by #304.
